{
  "components": {
    "schemas": {
      "AI_Entities_IncidentSummaryEntity": {
        "description": "AI_Entities_IncidentSummaryEntity model",
        "properties": {
          "content": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "incident_updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "source_hash": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AI_Entities_PreferencesEntity": {
        "description": "AI_Entities_PreferencesEntity model",
        "properties": {
          "ai": {
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "boolean"
          },
          "followups": {
            "nullable": true,
            "type": "boolean"
          },
          "impact": {
            "nullable": true,
            "type": "boolean"
          },
          "retros": {
            "nullable": true,
            "type": "boolean"
          },
          "similar_incidents": {
            "nullable": true,
            "type": "boolean"
          },
          "summaries": {
            "nullable": true,
            "type": "boolean"
          },
          "updates": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ActorEntity": {
        "properties": {
          "email": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "ActorTypeFirehydrantUser",
                "value": "firehydrant_user"
              },
              {
                "name": "ActorTypeFirehydrantBot",
                "value": "firehydrant_bot"
              },
              {
                "name": "ActorTypeAlertmanager",
                "value": "alertmanager"
              },
              {
                "name": "ActorTypeAsana",
                "value": "asana"
              },
              {
                "name": "ActorTypeAws",
                "value": "aws"
              },
              {
                "name": "ActorTypeBugsnag",
                "value": "bugsnag"
              },
              {
                "name": "ActorTypeCheckly",
                "value": "checkly"
              },
              {
                "name": "ActorTypeCustomAlerts",
                "value": "custom_alerts"
              },
              {
                "name": "ActorTypeDatadog",
                "value": "datadog"
              },
              {
                "name": "ActorTypeShortcut",
                "value": "shortcut"
              },
              {
                "name": "ActorTypeNewRelic",
                "value": "new_relic"
              },
              {
                "name": "ActorTypeNunc",
                "value": "nunc"
              },
              {
                "name": "ActorTypeGithub",
                "value": "github"
              },
              {
                "name": "ActorTypeGiphy",
                "value": "giphy"
              },
              {
                "name": "ActorTypeGoogleMeet",
                "value": "google_meet"
              },
              {
                "name": "ActorTypeGoogleCalendar",
                "value": "google_calendar"
              },
              {
                "name": "ActorTypeMicrosoftTeams",
                "value": "microsoft_teams"
              },
              {
                "name": "ActorTypeMicrosoftTeamsV2",
                "value": "microsoft_teams_v2"
              },
              {
                "name": "ActorTypeWebex",
                "value": "webex"
              },
              {
                "name": "ActorTypeJiraCloud",
                "value": "jira_cloud"
              },
              {
                "name": "ActorTypeJiraOnprem",
                "value": "jira_onprem"
              },
              {
                "name": "ActorTypeOpsgenie",
                "value": "opsgenie"
              },
              {
                "name": "ActorTypePagerDuty",
                "value": "pager_duty"
              },
              {
                "name": "ActorTypeHoneycomb",
                "value": "honeycomb"
              },
              {
                "name": "ActorTypePatchy",
                "value": "patchy"
              },
              {
                "name": "ActorTypeServiceNow",
                "value": "service_now"
              },
              {
                "name": "ActorTypeSignals",
                "value": "signals"
              },
              {
                "name": "ActorTypeSlack",
                "value": "slack"
              },
              {
                "name": "ActorTypeStatuspage",
                "value": "statuspage"
              },
              {
                "name": "ActorTypeVictorops",
                "value": "victorops"
              },
              {
                "name": "ActorTypeZendesk",
                "value": "zendesk"
              },
              {
                "name": "ActorTypeZoom",
                "value": "zoom"
              },
              {
                "name": "ActorTypeConfluenceCloud",
                "value": "confluence_cloud"
              },
              {
                "name": "ActorTypeGoogleDocs",
                "value": "google_docs"
              },
              {
                "name": "ActorTypeZoomV2",
                "value": "zoom_v2"
              },
              {
                "name": "ActorTypeLinear",
                "value": "linear"
              },
              {
                "name": "ActorTypeCortex",
                "value": "cortex"
              }
            ]
          }
        },
        "type": "object"
      },
      "Alerts_AlertEntity": {
        "description": "Alerts_AlertEntity model",
        "properties": {
          "child_alerts": {
            "items": {
              "$ref": "#/components/schemas/Alerts_SirenAlertEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "conversations": {
            "items": {
              "$ref": "#/components/schemas/Conversations_API_Entities_Reference"
            },
            "nullable": true,
            "type": "array"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "duration_iso8601": {
            "nullable": true,
            "type": "string"
          },
          "duration_ms": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "ends_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/SuccinctEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "events": {
            "items": {
              "$ref": "#/components/schemas/Alerts_SirenEventEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "incidents": {
            "items": {
              "$ref": "#/components/schemas/PublicAPI_V1_Incidents_SuccinctEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "integration_name": {
            "nullable": true,
            "type": "string"
          },
          "is_expired": {
            "nullable": true,
            "type": "boolean"
          },
          "is_noise": {
            "nullable": true,
            "type": "boolean"
          },
          "labels": {
            "description": "Arbitrary key:value pairs of labels.",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "parent_alerts": {
            "items": {
              "$ref": "#/components/schemas/Alerts_SirenAlertEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "priority": {
            "nullable": true,
            "type": "string"
          },
          "remote_id": {
            "nullable": true,
            "type": "string"
          },
          "remote_url": {
            "nullable": true,
            "type": "string"
          },
          "services": {
            "items": {
              "$ref": "#/components/schemas/SuccinctEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "signal_id": {
            "nullable": true,
            "type": "string"
          },
          "signal_rule": {
            "$ref": "#/components/schemas/NullableSignals_API_RuleEntity"
          },
          "signal_target": {
            "$ref": "#/components/schemas/NullableSignals_API_TargetEntity"
          },
          "source_icon": {
            "nullable": true,
            "type": "string"
          },
          "starts_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "team_id": {
            "nullable": true,
            "type": "string"
          },
          "team_name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Alerts_AlertEntityPaginated": {
        "description": "Alerts_AlertEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Alerts_AlertEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Alerts_ProcessingLogEntryEntity": {
        "properties": {
          "context": {
            "description": "An unstructured representation of this log entry's context.",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "level": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "AlertsProcessinglogentryLevelUnknown",
                "value": "unknown"
              },
              {
                "name": "AlertsProcessinglogentryLevelDebug",
                "value": "debug"
              },
              {
                "name": "AlertsProcessinglogentryLevelInfo",
                "value": "info"
              },
              {
                "name": "AlertsProcessinglogentryLevelWarn",
                "value": "warn"
              },
              {
                "name": "AlertsProcessinglogentryLevelError",
                "value": "error"
              },
              {
                "name": "AlertsProcessinglogentryLevelFatal",
                "value": "fatal"
              }
            ]
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "message_type": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "AlertsProcessinglogentryMessageTypeI18nKey",
                "value": "i18n_key"
              },
              {
                "name": "AlertsProcessinglogentryMessageTypeCustom",
                "value": "custom"
              }
            ]
          }
        },
        "type": "object"
      },
      "Alerts_ProcessingLogEntryEntityPaginated": {
        "description": "Alerts_ProcessingLogEntryEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Alerts_ProcessingLogEntryEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Alerts_SignalAlertEntity": {
        "description": "Alerts_SignalAlertEntity model",
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "is_noise": {
            "nullable": true,
            "type": "boolean"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Alerts_SirenAlertEntity": {
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ends_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "Arbitrary key:value pairs of labels.",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "remote_id": {
            "nullable": true,
            "type": "string"
          },
          "remote_url": {
            "nullable": true,
            "type": "string"
          },
          "signal_id": {
            "nullable": true,
            "type": "string"
          },
          "signal_rule": {
            "$ref": "#/components/schemas/NullableSignals_API_RuleEntity"
          },
          "starts_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Alerts_SirenEventEntity": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "data": {
            "description": "The event's payload",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Attachments_LinkEntity": {
        "description": "Attachments_LinkEntity model",
        "properties": {
          "deletable": {
            "description": "Link can be deleted",
            "nullable": true,
            "type": "boolean"
          },
          "display_text": {
            "nullable": true,
            "type": "string"
          },
          "editable": {
            "description": "Link can be edited",
            "nullable": true,
            "type": "boolean"
          },
          "href_url": {
            "nullable": true,
            "type": "string"
          },
          "icon_url": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Attachments_LinkEntityPaginated": {
        "description": "Attachments_LinkEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Attachments_LinkEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Attachments_TypedAttachmentEntity": {
        "properties": {
          "attached_to_id": {
            "nullable": true,
            "type": "string"
          },
          "attached_to_type": {
            "nullable": true,
            "type": "string"
          },
          "attributes": {
            "description": "Can be one of: Attachments::LinkEntity, Integrations::CustomerSupportIssueEntity, Attachments::GenericAttachmentEntity",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "secondary_attached_to_id": {
            "nullable": true,
            "type": "string"
          },
          "secondary_attached_to_type": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Attachments_TypedAttachmentEntityPaginated": {
        "description": "Attachments_TypedAttachmentEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Attachments_TypedAttachmentEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Audiences_Entities_AudienceEntity": {
        "description": "Audiences_Entities_AudienceEntity model",
        "properties": {
          "created_at": {
            "description": "When the audience was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "default": {
            "description": "Whether this is the organization's default audience",
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "description": "Description of the audience and its purpose (maximum 4000 characters)",
            "nullable": true,
            "type": "string"
          },
          "details": {
            "description": "List of incident details for this audience",
            "items": {
              "$ref": "#/components/schemas/Audiences_Entities_DetailEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "discarded_at": {
            "description": "When the audience was discarded (soft deleted)",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the audience",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the audience (maximum 255 characters)",
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "description": "Slug of the audience, unique and autogenerated",
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "description": "When the audience was last updated",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Audiences_Entities_AudienceSummariesEntity": {
        "description": "Audiences_Entities_AudienceSummariesEntity model",
        "properties": {
          "audiences": {
            "description": "JSON-encoded map of audience summaries",
            "nullable": true,
            "type": "string"
          },
          "incident_id": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Audiences_Entities_DetailEntity": {
        "properties": {
          "id": {
            "description": "Unique identifier for the detail item",
            "nullable": true,
            "type": "string"
          },
          "position": {
            "description": "Order position of this item in the list",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "prompt": {
            "description": "AI prompt used to gather this information",
            "nullable": true,
            "type": "string"
          },
          "question": {
            "description": "The need-to-know question (maximum 255 characters)",
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "description": "Slug of the detail, unique and autogenerated",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthorEntity": {
        "properties": {
          "email": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "source": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Calendars_EventEntity": {
        "properties": {
          "created_at": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ends_at": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "provider_icon_url": {
            "nullable": true,
            "type": "string"
          },
          "provider_url": {
            "nullable": true,
            "type": "string"
          },
          "starts_at": {
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChangeEntity": {
        "description": "ChangeEntity model",
        "properties": {
          "created_at": {
            "description": "The time the change entry was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the Change",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "UUID of the Change",
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "Arbitrary key/value pairs of labels.",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "summary": {
            "description": "Description of the Change",
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChangeEventEntity": {
        "description": "ChangeEventEntity model",
        "properties": {
          "attachments": {
            "description": "A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity",
            "items": {
              "properties": {},
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "authors": {
            "items": {
              "$ref": "#/components/schemas/AuthorEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "duration_iso8601": {
            "nullable": true,
            "type": "string"
          },
          "duration_ms": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "ends_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentEntryEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "identities": {
            "items": {
              "$ref": "#/components/schemas/ChangeIdentityEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "labels": {
            "description": "An object of label key and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "related_changes": {
            "items": {
              "$ref": "#/components/schemas/ChangeEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "services": {
            "items": {
              "$ref": "#/components/schemas/ServiceEntityLite"
            },
            "nullable": true,
            "type": "array"
          },
          "starts_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChangeEventSlimEntity": {
        "properties": {
          "authors": {
            "items": {
              "$ref": "#/components/schemas/AuthorEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "duration_iso8601": {
            "nullable": true,
            "type": "string"
          },
          "duration_ms": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "ends_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentEntryEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "An object of label key and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "services": {
            "items": {
              "$ref": "#/components/schemas/ServiceEntityLite"
            },
            "nullable": true,
            "type": "array"
          },
          "starts_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChangeEventSlimEntityPaginated": {
        "description": "ChangeEventSlimEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ChangeEventSlimEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "ChangeIdentityEntity": {
        "description": "ChangeIdentityEntity model",
        "properties": {
          "change_id": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChangeIdentityEntityPaginated": {
        "description": "ChangeIdentityEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ChangeIdentityEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "ChangeTypeEntity": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChangeTypeEntityPaginated": {
        "description": "ChangeTypeEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ChangeTypeEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "ChecklistCheckEntity": {
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ChecklistTemplateEntity": {
        "description": "ChecklistTemplateEntity model",
        "properties": {
          "checks": {
            "items": {
              "$ref": "#/components/schemas/ChecklistCheckEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "connected_services": {
            "description": "List of services that use this checklist",
            "items": {
              "$ref": "#/components/schemas/ServiceEntityChecklist"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/NullableTeamEntityLite"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChecklistTemplateEntityPaginated": {
        "description": "ChecklistTemplateEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ChecklistTemplateEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Conversations_API_Entities_Channel": {
        "properties": {
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Conversations_API_Entities_Reference": {
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/NullableConversations_API_Entities_Channel"
          },
          "comments_url": {
            "nullable": true,
            "type": "string"
          },
          "field": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "resource_class": {
            "nullable": true,
            "type": "string"
          },
          "resource_id": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CurrentUserEntity": {
        "description": "CurrentUserEntity model",
        "properties": {
          "account_id": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "organization_id": {
            "nullable": true,
            "type": "string"
          },
          "organization_name": {
            "nullable": true,
            "type": "string"
          },
          "role": {
            "nullable": true,
            "type": "string"
          },
          "source": {
            "nullable": true,
            "type": "string"
          },
          "teams": {
            "items": {
              "$ref": "#/components/schemas/SuccinctEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "CustomFields_FieldValue": {
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "display_name": {
            "nullable": true,
            "type": "string"
          },
          "field_id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "string"
          },
          "value_array": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "value_string": {
            "nullable": true,
            "type": "string"
          },
          "value_type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EntitlementEntity": {
        "properties": {
          "available": {
            "nullable": true,
            "type": "boolean"
          },
          "current_count": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "errors": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "exists": {
            "nullable": true,
            "type": "boolean"
          },
          "maximum": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "tier": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "EntitlementTierFree",
                "value": "free"
              },
              {
                "name": "EntitlementTierEssentials",
                "value": "essentials"
              },
              {
                "name": "EntitlementTierEnterprise",
                "value": "enterprise"
              },
              {
                "name": "EntitlementTierSignalsOnly",
                "value": "signals_only"
              }
            ]
          }
        },
        "type": "object"
      },
      "EntitlementEntityPaginated": {
        "description": "EntitlementEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/EntitlementEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "EnvironmentEntryEntity": {
        "description": "EnvironmentEntryEntity model",
        "properties": {
          "active_incidents": {
            "description": "List of active incident guids",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "description": "The time the environment was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the Environment",
            "nullable": true,
            "type": "string"
          },
          "external_resources": {
            "description": "Information about known linkages to representations of services outside of FireHydrant.",
            "items": {
              "$ref": "#/components/schemas/ExternalResourceEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "description": "UUID of the Environment",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the Environment",
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "description": "Slug of the Environment",
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "description": "The time the environment was updated",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnvironmentEntryEntityPaginated": {
        "description": "EnvironmentEntryEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentEntryEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "ErrorEntity": {
        "description": "ErrorEntity model",
        "properties": {
          "code": {
            "description": "A stable code on which to match errors",
            "nullable": true,
            "type": "string"
          },
          "detail": {
            "nullable": true,
            "type": "string"
          },
          "messages": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "meta": {
            "description": "An object with additional error metadata",
            "nullable": true,
            "properties": {},
            "type": "object"
          }
        },
        "type": "object"
      },
      "Event_GenericChatMessageEntity": {
        "description": "Event_GenericChatMessageEntity model",
        "properties": {
          "body": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Event_NoteEntity": {
        "description": "Event_NoteEntity model",
        "properties": {
          "body": {
            "nullable": true,
            "type": "string"
          },
          "conversations": {
            "items": {
              "$ref": "#/components/schemas/Conversations_API_Entities_Reference"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "status_pages": {
            "items": {
              "$ref": "#/components/schemas/Incidents_StatusPageEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ExternalResourceEntity": {
        "properties": {
          "connection_full_favicon_url": {
            "nullable": true,
            "type": "string"
          },
          "connection_id": {
            "nullable": true,
            "type": "string"
          },
          "connection_name": {
            "nullable": true,
            "type": "string"
          },
          "connection_type": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "remote_id": {
            "nullable": true,
            "type": "string"
          },
          "remote_url": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FHTypes_GenericEntity": {
        "properties": {
          "label": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FieldMapping_FieldMapEntity": {
        "description": "FieldMapping_FieldMapEntity model",
        "properties": {
          "available_fields_url": {
            "nullable": true,
            "type": "string"
          },
          "body": {
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "connection_id": {
            "nullable": true,
            "type": "string"
          },
          "connection_type": {
            "nullable": true,
            "type": "string"
          },
          "data_bag_url": {
            "nullable": true,
            "type": "string"
          },
          "entity_id": {
            "nullable": true,
            "type": "string"
          },
          "entity_type": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FieldMapping_MappableFieldEntity": {
        "description": "FieldMapping_MappableFieldEntity model",
        "properties": {
          "allowed_values": {
            "description": "The allowed values of the field",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "help_text": {
            "description": "Short, inline documentation for the present field",
            "nullable": true,
            "type": "string"
          },
          "label": {
            "description": "The human-readable name of the field",
            "nullable": true,
            "type": "string"
          },
          "required": {
            "description": "If the field is required to be mapped",
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "The allowed type of the field",
            "nullable": true,
            "type": "string"
          },
          "value": {
            "description": "The ID of the field",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormConfigurationEntity": {
        "description": "FormConfigurationEntity model",
        "properties": {
          "fields": {
            "nullable": true,
            "type": "string"
          },
          "show_incident_types": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FunctionalityEntity": {
        "description": "FunctionalityEntity model",
        "properties": {
          "active_incidents": {
            "description": "List of active incident guids",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "alert_on_add": {
            "nullable": true,
            "type": "boolean"
          },
          "auto_add_responding_team": {
            "nullable": true,
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "external_resources": {
            "description": "Information about known linkages to representations of services outside of FireHydrant.",
            "items": {
              "$ref": "#/components/schemas/ExternalResourceEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "An object of label key and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "links": {
            "description": "List of links attached to this functionality.",
            "items": {
              "$ref": "#/components/schemas/LinksEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/NullableTeamEntityLite"
          },
          "services": {
            "description": "Services this functionality provides",
            "items": {
              "$ref": "#/components/schemas/ServiceEntityLite"
            },
            "nullable": true,
            "type": "array"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "teams": {
            "description": "List of teams attached to the functionality",
            "items": {
              "$ref": "#/components/schemas/TeamEntityLite"
            },
            "nullable": true,
            "type": "array"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          }
        },
        "type": "object"
      },
      "FunctionalityEntityLite": {
        "properties": {
          "active_incidents": {
            "description": "List of active incident guids",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "alert_on_add": {
            "nullable": true,
            "type": "boolean"
          },
          "auto_add_responding_team": {
            "nullable": true,
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "An object of label key and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "links": {
            "description": "List of links attached to this functionality.",
            "items": {
              "$ref": "#/components/schemas/LinksEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/NullableTeamEntityLite"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          }
        },
        "type": "object"
      },
      "FunctionalityEntityPaginated": {
        "description": "FunctionalityEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/FunctionalityEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "FunctionalityWithAllServicesEntity": {
        "description": "FunctionalityWithAllServicesEntity model",
        "properties": {
          "services": {
            "description": "Services this functionality provides",
            "items": {
              "$ref": "#/components/schemas/ServiceEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Imports_ImportEntity": {
        "description": "Imports_ImportEntity model",
        "properties": {
          "state": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "ImportsImportStatePreprocessing",
                "value": "preprocessing"
              },
              {
                "name": "ImportsImportStateReadyForImport",
                "value": "ready_for_import"
              },
              {
                "name": "ImportsImportStateImporting",
                "value": "importing"
              },
              {
                "name": "ImportsImportStateCompleted",
                "value": "completed"
              },
              {
                "name": "ImportsImportStateFailed",
                "value": "failed"
              }
            ]
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Imports_ImportErrorEntity": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "data": {
            "description": "Additional error data",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/NullableImports_ImportErrorEntity_ResourceEntity"
          }
        },
        "type": "object"
      },
      "Imports_ImportErrorEntity_ResourceEntity": {
        "properties": {
          "name": {
            "nullable": true,
            "type": "string"
          },
          "resource_id": {
            "nullable": true,
            "type": "string"
          },
          "resource_type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Imports_ImportableResourceEntity": {
        "properties": {
          "import_errors": {
            "items": {
              "$ref": "#/components/schemas/Imports_ImportErrorEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "imported_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "remote_id": {
            "nullable": true,
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "ImportsImportableresourceStateSelected",
                "value": "selected"
              },
              {
                "name": "ImportsImportableresourceStateSkipped",
                "value": "skipped"
              },
              {
                "name": "ImportsImportableresourceStateImported",
                "value": "imported"
              },
              {
                "name": "ImportsImportableresourceStateErrored",
                "value": "errored"
              }
            ]
          }
        },
        "type": "object"
      },
      "IncidentAttachmentEntity": {
        "description": "IncidentAttachmentEntity model",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "file_content_type": {
            "nullable": true,
            "type": "string"
          },
          "file_name": {
            "nullable": true,
            "type": "string"
          },
          "file_size": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "media_type": {
            "nullable": true,
            "type": "string"
          },
          "signed_url": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "IncidentattachmentStatusPendingUpload",
                "value": "pending_upload"
              },
              {
                "name": "IncidentattachmentStatusUploaded",
                "value": "uploaded"
              }
            ]
          },
          "versions": {
            "description": "An object with keys that designate a specific version or size of the attachment",
            "nullable": true,
            "properties": {},
            "type": "object"
          }
        },
        "type": "object"
      },
      "IncidentEntity": {
        "description": "IncidentEntity model",
        "properties": {
          "active": {
            "nullable": true,
            "type": "boolean"
          },
          "ai_incident_summary": {
            "nullable": true,
            "type": "string"
          },
          "channel_id": {
            "nullable": true,
            "type": "string"
          },
          "channel_name": {
            "nullable": true,
            "type": "string"
          },
          "channel_reference": {
            "nullable": true,
            "type": "string"
          },
          "channel_status": {
            "description": "inoperative: 0, operational: 1, archived: 2",
            "nullable": true,
            "type": "string"
          },
          "conference_bridges": {
            "items": {
              "$ref": "#/components/schemas/Incidents_ConferenceBridgeEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "context_object": {
            "$ref": "#/components/schemas/NullableIncidents_ContextObjectEntity"
          },
          "conversations": {
            "items": {
              "$ref": "#/components/schemas/Conversations_API_Entities_Reference"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "description": "The time the incident was opened",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "current_milestone": {
            "description": "The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.",
            "nullable": true,
            "type": "string"
          },
          "custom_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFields_FieldValue"
            },
            "nullable": true,
            "type": "array"
          },
          "customer_impact_summary": {
            "nullable": true,
            "type": "string"
          },
          "customers_impacted": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "discarded_at": {
            "description": "The time the incident was archived",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/SuccinctEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "field_requirements": {
            "items": {
              "$ref": "#/components/schemas/IncidentEntity_FieldRequirementEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "functionalities": {
            "items": {
              "$ref": "#/components/schemas/SuccinctEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "description": "UUID of the Incident",
            "nullable": true,
            "type": "string"
          },
          "impacts": {
            "items": {
              "$ref": "#/components/schemas/Incidents_ImpactEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "incident_channels": {
            "items": {
              "$ref": "#/components/schemas/Incidents_ChannelEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "incident_tickets": {
            "items": {
              "$ref": "#/components/schemas/Ticketing_TicketEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "incident_type": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          },
          "incident_url": {
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "A key/value of labels",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "last_note": {
            "$ref": "#/components/schemas/NullableEvent_NoteEntity"
          },
          "last_update": {
            "nullable": true,
            "type": "string"
          },
          "lifecycle_measurements": {
            "items": {
              "$ref": "#/components/schemas/Incidents_LifecycleMeasurementEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "lifecycle_phases": {
            "items": {
              "$ref": "#/components/schemas/Incidents_LifecyclePhaseEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "milestones": {
            "description": "DEPRECATED: Please use lifecycle phases instead",
            "items": {
              "$ref": "#/components/schemas/Incidents_MilestoneEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "monetary_impact": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "monetary_impact_cents": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "description": "Name of the incident",
            "nullable": true,
            "type": "string"
          },
          "number": {
            "description": "Incident number",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "organization": {
            "$ref": "#/components/schemas/NullableOrganizationEntity"
          },
          "organization_id": {
            "nullable": true,
            "type": "string"
          },
          "priority": {
            "nullable": true,
            "type": "string"
          },
          "private_id": {
            "nullable": true,
            "type": "string"
          },
          "private_status_page_url": {
            "nullable": true,
            "type": "string"
          },
          "report_id": {
            "nullable": true,
            "type": "string"
          },
          "retro_exports": {
            "description": "A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity",
            "items": {
              "properties": {},
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "role_assignments": {
            "items": {
              "$ref": "#/components/schemas/Incidents_RoleAssignmentEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "services": {
            "items": {
              "$ref": "#/components/schemas/SuccinctEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "severity": {
            "nullable": true,
            "type": "string"
          },
          "severity_color": {
            "nullable": true,
            "type": "string"
          },
          "severity_condition": {
            "nullable": true,
            "type": "string"
          },
          "severity_condition_object": {
            "$ref": "#/components/schemas/NullableSeverityMatrix_ConditionEntity"
          },
          "severity_impact": {
            "nullable": true,
            "type": "string"
          },
          "severity_impact_object": {
            "$ref": "#/components/schemas/NullableSeverityMatrix_ImpactEntity"
          },
          "started_at": {
            "description": "The time the incident started",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "status_pages": {
            "items": {
              "$ref": "#/components/schemas/Incidents_StatusPageEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "tag_list": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "team_assignments": {
            "items": {
              "$ref": "#/components/schemas/Incidents_TeamAssignmentEntityLite"
            },
            "nullable": true,
            "type": "array"
          },
          "ticket": {
            "$ref": "#/components/schemas/NullableTicketing_TicketEntity"
          }
        },
        "type": "object"
      },
      "IncidentEntityPaginated": {
        "description": "IncidentEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/IncidentEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "IncidentEntity_FieldRequirementEntity": {
        "properties": {
          "field_id": {
            "description": "A unique identifier for the field.",
            "nullable": true,
            "type": "string"
          },
          "required_at_milestone_id": {
            "description": "The milestone at which this field is required. If null, this field is always required.",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "IncidentEventEntity": {
        "description": "IncidentEventEntity model",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "context": {
            "nullable": true,
            "type": "string"
          },
          "conversations": {
            "items": {
              "$ref": "#/components/schemas/Conversations_API_Entities_Reference"
            },
            "nullable": true,
            "type": "array"
          },
          "data": {
            "description": "Can be one of: NoteEntity, TourStepEntity, RootCauseEntity, ChangeTypeEntity, RoleUpdateEntity, TaskUpdateEntity, AlertLinkedEntity, ChatMessageEntity, AddTaskListEntity, ImpactUpdateEntity, TicketUpdateEntity, GeneralUpdateEntity, ChangelogEntryEntity, IncidentStatusEntity, TeamAssignmentEntity, BulkUpdateEntity",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "incident_id": {
            "nullable": true,
            "type": "string"
          },
          "occurred_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          },
          "visibility": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "IncidenteventVisibilityPrivateToOrg",
                "value": "private_to_org"
              },
              {
                "name": "IncidenteventVisibilityOpenToPublic",
                "value": "open_to_public"
              },
              {
                "name": "IncidenteventVisibilityInternalStatusPage",
                "value": "internal_status_page"
              }
            ]
          },
          "votes": {
            "$ref": "#/components/schemas/NullableVotesEntity"
          }
        },
        "type": "object"
      },
      "IncidentEventEntityPaginated": {
        "description": "IncidentEventEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/IncidentEventEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "IncidentImpactEntity": {
        "description": "IncidentImpactEntity model",
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "infrastructure": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "IncidentImpactEntityPaginated": {
        "description": "IncidentImpactEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/IncidentImpactEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "IncidentRoleEntity": {
        "description": "IncidentRoleEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "discarded_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "IncidentRoleEntityPaginated": {
        "description": "IncidentRoleEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/IncidentRoleEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "IncidentTypeEntity": {
        "description": "IncidentTypeEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "template": {
            "$ref": "#/components/schemas/NullableIncidentTypeEntity_TemplateEntity"
          },
          "template_values": {
            "$ref": "#/components/schemas/NullableIncidentTypeEntity_TemplateValuesEntity"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "IncidentTypeEntityPaginated": {
        "description": "IncidentTypeEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/IncidentTypeEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "IncidentTypeEntity_TemplateEntity": {
        "properties": {
          "custom_fields": {
            "nullable": true,
            "type": "string"
          },
          "customer_impact_summary": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "impacts": {
            "items": {
              "$ref": "#/components/schemas/IncidentTypeEntity_TemplateImpactEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "incident_name": {
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "Arbitrary key:value pairs of labels for your incidents.",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "priority": {
            "nullable": true,
            "type": "string"
          },
          "private_incident": {
            "nullable": true,
            "type": "boolean"
          },
          "runbook_ids": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "severity": {
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "tag_list": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "team_ids": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "IncidentTypeEntity_TemplateImpactEntity": {
        "properties": {
          "condition_id": {
            "nullable": true,
            "type": "string"
          },
          "condition_name": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "IncidenttypeentityTemplateimpactTypeCustomer",
                "value": "customer"
              },
              {
                "name": "IncidenttypeentityTemplateimpactTypeEnvironment",
                "value": "environment"
              },
              {
                "name": "IncidenttypeentityTemplateimpactTypeFunctionality",
                "value": "functionality"
              },
              {
                "name": "IncidenttypeentityTemplateimpactTypeService",
                "value": "service"
              }
            ]
          }
        },
        "type": "object"
      },
      "IncidentTypeEntity_TemplateValuesEntity": {
        "properties": {
          "environments": {
            "items": {
              "$ref": "#/components/schemas/IncidentTypeEntity_TemplateImpactEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "functionalities": {
            "items": {
              "$ref": "#/components/schemas/IncidentTypeEntity_TemplateImpactEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "runbooks": {
            "description": "A hash mapping runbook IDs to runbook names.",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "services": {
            "items": {
              "$ref": "#/components/schemas/IncidentTypeEntity_TemplateImpactEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "teams": {
            "items": {
              "$ref": "#/components/schemas/TeamEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Incidents_AlertEntity": {
        "description": "Incidents_AlertEntity model",
        "properties": {
          "alert": {
            "$ref": "#/components/schemas/NullableAlerts_AlertEntity"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "primary": {
            "description": "whether or not this is the primary alert for this incident",
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Incidents_AlertEntityPaginated": {
        "description": "Incidents_AlertEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Incidents_AlertEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Incidents_ChannelEntity": {
        "description": "Incidents_ChannelEntity model",
        "properties": {
          "icon_url": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "source": {
            "nullable": true,
            "type": "string"
          },
          "source_id": {
            "nullable": true,
            "type": "string"
          },
          "source_name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "url": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Incidents_ConferenceBridgeEntity": {
        "description": "Incidents_ConferenceBridgeEntity model",
        "properties": {
          "attachments": {
            "description": "A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity",
            "items": {
              "properties": {},
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "has_translated_transcripts": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "language_codes": {
            "description": "A list of language codes that have translated transcripts for this conference bridge",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "previous_host_assignment": {
            "nullable": true,
            "type": "string"
          },
          "transcription_status": {
            "nullable": true,
            "type": "string"
          },
          "transcription_sub_code": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Incidents_ContextObjectEntity": {
        "properties": {
          "context_description": {
            "nullable": true,
            "type": "string"
          },
          "context_tag": {
            "nullable": true,
            "type": "string"
          },
          "object_id": {
            "nullable": true,
            "type": "string"
          },
          "object_type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Incidents_ExportRetrospectivesResultEntity": {
        "description": "Incidents_ExportRetrospectivesResultEntity model",
        "properties": {
          "external_resource": {
            "$ref": "#/components/schemas/NullableExternalResourceEntity"
          }
        },
        "type": "object"
      },
      "Incidents_ImpactEntity": {
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/NullableSeverityMatrix_ConditionEntity"
          },
          "conversations": {
            "items": {
              "$ref": "#/components/schemas/Conversations_API_Entities_Reference"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "impact": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          },
          "type": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "IncidentsImpactTypeCustomer",
                "value": "customer"
              },
              {
                "name": "IncidentsImpactTypeEnvironment",
                "value": "environment"
              },
              {
                "name": "IncidentsImpactTypeFunctionality",
                "value": "functionality"
              },
              {
                "name": "IncidentsImpactTypeService",
                "value": "service"
              }
            ]
          }
        },
        "type": "object"
      },
      "Incidents_LifecycleMeasurementEntity": {
        "properties": {
          "calculated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ends_at_milestone": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "starts_at_milestone": {
            "nullable": true,
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Incidents_LifecycleMilestoneEntity": {
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "duration": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "occurred_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          }
        },
        "type": "object"
      },
      "Incidents_LifecyclePhaseEntity": {
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "milestones": {
            "items": {
              "$ref": "#/components/schemas/Incidents_LifecycleMilestoneEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Incidents_MilestoneEntity": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "duration": {
            "description": "How long the incident spent in this milestones, in ISO 8601 Duration Format. This will be null if the milestone is the incident's current milestone.",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "occurred_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "The milestone's type. This will be one of the currently configured milestones for the given incident.",
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Incidents_MilestoneEntityPaginated": {
        "description": "Incidents_MilestoneEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Incidents_MilestoneEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Incidents_RelatedChangeEventEntity": {
        "description": "Incidents_RelatedChangeEventEntity model",
        "properties": {
          "change_event": {
            "$ref": "#/components/schemas/NullableChangeEventEntity"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "incident_id": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "IncidentsRelatedchangeeventTypeCaused",
                "value": "caused"
              },
              {
                "name": "IncidentsRelatedchangeeventTypeFixed",
                "value": "fixed"
              },
              {
                "name": "IncidentsRelatedchangeeventTypeSuspect",
                "value": "suspect"
              },
              {
                "name": "IncidentsRelatedchangeeventTypeDismissed",
                "value": "dismissed"
              }
            ]
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "why": {
            "description": "The reason why this change event is related to this incident",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Incidents_RelatedChangeEventEntityPaginated": {
        "description": "Incidents_RelatedChangeEventEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Incidents_RelatedChangeEventEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Incidents_RelationshipsEntity": {
        "description": "Incidents_RelationshipsEntity model",
        "properties": {
          "children": {
            "description": "The root incident's child incidents.",
            "items": {
              "$ref": "#/components/schemas/PublicAPI_V1_Incidents_SuccinctEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "parent": {
            "$ref": "#/components/schemas/NullablePublicAPI_V1_Incidents_SuccinctEntity"
          },
          "siblings": {
            "description": "A list of incidents that share the root incident's parent.",
            "items": {
              "$ref": "#/components/schemas/PublicAPI_V1_Incidents_SuccinctEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Incidents_RetrospectiveEntity": {
        "description": "Incidents_RetrospectiveEntity model",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "exports": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/Incidents_RetrospectiveFieldEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "is_hidden": {
            "nullable": true,
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "sections": {
            "items": {
              "$ref": "#/components/schemas/Incidents_RetrospectiveEntity_SectionEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Incidents_RetrospectiveEntityPaginated": {
        "description": "Incidents_RetrospectiveEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Incidents_RetrospectiveEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Incidents_RetrospectiveEntity_SectionEntity": {
        "properties": {
          "elements": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Incidents_RetrospectiveFieldEntity": {
        "description": "Incidents_RetrospectiveFieldEntity model",
        "properties": {
          "help_text": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "is_required": {
            "nullable": true,
            "type": "boolean"
          },
          "label": {
            "nullable": true,
            "type": "string"
          },
          "permissible_values": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "schema": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "IncidentsRetrospectivefieldTypeText",
                "value": "text"
              },
              {
                "name": "IncidentsRetrospectivefieldTypeSingleSelect",
                "value": "single_select"
              },
              {
                "name": "IncidentsRetrospectivefieldTypeMultiSelect",
                "value": "multi_select"
              },
              {
                "name": "IncidentsRetrospectivefieldTypeNumeric",
                "value": "numeric"
              },
              {
                "name": "IncidentsRetrospectivefieldTypeDatetime",
                "value": "datetime"
              },
              {
                "name": "IncidentsRetrospectivefieldTypeDynamicInputGroup",
                "value": "dynamic_input_group"
              },
              {
                "name": "IncidentsRetrospectivefieldTypeMarkdown",
                "value": "markdown"
              },
              {
                "name": "IncidentsRetrospectivefieldTypeMarkdownText",
                "value": "markdown_text"
              }
            ]
          },
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Incidents_RoleAssignmentEntity": {
        "description": "Incidents_RoleAssignmentEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "incident_role": {
            "$ref": "#/components/schemas/NullableIncidentRoleEntity"
          },
          "status": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "IncidentsRoleassignmentStatusActive",
                "value": "active"
              },
              {
                "name": "IncidentsRoleassignmentStatusInactive",
                "value": "inactive"
              }
            ]
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/NullableUserEntity"
          }
        },
        "type": "object"
      },
      "Incidents_RoleAssignmentEntityPaginated": {
        "description": "Incidents_RoleAssignmentEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Incidents_RoleAssignmentEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Incidents_ShareRetrospectivesResultEntity": {
        "description": "Incidents_ShareRetrospectivesResultEntity model",
        "properties": {
          "retrospective_ids": {
            "description": "The IDs of the retrospectives that were shared.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "user_ids": {
            "description": "The IDs of the users with whom the retrospectives were shared.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Incidents_StatusPageEntity": {
        "description": "Incidents_StatusPageEntity model",
        "properties": {
          "display_name": {
            "nullable": true,
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "integration": {
            "$ref": "#/components/schemas/NullableIntegrationEntity"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "url": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Incidents_StatusPageEntityPaginated": {
        "description": "Incidents_StatusPageEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Incidents_StatusPageEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Incidents_TeamAssignmentEntityLite": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "team": {
            "$ref": "#/components/schemas/NullableTeamEntityLite"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "InfrastructureSearchEntity": {
        "description": "InfrastructureSearchEntity model",
        "properties": {
          "infrastructure": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntegrationEntity": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "display_name": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "integration_name": {
            "nullable": true,
            "type": "string"
          },
          "integration_slug": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_AuthedProviderEntityPaginated": {
        "description": "Integrations_AuthedProviderEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/PublicAPI_V1_Integrations_AuthedProviderEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Integrations_Aws_CloudtrailBatchEntity": {
        "description": "Integrations_Aws_CloudtrailBatchEntity model",
        "properties": {
          "connection": {
            "properties": {},
            "type": "object"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "ends_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "events_created": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "starts_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "IntegrationsAwsCloudtrailbatchStatusInProgress",
                "value": "in_progress"
              },
              {
                "name": "IntegrationsAwsCloudtrailbatchStatusFailed",
                "value": "failed"
              },
              {
                "name": "IntegrationsAwsCloudtrailbatchStatusSuccessful",
                "value": "successful"
              },
              {
                "name": "IntegrationsAwsCloudtrailbatchStatusPending",
                "value": "pending"
              },
              {
                "name": "IntegrationsAwsCloudtrailbatchStatusRetried",
                "value": "retried"
              }
            ]
          }
        },
        "type": "object"
      },
      "Integrations_Aws_CloudtrailBatchEntityPaginated": {
        "description": "Integrations_Aws_CloudtrailBatchEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Integrations_Aws_CloudtrailBatchEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Integrations_Aws_ConnectionEntity": {
        "description": "Integrations_Aws_ConnectionEntity model",
        "properties": {
          "aws_account_id": {
            "nullable": true,
            "type": "string"
          },
          "connection_status": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "IntegrationsAwsConnectionConnectionStatusPendingSetup",
                "value": "pending_setup"
              },
              {
                "name": "IntegrationsAwsConnectionConnectionStatusRoleAssumed",
                "value": "role_assumed"
              },
              {
                "name": "IntegrationsAwsConnectionConnectionStatusCantAssumeRole",
                "value": "cant_assume_role"
              },
              {
                "name": "IntegrationsAwsConnectionConnectionStatusInvalidPermissions",
                "value": "invalid_permissions"
              },
              {
                "name": "IntegrationsAwsConnectionConnectionStatusValidated",
                "value": "validated"
              }
            ]
          },
          "environment_id": {
            "nullable": true,
            "type": "string"
          },
          "environment_name": {
            "nullable": true,
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "status_description": {
            "nullable": true,
            "type": "string"
          },
          "status_text": {
            "nullable": true,
            "type": "string"
          },
          "target_arn": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_Aws_ConnectionEntityPaginated": {
        "description": "Integrations_Aws_ConnectionEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Integrations_Aws_ConnectionEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Integrations_ConfluenceCloud_SpaceKeyEntity": {
        "description": "Integrations_ConfluenceCloud_SpaceKeyEntity model",
        "properties": {
          "key": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_ConnectionEntity": {
        "description": "Integrations_ConnectionEntity model",
        "properties": {
          "authorized_by": {
            "nullable": true,
            "type": "string"
          },
          "authorized_by_id": {
            "nullable": true,
            "type": "string"
          },
          "configuration_url": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "default_authorized_actor": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "details": {
            "description": "Integration-specific details of this connection. As identified by the integration_slug, this object will be represented by that integration's ConnectionEntity.",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "display_name": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "integration_id": {
            "nullable": true,
            "type": "string"
          },
          "integration_slug": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_ConnectionEntityPaginated": {
        "description": "Integrations_ConnectionEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Integrations_ConnectionEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Integrations_ConnectionStatusEntity": {
        "description": "Integrations_ConnectionStatusEntity model",
        "properties": {
          "check_type": {
            "nullable": true,
            "type": "string"
          },
          "checked_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "connection_id": {
            "nullable": true,
            "type": "string"
          },
          "data": {
            "description": "Additional unstructured data about the status check.",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "error_type": {
            "nullable": true,
            "type": "string"
          },
          "integration_slug": {
            "nullable": true,
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "performed_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "status": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "IntegrationsConnectionstatusStatusOk",
                "value": "ok"
              },
              {
                "name": "IntegrationsConnectionstatusStatusInfo",
                "value": "info"
              },
              {
                "name": "IntegrationsConnectionstatusStatusWarning",
                "value": "warning"
              },
              {
                "name": "IntegrationsConnectionstatusStatusError",
                "value": "error"
              }
            ]
          }
        },
        "type": "object"
      },
      "Integrations_IntegrationEntity": {
        "description": "Integrations_IntegrationEntity model",
        "properties": {
          "connections": {
            "items": {
              "$ref": "#/components/schemas/Integrations_ConnectionEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "deprecated": {
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "enabled": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "installed": {
            "nullable": true,
            "type": "boolean"
          },
          "logo": {
            "$ref": "#/components/schemas/NullableIntegrations_IntegrationEntity_LogoEntity"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "nat_ip": {
            "nullable": true,
            "type": "string"
          },
          "setup_url": {
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_IntegrationEntityPaginated": {
        "description": "Integrations_IntegrationEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Integrations_IntegrationEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Integrations_IntegrationEntity_LogoEntity": {
        "properties": {
          "logo_url": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_MicrosoftTeamsV2_ChannelEntity": {
        "properties": {
          "channel_id": {
            "nullable": true,
            "type": "string"
          },
          "channel_name": {
            "nullable": true,
            "type": "string"
          },
          "channel_url": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "incident": {
            "$ref": "#/components/schemas/NullableIncidentEntity"
          },
          "ms_team_id": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "team_name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_Slack_SlackChannelEntity": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "slack_channel_id": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_Slack_UsergroupEntity": {
        "description": "Integrations_Slack_UsergroupEntity model",
        "properties": {
          "handle": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "is_disabled": {
            "nullable": true,
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_Slack_WorkspaceEntity": {
        "description": "Integrations_Slack_WorkspaceEntity model",
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "team_id": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_Statuspage_ConditionEntity": {
        "properties": {
          "condition_id": {
            "nullable": true,
            "type": "string"
          },
          "condition_name": {
            "nullable": true,
            "type": "string"
          },
          "statuspageio_condition": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "IntegrationsStatuspageConditionStatuspageioConditionOperational",
                "value": "operational"
              },
              {
                "name": "IntegrationsStatuspageConditionStatuspageioConditionMajorOutage",
                "value": "major_outage"
              },
              {
                "name": "IntegrationsStatuspageConditionStatuspageioConditionMinorOutage",
                "value": "minor_outage"
              },
              {
                "name": "IntegrationsStatuspageConditionStatuspageioConditionDegradedPerformance",
                "value": "degraded_performance"
              }
            ]
          }
        },
        "type": "object"
      },
      "Integrations_Statuspage_ConnectionEntity": {
        "description": "Integrations_Statuspage_ConnectionEntity model",
        "properties": {
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/Integrations_Statuspage_ConditionEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "milestone_mappings": {
            "items": {
              "$ref": "#/components/schemas/Integrations_Statuspage_MilestoneMappingEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "page_id": {
            "nullable": true,
            "type": "string"
          },
          "page_name": {
            "nullable": true,
            "type": "string"
          },
          "severities": {
            "items": {
              "$ref": "#/components/schemas/Integrations_Statuspage_SeverityEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Integrations_Statuspage_ConnectionEntityPaginated": {
        "description": "Integrations_Statuspage_ConnectionEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Integrations_Statuspage_ConnectionEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Integrations_Statuspage_MilestoneMappingEntity": {
        "properties": {
          "milestone_id": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_Statuspage_PageEntity": {
        "description": "Integrations_Statuspage_PageEntity model",
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_Statuspage_SeverityEntity": {
        "properties": {
          "remote_status": {
            "nullable": true,
            "type": "string"
          },
          "severity_slug": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_Zendesk_SearchTickets_PaginatedEntity": {
        "description": "Integrations_Zendesk_SearchTickets_PaginatedEntity model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Integrations_Zendesk_SupportIssueEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Integrations_Zendesk_SupportIssueEntity": {
        "properties": {
          "attached_incidents": {
            "items": {
              "$ref": "#/components/schemas/IncidentEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "attachments": {
            "description": "Attachment information for this issue.",
            "nullable": true,
            "type": "string"
          },
          "customers": {
            "$ref": "#/components/schemas/NullableIntegrations_Zendesk_SupportIssueEntity_CustomerEntity"
          },
          "data": {
            "description": "Raw data associated with this issue from originating system.",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "description": {
            "description": "Longer description of the issue.",
            "nullable": true,
            "type": "string"
          },
          "priority": {
            "nullable": true,
            "type": "string"
          },
          "remote_id": {
            "description": "The ID of this support issue in the system that originated this issue, eg Zendesk.",
            "nullable": true,
            "type": "string"
          },
          "remote_url": {
            "description": "Browser-accessible url for this issue in the originating system, eg Zendesk.",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "description": "Title or name of this issue.",
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "Type designator for this entity",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Integrations_Zendesk_SupportIssueEntity_CustomerEntity": {
        "properties": {
          "id": {
            "description": "UUID of the Customer",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the Customer",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Lifecycles_MilestoneEntity": {
        "properties": {
          "auto_assign_timestamp_on_create": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          }
        },
        "type": "object"
      },
      "Lifecycles_PhaseEntity": {
        "description": "Lifecycles_PhaseEntity model",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "milestones": {
            "items": {
              "$ref": "#/components/schemas/Lifecycles_MilestoneEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Lifecycles_PhaseEntityList": {
        "description": "Lifecycles_PhaseEntityList model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Lifecycles_PhaseEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "LinksEntity": {
        "properties": {
          "href_url": {
            "nullable": true,
            "type": "string"
          },
          "icon_url": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MediaImageEntity": {
        "properties": {
          "original_url": {
            "nullable": true,
            "type": "string"
          },
          "versions_urls": {
            "description": "An object with keys that can have different versions of an image",
            "nullable": true,
            "properties": {},
            "type": "object"
          }
        },
        "type": "object"
      },
      "MembershipEntity": {
        "properties": {
          "default_incident_role": {
            "$ref": "#/components/schemas/NullableIncidentRoleEntity"
          },
          "schedule": {
            "$ref": "#/components/schemas/NullableScheduleEntity"
          },
          "signals_on_call_schedule": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          },
          "user": {
            "$ref": "#/components/schemas/NullableUserEntity"
          }
        },
        "type": "object"
      },
      "Metrics_InfrastructureListEntity": {
        "description": "Metrics_InfrastructureListEntity model",
        "properties": {
          "data": {
            "description": "List of infrastructure metrics",
            "items": {
              "$ref": "#/components/schemas/Metrics_InfrastructureMetricsEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Metrics_InfrastructureMetricsEntity": {
        "description": "Metrics_InfrastructureMetricsEntity model",
        "properties": {
          "count": {
            "description": "Number of incidents in this time period for this component",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "id": {
            "description": "The UUID of the component",
            "nullable": true,
            "type": "string"
          },
          "mtta": {
            "description": "Mean Time To Acknowledgement (seconds) for all incidents for this component in this time period",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "mttd": {
            "description": "Mean Time To Detection (seconds) for all incidents for this component in this time period",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "mttm": {
            "description": "Mean Time To Mitigation (seconds) for all incidents for this component in this time period",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "mttr": {
            "description": "Mean Time To Resolution (seconds) for all incidents for this component in this time period",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "description": "The name of the component",
            "nullable": true,
            "type": "string"
          },
          "total_time": {
            "description": "Total time (seconds) the component was impacted (MTTR x Incident Count)",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Metrics_MetricsEntity": {
        "description": "Metrics_MetricsEntity model",
        "properties": {
          "bucket_size": {
            "description": "The size of returned buckets. Can be one of: day, week, month, or all_time.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "buckets": {
            "items": {
              "properties": {},
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "by": {
            "description": "The field by which the metrics are grouped. Can be one of: total, severity, priority, functionality, service, environment, or user.",
            "nullable": true,
            "type": "string"
          },
          "display_information": {
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "keys": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "sort": {
            "$ref": "#/components/schemas/NullableMetrics_MetricsEntity_SortEntity"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Metrics_MetricsEntity_SortEntity": {
        "properties": {
          "direction": {
            "nullable": true,
            "type": "string"
          },
          "field": {
            "nullable": true,
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Metrics_MilestonesFunnelEntity": {
        "description": "Metrics_MilestonesFunnelEntity model",
        "properties": {
          "columns": {
            "items": {
              "$ref": "#/components/schemas/Metrics_MilestonesFunnelEntity_ColumnEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Metrics_MilestonesFunnelEntity_DataBucketEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "groupings": {
            "$ref": "#/components/schemas/NullableMetrics_MilestonesFunnelEntity_GroupingsEntity"
          },
          "meta": {
            "$ref": "#/components/schemas/NullableMetrics_MilestonesFunnelEntity_MetaEntity"
          }
        },
        "type": "object"
      },
      "Metrics_MilestonesFunnelEntity_ColumnEntity": {
        "properties": {
          "id": {
            "description": "The UUID of the milestone",
            "nullable": true,
            "type": "string"
          },
          "label": {
            "description": "The name of the milestone",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The slug of the milestone",
            "nullable": true,
            "type": "string"
          },
          "tooltip": {
            "description": "The description of the milestone",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Metrics_MilestonesFunnelEntity_DataBucketEntity": {
        "properties": {
          "filter_params": {
            "$ref": "#/components/schemas/NullableMetrics_MilestonesFunnelEntity_DataBucketFilterParamsEntity"
          },
          "milestone_counts": {
            "items": {
              "$ref": "#/components/schemas/Metrics_MilestonesFunnelEntity_DataBucketMilestoneCountEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "time_bucket": {
            "description": "The start datetime for the period",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Metrics_MilestonesFunnelEntity_DataBucketFilterParamsEntity": {
        "properties": {
          "end_date": {
            "description": "The end datetime for the period not inclusive",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "start_date": {
            "description": "The start datetime for the period",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Metrics_MilestonesFunnelEntity_DataBucketMilestoneCountEntity": {
        "properties": {
          "count": {
            "description": "The frequency count of that milestone for the period",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "milestone_id": {
            "description": "The UUID of the milestone",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Metrics_MilestonesFunnelEntity_GroupingsEntity": {
        "properties": {
          "bucket_size": {
            "description": "The bucket size for the data",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Metrics_MilestonesFunnelEntity_MetaEntity": {
        "properties": {
          "added_milestones": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "deleted_milestones": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Metrics_MttxDataEntity": {
        "description": "Metrics_MttxDataEntity model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Metrics_MttxGroupEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "groupings": {
            "items": {
              "$ref": "#/components/schemas/Metrics_MttxDataEntity_GroupingEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Metrics_MttxDataEntity_GroupingEntity": {
        "properties": {
          "id_attribute": {
            "nullable": true,
            "type": "string"
          },
          "name_attribute": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Metrics_MttxGroupEntity": {
        "properties": {
          "count": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "count_diff": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "count_percent_diff": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "filter_params": {
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "group_attributes": {
            "nullable": true,
            "type": "string"
          },
          "healthiness": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mtta": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mtta_diff": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mtta_percent_diff": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mttd": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mttd_diff": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mttd_percent_diff": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mttm": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mttm_diff": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mttm_percent_diff": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mttr": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mttr_diff": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mttr_percent_diff": {
            "format": "float",
            "nullable": true,
            "type": "number"
          }
        },
        "type": "object"
      },
      "Metrics_RetrospectiveEntity": {
        "description": "Metrics_RetrospectiveEntity model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Metrics_RetrospectiveEntity_DataEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "summary": {
            "$ref": "#/components/schemas/NullableMetrics_RetrospectiveEntity_SummaryEntity"
          }
        },
        "type": "object"
      },
      "Metrics_RetrospectiveEntity_DataEntity": {
        "properties": {
          "x": {
            "nullable": true,
            "type": "string"
          },
          "y": {
            "format": "float",
            "nullable": true,
            "type": "number"
          }
        },
        "type": "object"
      },
      "Metrics_RetrospectiveEntity_SummaryEntity": {
        "properties": {
          "completed": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "completion_percentage": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "incomplete": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "longest": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mean": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "shortest": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "total": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Metrics_TicketFunnelMetricsEntity": {
        "description": "Metrics_TicketFunnelMetricsEntity model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Metrics_TicketFunnelMetricsEntity_DataBucketEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "groupings": {
            "$ref": "#/components/schemas/NullableMetrics_TicketFunnelMetricsEntity_GroupingsEntity"
          }
        },
        "type": "object"
      },
      "Metrics_TicketFunnelMetricsEntity_DataBucketEntity": {
        "properties": {
          "filter_params": {
            "$ref": "#/components/schemas/NullableMetrics_TicketFunnelMetricsEntity_DataBucketFilterParamsEntity"
          },
          "follow_ups_created": {
            "description": "The number of follow ups created",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "follow_ups_done": {
            "description": "The number of follow ups completed",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "tasks_created": {
            "description": "The number of tasks created",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "tasks_done": {
            "description": "The number of tasks completed",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "time_bucket": {
            "description": "The start datetime for the period",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Metrics_TicketFunnelMetricsEntity_DataBucketFilterParamsEntity": {
        "properties": {
          "end_date": {
            "description": "The end datetime for the period not inclusive",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "start_date": {
            "description": "The start datetime for the period",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Metrics_TicketFunnelMetricsEntity_GroupingsEntity": {
        "properties": {
          "bucket_size": {
            "description": "The bucket size for the data",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "NullableAI_Entities_IncidentSummaryEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AI_Entities_IncidentSummaryEntity"
          }
        ]
      },
      "NullableAI_Entities_PreferencesEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AI_Entities_PreferencesEntity"
          }
        ]
      },
      "NullableActorEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActorEntity"
          }
        ]
      },
      "NullableAlerts_AlertEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Alerts_AlertEntity"
          }
        ]
      },
      "NullableAlerts_AlertEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Alerts_AlertEntityPaginated"
          }
        ]
      },
      "NullableAlerts_ProcessingLogEntryEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Alerts_ProcessingLogEntryEntity"
          }
        ]
      },
      "NullableAlerts_ProcessingLogEntryEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Alerts_ProcessingLogEntryEntityPaginated"
          }
        ]
      },
      "NullableAlerts_SignalAlertEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Alerts_SignalAlertEntity"
          }
        ]
      },
      "NullableAlerts_SirenAlertEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Alerts_SirenAlertEntity"
          }
        ]
      },
      "NullableAlerts_SirenEventEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Alerts_SirenEventEntity"
          }
        ]
      },
      "NullableAttachments_LinkEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attachments_LinkEntity"
          }
        ]
      },
      "NullableAttachments_LinkEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attachments_LinkEntityPaginated"
          }
        ]
      },
      "NullableAttachments_TypedAttachmentEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attachments_TypedAttachmentEntity"
          }
        ]
      },
      "NullableAttachments_TypedAttachmentEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attachments_TypedAttachmentEntityPaginated"
          }
        ]
      },
      "NullableAudiences_Entities_AudienceEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Audiences_Entities_AudienceEntity"
          }
        ]
      },
      "NullableAudiences_Entities_AudienceSummariesEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Audiences_Entities_AudienceSummariesEntity"
          }
        ]
      },
      "NullableAudiences_Entities_DetailEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Audiences_Entities_DetailEntity"
          }
        ]
      },
      "NullableAuthorEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthorEntity"
          }
        ]
      },
      "NullableCalendars_EventEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Calendars_EventEntity"
          }
        ]
      },
      "NullableChangeEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChangeEntity"
          }
        ]
      },
      "NullableChangeEventEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChangeEventEntity"
          }
        ]
      },
      "NullableChangeEventSlimEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChangeEventSlimEntity"
          }
        ]
      },
      "NullableChangeEventSlimEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChangeEventSlimEntityPaginated"
          }
        ]
      },
      "NullableChangeIdentityEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChangeIdentityEntity"
          }
        ]
      },
      "NullableChangeIdentityEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChangeIdentityEntityPaginated"
          }
        ]
      },
      "NullableChangeTypeEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChangeTypeEntity"
          }
        ]
      },
      "NullableChangeTypeEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChangeTypeEntityPaginated"
          }
        ]
      },
      "NullableChecklistCheckEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChecklistCheckEntity"
          }
        ]
      },
      "NullableChecklistTemplateEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChecklistTemplateEntity"
          }
        ]
      },
      "NullableChecklistTemplateEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChecklistTemplateEntityPaginated"
          }
        ]
      },
      "NullableConversations_API_Entities_Channel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Conversations_API_Entities_Channel"
          }
        ]
      },
      "NullableConversations_API_Entities_Reference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Conversations_API_Entities_Reference"
          }
        ]
      },
      "NullableCurrentUserEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrentUserEntity"
          }
        ]
      },
      "NullableCustomFields_FieldValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomFields_FieldValue"
          }
        ]
      },
      "NullableEntitlementEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntitlementEntity"
          }
        ]
      },
      "NullableEntitlementEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntitlementEntityPaginated"
          }
        ]
      },
      "NullableEnvironmentEntryEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EnvironmentEntryEntity"
          }
        ]
      },
      "NullableEnvironmentEntryEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EnvironmentEntryEntityPaginated"
          }
        ]
      },
      "NullableErrorEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorEntity"
          }
        ]
      },
      "NullableEvent_GenericChatMessageEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event_GenericChatMessageEntity"
          }
        ]
      },
      "NullableEvent_NoteEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event_NoteEntity"
          }
        ]
      },
      "NullableExternalResourceEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ExternalResourceEntity"
          }
        ]
      },
      "NullableFHTypes_GenericEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FHTypes_GenericEntity"
          }
        ]
      },
      "NullableFieldMapping_FieldMapEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldMapping_FieldMapEntity"
          }
        ]
      },
      "NullableFieldMapping_MappableFieldEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldMapping_MappableFieldEntity"
          }
        ]
      },
      "NullableFormConfigurationEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormConfigurationEntity"
          }
        ]
      },
      "NullableFunctionalityEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FunctionalityEntity"
          }
        ]
      },
      "NullableFunctionalityEntityLite": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FunctionalityEntityLite"
          }
        ]
      },
      "NullableFunctionalityEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FunctionalityEntityPaginated"
          }
        ]
      },
      "NullableFunctionalityWithAllServicesEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FunctionalityWithAllServicesEntity"
          }
        ]
      },
      "NullableImports_ImportEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Imports_ImportEntity"
          }
        ]
      },
      "NullableImports_ImportErrorEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Imports_ImportErrorEntity"
          }
        ]
      },
      "NullableImports_ImportErrorEntity_ResourceEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Imports_ImportErrorEntity_ResourceEntity"
          }
        ]
      },
      "NullableImports_ImportableResourceEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Imports_ImportableResourceEntity"
          }
        ]
      },
      "NullableIncidentAttachmentEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentAttachmentEntity"
          }
        ]
      },
      "NullableIncidentEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentEntity"
          }
        ]
      },
      "NullableIncidentEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentEntityPaginated"
          }
        ]
      },
      "NullableIncidentEntity_FieldRequirementEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentEntity_FieldRequirementEntity"
          }
        ]
      },
      "NullableIncidentEventEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentEventEntity"
          }
        ]
      },
      "NullableIncidentEventEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentEventEntityPaginated"
          }
        ]
      },
      "NullableIncidentImpactEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentImpactEntity"
          }
        ]
      },
      "NullableIncidentImpactEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentImpactEntityPaginated"
          }
        ]
      },
      "NullableIncidentRoleEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentRoleEntity"
          }
        ]
      },
      "NullableIncidentRoleEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentRoleEntityPaginated"
          }
        ]
      },
      "NullableIncidentTypeEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentTypeEntity"
          }
        ]
      },
      "NullableIncidentTypeEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentTypeEntityPaginated"
          }
        ]
      },
      "NullableIncidentTypeEntity_TemplateEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentTypeEntity_TemplateEntity"
          }
        ]
      },
      "NullableIncidentTypeEntity_TemplateImpactEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentTypeEntity_TemplateImpactEntity"
          }
        ]
      },
      "NullableIncidentTypeEntity_TemplateValuesEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentTypeEntity_TemplateValuesEntity"
          }
        ]
      },
      "NullableIncidents_AlertEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_AlertEntity"
          }
        ]
      },
      "NullableIncidents_AlertEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_AlertEntityPaginated"
          }
        ]
      },
      "NullableIncidents_ChannelEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_ChannelEntity"
          }
        ]
      },
      "NullableIncidents_ConferenceBridgeEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_ConferenceBridgeEntity"
          }
        ]
      },
      "NullableIncidents_ContextObjectEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_ContextObjectEntity"
          }
        ]
      },
      "NullableIncidents_ExportRetrospectivesResultEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_ExportRetrospectivesResultEntity"
          }
        ]
      },
      "NullableIncidents_ImpactEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_ImpactEntity"
          }
        ]
      },
      "NullableIncidents_LifecycleMeasurementEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_LifecycleMeasurementEntity"
          }
        ]
      },
      "NullableIncidents_LifecycleMilestoneEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_LifecycleMilestoneEntity"
          }
        ]
      },
      "NullableIncidents_LifecyclePhaseEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_LifecyclePhaseEntity"
          }
        ]
      },
      "NullableIncidents_MilestoneEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_MilestoneEntity"
          }
        ]
      },
      "NullableIncidents_MilestoneEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_MilestoneEntityPaginated"
          }
        ]
      },
      "NullableIncidents_RelatedChangeEventEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_RelatedChangeEventEntity"
          }
        ]
      },
      "NullableIncidents_RelatedChangeEventEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_RelatedChangeEventEntityPaginated"
          }
        ]
      },
      "NullableIncidents_RelationshipsEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_RelationshipsEntity"
          }
        ]
      },
      "NullableIncidents_RetrospectiveEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_RetrospectiveEntity"
          }
        ]
      },
      "NullableIncidents_RetrospectiveEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_RetrospectiveEntityPaginated"
          }
        ]
      },
      "NullableIncidents_RetrospectiveEntity_SectionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_RetrospectiveEntity_SectionEntity"
          }
        ]
      },
      "NullableIncidents_RetrospectiveFieldEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_RetrospectiveFieldEntity"
          }
        ]
      },
      "NullableIncidents_RoleAssignmentEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_RoleAssignmentEntity"
          }
        ]
      },
      "NullableIncidents_RoleAssignmentEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_RoleAssignmentEntityPaginated"
          }
        ]
      },
      "NullableIncidents_ShareRetrospectivesResultEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_ShareRetrospectivesResultEntity"
          }
        ]
      },
      "NullableIncidents_StatusPageEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_StatusPageEntity"
          }
        ]
      },
      "NullableIncidents_StatusPageEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_StatusPageEntityPaginated"
          }
        ]
      },
      "NullableIncidents_TeamAssignmentEntityLite": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Incidents_TeamAssignmentEntityLite"
          }
        ]
      },
      "NullableInfrastructureSearchEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InfrastructureSearchEntity"
          }
        ]
      },
      "NullableIntegrationEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntegrationEntity"
          }
        ]
      },
      "NullableIntegrations_AuthedProviderEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_AuthedProviderEntityPaginated"
          }
        ]
      },
      "NullableIntegrations_Aws_CloudtrailBatchEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Aws_CloudtrailBatchEntity"
          }
        ]
      },
      "NullableIntegrations_Aws_CloudtrailBatchEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Aws_CloudtrailBatchEntityPaginated"
          }
        ]
      },
      "NullableIntegrations_Aws_ConnectionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Aws_ConnectionEntity"
          }
        ]
      },
      "NullableIntegrations_Aws_ConnectionEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Aws_ConnectionEntityPaginated"
          }
        ]
      },
      "NullableIntegrations_ConfluenceCloud_SpaceKeyEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_ConfluenceCloud_SpaceKeyEntity"
          }
        ]
      },
      "NullableIntegrations_ConnectionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_ConnectionEntity"
          }
        ]
      },
      "NullableIntegrations_ConnectionEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_ConnectionEntityPaginated"
          }
        ]
      },
      "NullableIntegrations_ConnectionStatusEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_ConnectionStatusEntity"
          }
        ]
      },
      "NullableIntegrations_IntegrationEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_IntegrationEntity"
          }
        ]
      },
      "NullableIntegrations_IntegrationEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_IntegrationEntityPaginated"
          }
        ]
      },
      "NullableIntegrations_IntegrationEntity_LogoEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_IntegrationEntity_LogoEntity"
          }
        ]
      },
      "NullableIntegrations_MicrosoftTeamsV2_ChannelEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_MicrosoftTeamsV2_ChannelEntity"
          }
        ]
      },
      "NullableIntegrations_Slack_SlackChannelEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Slack_SlackChannelEntity"
          }
        ]
      },
      "NullableIntegrations_Slack_UsergroupEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Slack_UsergroupEntity"
          }
        ]
      },
      "NullableIntegrations_Slack_WorkspaceEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Slack_WorkspaceEntity"
          }
        ]
      },
      "NullableIntegrations_Statuspage_ConditionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Statuspage_ConditionEntity"
          }
        ]
      },
      "NullableIntegrations_Statuspage_ConnectionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Statuspage_ConnectionEntity"
          }
        ]
      },
      "NullableIntegrations_Statuspage_ConnectionEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Statuspage_ConnectionEntityPaginated"
          }
        ]
      },
      "NullableIntegrations_Statuspage_MilestoneMappingEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Statuspage_MilestoneMappingEntity"
          }
        ]
      },
      "NullableIntegrations_Statuspage_PageEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Statuspage_PageEntity"
          }
        ]
      },
      "NullableIntegrations_Statuspage_SeverityEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Statuspage_SeverityEntity"
          }
        ]
      },
      "NullableIntegrations_Zendesk_SearchTickets_PaginatedEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Zendesk_SearchTickets_PaginatedEntity"
          }
        ]
      },
      "NullableIntegrations_Zendesk_SupportIssueEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Zendesk_SupportIssueEntity"
          }
        ]
      },
      "NullableIntegrations_Zendesk_SupportIssueEntity_CustomerEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations_Zendesk_SupportIssueEntity_CustomerEntity"
          }
        ]
      },
      "NullableLifecycles_MilestoneEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Lifecycles_MilestoneEntity"
          }
        ]
      },
      "NullableLifecycles_PhaseEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Lifecycles_PhaseEntity"
          }
        ]
      },
      "NullableLifecycles_PhaseEntityList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Lifecycles_PhaseEntityList"
          }
        ]
      },
      "NullableLinksEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LinksEntity"
          }
        ]
      },
      "NullableMediaImageEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MediaImageEntity"
          }
        ]
      },
      "NullableMembershipEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MembershipEntity"
          }
        ]
      },
      "NullableMetrics_InfrastructureListEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_InfrastructureListEntity"
          }
        ]
      },
      "NullableMetrics_InfrastructureMetricsEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_InfrastructureMetricsEntity"
          }
        ]
      },
      "NullableMetrics_MetricsEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_MetricsEntity"
          }
        ]
      },
      "NullableMetrics_MetricsEntity_SortEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_MetricsEntity_SortEntity"
          }
        ]
      },
      "NullableMetrics_MilestonesFunnelEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_MilestonesFunnelEntity"
          }
        ]
      },
      "NullableMetrics_MilestonesFunnelEntity_ColumnEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_MilestonesFunnelEntity_ColumnEntity"
          }
        ]
      },
      "NullableMetrics_MilestonesFunnelEntity_DataBucketEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_MilestonesFunnelEntity_DataBucketEntity"
          }
        ]
      },
      "NullableMetrics_MilestonesFunnelEntity_DataBucketFilterParamsEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_MilestonesFunnelEntity_DataBucketFilterParamsEntity"
          }
        ]
      },
      "NullableMetrics_MilestonesFunnelEntity_DataBucketMilestoneCountEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_MilestonesFunnelEntity_DataBucketMilestoneCountEntity"
          }
        ]
      },
      "NullableMetrics_MilestonesFunnelEntity_GroupingsEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_MilestonesFunnelEntity_GroupingsEntity"
          }
        ]
      },
      "NullableMetrics_MilestonesFunnelEntity_MetaEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_MilestonesFunnelEntity_MetaEntity"
          }
        ]
      },
      "NullableMetrics_MttxDataEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_MttxDataEntity"
          }
        ]
      },
      "NullableMetrics_MttxDataEntity_GroupingEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_MttxDataEntity_GroupingEntity"
          }
        ]
      },
      "NullableMetrics_MttxGroupEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_MttxGroupEntity"
          }
        ]
      },
      "NullableMetrics_RetrospectiveEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_RetrospectiveEntity"
          }
        ]
      },
      "NullableMetrics_RetrospectiveEntity_DataEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_RetrospectiveEntity_DataEntity"
          }
        ]
      },
      "NullableMetrics_RetrospectiveEntity_SummaryEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_RetrospectiveEntity_SummaryEntity"
          }
        ]
      },
      "NullableMetrics_TicketFunnelMetricsEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_TicketFunnelMetricsEntity"
          }
        ]
      },
      "NullableMetrics_TicketFunnelMetricsEntity_DataBucketEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_TicketFunnelMetricsEntity_DataBucketEntity"
          }
        ]
      },
      "NullableMetrics_TicketFunnelMetricsEntity_DataBucketFilterParamsEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_TicketFunnelMetricsEntity_DataBucketFilterParamsEntity"
          }
        ]
      },
      "NullableMetrics_TicketFunnelMetricsEntity_GroupingsEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metrics_TicketFunnelMetricsEntity_GroupingsEntity"
          }
        ]
      },
      "NullableNuncComponentEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NuncComponentEntity"
          }
        ]
      },
      "NullableNuncComponentGroupEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NuncComponentGroupEntity"
          }
        ]
      },
      "NullableNuncConditionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NuncConditionEntity"
          }
        ]
      },
      "NullableNuncConnectionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NuncConnectionEntity"
          }
        ]
      },
      "NullableNuncConnectionEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NuncConnectionEntityPaginated"
          }
        ]
      },
      "NullableNuncEmailSubscribersEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NuncEmailSubscribersEntity"
          }
        ]
      },
      "NullableNunc_NuncSubscription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Nunc_NuncSubscription"
          }
        ]
      },
      "NullableOrganizationEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrganizationEntity"
          }
        ]
      },
      "NullableOrganizations_CustomFieldDefinitionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Organizations_CustomFieldDefinitionEntity"
          }
        ]
      },
      "NullablePaginationEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationEntity"
          }
        ]
      },
      "NullablePongEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PongEntity"
          }
        ]
      },
      "NullablePostMortems_PostMortemReportEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostMortems_PostMortemReportEntity"
          }
        ]
      },
      "NullablePostMortems_PostMortemReportEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostMortems_PostMortemReportEntityPaginated"
          }
        ]
      },
      "NullablePostMortems_QuestionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostMortems_QuestionEntity"
          }
        ]
      },
      "NullablePostMortems_QuestionTypeEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostMortems_QuestionTypeEntity"
          }
        ]
      },
      "NullablePostMortems_QuestionTypeEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostMortems_QuestionTypeEntityPaginated"
          }
        ]
      },
      "NullablePostMortems_ReasonEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostMortems_ReasonEntity"
          }
        ]
      },
      "NullablePostMortems_ReasonEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostMortems_ReasonEntityPaginated"
          }
        ]
      },
      "NullablePostMortems_SectionFieldEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostMortems_SectionFieldEntity"
          }
        ]
      },
      "NullablePriorityEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriorityEntity"
          }
        ]
      },
      "NullablePublicAPI_V1_BootstrapEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicAPI_V1_BootstrapEntity"
          }
        ]
      },
      "NullablePublicAPI_V1_FormConfigurations_SelectedValueEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicAPI_V1_FormConfigurations_SelectedValueEntity"
          }
        ]
      },
      "NullablePublicAPI_V1_Incidents_SuccinctEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicAPI_V1_Incidents_SuccinctEntity"
          }
        ]
      },
      "NullablePublicAPI_V1_Incidents_TranscriptEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicAPI_V1_Incidents_TranscriptEntity"
          }
        ]
      },
      "NullablePublicAPI_V1_Integrations_AuthedProviderEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicAPI_V1_Integrations_AuthedProviderEntity"
          }
        ]
      },
      "NullablePublicAPI_V1_SimilarIncidentEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicAPI_V1_SimilarIncidentEntity"
          }
        ]
      },
      "NullableReportEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportEntity"
          }
        ]
      },
      "NullableReports_BucketEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reports_BucketEntity"
          }
        ]
      },
      "NullableReports_DataPointEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reports_DataPointEntity"
          }
        ]
      },
      "NullableRetrospectives_FieldEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Retrospectives_FieldEntity"
          }
        ]
      },
      "NullableRetrospectives_IndexTemplateEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Retrospectives_IndexTemplateEntity"
          }
        ]
      },
      "NullableRetrospectives_IndexTemplateEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Retrospectives_IndexTemplateEntityPaginated"
          }
        ]
      },
      "NullableRetrospectives_TemplateEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Retrospectives_TemplateEntity"
          }
        ]
      },
      "NullableRetrospectives_TemplateEntity_IncidentSectionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Retrospectives_TemplateEntity_IncidentSectionEntity"
          }
        ]
      },
      "NullableRules_RuleEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Rules_RuleEntity"
          }
        ]
      },
      "NullableRunbookEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RunbookEntity"
          }
        ]
      },
      "NullableRunbookStepEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RunbookStepEntity"
          }
        ]
      },
      "NullableRunbooks_ActionConfigEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ActionConfigEntity"
          }
        ]
      },
      "NullableRunbooks_ActionsEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ActionsEntity"
          }
        ]
      },
      "NullableRunbooks_ActionsEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ActionsEntityPaginated"
          }
        ]
      },
      "NullableRunbooks_ElementDynamicSelectEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ElementDynamicSelectEntity"
          }
        ]
      },
      "NullableRunbooks_ElementDynamicSelectEntity_SelectOptionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ElementDynamicSelectEntity_SelectOptionEntity"
          }
        ]
      },
      "NullableRunbooks_ElementEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ElementEntity"
          }
        ]
      },
      "NullableRunbooks_ElementInputEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ElementInputEntity"
          }
        ]
      },
      "NullableRunbooks_ElementMarkdownEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ElementMarkdownEntity"
          }
        ]
      },
      "NullableRunbooks_ElementTextareaEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ElementTextareaEntity"
          }
        ]
      },
      "NullableRunbooks_ExecutionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ExecutionEntity"
          }
        ]
      },
      "NullableRunbooks_ExecutionEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ExecutionEntityPaginated"
          }
        ]
      },
      "NullableRunbooks_ExecutionEntity_ExecutedForEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ExecutionEntity_ExecutedForEntity"
          }
        ]
      },
      "NullableRunbooks_ExecutionStepEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ExecutionStepEntity"
          }
        ]
      },
      "NullableRunbooks_ExecutionStepExecutionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_ExecutionStepExecutionEntity"
          }
        ]
      },
      "NullableRunbooks_WebhookDeliveryEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Runbooks_WebhookDeliveryEntity"
          }
        ]
      },
      "NullableSavedSearchEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SavedSearchEntity"
          }
        ]
      },
      "NullableScheduleEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduleEntity"
          }
        ]
      },
      "NullableScheduleEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduleEntityPaginated"
          }
        ]
      },
      "NullableScheduledMaintenanceEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduledMaintenanceEntity"
          }
        ]
      },
      "NullableScheduledMaintenancesImpactEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduledMaintenancesImpactEntity"
          }
        ]
      },
      "NullableScheduledMaintenancesStatusPageEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduledMaintenancesStatusPageEntity"
          }
        ]
      },
      "NullableServiceChildDependencyEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceChildDependencyEntity"
          }
        ]
      },
      "NullableServiceDependencyEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceDependencyEntity"
          }
        ]
      },
      "NullableServiceEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceEntity"
          }
        ]
      },
      "NullableServiceEntityChecklist": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceEntityChecklist"
          }
        ]
      },
      "NullableServiceEntityLite": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceEntityLite"
          }
        ]
      },
      "NullableServiceEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceEntityPaginated"
          }
        ]
      },
      "NullableServiceLinkEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceLinkEntity"
          }
        ]
      },
      "NullableServiceParentDependencyEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceParentDependencyEntity"
          }
        ]
      },
      "NullableServiceWithAllDependenciesEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceWithAllDependenciesEntity"
          }
        ]
      },
      "NullableSeverityEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SeverityEntity"
          }
        ]
      },
      "NullableSeverityEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SeverityEntityPaginated"
          }
        ]
      },
      "NullableSeverityMatrix_ConditionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SeverityMatrix_ConditionEntity"
          }
        ]
      },
      "NullableSeverityMatrix_ImpactEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SeverityMatrix_ImpactEntity"
          }
        ]
      },
      "NullableSeverityMatrix_ItemEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SeverityMatrix_ItemEntity"
          }
        ]
      },
      "NullableSeverityMatrix_SeverityMatrixEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SeverityMatrix_SeverityMatrixEntity"
          }
        ]
      },
      "NullableSignals_API_Analytics_GroupedMetricsEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_Analytics_GroupedMetricsEntity"
          }
        ]
      },
      "NullableSignals_API_Analytics_GroupedMetricsEntity_MetricEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_Analytics_GroupedMetricsEntity_MetricEntity"
          }
        ]
      },
      "NullableSignals_API_Analytics_MttxMetricsEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_Analytics_MttxMetricsEntity"
          }
        ]
      },
      "NullableSignals_API_Analytics_MttxMetricsEntity_MetricEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_Analytics_MttxMetricsEntity_MetricEntity"
          }
        ]
      },
      "NullableSignals_API_Analytics_NoiseMetricsEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_Analytics_NoiseMetricsEntity"
          }
        ]
      },
      "NullableSignals_API_Analytics_NoiseMetricsEntity_MetricEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_Analytics_NoiseMetricsEntity_MetricEntity"
          }
        ]
      },
      "NullableSignals_API_Analytics_TimeseriesPointEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_Analytics_TimeseriesPointEntity"
          }
        ]
      },
      "NullableSignals_API_Analytics_TimeseriesPointEntity_MetricEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_Analytics_TimeseriesPointEntity_MetricEntity"
          }
        ]
      },
      "NullableSignals_API_CallRouteEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_CallRouteEntity"
          }
        ]
      },
      "NullableSignals_API_CallRouteEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_CallRouteEntityPaginated"
          }
        ]
      },
      "NullableSignals_API_CallRouteStepEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_CallRouteStepEntity"
          }
        ]
      },
      "NullableSignals_API_EmailTargetEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_EmailTargetEntity"
          }
        ]
      },
      "NullableSignals_API_EmailTargetEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_EmailTargetEntityPaginated"
          }
        ]
      },
      "NullableSignals_API_EscalationPolicyEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_EscalationPolicyEntity"
          }
        ]
      },
      "NullableSignals_API_EscalationPolicyEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_EscalationPolicyEntityPaginated"
          }
        ]
      },
      "NullableSignals_API_EscalationPolicyHandoffStepEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_EscalationPolicyHandoffStepEntity"
          }
        ]
      },
      "NullableSignals_API_EscalationPolicyStepEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_EscalationPolicyStepEntity"
          }
        ]
      },
      "NullableSignals_API_GroupingEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_GroupingEntity"
          }
        ]
      },
      "NullableSignals_API_GroupingEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_GroupingEntityPaginated"
          }
        ]
      },
      "NullableSignals_API_GroupingEntity_ActionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_GroupingEntity_ActionEntity"
          }
        ]
      },
      "NullableSignals_API_GroupingEntity_ActionEntity_FyiEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_GroupingEntity_ActionEntity_FyiEntity"
          }
        ]
      },
      "NullableSignals_API_GroupingEntity_StrategyEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_GroupingEntity_StrategyEntity"
          }
        ]
      },
      "NullableSignals_API_GroupingEntity_StrategyEntity_SubstringEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_GroupingEntity_StrategyEntity_SubstringEntity"
          }
        ]
      },
      "NullableSignals_API_HackerModeEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_HackerModeEntity"
          }
        ]
      },
      "NullableSignals_API_IngestKeyEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_IngestKeyEntity"
          }
        ]
      },
      "NullableSignals_API_NotificationPolicyItemComplianceEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_NotificationPolicyItemComplianceEntity"
          }
        ]
      },
      "NullableSignals_API_NotificationPolicyItemEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_NotificationPolicyItemEntity"
          }
        ]
      },
      "NullableSignals_API_NotificationPolicyItemEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_NotificationPolicyItemEntityPaginated"
          }
        ]
      },
      "NullableSignals_API_NotificationPriorityPolicyEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_NotificationPriorityPolicyEntity"
          }
        ]
      },
      "NullableSignals_API_OnCallRestrictionEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_OnCallRestrictionEntity"
          }
        ]
      },
      "NullableSignals_API_OnCallRotationEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_OnCallRotationEntity"
          }
        ]
      },
      "NullableSignals_API_OnCallScheduleEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_OnCallScheduleEntity"
          }
        ]
      },
      "NullableSignals_API_OnCallScheduleEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_OnCallScheduleEntityPaginated"
          }
        ]
      },
      "NullableSignals_API_OnCallShiftEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_OnCallShiftEntity"
          }
        ]
      },
      "NullableSignals_API_OnCallStrategyEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_OnCallStrategyEntity"
          }
        ]
      },
      "NullableSignals_API_OrganizationOnCallRotationEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_OrganizationOnCallRotationEntity"
          }
        ]
      },
      "NullableSignals_API_OrganizationOnCallScheduleEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_OrganizationOnCallScheduleEntity"
          }
        ]
      },
      "NullableSignals_API_OrganizationOnCallScheduleEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_OrganizationOnCallScheduleEntityPaginated"
          }
        ]
      },
      "NullableSignals_API_RuleEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_RuleEntity"
          }
        ]
      },
      "NullableSignals_API_RuleEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_RuleEntityPaginated"
          }
        ]
      },
      "NullableSignals_API_TargetEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_TargetEntity"
          }
        ]
      },
      "NullableSignals_API_TransposerEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_TransposerEntity"
          }
        ]
      },
      "NullableSignals_API_TransposerListEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_TransposerListEntity"
          }
        ]
      },
      "NullableSignals_API_WebhookTargetEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_WebhookTargetEntity"
          }
        ]
      },
      "NullableSignals_API_WebhookTargetEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Signals_API_WebhookTargetEntityPaginated"
          }
        ]
      },
      "NullableSimilarIncidentEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SimilarIncidentEntityPaginated"
          }
        ]
      },
      "NullableSlimRunbookEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SlimRunbookEntity"
          }
        ]
      },
      "NullableStatusUpdateTemplateEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StatusUpdateTemplateEntity"
          }
        ]
      },
      "NullableSuccinctEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccinctEntity"
          }
        ]
      },
      "NullableTagEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagEntity"
          }
        ]
      },
      "NullableTagEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagEntityPaginated"
          }
        ]
      },
      "NullableTaskEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskEntity"
          }
        ]
      },
      "NullableTaskEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskEntityPaginated"
          }
        ]
      },
      "NullableTaskListEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskListEntity"
          }
        ]
      },
      "NullableTaskListItemEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskListItemEntity"
          }
        ]
      },
      "NullableTeamEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TeamEntity"
          }
        ]
      },
      "NullableTeamEntityLite": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TeamEntityLite"
          }
        ]
      },
      "NullableTeamEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TeamEntityPaginated"
          }
        ]
      },
      "NullableTicketing_FieldMaps_MappableFieldEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticketing_FieldMaps_MappableFieldEntity"
          }
        ]
      },
      "NullableTicketing_PriorityEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticketing_PriorityEntity"
          }
        ]
      },
      "NullableTicketing_ProjectConfigEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticketing_ProjectConfigEntity"
          }
        ]
      },
      "NullableTicketing_ProjectFieldMapBodyEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticketing_ProjectFieldMapBodyEntity"
          }
        ]
      },
      "NullableTicketing_ProjectFieldMapCasesElseEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticketing_ProjectFieldMapCasesElseEntity"
          }
        ]
      },
      "NullableTicketing_ProjectFieldMapCasesEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticketing_ProjectFieldMapCasesEntity"
          }
        ]
      },
      "NullableTicketing_ProjectFieldMapEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticketing_ProjectFieldMapEntity"
          }
        ]
      },
      "NullableTicketing_ProjectFieldMapExternalValueEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticketing_ProjectFieldMapExternalValueEntity"
          }
        ]
      },
      "NullableTicketing_ProjectInboundFieldMapEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticketing_ProjectInboundFieldMapEntity"
          }
        ]
      },
      "NullableTicketing_ProjectInboundMappableFieldEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticketing_ProjectInboundMappableFieldEntity"
          }
        ]
      },
      "NullableTicketing_Projects_ProjectListItemEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticketing_Projects_ProjectListItemEntity"
          }
        ]
      },
      "NullableTicketing_TicketEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticketing_TicketEntity"
          }
        ]
      },
      "NullableUserEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserEntity"
          }
        ]
      },
      "NullableUserEntityPaginated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserEntityPaginated"
          }
        ]
      },
      "NullableVotesEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VotesEntity"
          }
        ]
      },
      "NullableWebhooks_Entities_WebhookEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Webhooks_Entities_WebhookEntity"
          }
        ]
      },
      "Nullablebulk_update_incident_milestones": {
        "allOf": [
          {
            "$ref": "#/components/schemas/bulk_update_incident_milestones"
          }
        ]
      },
      "Nullableconvert_incident_task": {
        "allOf": [
          {
            "$ref": "#/components/schemas/convert_incident_task"
          }
        ]
      },
      "Nullablecreate_change": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_change"
          }
        ]
      },
      "Nullablecreate_change_event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_change_event"
          }
        ]
      },
      "Nullablecreate_change_identity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_change_identity"
          }
        ]
      },
      "Nullablecreate_checklist_template": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_checklist_template"
          }
        ]
      },
      "Nullablecreate_comment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_comment"
          }
        ]
      },
      "Nullablecreate_comment_reaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_comment_reaction"
          }
        ]
      },
      "Nullablecreate_custom_field_definition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_custom_field_definition"
          }
        ]
      },
      "Nullablecreate_environment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_environment"
          }
        ]
      },
      "Nullablecreate_functionality": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_functionality"
          }
        ]
      },
      "Nullablecreate_incident": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_incident"
          }
        ]
      },
      "Nullablecreate_incident_change_event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_incident_change_event"
          }
        ]
      },
      "Nullablecreate_incident_chat_message": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_incident_chat_message"
          }
        ]
      },
      "Nullablecreate_incident_impact": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_incident_impact"
          }
        ]
      },
      "Nullablecreate_incident_link": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_incident_link"
          }
        ]
      },
      "Nullablecreate_incident_note": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_incident_note"
          }
        ]
      },
      "Nullablecreate_incident_role": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_incident_role"
          }
        ]
      },
      "Nullablecreate_incident_role_assignment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_incident_role_assignment"
          }
        ]
      },
      "Nullablecreate_incident_status_page": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_incident_status_page"
          }
        ]
      },
      "Nullablecreate_incident_task": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_incident_task"
          }
        ]
      },
      "Nullablecreate_incident_task_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_incident_task_list"
          }
        ]
      },
      "Nullablecreate_incident_team_assignment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_incident_team_assignment"
          }
        ]
      },
      "Nullablecreate_incident_type": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_incident_type"
          }
        ]
      },
      "Nullablecreate_nunc_subscription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_nunc_subscription"
          }
        ]
      },
      "Nullablecreate_on_call_shift": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_on_call_shift"
          }
        ]
      },
      "Nullablecreate_post_mortem_reason": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_post_mortem_reason"
          }
        ]
      },
      "Nullablecreate_post_mortem_report": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_post_mortem_report"
          }
        ]
      },
      "Nullablecreate_priority": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_priority"
          }
        ]
      },
      "Nullablecreate_runbook": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_runbook"
          }
        ]
      },
      "Nullablecreate_runbook_execution": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_runbook_execution"
          }
        ]
      },
      "Nullablecreate_saved_search": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_saved_search"
          }
        ]
      },
      "Nullablecreate_scheduled_maintenance": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_scheduled_maintenance"
          }
        ]
      },
      "Nullablecreate_scim_group": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_scim_group"
          }
        ]
      },
      "Nullablecreate_scim_user": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_scim_user"
          }
        ]
      },
      "Nullablecreate_service": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_service"
          }
        ]
      },
      "Nullablecreate_service_checklist_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_service_checklist_response"
          }
        ]
      },
      "Nullablecreate_service_dependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_service_dependency"
          }
        ]
      },
      "Nullablecreate_service_links": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_service_links"
          }
        ]
      },
      "Nullablecreate_severity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_severity"
          }
        ]
      },
      "Nullablecreate_severity_matrix_condition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_severity_matrix_condition"
          }
        ]
      },
      "Nullablecreate_severity_matrix_impact": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_severity_matrix_impact"
          }
        ]
      },
      "Nullablecreate_signals_alert_grouping_configuration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_signals_alert_grouping_configuration"
          }
        ]
      },
      "Nullablecreate_signals_email_target": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_signals_email_target"
          }
        ]
      },
      "Nullablecreate_signals_event_source": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_signals_event_source"
          }
        ]
      },
      "Nullablecreate_signals_webhook_target": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_signals_webhook_target"
          }
        ]
      },
      "Nullablecreate_status_update_template": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_status_update_template"
          }
        ]
      },
      "Nullablecreate_task_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_task_list"
          }
        ]
      },
      "Nullablecreate_team": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_team"
          }
        ]
      },
      "Nullablecreate_team_call_route": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_team_call_route"
          }
        ]
      },
      "Nullablecreate_team_escalation_policy": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_team_escalation_policy"
          }
        ]
      },
      "Nullablecreate_team_on_call_schedule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_team_on_call_schedule"
          }
        ]
      },
      "Nullablecreate_team_signal_rule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_team_signal_rule"
          }
        ]
      },
      "Nullablecreate_ticket": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_ticket"
          }
        ]
      },
      "Nullablecreate_ticketing_priority": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_ticketing_priority"
          }
        ]
      },
      "Nullablecreate_webhook": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_webhook"
          }
        ]
      },
      "Nullabledebug_signals_expression": {
        "allOf": [
          {
            "$ref": "#/components/schemas/debug_signals_expression"
          }
        ]
      },
      "Nullableingest_catalog_data": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ingest_catalog_data"
          }
        ]
      },
      "Nullablepatch_scim_user": {
        "allOf": [
          {
            "$ref": "#/components/schemas/patch_scim_user"
          }
        ]
      },
      "Nullablepublish_post_mortem_report": {
        "allOf": [
          {
            "$ref": "#/components/schemas/publish_post_mortem_report"
          }
        ]
      },
      "Nullablereorder_post_mortem_reasons": {
        "allOf": [
          {
            "$ref": "#/components/schemas/reorder_post_mortem_reasons"
          }
        ]
      },
      "Nullableupdate_aws_cloudtrail_batch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_aws_cloudtrail_batch"
          }
        ]
      },
      "Nullableupdate_aws_connection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_aws_connection"
          }
        ]
      },
      "Nullableupdate_call_route": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_call_route"
          }
        ]
      },
      "Nullableupdate_change": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_change"
          }
        ]
      },
      "Nullableupdate_change_event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_change_event"
          }
        ]
      },
      "Nullableupdate_change_identity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_change_identity"
          }
        ]
      },
      "Nullableupdate_checklist_template": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_checklist_template"
          }
        ]
      },
      "Nullableupdate_comment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_comment"
          }
        ]
      },
      "Nullableupdate_custom_field_definition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_custom_field_definition"
          }
        ]
      },
      "Nullableupdate_environment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_environment"
          }
        ]
      },
      "Nullableupdate_functionality": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_functionality"
          }
        ]
      },
      "Nullableupdate_incident": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_incident"
          }
        ]
      },
      "Nullableupdate_incident_alert_primary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_incident_alert_primary"
          }
        ]
      },
      "Nullableupdate_incident_change_event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_incident_change_event"
          }
        ]
      },
      "Nullableupdate_incident_chat_message": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_incident_chat_message"
          }
        ]
      },
      "Nullableupdate_incident_impact_patch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_incident_impact_patch"
          }
        ]
      },
      "Nullableupdate_incident_impact_put": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_incident_impact_put"
          }
        ]
      },
      "Nullableupdate_incident_link": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_incident_link"
          }
        ]
      },
      "Nullableupdate_incident_note": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_incident_note"
          }
        ]
      },
      "Nullableupdate_incident_retrospective": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_incident_retrospective"
          }
        ]
      },
      "Nullableupdate_incident_retrospective_field": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_incident_retrospective_field"
          }
        ]
      },
      "Nullableupdate_incident_role": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_incident_role"
          }
        ]
      },
      "Nullableupdate_incident_task": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_incident_task"
          }
        ]
      },
      "Nullableupdate_incident_type": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_incident_type"
          }
        ]
      },
      "Nullableupdate_nunc_link": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_nunc_link"
          }
        ]
      },
      "Nullableupdate_on_call_shift": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_on_call_shift"
          }
        ]
      },
      "Nullableupdate_post_mortem_field": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_post_mortem_field"
          }
        ]
      },
      "Nullableupdate_post_mortem_questions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_post_mortem_questions"
          }
        ]
      },
      "Nullableupdate_post_mortem_reason": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_post_mortem_reason"
          }
        ]
      },
      "Nullableupdate_post_mortem_report": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_post_mortem_report"
          }
        ]
      },
      "Nullableupdate_priority": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_priority"
          }
        ]
      },
      "Nullableupdate_runbook": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_runbook"
          }
        ]
      },
      "Nullableupdate_runbook_execution_step": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_runbook_execution_step"
          }
        ]
      },
      "Nullableupdate_saved_search": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_saved_search"
          }
        ]
      },
      "Nullableupdate_scheduled_maintenance": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_scheduled_maintenance"
          }
        ]
      },
      "Nullableupdate_scim_group": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_scim_group"
          }
        ]
      },
      "Nullableupdate_scim_user": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_scim_user"
          }
        ]
      },
      "Nullableupdate_service": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_service"
          }
        ]
      },
      "Nullableupdate_service_dependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_service_dependency"
          }
        ]
      },
      "Nullableupdate_severity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_severity"
          }
        ]
      },
      "Nullableupdate_severity_matrix": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_severity_matrix"
          }
        ]
      },
      "Nullableupdate_severity_matrix_condition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_severity_matrix_condition"
          }
        ]
      },
      "Nullableupdate_severity_matrix_impact": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_severity_matrix_impact"
          }
        ]
      },
      "Nullableupdate_signals_alert": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_signals_alert"
          }
        ]
      },
      "Nullableupdate_signals_alert_grouping_configuration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_signals_alert_grouping_configuration"
          }
        ]
      },
      "Nullableupdate_signals_email_target": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_signals_email_target"
          }
        ]
      },
      "Nullableupdate_signals_webhook_target": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_signals_webhook_target"
          }
        ]
      },
      "Nullableupdate_status_update_template": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_status_update_template"
          }
        ]
      },
      "Nullableupdate_statuspage_connection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_statuspage_connection"
          }
        ]
      },
      "Nullableupdate_task_list": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_task_list"
          }
        ]
      },
      "Nullableupdate_team": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_team"
          }
        ]
      },
      "Nullableupdate_team_escalation_policy": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_team_escalation_policy"
          }
        ]
      },
      "Nullableupdate_team_on_call_schedule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_team_on_call_schedule"
          }
        ]
      },
      "Nullableupdate_team_signal_rule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_team_signal_rule"
          }
        ]
      },
      "Nullableupdate_ticket": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_ticket"
          }
        ]
      },
      "Nullableupdate_ticketing_priority": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_ticketing_priority"
          }
        ]
      },
      "Nullableupdate_vote": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_vote"
          }
        ]
      },
      "Nullableupdate_webhook": {
        "allOf": [
          {
            "$ref": "#/components/schemas/update_webhook"
          }
        ]
      },
      "NuncComponentEntity": {
        "properties": {
          "component_group_id": {
            "nullable": true,
            "type": "string"
          },
          "infrastructure_id": {
            "nullable": true,
            "type": "string"
          },
          "infrastructure_type": {
            "nullable": true,
            "type": "string"
          },
          "label": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NuncComponentGroupEntity": {
        "properties": {
          "component_group_id": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NuncConditionEntity": {
        "properties": {
          "condition_id": {
            "nullable": true,
            "type": "string"
          },
          "condition_name": {
            "nullable": true,
            "type": "string"
          },
          "nunc_condition": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "NuncConnectionEntity": {
        "description": "NuncConnectionEntity model",
        "properties": {
          "button_background_color": {
            "nullable": true,
            "type": "string"
          },
          "button_text_color": {
            "nullable": true,
            "type": "string"
          },
          "cname": {
            "nullable": true,
            "type": "string"
          },
          "company_name": {
            "nullable": true,
            "type": "string"
          },
          "company_tos_url": {
            "nullable": true,
            "type": "string"
          },
          "company_website": {
            "nullable": true,
            "type": "string"
          },
          "component_groups": {
            "$ref": "#/components/schemas/NullableNuncComponentGroupEntity"
          },
          "components": {
            "$ref": "#/components/schemas/NullableNuncComponentEntity"
          },
          "conditions": {
            "$ref": "#/components/schemas/NullableNuncConditionEntity"
          },
          "cover_image": {
            "$ref": "#/components/schemas/NullableMediaImageEntity"
          },
          "dark_logo": {
            "$ref": "#/components/schemas/NullableMediaImageEntity"
          },
          "domain": {
            "nullable": true,
            "type": "string"
          },
          "enable_histogram": {
            "nullable": true,
            "type": "boolean"
          },
          "exposed_fields": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "favicon": {
            "$ref": "#/components/schemas/NullableMediaImageEntity"
          },
          "greeting_body": {
            "nullable": true,
            "type": "string"
          },
          "greeting_title": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "link_color": {
            "nullable": true,
            "type": "string"
          },
          "links": {
            "description": "List of links attached to this status page.",
            "items": {
              "$ref": "#/components/schemas/LinksEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "logo": {
            "$ref": "#/components/schemas/NullableMediaImageEntity"
          },
          "open_graph_image": {
            "$ref": "#/components/schemas/NullableMediaImageEntity"
          },
          "operational_message": {
            "nullable": true,
            "type": "string"
          },
          "primary_color": {
            "nullable": true,
            "type": "string"
          },
          "secondary_color": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "ui_version": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NuncConnectionEntityPaginated": {
        "description": "NuncConnectionEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/NuncConnectionEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "NuncEmailSubscribersEntity": {
        "description": "NuncEmailSubscribersEntity model",
        "properties": {
          "created_at": {
            "description": "The time the subscriber was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "email": {
            "description": "Email of the subscriber",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "UUID of the subscriber",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Nunc_NuncSubscription": {
        "description": "Nunc_NuncSubscription model",
        "properties": {
          "response": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrganizationEntity": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Organizations_CustomFieldDefinitionEntity": {
        "description": "Organizations_CustomFieldDefinitionEntity model",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "display_name": {
            "nullable": true,
            "type": "string"
          },
          "field_id": {
            "nullable": true,
            "type": "string"
          },
          "field_type": {
            "nullable": true,
            "type": "string"
          },
          "permissible_values": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "required": {
            "nullable": true,
            "type": "boolean"
          },
          "required_at_milestone_id": {
            "description": "The milestone at which this field is required, if `required` is set to `true`. When null, a required field is always required.",
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaginationEntity": {
        "properties": {
          "count": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "items": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "last": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "next": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "page": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "prev": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PongEntity": {
        "description": "PongEntity model",
        "properties": {
          "actor": {
            "$ref": "#/components/schemas/NullableActorEntity"
          },
          "organization": {
            "$ref": "#/components/schemas/NullableOrganizationEntity"
          },
          "response": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostMortems_PostMortemReportEntity": {
        "description": "PostMortems_PostMortemReportEntity model",
        "properties": {
          "additional_details": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "calendar_events": {
            "$ref": "#/components/schemas/NullableCalendars_EventEntity"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "incident": {
            "$ref": "#/components/schemas/NullableIncidentEntity"
          },
          "incident_id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "questions": {
            "$ref": "#/components/schemas/NullablePostMortems_QuestionEntity"
          },
          "retrospective_id": {
            "nullable": true,
            "type": "string"
          },
          "retrospective_note": {
            "nullable": true,
            "type": "string"
          },
          "retrospective_shim": {
            "nullable": true,
            "type": "boolean"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "tag_list": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostMortems_PostMortemReportEntityPaginated": {
        "description": "PostMortems_PostMortemReportEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/PostMortems_PostMortemReportEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "PostMortems_QuestionEntity": {
        "properties": {
          "available_options": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "body": {
            "nullable": true,
            "type": "string"
          },
          "conversations": {
            "items": {
              "$ref": "#/components/schemas/Conversations_API_Entities_Reference"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "is_required": {
            "nullable": true,
            "type": "boolean"
          },
          "kind": {
            "nullable": true,
            "type": "string"
          },
          "question_type_id": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "tooltip": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostMortems_QuestionTypeEntity": {
        "description": "PostMortems_QuestionTypeEntity model",
        "properties": {
          "available_options": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "is_required": {
            "nullable": true,
            "type": "boolean"
          },
          "kind": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "tooltip": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostMortems_QuestionTypeEntityPaginated": {
        "description": "PostMortems_QuestionTypeEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/PostMortems_QuestionTypeEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "PostMortems_ReasonEntity": {
        "description": "PostMortems_ReasonEntity model",
        "properties": {
          "conversations": {
            "items": {
              "$ref": "#/components/schemas/Conversations_API_Entities_Reference"
            },
            "nullable": true,
            "type": "array"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostMortems_ReasonEntityPaginated": {
        "description": "PostMortems_ReasonEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/PostMortems_ReasonEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "PostMortems_SectionFieldEntity": {
        "description": "PostMortems_SectionFieldEntity model",
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PriorityEntity": {
        "description": "PriorityEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "default": {
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PublicAPI_V1_BootstrapEntity": {
        "description": "PublicAPI_V1_BootstrapEntity model",
        "properties": {
          "posthog_write_key": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PublicAPI_V1_FormConfigurations_SelectedValueEntity": {
        "description": "PublicAPI_V1_FormConfigurations_SelectedValueEntity model",
        "properties": {
          "template": {
            "description": "The template for the selected value",
            "nullable": true,
            "properties": {},
            "type": "object"
          }
        },
        "type": "object"
      },
      "PublicAPI_V1_Incidents_SuccinctEntity": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "number": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PublicAPI_V1_Incidents_TranscriptEntity": {
        "description": "PublicAPI_V1_Incidents_TranscriptEntity model",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "created_at": {
            "description": "The time the transcript entry was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "The unique identifier for the transcript entry",
            "nullable": true,
            "type": "string"
          },
          "speaker": {
            "description": "The speaker for the transcript entry",
            "nullable": true,
            "type": "string"
          },
          "start": {
            "description": "The start time for the transcript entry",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "until": {
            "description": "The end time for the transcript entry",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "updated_at": {
            "description": "The time the transcript entry was last updated",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "words": {
            "description": "The words spoken for the transcript entry",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PublicAPI_V1_Integrations_AuthedProviderEntity": {
        "description": "PublicAPI_V1_Integrations_AuthedProviderEntity model",
        "properties": {
          "authorized_email": {
            "description": "The email of the user who authorized the integration",
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "integration_default": {
            "nullable": true,
            "type": "boolean"
          },
          "is_expired": {
            "nullable": true,
            "type": "boolean"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          }
        },
        "type": "object"
      },
      "PublicAPI_V1_SimilarIncidentEntity": {
        "properties": {
          "distance": {
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportEntity": {
        "description": "ReportEntity model",
        "properties": {
          "bucket_period": {
            "nullable": true,
            "type": "string"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Reports_BucketEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "end_date": {
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "start_date": {
            "format": "date",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Reports_BucketEntity": {
        "properties": {
          "bucket": {
            "nullable": true,
            "type": "string"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/Reports_DataPointEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Reports_DataPointEntity": {
        "properties": {
          "key": {
            "nullable": true,
            "type": "string"
          },
          "value": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Retrospectives_FieldEntity": {
        "properties": {
          "help_text": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "is_required": {
            "nullable": true,
            "type": "boolean"
          },
          "label": {
            "nullable": true,
            "type": "string"
          },
          "permissible_values": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "schema": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "RetrospectivesFieldTypeText",
                "value": "text"
              },
              {
                "name": "RetrospectivesFieldTypeSingleSelect",
                "value": "single_select"
              },
              {
                "name": "RetrospectivesFieldTypeMultiSelect",
                "value": "multi_select"
              },
              {
                "name": "RetrospectivesFieldTypeNumeric",
                "value": "numeric"
              },
              {
                "name": "RetrospectivesFieldTypeDatetime",
                "value": "datetime"
              },
              {
                "name": "RetrospectivesFieldTypeDynamicInputGroup",
                "value": "dynamic_input_group"
              },
              {
                "name": "RetrospectivesFieldTypeMarkdown",
                "value": "markdown"
              },
              {
                "name": "RetrospectivesFieldTypeMarkdownText",
                "value": "markdown_text"
              }
            ]
          }
        },
        "type": "object"
      },
      "Retrospectives_IndexTemplateEntity": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "is_default": {
            "nullable": true,
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Retrospectives_IndexTemplateEntityPaginated": {
        "description": "Retrospectives_IndexTemplateEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Retrospectives_IndexTemplateEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Retrospectives_TemplateEntity": {
        "description": "Retrospectives_TemplateEntity model",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/Retrospectives_FieldEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "is_default": {
            "nullable": true,
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "sections": {
            "items": {
              "$ref": "#/components/schemas/Retrospectives_TemplateEntity_IncidentSectionEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Retrospectives_TemplateEntity_IncidentSectionEntity": {
        "properties": {
          "elements": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Rules_RuleEntity": {
        "properties": {
          "logic": {
            "description": "An unstructured object of key/value pairs describing the logic for applying the rule.",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "user_data": {
            "$ref": "#/components/schemas/NullableFHTypes_GenericEntity"
          }
        },
        "type": "object"
      },
      "RunbookEntity": {
        "description": "RunbookEntity model",
        "properties": {
          "attachment_rule": {
            "$ref": "#/components/schemas/NullableRules_RuleEntity"
          },
          "auto_attach_to_restricted_incidents": {
            "nullable": true,
            "type": "boolean"
          },
          "categories": {
            "description": "categories the runbook applies to",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "is_editable": {
            "nullable": true,
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/NullableTeamEntityLite"
          },
          "runbook_template_id": {
            "nullable": true,
            "type": "string"
          },
          "steps": {
            "items": {
              "$ref": "#/components/schemas/RunbookStepEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "tutorial": {
            "nullable": true,
            "type": "boolean"
          },
          "type": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "votes": {
            "$ref": "#/components/schemas/NullableVotesEntity"
          }
        },
        "type": "object"
      },
      "RunbookStepEntity": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/NullableRunbooks_ActionsEntity"
          },
          "action_elements": {
            "description": "A list of action elements",
            "items": {
              "properties": {},
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "action_id": {
            "nullable": true,
            "type": "string"
          },
          "automatic": {
            "nullable": true,
            "type": "boolean"
          },
          "config": {
            "description": "An unstructured object of key/value pairs describing the config settings for the step.",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "delay_duration": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "repeats": {
            "nullable": true,
            "type": "boolean"
          },
          "repeats_duration": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "reruns": {
            "nullable": true,
            "type": "boolean"
          },
          "rule": {
            "$ref": "#/components/schemas/NullableRules_RuleEntity"
          },
          "step_elements": {
            "description": "A list of step elements",
            "items": {
              "properties": {},
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "step_id": {
            "nullable": true,
            "type": "string"
          },
          "votes": {
            "$ref": "#/components/schemas/NullableVotesEntity"
          }
        },
        "type": "object"
      },
      "Runbooks_ActionConfigEntity": {
        "properties": {
          "documentation_url": {
            "description": "Location of documentation for this action",
            "nullable": true,
            "type": "string"
          },
          "elements": {
            "description": "A list of elements that can be used in this action configuration",
            "items": {
              "$ref": "#/components/schemas/Runbooks_ElementEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Runbooks_ActionsEntity": {
        "properties": {
          "automatable": {
            "nullable": true,
            "type": "boolean"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/NullableRunbooks_ActionConfigEntity"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "default_logic": {
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "default_rule_data": {
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "integration": {
            "$ref": "#/components/schemas/NullableIntegrations_IntegrationEntity"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "prerequisites": {
            "items": {
              "properties": {},
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "repeatable": {
            "nullable": true,
            "type": "boolean"
          },
          "rerunnable": {
            "nullable": true,
            "type": "boolean"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "supported_runbook_types": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Runbooks_ActionsEntityPaginated": {
        "description": "Runbooks_ActionsEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Runbooks_ActionsEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Runbooks_ElementDynamicSelectEntity": {
        "properties": {
          "async_url": {
            "nullable": true,
            "type": "string"
          },
          "clearable": {
            "nullable": true,
            "type": "boolean"
          },
          "default_value": {
            "$ref": "#/components/schemas/NullableRunbooks_ElementDynamicSelectEntity_SelectOptionEntity"
          },
          "is_multi": {
            "nullable": true,
            "type": "boolean"
          },
          "label": {
            "nullable": true,
            "type": "string"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/Runbooks_ElementDynamicSelectEntity_SelectOptionEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "placeholder": {
            "nullable": true,
            "type": "string"
          },
          "required": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Runbooks_ElementDynamicSelectEntity_SelectOptionEntity": {
        "properties": {
          "label": {
            "nullable": true,
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Runbooks_ElementEntity": {
        "properties": {
          "dynamic_select": {
            "$ref": "#/components/schemas/NullableRunbooks_ElementDynamicSelectEntity"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "input": {
            "$ref": "#/components/schemas/NullableRunbooks_ElementInputEntity"
          },
          "markdown": {
            "$ref": "#/components/schemas/NullableRunbooks_ElementMarkdownEntity"
          },
          "plain_text": {
            "$ref": "#/components/schemas/NullableRunbooks_ElementMarkdownEntity"
          },
          "textarea": {
            "$ref": "#/components/schemas/NullableRunbooks_ElementTextareaEntity"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Runbooks_ElementInputEntity": {
        "properties": {
          "default_value": {
            "nullable": true,
            "type": "string"
          },
          "label": {
            "nullable": true,
            "type": "string"
          },
          "placeholder": {
            "nullable": true,
            "type": "string"
          },
          "required": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Runbooks_ElementMarkdownEntity": {
        "properties": {
          "text": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Runbooks_ElementTextareaEntity": {
        "properties": {
          "default_value": {
            "nullable": true,
            "type": "string"
          },
          "label": {
            "nullable": true,
            "type": "string"
          },
          "placeholder": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Runbooks_ExecutionEntity": {
        "description": "Runbooks_ExecutionEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "nullable": true,
            "type": "string"
          },
          "executed_for": {
            "$ref": "#/components/schemas/NullableRunbooks_ExecutionEntity_ExecutedForEntity"
          },
          "has_been_rerun": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "runbook": {
            "$ref": "#/components/schemas/NullableSlimRunbookEntity"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "status_reason": {
            "nullable": true,
            "type": "string"
          },
          "status_reason_message": {
            "nullable": true,
            "type": "string"
          },
          "steps": {
            "$ref": "#/components/schemas/NullableRunbooks_ExecutionStepEntity"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Runbooks_ExecutionEntityPaginated": {
        "description": "Runbooks_ExecutionEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Runbooks_ExecutionEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Runbooks_ExecutionEntity_ExecutedForEntity": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Runbooks_ExecutionStepEntity": {
        "properties": {
          "action_slug": {
            "nullable": true,
            "type": "string"
          },
          "action_type": {
            "nullable": true,
            "type": "string"
          },
          "automatic": {
            "nullable": true,
            "type": "boolean"
          },
          "conference_bridge": {
            "$ref": "#/components/schemas/NullableIncidents_ConferenceBridgeEntity"
          },
          "config": {
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "executable": {
            "nullable": true,
            "type": "boolean"
          },
          "execution": {
            "$ref": "#/components/schemas/NullableRunbooks_ExecutionStepExecutionEntity"
          },
          "has_been_rerun": {
            "nullable": true,
            "type": "boolean"
          },
          "has_been_retried": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "integration_name": {
            "nullable": true,
            "type": "string"
          },
          "integration_slug": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "repeatable": {
            "nullable": true,
            "type": "boolean"
          },
          "repeats": {
            "nullable": true,
            "type": "boolean"
          },
          "repeats_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "repeats_duration": {
            "description": "ISO8601 formatted duration string",
            "nullable": true,
            "type": "string"
          },
          "rule": {
            "$ref": "#/components/schemas/NullableRules_RuleEntity"
          },
          "step_elements": {
            "items": {
              "properties": {},
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Runbooks_ExecutionStepExecutionEntity": {
        "properties": {
          "data": {
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "error": {
            "nullable": true,
            "type": "string"
          },
          "performed_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "performed_by": {
            "$ref": "#/components/schemas/NullableActorEntity"
          },
          "scheduled_for": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "RunbooksExecutionstepexecutionStateInitial",
                "value": "initial"
              },
              {
                "name": "RunbooksExecutionstepexecutionStatePending",
                "value": "pending"
              },
              {
                "name": "RunbooksExecutionstepexecutionStateScheduled",
                "value": "scheduled"
              },
              {
                "name": "RunbooksExecutionstepexecutionStateStarted",
                "value": "started"
              },
              {
                "name": "RunbooksExecutionstepexecutionStateDismissed",
                "value": "dismissed"
              },
              {
                "name": "RunbooksExecutionstepexecutionStateCompleted",
                "value": "completed"
              },
              {
                "name": "RunbooksExecutionstepexecutionStateErrored",
                "value": "errored"
              }
            ]
          },
          "webhook_delivery": {
            "$ref": "#/components/schemas/NullableRunbooks_WebhookDeliveryEntity"
          }
        },
        "type": "object"
      },
      "Runbooks_WebhookDeliveryEntity": {
        "properties": {
          "headers": {
            "nullable": true,
            "type": "string"
          },
          "status_code": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SavedSearchEntity": {
        "description": "SavedSearchEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "filter_values": {
            "description": "An unstructured key/value pair of saved values for searching",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "is_private": {
            "description": "Whether or not this saved search is private",
            "nullable": true,
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "resource_type": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "user_id": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScheduleEntity": {
        "properties": {
          "discarded": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "integration": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScheduleEntityPaginated": {
        "description": "ScheduleEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ScheduleEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "ScheduledMaintenanceEntity": {
        "description": "ScheduledMaintenanceEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ends_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "impacts": {
            "items": {
              "$ref": "#/components/schemas/ScheduledMaintenancesImpactEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "incident": {
            "$ref": "#/components/schemas/NullableIncidentEntity"
          },
          "labels": {
            "description": "An object of label key and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "starts_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "status_pages": {
            "items": {
              "$ref": "#/components/schemas/ScheduledMaintenancesStatusPageEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScheduledMaintenancesImpactEntity": {
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/NullableSeverityMatrix_ConditionEntity"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "impact": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScheduledMaintenancesStatusPageEntity": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "integration_id": {
            "nullable": true,
            "type": "string"
          },
          "integration_name": {
            "nullable": true,
            "type": "string"
          },
          "integration_slug": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceChildDependencyEntity": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "notes": {
            "nullable": true,
            "type": "string"
          },
          "service": {
            "$ref": "#/components/schemas/NullableServiceEntity"
          },
          "type": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceDependencyEntity": {
        "description": "ServiceDependencyEntity model",
        "properties": {
          "connected_service": {
            "$ref": "#/components/schemas/NullableServiceEntity"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "notes": {
            "nullable": true,
            "type": "string"
          },
          "service": {
            "$ref": "#/components/schemas/NullableServiceEntity"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceEntity": {
        "description": "ServiceEntity model",
        "properties": {
          "active_incidents": {
            "description": "List of active incident guids",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "alert_on_add": {
            "nullable": true,
            "type": "boolean"
          },
          "allowed_params": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "auto_add_responding_team": {
            "nullable": true,
            "type": "boolean"
          },
          "checklists": {
            "description": "List of checklists associated with a service",
            "items": {
              "$ref": "#/components/schemas/ChecklistTemplateEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "completed_checks": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "external_resources": {
            "description": "Information about known linkages to representations of services outside of FireHydrant.",
            "items": {
              "$ref": "#/components/schemas/ExternalResourceEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "functionalities": {
            "description": "List of functionalities attached to the service",
            "items": {
              "$ref": "#/components/schemas/FunctionalityEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "An object of label key and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "last_import": {
            "$ref": "#/components/schemas/NullableImports_ImportableResourceEntity"
          },
          "links": {
            "description": "List of links attached to this service.",
            "items": {
              "$ref": "#/components/schemas/LinksEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "managed_by": {
            "description": "If set, this field indicates that the service is managed by an integration and thus cannot be set manually",
            "nullable": true,
            "type": "string"
          },
          "managed_by_settings": {
            "description": "Indicates the settings of the catalog that manages this service",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/NullableTeamEntityLite"
          },
          "service_checklist_updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "service_tier": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "teams": {
            "description": "List of teams attached to the service",
            "items": {
              "$ref": "#/components/schemas/TeamEntityLite"
            },
            "nullable": true,
            "type": "array"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          }
        },
        "type": "object"
      },
      "ServiceEntityChecklist": {
        "properties": {
          "alert_on_add": {
            "nullable": true,
            "type": "boolean"
          },
          "allowed_params": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "auto_add_responding_team": {
            "nullable": true,
            "type": "boolean"
          },
          "completed_checks": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "An object of label key and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/NullableTeamEntityLite"
          },
          "service_checklist_updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "service_tier": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceEntityLite": {
        "description": "ServiceEntityLite model",
        "properties": {
          "alert_on_add": {
            "nullable": true,
            "type": "boolean"
          },
          "allowed_params": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "auto_add_responding_team": {
            "nullable": true,
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "An object of label key and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "service_tier": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceEntityPaginated": {
        "description": "ServiceEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ServiceEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "ServiceLinkEntity": {
        "description": "ServiceLinkEntity model",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/NullableServiceEntity"
          },
          "status_code": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ServiceParentDependencyEntity": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "notes": {
            "nullable": true,
            "type": "string"
          },
          "service": {
            "$ref": "#/components/schemas/NullableServiceEntity"
          },
          "type": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceWithAllDependenciesEntity": {
        "description": "ServiceWithAllDependenciesEntity model",
        "properties": {
          "child_service_dependencies": {
            "description": "Services that depend on this service",
            "items": {
              "$ref": "#/components/schemas/ServiceChildDependencyEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "parent_service_dependencies": {
            "description": "Services that this service is dependent on",
            "items": {
              "$ref": "#/components/schemas/ServiceParentDependencyEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "service_dependencies": {
            "description": "All dependencies. Can be one of: ServiceChildDependencyEntity, ServiceParentDependencyEntity",
            "items": {
              "properties": {},
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "SeverityEntity": {
        "description": "SeverityEntity model",
        "properties": {
          "color": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "system_record": {
            "nullable": true,
            "type": "boolean"
          },
          "type": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SeverityEntityPaginated": {
        "description": "SeverityEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SeverityEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "SeverityMatrix_ConditionEntity": {
        "description": "SeverityMatrix_ConditionEntity model",
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "description": "Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SeverityMatrix_ImpactEntity": {
        "description": "SeverityMatrix_ImpactEntity model",
        "properties": {
          "affects_id": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SeverityMatrix_ItemEntity": {
        "properties": {
          "condition_id": {
            "nullable": true,
            "type": "string"
          },
          "impact_id": {
            "nullable": true,
            "type": "string"
          },
          "impact_type": {
            "nullable": true,
            "type": "string"
          },
          "severity": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SeverityMatrix_SeverityMatrixEntity": {
        "description": "SeverityMatrix_SeverityMatrixEntity model",
        "properties": {
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/SeverityMatrix_ConditionEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "impacts": {
            "items": {
              "$ref": "#/components/schemas/SeverityMatrix_ImpactEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "matrix": {
            "items": {
              "$ref": "#/components/schemas/SeverityMatrix_ItemEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Signals_API_Analytics_GroupedMetricsEntity": {
        "description": "Signals_API_Analytics_GroupedMetricsEntity model",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NullableSignals_API_Analytics_GroupedMetricsEntity_MetricEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_Analytics_GroupedMetricsEntity_MetricEntity": {
        "properties": {
          "acked_percentage": {
            "description": "The percentage of acknowledged alerts",
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "grouped_id": {
            "description": "The ID of the group",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "grouped_name": {
            "description": "The name of the group",
            "nullable": true,
            "type": "string"
          },
          "incidents_percentage": {
            "description": "The percentage of alerts that have incidents",
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "total_acked_alerts": {
            "description": "The total number of acknowledged alerts",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "total_incidents": {
            "description": "The total number of incidents",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "total_opened_alerts": {
            "description": "The total number of opened alerts",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Signals_API_Analytics_MttxMetricsEntity": {
        "description": "Signals_API_Analytics_MttxMetricsEntity model",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NullableSignals_API_Analytics_MttxMetricsEntity_MetricEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_Analytics_MttxMetricsEntity_MetricEntity": {
        "properties": {
          "mtta": {
            "description": "The mean time to acknowledge (MTTA) alerts in seconds",
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "mttr": {
            "description": "The mean time to resolve (MTTR) alerts in seconds",
            "format": "float",
            "nullable": true,
            "type": "number"
          }
        },
        "type": "object"
      },
      "Signals_API_Analytics_NoiseMetricsEntity": {
        "description": "Signals_API_Analytics_NoiseMetricsEntity model",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NullableSignals_API_Analytics_NoiseMetricsEntity_MetricEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_Analytics_NoiseMetricsEntity_MetricEntity": {
        "properties": {
          "bucket": {
            "description": "The time bucket",
            "nullable": true,
            "type": "string"
          },
          "noisy_alerts": {
            "description": "The number of alerts marked as noise",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "percentage": {
            "description": "The percentage of alerts that are noise",
            "format": "float",
            "nullable": true,
            "type": "number"
          },
          "total_alerts": {
            "description": "The total number of alerts",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Signals_API_Analytics_TimeseriesPointEntity": {
        "description": "Signals_API_Analytics_TimeseriesPointEntity model",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NullableSignals_API_Analytics_TimeseriesPointEntity_MetricEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_Analytics_TimeseriesPointEntity_MetricEntity": {
        "properties": {
          "bucket": {
            "description": "The time bucket",
            "nullable": true,
            "type": "string"
          },
          "total_acked_alerts": {
            "description": "The total number of acknowledged alerts",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "total_incidents": {
            "description": "The total number of incidents",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "total_opened_alerts": {
            "description": "The total number of opened alerts",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Signals_API_CallRouteEntity": {
        "description": "Signals_API_CallRouteEntity model",
        "properties": {
          "connect_mode": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "SignalsApiCallrouteConnectModeConnectModeConference",
                "value": "CONNECT_MODE_CONFERENCE"
              },
              {
                "name": "SignalsApiCallrouteConnectModeConnectModeDirectDial",
                "value": "CONNECT_MODE_DIRECT_DIAL"
              }
            ]
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "greeting_message": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "phone_number": {
            "nullable": true,
            "type": "string"
          },
          "routing_mode": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "SignalsApiCallrouteRoutingModeRoutingModeTakeMessage",
                "value": "ROUTING_MODE_TAKE_MESSAGE"
              },
              {
                "name": "SignalsApiCallrouteRoutingModeRoutingModeDirectConnect",
                "value": "ROUTING_MODE_DIRECT_CONNECT"
              }
            ]
          },
          "steps": {
            "$ref": "#/components/schemas/NullableSignals_API_CallRouteStepEntity"
          },
          "target": {
            "$ref": "#/components/schemas/NullableSignals_API_TargetEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_CallRouteEntityPaginated": {
        "description": "Signals_API_CallRouteEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_CallRouteEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_CallRouteStepEntity": {
        "properties": {
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "target": {
            "$ref": "#/components/schemas/NullableSignals_API_TargetEntity"
          },
          "timeout": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_EmailTargetEntity": {
        "description": "Signals_API_EmailTargetEntity model",
        "properties": {
          "allowed_senders": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "level_cel": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "rule_matching_strategy": {
            "nullable": true,
            "type": "string"
          },
          "rules": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "status_cel": {
            "nullable": true,
            "type": "string"
          },
          "target": {
            "$ref": "#/components/schemas/NullableSignals_API_TargetEntity"
          },
          "team_id": {
            "description": "The team ID that the email target belongs to, if applicable",
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_EmailTargetEntityPaginated": {
        "description": "Signals_API_EmailTargetEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_EmailTargetEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_EscalationPolicyEntity": {
        "description": "Signals_API_EscalationPolicyEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "default": {
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "handoff_step": {
            "$ref": "#/components/schemas/NullableSignals_API_EscalationPolicyHandoffStepEntity"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "notification_priority_policies": {
            "description": "Priority-specific policies for dynamic escalation policies",
            "items": {
              "$ref": "#/components/schemas/Signals_API_NotificationPriorityPolicyEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "repetitions": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "step_strategy": {
            "nullable": true,
            "type": "string"
          },
          "steps": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_EscalationPolicyStepEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_EscalationPolicyEntityPaginated": {
        "description": "Signals_API_EscalationPolicyEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_EscalationPolicyEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_EscalationPolicyHandoffStepEntity": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "target": {
            "$ref": "#/components/schemas/NullableSignals_API_TargetEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_EscalationPolicyStepEntity": {
        "properties": {
          "distribution_type": {
            "description": "The distribution type for the step",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "SignalsApiEscalationpolicystepDistributionTypeUnspecified",
                "value": "unspecified"
              },
              {
                "name": "SignalsApiEscalationpolicystepDistributionTypeRoundRobinByAlert",
                "value": "round_robin_by_alert"
              },
              {
                "name": "SignalsApiEscalationpolicystepDistributionTypeRoundRobinByEscalationPolicy",
                "value": "round_robin_by_escalation_policy"
              }
            ]
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "next_target_for_round_robin": {
            "$ref": "#/components/schemas/NullableSignals_API_TargetEntity"
          },
          "parent_position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "priorities": {
            "description": "The notification priorities that this step is assigned to. Valid values are HIGH, MEDIUM, and LOW.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "targets": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_TargetEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "timeout": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_GroupingEntity": {
        "description": "Signals_API_GroupingEntity model",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/NullableSignals_API_GroupingEntity_ActionEntity"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "reference_alert_time_period": {
            "nullable": true,
            "type": "string"
          },
          "strategy": {
            "$ref": "#/components/schemas/NullableSignals_API_GroupingEntity_StrategyEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_GroupingEntityPaginated": {
        "description": "Signals_API_GroupingEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_GroupingEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_GroupingEntity_ActionEntity": {
        "properties": {
          "fyi": {
            "$ref": "#/components/schemas/NullableSignals_API_GroupingEntity_ActionEntity_FyiEntity"
          },
          "link": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Signals_API_GroupingEntity_ActionEntity_FyiEntity": {
        "properties": {
          "slack_channels": {
            "items": {
              "$ref": "#/components/schemas/Integrations_Slack_SlackChannelEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Signals_API_GroupingEntity_StrategyEntity": {
        "properties": {
          "substring": {
            "$ref": "#/components/schemas/NullableSignals_API_GroupingEntity_StrategyEntity_SubstringEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_GroupingEntity_StrategyEntity_SubstringEntity": {
        "properties": {
          "field_name": {
            "nullable": true,
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_HackerModeEntity": {
        "description": "Signals_API_HackerModeEntity model",
        "properties": {
          "enabled": {
            "nullable": true,
            "type": "boolean"
          },
          "url": {
            "nullable": true,
            "type": "string"
          },
          "url_key": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_IngestKeyEntity": {
        "description": "Signals_API_IngestKeyEntity model",
        "properties": {
          "url": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_NotificationPolicyItemComplianceEntity": {
        "properties": {
          "is_compliant": {
            "nullable": true,
            "type": "boolean"
          },
          "notification_policy_item_id": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_NotificationPolicyItemEntity": {
        "description": "Signals_API_NotificationPolicyItemEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "max_delay": {
            "description": "The maximum delay for notifications",
            "nullable": true,
            "type": "string"
          },
          "notification_group_method": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "SignalsApiNotificationpolicyitemNotificationGroupMethodAny",
                "value": "any"
              },
              {
                "name": "SignalsApiNotificationpolicyitemNotificationGroupMethodPush",
                "value": "push"
              },
              {
                "name": "SignalsApiNotificationpolicyitemNotificationGroupMethodEmail",
                "value": "email"
              },
              {
                "name": "SignalsApiNotificationpolicyitemNotificationGroupMethodVoice",
                "value": "voice"
              },
              {
                "name": "SignalsApiNotificationpolicyitemNotificationGroupMethodMobileText",
                "value": "mobile_text"
              },
              {
                "name": "SignalsApiNotificationpolicyitemNotificationGroupMethodChat",
                "value": "chat"
              }
            ]
          },
          "priority": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "SignalsApiNotificationpolicyitemPriorityHigh",
                "value": "HIGH"
              },
              {
                "name": "SignalsApiNotificationpolicyitemPriorityMedium",
                "value": "MEDIUM"
              },
              {
                "name": "SignalsApiNotificationpolicyitemPriorityLow",
                "value": "LOW"
              }
            ]
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_NotificationPolicyItemEntityPaginated": {
        "description": "Signals_API_NotificationPolicyItemEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_NotificationPolicyItemEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_NotificationPriorityPolicyEntity": {
        "properties": {
          "handoff_step": {
            "$ref": "#/components/schemas/NullableSignals_API_EscalationPolicyHandoffStepEntity"
          },
          "notification_priority": {
            "description": "The notification priority this policy handles (HIGH, MEDIUM, or LOW)",
            "nullable": true,
            "type": "string"
          },
          "repetitions": {
            "description": "Number of repetitions for this priority",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "steps": {
            "description": "Steps for this priority",
            "items": {
              "$ref": "#/components/schemas/Signals_API_EscalationPolicyStepEntity"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Signals_API_OnCallRestrictionEntity": {
        "properties": {
          "end_day": {
            "nullable": true,
            "type": "string"
          },
          "end_time": {
            "nullable": true,
            "type": "string"
          },
          "start_day": {
            "nullable": true,
            "type": "string"
          },
          "start_time": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_OnCallRotationEntity": {
        "properties": {
          "color": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "members": {
            "items": {
              "$ref": "#/components/schemas/SuccinctEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "restrictions": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_OnCallRestrictionEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "shifts": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_OnCallShiftEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "slack_user_group_id": {
            "nullable": true,
            "type": "string"
          },
          "strategy": {
            "$ref": "#/components/schemas/NullableSignals_API_OnCallStrategyEntity"
          },
          "team": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          },
          "time_zone": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_OnCallScheduleEntity": {
        "description": "Signals_API_OnCallScheduleEntity model",
        "properties": {
          "color": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "members": {
            "items": {
              "$ref": "#/components/schemas/SuccinctEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "restrictions": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_OnCallRestrictionEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "rotations": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_OnCallRotationEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "shifts": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_OnCallShiftEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "signals_ical_url": {
            "nullable": true,
            "type": "string"
          },
          "slack_user_group_id": {
            "nullable": true,
            "type": "string"
          },
          "strategy": {
            "$ref": "#/components/schemas/NullableSignals_API_OnCallStrategyEntity"
          },
          "team": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          },
          "time_zone": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_OnCallScheduleEntityPaginated": {
        "description": "Signals_API_OnCallScheduleEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_OnCallScheduleEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_OnCallShiftEntity": {
        "description": "Signals_API_OnCallShiftEntity model",
        "properties": {
          "color": {
            "nullable": true,
            "type": "string"
          },
          "coverage_request": {
            "nullable": true,
            "type": "string"
          },
          "end_time": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "on_call_rotation": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          },
          "on_call_schedule": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          },
          "start_time": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "team": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          },
          "time_zone": {
            "nullable": true,
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_OnCallStrategyEntity": {
        "properties": {
          "handoff_day": {
            "nullable": true,
            "type": "string"
          },
          "handoff_time": {
            "nullable": true,
            "type": "string"
          },
          "shift_duration": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_OrganizationOnCallRotationEntity": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "current_shift": {
            "$ref": "#/components/schemas/NullableSignals_API_OnCallShiftEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "next_shift": {
            "$ref": "#/components/schemas/NullableSignals_API_OnCallShiftEntity"
          },
          "time_zone": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_OrganizationOnCallScheduleEntity": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "current_shift": {
            "$ref": "#/components/schemas/NullableSignals_API_OnCallShiftEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "next_shift": {
            "$ref": "#/components/schemas/NullableSignals_API_OnCallShiftEntity"
          },
          "rotations": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_OrganizationOnCallRotationEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "team": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          },
          "time_zone": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_OrganizationOnCallScheduleEntityPaginated": {
        "description": "Signals_API_OrganizationOnCallScheduleEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_OrganizationOnCallScheduleEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_RuleEntity": {
        "description": "Signals_API_RuleEntity model",
        "properties": {
          "create_incident_condition_when": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "SignalsApiRuleCreateIncidentConditionWhenWhenUnspecified",
                "value": "WHEN_UNSPECIFIED"
              },
              {
                "name": "SignalsApiRuleCreateIncidentConditionWhenWhenAlways",
                "value": "WHEN_ALWAYS"
              }
            ]
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "deduplication_expiry": {
            "description": "Duration for deduplicating similar alerts (ISO8601 duration format e.g., 'PT30M', 'PT2H', 'P1D')",
            "example": "PT1H",
            "nullable": true,
            "type": "string"
          },
          "expression": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "incident_type": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "notification_priority_override": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "SignalsApiRuleNotificationPriorityOverrideHigh",
                "value": "HIGH"
              },
              {
                "name": "SignalsApiRuleNotificationPriorityOverrideMedium",
                "value": "MEDIUM"
              },
              {
                "name": "SignalsApiRuleNotificationPriorityOverrideLow",
                "value": "LOW"
              }
            ]
          },
          "target": {
            "$ref": "#/components/schemas/NullableSignals_API_TargetEntity"
          },
          "team_id": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_RuleEntityPaginated": {
        "description": "Signals_API_RuleEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_RuleEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_TargetEntity": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "is_pageable": {
            "nullable": true,
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_TransposerEntity": {
        "description": "Signals_API_TransposerEntity model",
        "properties": {
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "editable": {
            "nullable": true,
            "type": "boolean"
          },
          "example_payload": {
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "expected": {
            "nullable": true,
            "type": "string"
          },
          "expression": {
            "nullable": true,
            "type": "string"
          },
          "ingest_url": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "updated_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "website": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_TransposerListEntity": {
        "description": "Signals_API_TransposerListEntity model",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NullableSignals_API_TransposerEntity"
          }
        },
        "type": "object"
      },
      "Signals_API_WebhookTargetEntity": {
        "description": "Signals_API_WebhookTargetEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "url": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Signals_API_WebhookTargetEntityPaginated": {
        "description": "Signals_API_WebhookTargetEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_WebhookTargetEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "SimilarIncidentEntityPaginated": {
        "description": "SimilarIncidentEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/PublicAPI_V1_SimilarIncidentEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "SlimRunbookEntity": {
        "properties": {
          "attachment_rule": {
            "$ref": "#/components/schemas/NullableRules_RuleEntity"
          },
          "categories": {
            "description": "categories the runbook applies to",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/NullableTeamEntityLite"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "StatusUpdateTemplateEntity": {
        "description": "StatusUpdateTemplateEntity model",
        "properties": {
          "body": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "discarded_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SuccinctEntity": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TagEntity": {
        "description": "TagEntity model",
        "properties": {
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TagEntityPaginated": {
        "description": "TagEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TagEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "TaskEntity": {
        "description": "TaskEntity model",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "due_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaskEntityPaginated": {
        "description": "TaskEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TaskEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "TaskListEntity": {
        "description": "TaskListEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "task_list_items": {
            "items": {
              "$ref": "#/components/schemas/TaskListItemEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaskListItemEntity": {
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamEntity": {
        "description": "TeamEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "default_signals_escalation_policy": {
            "$ref": "#/components/schemas/NullableSuccinctEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "functionalities": {
            "items": {
              "$ref": "#/components/schemas/FunctionalityEntityLite"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "in_support_hours": {
            "nullable": true,
            "type": "boolean"
          },
          "memberships": {
            "items": {
              "$ref": "#/components/schemas/MembershipEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "ms_teams_channel": {
            "$ref": "#/components/schemas/NullableIntegrations_MicrosoftTeamsV2_ChannelEntity"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "owned_checklist_templates": {
            "items": {
              "$ref": "#/components/schemas/ChecklistTemplateEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "owned_functionalities": {
            "items": {
              "$ref": "#/components/schemas/FunctionalityEntityLite"
            },
            "nullable": true,
            "type": "array"
          },
          "owned_runbooks": {
            "items": {
              "$ref": "#/components/schemas/SlimRunbookEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "owned_services": {
            "items": {
              "$ref": "#/components/schemas/ServiceEntityLite"
            },
            "nullable": true,
            "type": "array"
          },
          "responding_services": {
            "items": {
              "$ref": "#/components/schemas/ServiceEntityLite"
            },
            "nullable": true,
            "type": "array"
          },
          "services": {
            "items": {
              "$ref": "#/components/schemas/ServiceEntityLite"
            },
            "nullable": true,
            "type": "array"
          },
          "signals_ical_url": {
            "nullable": true,
            "type": "string"
          },
          "slack_channel": {
            "$ref": "#/components/schemas/NullableIntegrations_Slack_SlackChannelEntity"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamEntityLite": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "in_support_hours": {
            "nullable": true,
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "signals_ical_url": {
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamEntityPaginated": {
        "description": "TeamEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TeamEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "Ticketing_FieldMaps_MappableFieldEntity": {
        "description": "Ticketing_FieldMaps_MappableFieldEntity model",
        "properties": {
          "allowed_values": {
            "description": "The allowed values of the field",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "label": {
            "description": "The human-readable name of the field",
            "nullable": true,
            "type": "string"
          },
          "required": {
            "description": "If the field is required to be mapped",
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "The allowed type of the field",
            "nullable": true,
            "type": "string"
          },
          "value": {
            "description": "The ID of the field",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Ticketing_PriorityEntity": {
        "description": "Ticketing_PriorityEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Ticketing_ProjectConfigEntity": {
        "description": "Ticketing_ProjectConfigEntity model",
        "properties": {
          "connection_id": {
            "nullable": true,
            "type": "string"
          },
          "connection_type": {
            "nullable": true,
            "type": "string"
          },
          "details": {
            "description": "A config object containing details about the project config. Can be one of: Ticketing::JiraCloud::ProjectConfigEntity, Ticketing::JiraOnprem::ProjectConfigEntity, or Ticketing::Shortcut::ProjectConfigEntity",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "ticketing_project_id": {
            "nullable": true,
            "type": "string"
          },
          "ticketing_project_name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Ticketing_ProjectFieldMapBodyEntity": {
        "properties": {
          "cases": {
            "items": {
              "$ref": "#/components/schemas/Ticketing_ProjectFieldMapCasesEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "else": {
            "$ref": "#/components/schemas/NullableTicketing_ProjectFieldMapCasesElseEntity"
          },
          "external_field": {
            "nullable": true,
            "type": "string"
          },
          "external_value": {
            "$ref": "#/components/schemas/NullableTicketing_ProjectFieldMapExternalValueEntity"
          },
          "strategy": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "TicketingProjectfieldmapbodyStrategyBasic",
                "value": "basic"
              },
              {
                "name": "TicketingProjectfieldmapbodyStrategyLogic",
                "value": "logic"
              }
            ]
          },
          "user_data": {
            "nullable": true,
            "properties": {},
            "type": "object"
          }
        },
        "type": "object"
      },
      "Ticketing_ProjectFieldMapCasesElseEntity": {
        "properties": {
          "external_value": {
            "$ref": "#/components/schemas/NullableTicketing_ProjectFieldMapExternalValueEntity"
          }
        },
        "type": "object"
      },
      "Ticketing_ProjectFieldMapCasesEntity": {
        "properties": {
          "external_value": {
            "$ref": "#/components/schemas/NullableTicketing_ProjectFieldMapExternalValueEntity"
          },
          "logic": {
            "description": "An unstructured object of key/value pairs describing the logic for applying the rule.",
            "nullable": true,
            "properties": {},
            "type": "object"
          }
        },
        "type": "object"
      },
      "Ticketing_ProjectFieldMapEntity": {
        "description": "Ticketing_ProjectFieldMapEntity model",
        "properties": {
          "body": {
            "items": {
              "$ref": "#/components/schemas/Ticketing_ProjectFieldMapBodyEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "connection_id": {
            "nullable": true,
            "type": "string"
          },
          "connection_type": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "ticketing_project_id": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Ticketing_ProjectFieldMapExternalValueEntity": {
        "properties": {
          "attribute": {
            "nullable": true,
            "type": "string"
          },
          "presentation": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "TicketingProjectfieldmapexternalvalueTypeLiteral",
                "value": "literal"
              },
              {
                "name": "TicketingProjectfieldmapexternalvalueTypeFhAttribute",
                "value": "fh-attribute"
              },
              {
                "name": "TicketingProjectfieldmapexternalvalueTypeFhType",
                "value": "fh-type"
              }
            ]
          },
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Ticketing_ProjectInboundFieldMapEntity": {
        "description": "Ticketing_ProjectInboundFieldMapEntity model",
        "properties": {
          "connection_id": {
            "nullable": true,
            "type": "string"
          },
          "connection_type": {
            "nullable": true,
            "type": "string"
          },
          "external_field_name": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "internal_field_name": {
            "nullable": true,
            "type": "string"
          },
          "ticket_type": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "TicketingProjectinboundfieldmapTicketTypeIncident",
                "value": "incident"
              },
              {
                "name": "TicketingProjectinboundfieldmapTicketTypeTask",
                "value": "task"
              },
              {
                "name": "TicketingProjectinboundfieldmapTicketTypeFollowUp",
                "value": "follow_up"
              }
            ]
          },
          "ticketing_project_id": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Ticketing_ProjectInboundMappableFieldEntity": {
        "description": "Ticketing_ProjectInboundMappableFieldEntity model",
        "properties": {
          "label": {
            "description": "The human-readable name of the field",
            "nullable": true,
            "type": "string"
          },
          "value": {
            "description": "The ID of the field",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Ticketing_Projects_ProjectListItemEntity": {
        "description": "Ticketing_Projects_ProjectListItemEntity model",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/NullableTicketing_ProjectConfigEntity"
          },
          "connection_slug": {
            "nullable": true,
            "type": "string"
          },
          "field_map": {
            "$ref": "#/components/schemas/NullableTicketing_ProjectFieldMapEntity"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Ticketing_TicketEntity": {
        "description": "Ticketing_TicketEntity model",
        "properties": {
          "assignees": {
            "items": {
              "$ref": "#/components/schemas/AuthorEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "attachments": {
            "description": "A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity",
            "items": {
              "properties": {},
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "due_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "incident_current_milestone": {
            "description": "Milestone of incident that this ticket is related to",
            "nullable": true,
            "type": "string"
          },
          "incident_id": {
            "description": "ID of incident that this ticket is related to",
            "nullable": true,
            "type": "string"
          },
          "incident_name": {
            "description": "Name of incident that this ticket is related to",
            "nullable": true,
            "type": "string"
          },
          "link": {
            "$ref": "#/components/schemas/NullableAttachments_LinkEntity"
          },
          "priority": {
            "$ref": "#/components/schemas/NullableTicketing_PriorityEntity"
          },
          "state": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "TicketingTicketStateOpen",
                "value": "open"
              },
              {
                "name": "TicketingTicketStateInProgress",
                "value": "in_progress"
              },
              {
                "name": "TicketingTicketStateCancelled",
                "value": "cancelled"
              },
              {
                "name": "TicketingTicketStateDone",
                "value": "done"
              }
            ]
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "sync_error_message": {
            "description": "Error message from syncing this ticket to integrations",
            "nullable": true,
            "type": "string"
          },
          "tag_list": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "task_id": {
            "description": "ID of task that this ticket is related to",
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "TicketingTicketTypeIncident",
                "value": "incident"
              },
              {
                "name": "TicketingTicketTypeTask",
                "value": "task"
              },
              {
                "name": "TicketingTicketTypeFollowUp",
                "value": "follow_up"
              }
            ]
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserEntity": {
        "description": "UserEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "signals_enabled_notification_types": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "signals_notification_policy_compliance": {
            "items": {
              "$ref": "#/components/schemas/Signals_API_NotificationPolicyItemComplianceEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "slack_linked?": {
            "nullable": true,
            "type": "boolean"
          },
          "slack_user_id": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserEntityPaginated": {
        "description": "UserEntityPaginated model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            },
            "nullable": true,
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/NullablePaginationEntity"
          }
        },
        "type": "object"
      },
      "VotesEntity": {
        "description": "VotesEntity model",
        "properties": {
          "disliked": {
            "description": "Whether or not the current actor has voted negatively",
            "nullable": true,
            "type": "boolean"
          },
          "dislikes": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "liked": {
            "description": "Whether or not the current actor has voted positively",
            "nullable": true,
            "type": "boolean"
          },
          "likes": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "voted": {
            "description": "Whether or not the current actor has voted",
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Webhooks_Entities_WebhookEntity": {
        "description": "Webhooks_Entities_WebhookEntity model",
        "properties": {
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/NullableAuthorEntity"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          },
          "subscriptions": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "url": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "bulk_update_incident_milestones": {
        "description": "Update milestone times in bulk for a given incident. All milestone\ntimes for an incident must occur in chronological order\ncorresponding to the configured order of milestones. If the result\nof this request would cause any milestone(s) to appear out of place,\na 422 response will instead be returned. This includes milestones\nnot explicitly submitted or updated in this request.\n",
        "properties": {
          "bulk": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "BulkUpdateIncidentMilestonesBulkTrue",
                "value": "true"
              }
            ]
          },
          "milestones": {
            "items": {
              "properties": {
                "occurred_at": {
                  "description": "An ISO8601 formatted string for when this milestone occurred. If you are removing a milestone, this field still needs to be set to some value",
                  "format": "date-time",
                  "type": "string"
                },
                "remove": {
                  "description": "If set to true, the milestone will be removed from the incident",
                  "nullable": true,
                  "type": "boolean"
                },
                "type": {
                  "description": "The type/slug of the milestone. Must be one of the currently configured milestones for the given incident.",
                  "type": "string"
                }
              },
              "required": [
                "occurred_at",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "milestones"
        ],
        "type": "object"
      },
      "convert_incident_task": {
        "description": "Convert a task to a follow-up",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "project_id": {
            "nullable": true,
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "tag_list": {
            "description": "List of tags for the ticket",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "create_audience": {
        "properties": {
          "default": {
            "default": false,
            "description": "Whether this is the default audience",
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "description": "Description of the audience (max 4000 characters)",
            "type": "string"
          },
          "details[prompt]": {
            "description": "The prompt to display when collecting this detail",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "details[question]": {
            "description": "The incident detail question (max 255 characters)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "details[slug]": {
            "description": "Optional unique identifier for this detail",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "description": "Name of the audience (max 255 characters)",
            "type": "string"
          }
        },
        "required": [
          "description",
          "details[prompt]",
          "details[question]",
          "name"
        ],
        "type": "object"
      },
      "create_change": {
        "description": "Create a new change entry",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "A labels hash of keys and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "create_change_event": {
        "description": "Create a change event",
        "properties": {
          "attachments": {
            "description": "JSON objects representing attachments, see attachments documentation for the schema",
            "items": {
              "properties": {
                "type": {
                  "type": "string",
                  "x-speakeasy-enums": [
                    {
                      "name": "CreateChangeEventTypeLink",
                      "value": "link"
                    }
                  ]
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "authors": {
            "description": "Array of additional authors to add to the change event, the creating actor will automatically be added as an author",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                },
                "source_id": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "source",
                "source_id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "change_identities": {
            "description": "If provided and valid, the event will be linked to all changes that have the same identities. Identity *values* must be unique.",
            "items": {
              "properties": {
                "type": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "required": [
                "type",
                "value"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "changes": {
            "description": "An array of change IDs",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ends_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "environments": {
            "description": "An array of environment IDs",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "external_id": {
            "description": "The ID of a change event as assigned by an external provider",
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "services": {
            "description": "An array of service IDs",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "starts_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "type": "string"
          }
        },
        "required": [
          "summary"
        ],
        "type": "object"
      },
      "create_change_identity": {
        "description": "Create an identity for the change entry",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "value"
        ],
        "type": "object"
      },
      "create_checklist_template": {
        "description": "Creates a checklist template for the organization",
        "properties": {
          "checks": {
            "description": "An array of checks for the checklist template",
            "items": {
              "properties": {
                "description": {
                  "description": "The description of the check",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the check",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "connected_services": {
            "description": "Array of service IDs to attach checklist template to",
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "team_id": {
            "description": "The ID of the Team that owns the checklist template",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "checks",
          "name"
        ],
        "type": "object"
      },
      "create_comment": {
        "description": "Creates a comment for a project",
        "properties": {
          "body": {
            "description": "Text body of comment",
            "type": "string"
          }
        },
        "required": [
          "body"
        ],
        "type": "object"
      },
      "create_comment_reaction": {
        "description": "Create a reaction on a comment",
        "properties": {
          "reaction": {
            "description": "CLDR short name of Unicode emojis",
            "type": "string"
          }
        },
        "required": [
          "reaction"
        ],
        "type": "object"
      },
      "create_custom_field_definition": {
        "description": "Create a new custom field definition",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "field_type": {
            "type": "string"
          },
          "permissible_values": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "required": {
            "type": "boolean"
          },
          "required_at_milestone_id": {
            "description": "An optional milestone ID to specify when the field should become required, if `required` is set to `true`. If not provided, required fields are always required.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "display_name",
          "field_type",
          "required"
        ],
        "type": "object"
      },
      "create_email_subscriber": {
        "properties": {
          "emails": {
            "description": "A comma-separated list of emails to subscribe.",
            "type": "string"
          }
        },
        "required": [
          "emails"
        ],
        "type": "object"
      },
      "create_environment": {
        "description": "Creates an environment for the organization",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_functionality": {
        "description": "Creates a functionality for the organization",
        "properties": {
          "alert_on_add": {
            "nullable": true,
            "type": "boolean"
          },
          "auto_add_responding_team": {
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "external_resources": {
            "description": "An array of external resources to attach to this service.",
            "items": {
              "properties": {
                "connection_type": {
                  "description": "The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, statuspage, victorops. Not required if the resource has already been imported.",
                  "nullable": true,
                  "type": "string"
                },
                "remote_id": {
                  "type": "string"
                }
              },
              "required": [
                "remote_id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "labels": {
            "description": "A hash of label keys and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "links": {
            "description": "An array of links to associate with this service",
            "items": {
              "properties": {
                "href_url": {
                  "description": "URL",
                  "type": "string"
                },
                "icon_url": {
                  "description": "An optional URL to an icon representing this link",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "Short name used to display and identify this link",
                  "type": "string"
                }
              },
              "required": [
                "href_url",
                "name"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "description": "An object representing a Team that owns the service",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "services": {
            "items": {
              "properties": {
                "id": {
                  "description": "ID of a service",
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "teams": {
            "description": "An array of teams to attach to this service.",
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_handoff_notification_setting": {
        "properties": {
          "max_delay": {
            "description": "An ISO8601 duration string specifying the maximum delay of the notification.",
            "type": "string"
          },
          "notification_group_method": {
            "description": "The group method of notification that will be delivered.",
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateHandoffNotificationSettingNotificationGroupMethodAny",
                "value": "any"
              },
              {
                "name": "CreateHandoffNotificationSettingNotificationGroupMethodPush",
                "value": "push"
              },
              {
                "name": "CreateHandoffNotificationSettingNotificationGroupMethodEmail",
                "value": "email"
              },
              {
                "name": "CreateHandoffNotificationSettingNotificationGroupMethodVoice",
                "value": "voice"
              },
              {
                "name": "CreateHandoffNotificationSettingNotificationGroupMethodMobileText",
                "value": "mobile_text"
              },
              {
                "name": "CreateHandoffNotificationSettingNotificationGroupMethodChat",
                "value": "chat"
              }
            ]
          },
          "priority": {
            "description": "The priority of the notification.",
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateHandoffNotificationSettingPriorityHigh",
                "value": "HIGH"
              },
              {
                "name": "CreateHandoffNotificationSettingPriorityMedium",
                "value": "MEDIUM"
              },
              {
                "name": "CreateHandoffNotificationSettingPriorityLow",
                "value": "LOW"
              }
            ]
          }
        },
        "required": [
          "max_delay",
          "notification_group_method",
          "priority"
        ],
        "type": "object"
      },
      "create_incident": {
        "description": "Create a new incident",
        "properties": {
          "alert_ids": {
            "description": "List of alert IDs that this incident should be associated to",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "custom_fields": {
            "description": "An array of custom fields to set on the incident.",
            "items": {
              "properties": {
                "field_id": {
                  "description": "The ID of the custom field you wish to set.",
                  "type": "string"
                },
                "value_array": {
                  "description": "The value you wish to set on the custom field if the type of the field accepts array values",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "value_string": {
                  "description": "The value you wish to set on the custom field if the type of the field accepts string values",
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "field_id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "customer_impact_summary": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "external_links": {
            "nullable": true,
            "type": "string"
          },
          "impacts": {
            "description": "An array of impacted infrastructure",
            "items": {
              "properties": {
                "condition_id": {
                  "description": "The ID of the impact condition. Find these at /v1/severity_matrix/conditions",
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the impacted infrastructure",
                  "type": "string"
                },
                "type": {
                  "description": "The type of impacted infrastructure. One of: environment, functionality, or service",
                  "type": "string"
                }
              },
              "required": [
                "condition_id",
                "id",
                "type"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "incident_type_id": {
            "description": "The ID of the incident type. This will copy values from the incident type (if any) unless they are being overridden via parameters in this request.",
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "Key:value pairs to track custom data for the incident",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "milestones": {
            "description": "An array of milestones to set on an incident. This can be used to create an already-resolved incident.",
            "items": {
              "properties": {
                "occurred_at": {
                  "description": "An ISO8601 formatted string for when this milestone occurred. If you are removing a milestone, this field still needs to be set to some value",
                  "format": "date-time",
                  "type": "string"
                },
                "type": {
                  "description": "The type/slug of the milestone. Must be one of the currently configured milestones.",
                  "type": "string"
                }
              },
              "required": [
                "occurred_at",
                "type"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "nullable": true,
            "type": "string"
          },
          "restricted": {
            "nullable": true,
            "type": "boolean"
          },
          "runbook_ids": {
            "description": "List of ids of Runbooks to attach to this incident. Foregoes any conditions these Runbooks may have guarding automatic attachment.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "severity": {
            "nullable": true,
            "type": "string"
          },
          "severity_condition_id": {
            "nullable": true,
            "type": "string"
          },
          "severity_impact_id": {
            "nullable": true,
            "type": "string"
          },
          "skip_incident_type_values": {
            "default": false,
            "description": "If true, the incident type values will not be copied to the incident. This is useful when creating an incident from an incident type, but you want to set the values manually.",
            "nullable": true,
            "type": "boolean"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "tag_list": {
            "description": "List of tags for the incident",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "team_ids": {
            "description": "IDs of teams you wish to assign to this incident.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_incident_alert": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "create_incident_attachment_form": {
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "file": {
            "format": "binary",
            "type": "string"
          },
          "occurred_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "vote_direction": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateIncidentAttachmentFormVoteDirectionUp",
                "value": "up"
              },
              {
                "name": "CreateIncidentAttachmentFormVoteDirectionDown",
                "value": "down"
              }
            ]
          }
        },
        "required": [
          "file"
        ],
        "type": "object"
      },
      "create_incident_change_event": {
        "description": "Add a related change to an incident. Changes added to an incident can be causes, fixes, or suspects. To remove a change from an incident, the type field should be set to dismissed.",
        "properties": {
          "change_event_id": {
            "description": "The ID of the change event to associate",
            "type": "string"
          },
          "type": {
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateIncidentChangeEventTypeCaused",
                "value": "caused"
              },
              {
                "name": "CreateIncidentChangeEventTypeFixed",
                "value": "fixed"
              },
              {
                "name": "CreateIncidentChangeEventTypeSuspect",
                "value": "suspect"
              },
              {
                "name": "CreateIncidentChangeEventTypeDismissed",
                "value": "dismissed"
              }
            ]
          },
          "why": {
            "description": "A short description about why this change event is related",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "change_event_id",
          "type"
        ],
        "type": "object"
      },
      "create_incident_chat_message": {
        "description": "Create a new generic chat message on an incident timeline. These are independent of any specific chat provider.",
        "properties": {
          "body": {
            "type": "string"
          },
          "occurred_at": {
            "description": "ISO8601 timestamp for when the chat message occurred",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "vote_direction": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateIncidentChatMessageVoteDirectionUp",
                "value": "up"
              },
              {
                "name": "CreateIncidentChatMessageVoteDirectionDown",
                "value": "down"
              }
            ]
          }
        },
        "required": [
          "body"
        ],
        "type": "object"
      },
      "create_incident_impact": {
        "description": "Add impacted infrastructure to an incident",
        "properties": {
          "condition_id": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "create_incident_link": {
        "description": "Allows adding adhoc links to an incident as an attachment",
        "properties": {
          "display_text": {
            "nullable": true,
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "icon_url": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "href"
        ],
        "type": "object"
      },
      "create_incident_note": {
        "description": "Create a new note on for an incident. The visibility field on a note determines where it gets posted.",
        "properties": {
          "body": {
            "type": "string"
          },
          "occurred_at": {
            "description": "ISO8601 timestamp for when the note occurred",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "status_pages": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "integration_slug": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "integration_slug"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "visibility": {
            "default": "private_to_org",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateIncidentNoteVisibilityPrivateToOrg",
                "value": "private_to_org"
              },
              {
                "name": "CreateIncidentNoteVisibilityOpenToPublic",
                "value": "open_to_public"
              },
              {
                "name": "CreateIncidentNoteVisibilityInternalStatusPage",
                "value": "internal_status_page"
              }
            ]
          }
        },
        "required": [
          "body"
        ],
        "type": "object"
      },
      "create_incident_retrospective": {
        "properties": {
          "retrospective_template_id": {
            "description": "The id of the retrospective template to apply.",
            "type": "string"
          }
        },
        "required": [
          "retrospective_template_id"
        ],
        "type": "object"
      },
      "create_incident_retrospective_field": {
        "properties": {
          "help_text": {
            "nullable": true,
            "type": "string"
          },
          "is_required": {
            "nullable": true,
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "permissible_values": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "schema": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateIncidentRetrospectiveFieldTypeText",
                "value": "text"
              },
              {
                "name": "CreateIncidentRetrospectiveFieldTypeSingleSelect",
                "value": "single_select"
              },
              {
                "name": "CreateIncidentRetrospectiveFieldTypeMultiSelect",
                "value": "multi_select"
              },
              {
                "name": "CreateIncidentRetrospectiveFieldTypeNumeric",
                "value": "numeric"
              },
              {
                "name": "CreateIncidentRetrospectiveFieldTypeDatetime",
                "value": "datetime"
              },
              {
                "name": "CreateIncidentRetrospectiveFieldTypeDynamicInputGroup",
                "value": "dynamic_input_group"
              },
              {
                "name": "CreateIncidentRetrospectiveFieldTypeMarkdown",
                "value": "markdown"
              },
              {
                "name": "CreateIncidentRetrospectiveFieldTypeMarkdownText",
                "value": "markdown_text"
              }
            ]
          }
        },
        "required": [
          "label",
          "type"
        ],
        "type": "object"
      },
      "create_incident_role": {
        "description": "Create a new incident role",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "summary"
        ],
        "type": "object"
      },
      "create_incident_role_assignment": {
        "description": "Assign a role to a user for this incident",
        "properties": {
          "incident_role_id": {
            "description": "The Incident Role ID to assign the role to",
            "type": "string"
          },
          "user_id": {
            "description": "The user ID to assign the role to",
            "type": "string"
          }
        },
        "required": [
          "incident_role_id",
          "user_id"
        ],
        "type": "object"
      },
      "create_incident_status_page": {
        "description": "Add a status page to an incident.",
        "properties": {
          "integration_id": {
            "type": "string"
          },
          "integration_slug": {
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "integration_id",
          "integration_slug"
        ],
        "type": "object"
      },
      "create_incident_task": {
        "description": "Create a task",
        "properties": {
          "assignee_id": {
            "description": "The ID of the user assigned to the task.",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "A description of what the task is for.",
            "nullable": true,
            "type": "string"
          },
          "due_at": {
            "description": "The due date of the task. Relative values are supported such as '5m'",
            "nullable": true,
            "type": "string"
          },
          "state": {
            "description": "The state of the task. One of: open, in_progress, cancelled, done",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "description": "The title of the task.",
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "create_incident_task_list": {
        "description": "Add all tasks from list to incident",
        "properties": {
          "assignee_id": {
            "description": "The ID of the user assigned to the tasks in this list.",
            "nullable": true,
            "type": "string"
          },
          "task_list_id": {
            "description": "The id of the task list.",
            "type": "string"
          }
        },
        "required": [
          "task_list_id"
        ],
        "type": "object"
      },
      "create_incident_team_assignment": {
        "description": "Assign a team for this incident",
        "properties": {
          "team_id": {
            "description": "The team ID to associate to the incident",
            "type": "string"
          }
        },
        "required": [
          "team_id"
        ],
        "type": "object"
      },
      "create_incident_type": {
        "description": "Create a new incident type",
        "properties": {
          "description": {
            "description": "A description of the incident type",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "template": {
            "properties": {
              "customer_impact_summary": {
                "nullable": true,
                "type": "string"
              },
              "description": {
                "nullable": true,
                "type": "string"
              },
              "impacts": {
                "description": "An array of impact/condition combinations",
                "items": {
                  "properties": {
                    "condition_id": {
                      "description": "The id of the condition",
                      "type": "string"
                    },
                    "id": {
                      "description": "The id of impact",
                      "type": "string"
                    }
                  },
                  "required": [
                    "condition_id",
                    "id"
                  ],
                  "type": "object"
                },
                "nullable": true,
                "type": "array"
              },
              "labels": {
                "description": "A labels hash of keys and values",
                "nullable": true,
                "properties": {},
                "type": "object"
              },
              "priority": {
                "nullable": true,
                "type": "string"
              },
              "private_incident": {
                "nullable": true,
                "type": "boolean"
              },
              "runbook_ids": {
                "description": "List of ids of Runbooks to attach to incidents created from this type",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              },
              "severity": {
                "nullable": true,
                "type": "string"
              },
              "tag_list": {
                "description": "List of tags for the incident",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              },
              "team_ids": {
                "description": "List of ids of teams to be assigned to incidents",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "name",
          "template"
        ],
        "type": "object"
      },
      "create_lifecycle_measurement_definition": {
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ends_at_milestone_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "starts_at_milestone_id": {
            "type": "string"
          }
        },
        "required": [
          "ends_at_milestone_id",
          "name",
          "starts_at_milestone_id"
        ],
        "type": "object"
      },
      "create_lifecycle_milestone": {
        "properties": {
          "auto_assign_timestamp_on_create": {
            "description": "The setting for auto-assigning the milestone's timestamp during incident declaration",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateLifecycleMilestoneAutoAssignTimestampOnCreateAlwaysSetOnCreate",
                "value": "always_set_on_create"
              },
              {
                "name": "CreateLifecycleMilestoneAutoAssignTimestampOnCreateOnlySetOnManualCreate",
                "value": "only_set_on_manual_create"
              },
              {
                "name": "CreateLifecycleMilestoneAutoAssignTimestampOnCreateNeverSetOnCreate",
                "value": "never_set_on_create"
              }
            ]
          },
          "description": {
            "description": "A long-form description of the milestone's purpose",
            "type": "string"
          },
          "name": {
            "description": "The name of the milestone",
            "type": "string"
          },
          "phase_id": {
            "description": "The ID of the phase to which the milestone should belong",
            "type": "string"
          },
          "position": {
            "description": "The position of the milestone within the phase. If not provided, the milestone will be added as the last milestone in the phase.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "required_at_milestone_id": {
            "description": "The ID of a later milestone that cannot be started until this milestone has a timestamp populated",
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "description": "A unique identifier for the milestone. If not provided, one will be generated from the name.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "description",
          "name",
          "phase_id"
        ],
        "type": "object"
      },
      "create_nunc_component_group": {
        "properties": {
          "component_group_id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_nunc_connection": {
        "properties": {
          "company_name": {
            "nullable": true,
            "type": "string"
          },
          "company_tos_url": {
            "nullable": true,
            "type": "string"
          },
          "company_website": {
            "nullable": true,
            "type": "string"
          },
          "components[infrastructure_id]": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "components[infrastructure_type]": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "conditions[condition_id]": {
            "description": "Severity matrix condition id",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "conditions[nunc_condition]": {
            "description": "Status page condition to map your severity matrix condition to",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "domain": {
            "type": "string"
          },
          "enable_histogram": {
            "nullable": true,
            "type": "boolean"
          },
          "exposed_fields": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "greeting_body": {
            "nullable": true,
            "type": "string"
          },
          "greeting_title": {
            "nullable": true,
            "type": "string"
          },
          "operational_message": {
            "nullable": true,
            "type": "string"
          },
          "primary_color": {
            "nullable": true,
            "type": "string"
          },
          "secondary_color": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "ui_version": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "components[infrastructure_id]",
          "components[infrastructure_type]",
          "conditions[condition_id]",
          "conditions[nunc_condition]",
          "domain"
        ],
        "type": "object"
      },
      "create_nunc_subscription": {
        "description": "Subscribe to status page updates",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "create_on_call_shift": {
        "description": "Create a Signals on-call shift in a schedule.",
        "properties": {
          "end_time": {
            "description": "The end time of the shift in ISO8601 format.",
            "type": "string"
          },
          "rotation_id": {
            "description": "The ID of the on-call rotation you want to create the shift in. This parameter is optional for backwards compatibility but must be provided if the schedule has multiple rotations.",
            "nullable": true,
            "type": "string"
          },
          "start_time": {
            "description": "The start time of the shift in ISO8601 format.",
            "type": "string"
          },
          "user_id": {
            "description": "The ID of the user who is on-call for the shift. If not provided, the shift will be unassigned.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "end_time",
          "start_time"
        ],
        "type": "object"
      },
      "create_post_mortem_reason": {
        "description": "Add a new contributing factor to an incident",
        "properties": {
          "summary": {
            "type": "string"
          }
        },
        "required": [
          "summary"
        ],
        "type": "object"
      },
      "create_post_mortem_report": {
        "description": "Create a report",
        "properties": {
          "incident_id": {
            "type": "string"
          }
        },
        "required": [
          "incident_id"
        ],
        "type": "object"
      },
      "create_priority": {
        "description": "Create a new priority",
        "properties": {
          "default": {
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "slug"
        ],
        "type": "object"
      },
      "create_retrospective_template": {
        "properties": {
          "description": {
            "type": "string"
          },
          "fields[help_text]": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "fields[is_required]": {
            "items": {
              "type": "boolean"
            },
            "nullable": true,
            "type": "array"
          },
          "fields[label]": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fields[permissible_values]": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "fields[schema]": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "fields[type]": {
            "items": {
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "CreateRetrospectiveTemplateFieldsTypeText",
                  "value": "text"
                },
                {
                  "name": "CreateRetrospectiveTemplateFieldsTypeSingleSelect",
                  "value": "single_select"
                },
                {
                  "name": "CreateRetrospectiveTemplateFieldsTypeMultiSelect",
                  "value": "multi_select"
                },
                {
                  "name": "CreateRetrospectiveTemplateFieldsTypeNumeric",
                  "value": "numeric"
                },
                {
                  "name": "CreateRetrospectiveTemplateFieldsTypeDatetime",
                  "value": "datetime"
                },
                {
                  "name": "CreateRetrospectiveTemplateFieldsTypeDynamicInputGroup",
                  "value": "dynamic_input_group"
                },
                {
                  "name": "CreateRetrospectiveTemplateFieldsTypeMarkdown",
                  "value": "markdown"
                },
                {
                  "name": "CreateRetrospectiveTemplateFieldsTypeMarkdownText",
                  "value": "markdown_text"
                }
              ]
            },
            "type": "array"
          },
          "is_default": {
            "nullable": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "sections[elements]": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sections[slug]": {
            "items": {
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "CreateRetrospectiveTemplateSectionsSlugTimeline",
                  "value": "timeline"
                },
                {
                  "name": "CreateRetrospectiveTemplateSectionsSlugKeyData",
                  "value": "key_data"
                },
                {
                  "name": "CreateRetrospectiveTemplateSectionsSlugDetails",
                  "value": "details"
                },
                {
                  "name": "CreateRetrospectiveTemplateSectionsSlugResources",
                  "value": "resources"
                },
                {
                  "name": "CreateRetrospectiveTemplateSectionsSlugActions",
                  "value": "actions"
                }
              ]
            },
            "type": "array"
          }
        },
        "required": [
          "description",
          "fields[label]",
          "fields[type]",
          "name",
          "sections[elements]",
          "sections[slug]"
        ],
        "type": "object"
      },
      "create_runbook": {
        "description": "Create a new runbook for use with incidents.",
        "properties": {
          "attachment_rule": {
            "nullable": true,
            "properties": {
              "logic": {
                "description": "The JSON logic for the attaching the runbook",
                "type": "string"
              },
              "user_data": {
                "description": "The user data for the rule",
                "nullable": true,
                "type": "string"
              }
            },
            "required": [
              "logic"
            ],
            "type": "object"
          },
          "auto_attach_to_restricted_incidents": {
            "description": "Whether or not this runbook should be automatically attached to restricted incidents. Note that setting this to `true` will prevent it from being attached to public incidents, even manually. Defaults to `false`.",
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "description": "A longer description about the Runbook. Supports markdown format",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "description": "An object representing a Team that owns the runbook",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "steps": {
            "items": {
              "properties": {
                "action_id": {
                  "description": "ID of action to use for this step.",
                  "type": "string"
                },
                "name": {
                  "description": "Name for step",
                  "type": "string"
                },
                "rule": {
                  "nullable": true,
                  "properties": {
                    "logic": {
                      "description": "The JSON logic for the rule",
                      "type": "string"
                    },
                    "user_data": {
                      "description": "The user data for the rule",
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "required": [
                    "logic"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "action_id",
                "name"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "summary": {
            "description": "Deprecated. Use description",
            "nullable": true,
            "type": "string"
          },
          "tutorial": {
            "description": "Whether or not this runbook is a tutorial runbook",
            "nullable": true,
            "type": "boolean"
          },
          "type": {
            "description": "Deprecated, but still required. Please just use 'incident'",
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateRunbookTypeIncident",
                "value": "incident"
              },
              {
                "name": "CreateRunbookTypeGeneral",
                "value": "general"
              },
              {
                "name": "CreateRunbookTypeInfrastructure",
                "value": "infrastructure"
              },
              {
                "name": "CreateRunbookTypeIncidentRole",
                "value": "incident_role"
              }
            ]
          }
        },
        "required": [
          "name",
          "type"
        ],
        "type": "object"
      },
      "create_runbook_execution": {
        "description": "Attaches a runbook to an incident and executes it",
        "properties": {
          "execute_for": {
            "description": "The incident to attach the runbook to. Format must be: `incident/${incidentId}`",
            "type": "string"
          },
          "runbook_id": {
            "description": "ID of runbook to attach",
            "type": "string"
          }
        },
        "required": [
          "execute_for",
          "runbook_id"
        ],
        "type": "object"
      },
      "create_saved_search": {
        "description": "Create a new saved search for a particular resource type",
        "properties": {
          "filter_values": {
            "properties": {},
            "type": "object"
          },
          "is_private": {
            "nullable": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "filter_values",
          "name"
        ],
        "type": "object"
      },
      "create_scheduled_maintenance": {
        "description": "Create a new scheduled maintenance event",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ends_at": {
            "description": "ISO8601 timestamp for the end time of the scheduled maintenance",
            "format": "date-time",
            "type": "string"
          },
          "impacts": {
            "description": "An array of impact/condition combinations",
            "items": {
              "properties": {
                "condition_id": {
                  "description": "The id of the condition",
                  "type": "string"
                },
                "id": {
                  "description": "The id of impact",
                  "type": "string"
                },
                "type": {
                  "description": "The type of impact",
                  "type": "string"
                }
              },
              "required": [
                "condition_id",
                "id",
                "type"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "labels": {
            "description": "A json object of label keys and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "starts_at": {
            "description": "ISO8601 timestamp for the start time of the scheduled maintenance",
            "format": "date-time",
            "type": "string"
          },
          "status_pages": {
            "description": "An array of status pages to display this maintenance on",
            "items": {
              "properties": {
                "connection_id": {
                  "description": "The UUID of the status page to display this maintenance on",
                  "type": "string"
                },
                "integration_slug": {
                  "description": "The slug identifying the type of status page",
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "connection_id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "ends_at",
          "name",
          "starts_at"
        ],
        "type": "object"
      },
      "create_scim_group": {
        "description": "SCIM endpoint to create a new Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role.",
        "properties": {
          "displayName": {
            "description": "The name of the team being created",
            "type": "string"
          },
          "members": {
            "items": {
              "properties": {
                "value": {
                  "description": "String that represents the user's UUID to assign to the team",
                  "type": "string"
                }
              },
              "required": [
                "value"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "displayName",
          "members"
        ],
        "type": "object"
      },
      "create_scim_user": {
        "description": "SCIM endpoint to create and provision a new User. This endpoint will provision the User, which allows them to accept their account throught their IDP or via the Forgot Password flow.",
        "properties": {
          "emails": {
            "description": "Email addresses for the User",
            "items": {
              "properties": {
                "primary": {
                  "description": "Boolean which signifies if an email is intended as the primary email for the User",
                  "type": "boolean"
                },
                "value": {
                  "description": "String that represents an email address for the User",
                  "type": "string"
                }
              },
              "required": [
                "primary",
                "value"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "name": {
            "description": "The components of the user's name",
            "properties": {
              "familyName": {
                "description": "The family name of the User, or last name in most Western languages",
                "type": "string"
              },
              "givenName": {
                "description": "The given name of the User, or first name in most Western languages",
                "type": "string"
              }
            },
            "required": [
              "familyName",
              "givenName"
            ],
            "type": "object"
          },
          "password": {
            "description": "This attribute is intended to be used as a means to set, replace, or compare (i.e., filter for equality) a password",
            "nullable": true,
            "type": "string"
          },
          "roles": {
            "description": "Roles for the User. Options are owner, member, collaborator, or viewer. Roles may be specified as strings or SCIM role objects.",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "userName": {
            "description": "A service provider's unique identifier for the user",
            "type": "string"
          }
        },
        "required": [
          "emails",
          "name",
          "userName"
        ],
        "type": "object"
      },
      "create_service": {
        "description": "Creates a service for the organization, you may also create or attach functionalities to the service on create.",
        "properties": {
          "alert_on_add": {
            "nullable": true,
            "type": "boolean"
          },
          "auto_add_responding_team": {
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "external_resources": {
            "description": "An array of external resources to attach to this service.",
            "items": {
              "properties": {
                "connection_type": {
                  "description": "The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, victorops. Not required if the resource has already been imported.",
                  "nullable": true,
                  "type": "string"
                },
                "remote_id": {
                  "type": "string"
                }
              },
              "required": [
                "remote_id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "functionalities": {
            "description": "An array of functionalities",
            "items": {
              "properties": {
                "id": {
                  "description": "If you are trying to reuse a functionality, you may set the ID to attach it to the service",
                  "nullable": true,
                  "type": "string"
                },
                "summary": {
                  "description": "If you are trying to create a new functionality and attach it to this service, set the summary key",
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "labels": {
            "description": "A hash of label keys and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "links": {
            "description": "An array of links to associate with this service",
            "items": {
              "properties": {
                "href_url": {
                  "description": "URL",
                  "type": "string"
                },
                "icon_url": {
                  "description": "An optional URL to an icon representing this link",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "Short name used to display and identify this link",
                  "type": "string"
                }
              },
              "required": [
                "href_url",
                "name"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "description": "An object representing a Team that owns the service",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "service_tier": {
            "description": "Integer representing service tier. Lower values represent higher criticality. If not specified the default value will be 5.",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5
            ],
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "teams": {
            "description": "An array of teams to attach to this service.",
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_service_checklist_response": {
        "description": "Creates a response for a checklist item",
        "properties": {
          "check_id": {
            "type": "string"
          },
          "status": {
            "description": "Status of the check. 'true' if it's complete, 'false' if incomplete, or blank if not yet interacted with",
            "type": "boolean"
          }
        },
        "required": [
          "check_id",
          "status"
        ],
        "type": "object"
      },
      "create_service_dependency": {
        "description": "Creates a service dependency relationship between two services",
        "properties": {
          "connected_service_id": {
            "type": "string"
          },
          "notes": {
            "description": "A note to describe the service dependency relationship",
            "nullable": true,
            "type": "string"
          },
          "service_id": {
            "type": "string"
          }
        },
        "required": [
          "connected_service_id",
          "service_id"
        ],
        "type": "object"
      },
      "create_service_links": {
        "description": "Creates a service with the appropriate integration for each external service ID passed",
        "properties": {
          "connection_id": {
            "description": "ID for the integration. This can be found by going to the edit page for the integration",
            "type": "string"
          },
          "external_service_ids": {
            "description": "ID of the service",
            "type": "string"
          },
          "integration": {
            "description": "The name of the service",
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateServiceLinksIntegrationPagerDuty",
                "value": "pager_duty"
              },
              {
                "name": "CreateServiceLinksIntegrationOpsgenie",
                "value": "opsgenie"
              },
              {
                "name": "CreateServiceLinksIntegrationVictorops",
                "value": "victorops"
              }
            ]
          }
        },
        "required": [
          "connection_id",
          "external_service_ids",
          "integration"
        ],
        "type": "object"
      },
      "create_severity": {
        "description": "Create a new severity",
        "properties": {
          "color": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateSeverityColorRed",
                "value": "red"
              },
              {
                "name": "CreateSeverityColorOrange",
                "value": "orange"
              },
              {
                "name": "CreateSeverityColorYellow",
                "value": "yellow"
              },
              {
                "name": "CreateSeverityColorBlue",
                "value": "blue"
              },
              {
                "name": "CreateSeverityColorTeal",
                "value": "teal"
              },
              {
                "name": "CreateSeverityColorGrey",
                "value": "grey"
              },
              {
                "name": "CreateSeverityColorGreen",
                "value": "green"
              }
            ]
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "slug"
        ],
        "type": "object"
      },
      "create_severity_matrix_condition": {
        "description": "Create a new condition",
        "properties": {
          "name": {
            "type": "string"
          },
          "position": {
            "description": "Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_severity_matrix_impact": {
        "description": "Create a new impact",
        "properties": {
          "affects_id": {
            "type": "string"
          },
          "affects_type": {
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "affects_id",
          "affects_type"
        ],
        "type": "object"
      },
      "create_signals_alert_grouping_configuration": {
        "description": "Create a Signals alert grouping rule for the organization.",
        "properties": {
          "action": {
            "description": "The action to take when grouping alerts",
            "nullable": true,
            "properties": {
              "fyi": {
                "description": "Send FYI notification",
                "nullable": true,
                "properties": {
                  "slack_channel_ids": {
                    "description": "The slack channel ids to send the notification to",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "slack_channel_ids"
                ],
                "type": "object"
              },
              "link": {
                "description": "Link the alerts and do not notify anyone",
                "nullable": true,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "reference_alert_time_period": {
            "description": "How long to group alerts for",
            "type": "string"
          },
          "strategy": {
            "description": "The strategy to use for grouping alerts",
            "properties": {
              "substring": {
                "description": "The type of strategy to use for grouping alerts",
                "nullable": true,
                "properties": {
                  "field_name": {
                    "description": "The field to use for grouping alerts",
                    "type": "string",
                    "x-speakeasy-enums": [
                      {
                        "name": "CreateSignalsAlertGroupingConfigurationFieldNameSummary",
                        "value": "summary"
                      },
                      {
                        "name": "CreateSignalsAlertGroupingConfigurationFieldNameBody",
                        "value": "body"
                      },
                      {
                        "name": "CreateSignalsAlertGroupingConfigurationFieldNameTags",
                        "value": "tags"
                      }
                    ]
                  },
                  "value": {
                    "description": "The value to use for grouping alerts",
                    "type": "string"
                  }
                },
                "required": [
                  "field_name",
                  "value"
                ],
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "reference_alert_time_period",
          "strategy"
        ],
        "type": "object"
      },
      "create_signals_email_target": {
        "description": "Create a Signals email target for a team.",
        "properties": {
          "allowed_senders": {
            "description": "A list of email addresses that are allowed to send events to the target. Must be exact match.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "description": {
            "description": "A detailed description of the email target.",
            "nullable": true,
            "type": "string"
          },
          "level_cel": {
            "description": "The CEL expression that defines the level of an incoming email that is sent to the target.",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The email target's name.",
            "type": "string"
          },
          "rule_matching_strategy": {
            "description": "Whether or not all rules must match, or if only one rule must match.",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateSignalsEmailTargetRuleMatchingStrategyAll",
                "value": "all"
              },
              {
                "name": "CreateSignalsEmailTargetRuleMatchingStrategyAny",
                "value": "any"
              }
            ]
          },
          "rules": {
            "description": "A list of CEL expressions that should be evaluated and matched to determine if the target should be notified.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "slug": {
            "description": "The email address that will be listening to events.",
            "nullable": true,
            "type": "string"
          },
          "status_cel": {
            "description": "The CEL expression that defines the status of an incoming email that is sent to the target.",
            "nullable": true,
            "type": "string"
          },
          "target": {
            "description": "The target that the email target will notify. This object must contain a `type`\nfield that specifies the type of target and an `id` field that specifies the ID of\nthe target. The `type` field must be one of \"escalation_policy\", \"on_call_schedule\",\n\"team\", \"user\", or \"slack_channel\".\n",
            "nullable": true,
            "properties": {
              "id": {
                "description": "The ID of the target that the inbound email will notify when matched.",
                "type": "string"
              },
              "type": {
                "description": "The type of target that the inbound email will notify when matched.",
                "type": "string",
                "x-speakeasy-enums": [
                  {
                    "name": "CreateSignalsEmailTargetTypeTeam",
                    "value": "Team"
                  },
                  {
                    "name": "CreateSignalsEmailTargetTypeEntireteam",
                    "value": "EntireTeam"
                  },
                  {
                    "name": "CreateSignalsEmailTargetTypeEscalationpolicy",
                    "value": "EscalationPolicy"
                  },
                  {
                    "name": "CreateSignalsEmailTargetTypeOncallschedule",
                    "value": "OnCallSchedule"
                  },
                  {
                    "name": "CreateSignalsEmailTargetTypeUser",
                    "value": "User"
                  },
                  {
                    "name": "CreateSignalsEmailTargetTypeSlackchannel",
                    "value": "SlackChannel"
                  },
                  {
                    "name": "CreateSignalsEmailTargetTypeMicrosoftteamschannel",
                    "value": "MicrosoftTeamsChannel"
                  },
                  {
                    "name": "CreateSignalsEmailTargetTypeWebhook",
                    "value": "Webhook"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_signals_event_source": {
        "description": "Create a Signals event source for the authenticated user.",
        "properties": {
          "description": {
            "description": "Description of the transposer",
            "nullable": true,
            "type": "string"
          },
          "example_payload": {
            "description": "Example payload as input to transpose function",
            "properties": {
              "data": {
                "description": "JSON body of request.",
                "nullable": true,
                "properties": {},
                "type": "object"
              },
              "headers": {
                "description": "Hash of HTTP headers with values as Array, e.g. { 'Content-Type' =\u003e ['application/json'] }",
                "nullable": true,
                "properties": {},
                "type": "object"
              }
            },
            "type": "object"
          },
          "javascript": {
            "description": "Javascript code to convert payload into Signal object",
            "type": "string"
          },
          "name": {
            "description": "Name of the transposer",
            "type": "string"
          },
          "slug": {
            "description": "Slug of the transposer",
            "type": "string"
          }
        },
        "required": [
          "example_payload",
          "javascript",
          "name",
          "slug"
        ],
        "type": "object"
      },
      "create_signals_webhook_target": {
        "description": "Create a Signals webhook target.",
        "properties": {
          "description": {
            "description": "An optional detailed description of the webhook target.",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The webhook target's name.",
            "type": "string"
          },
          "signing_key": {
            "description": "An optional secret we will provide in the `FH-Signature` header\nwhen sending a payload to the webhook target. This key will not be\nshown in any response once configured.\n",
            "nullable": true,
            "type": "string"
          },
          "url": {
            "description": "The URL that the webhook target will notify.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "url"
        ],
        "type": "object"
      },
      "create_slack_emoji_action": {
        "properties": {
          "emoji_name": {
            "description": "The name of the emoji to associate with this action",
            "type": "string"
          },
          "incident_type_id": {
            "description": "The ID of the incident type to associate with this emoji action",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "emoji_name"
        ],
        "type": "object"
      },
      "create_status_update_template": {
        "description": "Create a status update template for your organization",
        "properties": {
          "body": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "body",
          "name"
        ],
        "type": "object"
      },
      "create_task_list": {
        "description": "Creates a new task list",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "task_list_items": {
            "items": {
              "properties": {
                "description": {
                  "description": "A long-form description for the task if additional context is helpful",
                  "nullable": true,
                  "type": "string"
                },
                "summary": {
                  "description": "A summary of the task",
                  "type": "string"
                }
              },
              "required": [
                "summary"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "task_list_items"
        ],
        "type": "object"
      },
      "create_team": {
        "description": "Create a new team",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "invite_emails": {
            "description": "A list of email addresses to invite to join the organization and automatically add to this team. If an email already has a pending invitation, the team will be added to their existing invitation.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "memberships": {
            "items": {
              "properties": {
                "incident_role_id": {
                  "description": "An incident role ID that this user will automatically assigned if this team is assigned to an incident",
                  "nullable": true,
                  "type": "string"
                },
                "schedule_id": {
                  "nullable": true,
                  "type": "string"
                },
                "user_id": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "ms_teams_channel": {
            "description": "MS Teams channel identity for channel associated with this team",
            "nullable": true,
            "properties": {
              "channel_id": {
                "type": "string"
              },
              "ms_team_id": {
                "type": "string"
              }
            },
            "required": [
              "channel_id",
              "ms_team_id"
            ],
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "slack_channel_id": {
            "description": "The Slack channel ID associated with this team. This may be the reference in FireHydrant's system (i.e. UUID) or the ID value from Slack (e.g. C1234567890).\n",
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_team_call_route": {
        "description": "Create a call route for a team",
        "properties": {
          "connect_mode": {
            "description": "Connect mode for the call route",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateTeamCallRouteConnectModeConnectModeConference",
                "value": "CONNECT_MODE_CONFERENCE"
              },
              {
                "name": "CreateTeamCallRouteConnectModeConnectModeDirectDial",
                "value": "CONNECT_MODE_DIRECT_DIAL"
              }
            ]
          },
          "description": {
            "description": "Description of the call route",
            "nullable": true,
            "type": "string"
          },
          "greeting_message": {
            "description": "Greeting message for the call route",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the call route",
            "type": "string"
          },
          "phone_number": {
            "description": "Phone number to route calls to",
            "type": "string"
          },
          "routing_mode": {
            "description": "Routing mode for the call route",
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateTeamCallRouteRoutingModeRoutingModeTakeMessage",
                "value": "ROUTING_MODE_TAKE_MESSAGE"
              },
              {
                "name": "CreateTeamCallRouteRoutingModeRoutingModeDirectConnect",
                "value": "ROUTING_MODE_DIRECT_CONNECT"
              }
            ]
          },
          "steps": {
            "description": "Steps for the call route",
            "items": {
              "properties": {
                "target_id": {
                  "description": "ID of the target",
                  "type": "string"
                },
                "target_type": {
                  "description": "Type of target",
                  "type": "string",
                  "x-speakeasy-enums": [
                    {
                      "name": "CreateTeamCallRouteTargetTypeUser",
                      "value": "User"
                    },
                    {
                      "name": "CreateTeamCallRouteTargetTypeOncallschedule",
                      "value": "OnCallSchedule"
                    }
                  ]
                },
                "timeout": {
                  "description": "Timeout in seconds for the step",
                  "type": "string"
                }
              },
              "required": [
                "target_id",
                "target_type",
                "timeout"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "target": {
            "description": "Target for the call route (required unless connect_mode is direct_dial)",
            "nullable": true,
            "properties": {
              "id": {
                "description": "ID of the target",
                "type": "string"
              },
              "type": {
                "description": "Type of target",
                "type": "string"
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "name",
          "phone_number",
          "routing_mode"
        ],
        "type": "object"
      },
      "create_team_escalation_policy": {
        "description": "Create a Signals escalation policy for a team.",
        "properties": {
          "default": {
            "default": false,
            "description": "Whether this escalation policy should be the default for the team.",
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "description": "A detailed description of the escalation policy.",
            "nullable": true,
            "type": "string"
          },
          "handoff_step": {
            "description": "A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.",
            "nullable": true,
            "properties": {
              "target_id": {
                "description": "The ID of the target to which the policy will hand off.",
                "type": "string"
              },
              "target_type": {
                "description": "The type of target to which the policy will hand off.",
                "type": "string",
                "x-speakeasy-enums": [
                  {
                    "name": "CreateTeamEscalationPolicyTargetTypeEscalationpolicy",
                    "value": "EscalationPolicy"
                  },
                  {
                    "name": "CreateTeamEscalationPolicyTargetTypeTeam",
                    "value": "Team"
                  }
                ]
              }
            },
            "required": [
              "target_id",
              "target_type"
            ],
            "type": "object"
          },
          "name": {
            "description": "The escalation policy's name.",
            "type": "string"
          },
          "prioritized_settings": {
            "description": "Priority-specific settings for dynamic escalation policies",
            "nullable": true,
            "properties": {
              "high": {
                "description": "Settings for HIGH priority alerts",
                "nullable": true,
                "properties": {
                  "handoff_step": {
                    "description": "Handoff step for HIGH priority alerts",
                    "nullable": true,
                    "properties": {
                      "target_id": {
                        "type": "string"
                      },
                      "target_type": {
                        "type": "string",
                        "x-speakeasy-enums": [
                          {
                            "name": "CreateTeamEscalationPolicyTargetTypeEscalationpolicy",
                            "value": "EscalationPolicy"
                          },
                          {
                            "name": "CreateTeamEscalationPolicyTargetTypeTeam",
                            "value": "Team"
                          }
                        ]
                      }
                    },
                    "required": [
                      "target_id",
                      "target_type"
                    ],
                    "type": "object"
                  },
                  "repetitions": {
                    "description": "Number of repetitions for HIGH priority alerts",
                    "format": "int32",
                    "nullable": true,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "low": {
                "description": "Settings for LOW priority alerts",
                "nullable": true,
                "properties": {
                  "handoff_step": {
                    "description": "Handoff step for LOW priority alerts",
                    "nullable": true,
                    "properties": {
                      "target_id": {
                        "type": "string"
                      },
                      "target_type": {
                        "type": "string",
                        "x-speakeasy-enums": [
                          {
                            "name": "CreateTeamEscalationPolicyTargetTypeEscalationpolicy",
                            "value": "EscalationPolicy"
                          },
                          {
                            "name": "CreateTeamEscalationPolicyTargetTypeTeam",
                            "value": "Team"
                          }
                        ]
                      }
                    },
                    "required": [
                      "target_id",
                      "target_type"
                    ],
                    "type": "object"
                  },
                  "repetitions": {
                    "description": "Number of repetitions for LOW priority alerts",
                    "format": "int32",
                    "nullable": true,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "medium": {
                "description": "Settings for MEDIUM priority alerts",
                "nullable": true,
                "properties": {
                  "handoff_step": {
                    "description": "Handoff step for MEDIUM priority alerts",
                    "nullable": true,
                    "properties": {
                      "target_id": {
                        "type": "string"
                      },
                      "target_type": {
                        "type": "string",
                        "x-speakeasy-enums": [
                          {
                            "name": "CreateTeamEscalationPolicyTargetTypeEscalationpolicy",
                            "value": "EscalationPolicy"
                          },
                          {
                            "name": "CreateTeamEscalationPolicyTargetTypeTeam",
                            "value": "Team"
                          }
                        ]
                      }
                    },
                    "required": [
                      "target_id",
                      "target_type"
                    ],
                    "type": "object"
                  },
                  "repetitions": {
                    "description": "Number of repetitions for MEDIUM priority alerts",
                    "format": "int32",
                    "nullable": true,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "repetitions": {
            "default": 0,
            "description": "The number of times that the escalation policy should repeat before an alert is dropped.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "step_strategy": {
            "description": "The strategy for handling steps in the escalation policy. Can be \"static\" or \"dynamic_by_priority\".",
            "nullable": true,
            "type": "string"
          },
          "steps": {
            "description": "A list of steps that define how an alert should escalate through the policy.",
            "items": {
              "properties": {
                "distribution_type": {
                  "description": "The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.",
                  "nullable": true,
                  "type": "string",
                  "x-speakeasy-enums": [
                    {
                      "name": "CreateTeamEscalationPolicyDistributionTypeUnspecified",
                      "value": "unspecified"
                    },
                    {
                      "name": "CreateTeamEscalationPolicyDistributionTypeRoundRobinByAlert",
                      "value": "round_robin_by_alert"
                    },
                    {
                      "name": "CreateTeamEscalationPolicyDistributionTypeRoundRobinByEscalationPolicy",
                      "value": "round_robin_by_escalation_policy"
                    }
                  ]
                },
                "priorities": {
                  "description": "A list of priorities (HIGH, MEDIUM, LOW) to which the step applies when using a dynamic escalation policy.",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "targets": {
                  "description": "A list of targets that the step will notify. You can specify up to 15 targets per step.",
                  "items": {
                    "properties": {
                      "id": {
                        "description": "The ID of the target that the step will notify.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of target that the step will notify.",
                        "type": "string",
                        "x-speakeasy-enums": [
                          {
                            "name": "CreateTeamEscalationPolicyTypeOncallschedule",
                            "value": "OnCallSchedule"
                          },
                          {
                            "name": "CreateTeamEscalationPolicyTypeUser",
                            "value": "User"
                          },
                          {
                            "name": "CreateTeamEscalationPolicyTypeSlackchannel",
                            "value": "SlackChannel"
                          },
                          {
                            "name": "CreateTeamEscalationPolicyTypeMicrosoftteamschannel",
                            "value": "MicrosoftTeamsChannel"
                          },
                          {
                            "name": "CreateTeamEscalationPolicyTypeEntireteam",
                            "value": "EntireTeam"
                          },
                          {
                            "name": "CreateTeamEscalationPolicyTypeWebhook",
                            "value": "Webhook"
                          }
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "timeout": {
                  "description": "An ISO8601 duration string specifying how long to wait before moving on to the next step. For the last step, this value specifies how long to wait before the escalation policy should repeat, if it repeats.",
                  "type": "string"
                }
              },
              "required": [
                "targets",
                "timeout"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "steps"
        ],
        "type": "object"
      },
      "create_team_on_call_schedule": {
        "description": "Create a Signals on-call schedule for a team with a single rotation. More rotations can be created later.",
        "properties": {
          "color": {
            "description": "A hex color code that will be used to represent the initial rotation in FireHydrant's UI.",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "A detailed description of the on-call schedule.",
            "nullable": true,
            "type": "string"
          },
          "member_ids": {
            "description": "This parameter is deprecated; use `members` instead.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "members": {
            "description": "An ordered list of objects that specify members of the initial rotation.",
            "items": {
              "properties": {
                "user_id": {
                  "description": "The ID of a user who should be added to the schedule's initial rotation. You can add a user to the\nschedule multiple times to construct more complex rotations, and you can specify a `null` user ID\nto create unassigned slots in the rotation.\n",
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "description": "The on-call schedule's name.",
            "type": "string"
          },
          "restrictions": {
            "description": "A list of objects that restrict the initial rotation to specific on-call periods.",
            "items": {
              "properties": {
                "end_day": {
                  "description": "The day of the week on which the restriction should end, as its long-form name (e.g. \"monday\", \"tuesday\", etc).",
                  "type": "string",
                  "x-speakeasy-enums": [
                    {
                      "name": "CreateTeamOnCallScheduleEndDayMonday",
                      "value": "monday"
                    },
                    {
                      "name": "CreateTeamOnCallScheduleEndDayTuesday",
                      "value": "tuesday"
                    },
                    {
                      "name": "CreateTeamOnCallScheduleEndDayWednesday",
                      "value": "wednesday"
                    },
                    {
                      "name": "CreateTeamOnCallScheduleEndDayThursday",
                      "value": "thursday"
                    },
                    {
                      "name": "CreateTeamOnCallScheduleEndDayFriday",
                      "value": "friday"
                    },
                    {
                      "name": "CreateTeamOnCallScheduleEndDaySaturday",
                      "value": "saturday"
                    },
                    {
                      "name": "CreateTeamOnCallScheduleEndDaySunday",
                      "value": "sunday"
                    }
                  ]
                },
                "end_time": {
                  "description": "An ISO8601 time string specifying when the restriction should end.",
                  "type": "string"
                },
                "start_day": {
                  "description": "The day of the week on which the restriction should start, as its long-form name (e.g. \"monday\", \"tuesday\", etc).",
                  "type": "string",
                  "x-speakeasy-enums": [
                    {
                      "name": "CreateTeamOnCallScheduleStartDayMonday",
                      "value": "monday"
                    },
                    {
                      "name": "CreateTeamOnCallScheduleStartDayTuesday",
                      "value": "tuesday"
                    },
                    {
                      "name": "CreateTeamOnCallScheduleStartDayWednesday",
                      "value": "wednesday"
                    },
                    {
                      "name": "CreateTeamOnCallScheduleStartDayThursday",
                      "value": "thursday"
                    },
                    {
                      "name": "CreateTeamOnCallScheduleStartDayFriday",
                      "value": "friday"
                    },
                    {
                      "name": "CreateTeamOnCallScheduleStartDaySaturday",
                      "value": "saturday"
                    },
                    {
                      "name": "CreateTeamOnCallScheduleStartDaySunday",
                      "value": "sunday"
                    }
                  ]
                },
                "start_time": {
                  "description": "An ISO8601 time string specifying when the restriction should start.",
                  "type": "string"
                }
              },
              "required": [
                "end_day",
                "end_time",
                "start_day",
                "start_time"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "rotation_description": {
            "description": "An optional description for the initial rotation. If not provided, the schedule's description will be used.",
            "nullable": true,
            "type": "string"
          },
          "rotation_name": {
            "description": "An optional name for the initial rotation. If not provided, the schedule's name will be used.",
            "nullable": true,
            "type": "string"
          },
          "slack_user_group_id": {
            "description": "The ID of a Slack user group to sync the initial rotation's on-call members to.",
            "nullable": true,
            "type": "string"
          },
          "start_time": {
            "description": "An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is \"custom\".",
            "nullable": true,
            "type": "string"
          },
          "strategy": {
            "description": "An object that specifies how the initial rotation's on-call shifts should be generated. This value must be provided if `rotations` is not.",
            "nullable": true,
            "properties": {
              "handoff_day": {
                "description": "The day of the week on which on-call shifts should hand off, as its long-form name (e.g. \"monday\", \"tuesday\", etc). This value is only used if the strategy type is \"weekly\".",
                "nullable": true,
                "type": "string",
                "x-speakeasy-enums": [
                  {
                    "name": "CreateTeamOnCallScheduleHandoffDayMonday",
                    "value": "monday"
                  },
                  {
                    "name": "CreateTeamOnCallScheduleHandoffDayTuesday",
                    "value": "tuesday"
                  },
                  {
                    "name": "CreateTeamOnCallScheduleHandoffDayWednesday",
                    "value": "wednesday"
                  },
                  {
                    "name": "CreateTeamOnCallScheduleHandoffDayThursday",
                    "value": "thursday"
                  },
                  {
                    "name": "CreateTeamOnCallScheduleHandoffDayFriday",
                    "value": "friday"
                  },
                  {
                    "name": "CreateTeamOnCallScheduleHandoffDaySaturday",
                    "value": "saturday"
                  },
                  {
                    "name": "CreateTeamOnCallScheduleHandoffDaySunday",
                    "value": "sunday"
                  }
                ]
              },
              "handoff_time": {
                "description": "An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is \"daily\" or \"weekly\".",
                "nullable": true,
                "type": "string"
              },
              "shift_duration": {
                "description": "An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is \"custom\".",
                "nullable": true,
                "type": "string"
              },
              "type": {
                "description": "The type of strategy. Must be one of \"daily\", \"weekly\", or \"custom\".",
                "type": "string",
                "x-speakeasy-enums": [
                  {
                    "name": "CreateTeamOnCallScheduleTypeDaily",
                    "value": "daily"
                  },
                  {
                    "name": "CreateTeamOnCallScheduleTypeWeekly",
                    "value": "weekly"
                  },
                  {
                    "name": "CreateTeamOnCallScheduleTypeCustom",
                    "value": "custom"
                  }
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          },
          "time_zone": {
            "description": "The time zone in which the on-call schedule's rotation will operate. This value must be a valid IANA time zone name and must be provided if `rotations` is not.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_team_signal_rule": {
        "description": "Create a Signals rule for a team.",
        "properties": {
          "create_incident_condition_when": {
            "description": "Determines when an incident should be created when this rule is matched",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateTeamSignalRuleCreateIncidentConditionWhenWhenUnspecified",
                "value": "WHEN_UNSPECIFIED"
              },
              {
                "name": "CreateTeamSignalRuleCreateIncidentConditionWhenWhenAlways",
                "value": "WHEN_ALWAYS"
              }
            ]
          },
          "deduplication_expiry": {
            "description": "The amount of time alerts created from this rule will be deduplicated",
            "nullable": true,
            "type": "string"
          },
          "expression": {
            "description": "The CEL expression that defines the rule.",
            "type": "string"
          },
          "incident_type_id": {
            "description": "The ID of an incident type that should be used when an alert is promoted to an incident",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The rule's name.",
            "type": "string"
          },
          "notification_priority_override": {
            "description": "A notification priority that will be set on the resulting alert (default: HIGH)",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateTeamSignalRuleNotificationPriorityOverrideHigh",
                "value": "HIGH"
              },
              {
                "name": "CreateTeamSignalRuleNotificationPriorityOverrideMedium",
                "value": "MEDIUM"
              },
              {
                "name": "CreateTeamSignalRuleNotificationPriorityOverrideLow",
                "value": "LOW"
              },
              {
                "name": "CreateTeamSignalRuleNotificationPriorityOverrideEmpty",
                "value": ""
              }
            ]
          },
          "target_id": {
            "description": "The ID of the target that the rule will notify when matched.",
            "type": "string"
          },
          "target_type": {
            "description": "The type of target that the rule will notify when matched.",
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "CreateTeamSignalRuleTargetTypeEscalationpolicy",
                "value": "EscalationPolicy"
              },
              {
                "name": "CreateTeamSignalRuleTargetTypeOncallschedule",
                "value": "OnCallSchedule"
              },
              {
                "name": "CreateTeamSignalRuleTargetTypeUser",
                "value": "User"
              },
              {
                "name": "CreateTeamSignalRuleTargetTypeWebhook",
                "value": "Webhook"
              },
              {
                "name": "CreateTeamSignalRuleTargetTypeSlackchannel",
                "value": "SlackChannel"
              },
              {
                "name": "CreateTeamSignalRuleTargetTypeMicrosoftteamschannel",
                "value": "MicrosoftTeamsChannel"
              }
            ]
          }
        },
        "required": [
          "expression",
          "name",
          "target_id",
          "target_type"
        ],
        "type": "object"
      },
      "create_ticket": {
        "description": "Creates a ticket for a project",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "priority_id": {
            "nullable": true,
            "type": "string"
          },
          "project_id": {
            "nullable": true,
            "type": "string"
          },
          "related_to": {
            "description": "Which incident this ticket is related to, in the format of 'incident/UUID'",
            "nullable": true,
            "type": "string"
          },
          "remote_url": {
            "description": "The remote URL for an existing ticket in a supported and configured ticketing integration",
            "nullable": true,
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "tag_list": {
            "description": "List of tags for the ticket",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "summary"
        ],
        "type": "object"
      },
      "create_ticketing_priority": {
        "description": "Create a single ticketing priority",
        "properties": {
          "name": {
            "type": "string"
          },
          "position": {
            "description": "The position that this priority should take in your list of priorities. Priorities should be ordered from highest to lowest, with the highest priority at 0. If a position isn't specified, the new priority will be added to the end of the list; if another priority already exists at the specified position, that priority and all priorities following it will automatically be moved down the list to make room for the new priority.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_webhook": {
        "description": "Create a new webhook",
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "debug_signals_expression": {
        "description": "Debug Signals expressions",
        "properties": {
          "expression": {
            "description": "CEL expression",
            "type": "string"
          },
          "signals": {
            "description": "List of signals to evaluate rule expression against",
            "items": {
              "properties": {
                "annotations": {
                  "nullable": true,
                  "properties": {},
                  "type": "object"
                },
                "body": {
                  "nullable": true,
                  "type": "string"
                },
                "id": {
                  "nullable": true,
                  "type": "string"
                },
                "images": {
                  "items": {
                    "properties": {
                      "alt": {
                        "nullable": true,
                        "type": "string"
                      },
                      "src": {
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "level": {
                  "nullable": true,
                  "type": "string"
                },
                "links": {
                  "items": {
                    "properties": {
                      "href": {
                        "nullable": true,
                        "type": "string"
                      },
                      "text": {
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "organization_id": {
                  "nullable": true,
                  "type": "string"
                },
                "summary": {
                  "nullable": true,
                  "type": "string"
                },
                "tags": {
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "expression",
          "signals"
        ],
        "type": "object"
      },
      "export_incident_retrospectives": {
        "properties": {
          "integration_slug": {
            "description": "The name of the integration to export the retrospective to.",
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "ExportIncidentRetrospectivesIntegrationSlugConfluenceCloud",
                "value": "confluence_cloud"
              },
              {
                "name": "ExportIncidentRetrospectivesIntegrationSlugGoogleDocs",
                "value": "google_docs"
              }
            ]
          },
          "parent_page_id": {
            "description": "The ID of the parent page to export the retrospective to.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "integration_slug"
        ],
        "type": "object"
      },
      "generate_audience_summary": {
        "properties": {
          "force_regenerate": {
            "default": true,
            "description": "Whether to force regeneration of the summary",
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ingest_catalog_data": {
        "description": "Accepts catalog data in the configured format and asyncronously processes the data to incorporate changes into service catalog.",
        "properties": {
          "data": {
            "description": "Service data",
            "type": "string"
          },
          "encoding": {
            "description": "Encoding for submitted data",
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "IngestCatalogDataEncodingTextYaml",
                "value": "text/yaml"
              },
              {
                "name": "IngestCatalogDataEncodingApplicationXYaml",
                "value": "application/x-yaml"
              },
              {
                "name": "IngestCatalogDataEncodingApplicationJson",
                "value": "application/json"
              }
            ]
          }
        },
        "required": [
          "data",
          "encoding"
        ],
        "type": "object"
      },
      "patch_scim_user": {
        "description": "PATCH SCIM endpoint to update a User. This endpoint is used to update a resource's attributes.",
        "properties": {
          "Operations": {
            "description": "An array of operations to perform on the user",
            "items": {
              "properties": {
                "op": {
                  "description": "The operation to perform on the user. Options are add, remove, replace",
                  "type": "string"
                },
                "path": {
                  "description": "The path to the attribute to be modified",
                  "type": "string"
                }
              },
              "required": [
                "op",
                "path"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "trail": {
            "description": "An optional trail to log the request",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "Operations"
        ],
        "type": "object"
      },
      "publish_post_mortem_report": {
        "description": "Marks an incident retrospective as published and emails all of the participants in the report the summary",
        "properties": {
          "publish": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "PublishPostMortemReportPublishTrue",
                "value": "true"
              }
            ]
          },
          "team_ids": {
            "description": "An array of team IDs with whom to share the report",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "user_ids": {
            "description": "An array of user IDs with whom to share the report",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "reorder_post_mortem_reasons": {
        "description": "Update the order of contributing factors in a retrospective report",
        "properties": {
          "new_position": {
            "format": "int32",
            "type": "integer"
          },
          "old_position": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "new_position",
          "old_position"
        ],
        "type": "object"
      },
      "resolve_incident": {
        "properties": {
          "milestone": {
            "description": "The slug of any milestone in the post-incident or closed phase to set on the incident (and its children, if `resolve_children` os set). Must be one of the configured milestones available on this incident.",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "set_member_default_audience": {
        "properties": {
          "audience_id": {
            "description": "ID of the audience to set as default",
            "type": "string"
          }
        },
        "required": [
          "audience_id"
        ],
        "type": "object"
      },
      "share_incident_retrospectives": {
        "properties": {
          "retrospective_ids": {
            "description": "An array of retrospective IDs to share",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "team_ids": {
            "description": "An array of team IDs with whom to share the report",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "user_ids": {
            "description": "An array of user IDs with whom to share the report",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "retrospective_ids"
        ],
        "type": "object"
      },
      "update_ai_preferences": {
        "properties": {
          "ai": {
            "description": "Whether to enable AI features",
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "description": "Whether to enable incident descriptions",
            "nullable": true,
            "type": "boolean"
          },
          "followups": {
            "description": "Whether to enable incident followups",
            "nullable": true,
            "type": "boolean"
          },
          "impact": {
            "description": "Whether to enable incident impact",
            "nullable": true,
            "type": "boolean"
          },
          "retros": {
            "description": "Whether to enable incident retrospectives",
            "nullable": true,
            "type": "boolean"
          },
          "similar_incidents": {
            "description": "Whether to enable similar incidents",
            "nullable": true,
            "type": "boolean"
          },
          "summaries": {
            "description": "Whether to enable incident summaries",
            "nullable": true,
            "type": "boolean"
          },
          "updates": {
            "description": "Whether to enable incident updates",
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "update_audience": {
        "properties": {
          "active": {
            "description": "Whether the audience is active or discarded",
            "nullable": true,
            "type": "boolean"
          },
          "default": {
            "description": "Whether this is the default audience",
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "description": "Description of the audience (max 4000 characters)",
            "nullable": true,
            "type": "string"
          },
          "details[position]": {
            "description": "Position of the question in the list (1-based indexing)",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array"
          },
          "details[prompt]": {
            "description": "The prompt to display when collecting this detail",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "details[question]": {
            "description": "The incident detail question (max 255 characters)",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "details[slug]": {
            "description": "Optional unique identifier for this detail",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "description": "Name of the audience (max 255 characters)",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_authed_provider": {
        "properties": {
          "integration_default": {
            "description": "Set as the default integration for the account",
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "update_aws_cloudtrail_batch": {
        "description": "Update a CloudTrail batch with new information.",
        "properties": {
          "ends_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "error": {
            "nullable": true,
            "type": "string"
          },
          "events_created": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_aws_connection": {
        "description": "Update the AWS connection with the provided data.",
        "properties": {
          "aws_account_id": {
            "nullable": true,
            "type": "string"
          },
          "connection_status": {
            "nullable": true,
            "type": "string"
          },
          "target_arn": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_call_route": {
        "description": "Update a call route by ID",
        "properties": {
          "connect_mode": {
            "description": "Connect mode for the call route",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "UpdateCallRouteConnectModeConnectModeConference",
                "value": "CONNECT_MODE_CONFERENCE"
              },
              {
                "name": "UpdateCallRouteConnectModeConnectModeDirectDial",
                "value": "CONNECT_MODE_DIRECT_DIAL"
              }
            ]
          },
          "description": {
            "description": "Description of the call route",
            "nullable": true,
            "type": "string"
          },
          "greeting_message": {
            "description": "Greeting message for the call route",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the call route",
            "nullable": true,
            "type": "string"
          },
          "routing_mode": {
            "description": "Routing mode for the call route",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "UpdateCallRouteRoutingModeRoutingModeTakeMessage",
                "value": "ROUTING_MODE_TAKE_MESSAGE"
              },
              {
                "name": "UpdateCallRouteRoutingModeRoutingModeDirectConnect",
                "value": "ROUTING_MODE_DIRECT_CONNECT"
              }
            ]
          },
          "steps": {
            "description": "Steps for the call route",
            "items": {
              "properties": {
                "target_id": {
                  "description": "ID of the target",
                  "type": "string"
                },
                "target_type": {
                  "description": "Type of target",
                  "type": "string",
                  "x-speakeasy-enums": [
                    {
                      "name": "UpdateCallRouteTargetTypeUser",
                      "value": "User"
                    },
                    {
                      "name": "UpdateCallRouteTargetTypeOncallschedule",
                      "value": "OnCallSchedule"
                    }
                  ]
                },
                "timeout": {
                  "description": "Timeout in seconds for the step",
                  "type": "string"
                }
              },
              "required": [
                "target_id",
                "target_type",
                "timeout"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "target": {
            "description": "Target for the call route (required unless connect_mode is direct_dial)",
            "nullable": true,
            "properties": {
              "id": {
                "description": "ID of the target",
                "type": "string"
              },
              "type": {
                "description": "Type of target",
                "type": "string",
                "x-speakeasy-enums": [
                  {
                    "name": "UpdateCallRouteTypeEscalationpolicy",
                    "value": "EscalationPolicy"
                  },
                  {
                    "name": "UpdateCallRouteTypeOncallschedule",
                    "value": "OnCallSchedule"
                  },
                  {
                    "name": "UpdateCallRouteTypeUser",
                    "value": "User"
                  },
                  {
                    "name": "UpdateCallRouteTypeWebhook",
                    "value": "Webhook"
                  },
                  {
                    "name": "UpdateCallRouteTypeSlackchannel",
                    "value": "SlackChannel"
                  },
                  {
                    "name": "UpdateCallRouteTypeMicrosoftteamschannel",
                    "value": "MicrosoftTeamsChannel"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "update_change": {
        "description": "Update a change entry",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_change_event": {
        "description": "Update a change event",
        "properties": {
          "attachments": {
            "description": "JSON objects representing attachments, see attachments documentation for the schema",
            "items": {
              "properties": {
                "type": {
                  "type": "string",
                  "x-speakeasy-enums": [
                    {
                      "name": "UpdateChangeEventTypeLink",
                      "value": "link"
                    }
                  ]
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ends_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "environments": {
            "description": "An array of environment IDs (setting this will overwrite the current environments)",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "labels": {
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "services": {
            "description": "An array of service IDs (setting this will overwrite the current services)",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "starts_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_change_identity": {
        "description": "Update an identity for the change entry",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "value"
        ],
        "type": "object"
      },
      "update_checklist_template": {
        "description": "Update a checklist templates attributes",
        "properties": {
          "checks": {
            "description": "An array of checks for the checklist template",
            "items": {
              "properties": {
                "description": {
                  "description": "The description of the check",
                  "nullable": true,
                  "type": "string"
                },
                "id": {
                  "description": "Specify the check ID when updating an already existing check",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the check",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "connected_services": {
            "description": "Array of service IDs to attach checklist template to",
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "remove": {
                  "description": "Set to `true` to remove checklist from service",
                  "nullable": true,
                  "type": "boolean"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "remove_remaining_connected_services": {
            "description": "If set to true, any services tagged on the checklist that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the services",
            "nullable": true,
            "type": "boolean"
          },
          "team_id": {
            "description": "The ID of the Team that owns the checklist template",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_comment": {
        "description": "Update a comment's attributes",
        "properties": {
          "body": {
            "description": "Text body of comment",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_custom_field_definition": {
        "description": "Update a single custom field definition",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "display_name": {
            "nullable": true,
            "type": "string"
          },
          "permissible_values": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "required": {
            "nullable": true,
            "type": "boolean"
          },
          "required_at_milestone_id": {
            "description": "An optional milestone ID to specify when the field should become required, if `required` is set to `true`. If not provided, required fields are always required.",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_environment": {
        "description": "Update a environments attributes",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "update_functionality": {
        "description": "Update a functionalities attributes",
        "properties": {
          "alert_on_add": {
            "nullable": true,
            "type": "boolean"
          },
          "auto_add_responding_team": {
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "external_resources": {
            "description": "An array of external resources to attach to this service.",
            "items": {
              "properties": {
                "connection_type": {
                  "description": "The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, statuspage, victorops. Not required if the resource has already been imported.",
                  "nullable": true,
                  "type": "string"
                },
                "remote_id": {
                  "type": "string"
                },
                "remove": {
                  "description": "If you are trying to remove an external resource from a service, set this to 'true'.",
                  "nullable": true,
                  "type": "boolean"
                }
              },
              "required": [
                "remote_id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "labels": {
            "description": "A hash of label keys and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "links": {
            "description": "An array of links to associate with this functionality. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.",
            "items": {
              "properties": {
                "href_url": {
                  "description": "URL",
                  "type": "string"
                },
                "icon_url": {
                  "description": "An optional URL to an icon representing this link",
                  "nullable": true,
                  "type": "string"
                },
                "id": {
                  "description": "If updating an existing link, specify it's id.",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "Short name used to display and identify this link",
                  "type": "string"
                },
                "remove": {
                  "description": "If you are trying to remove a link, set this to 'true'",
                  "nullable": true,
                  "type": "boolean"
                }
              },
              "required": [
                "href_url",
                "name"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "owner": {
            "description": "An object representing a Team that owns the functionality",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "remove_owner": {
            "description": "If you are trying to remove a team as an owner from a functionality, set this to 'true'",
            "nullable": true,
            "type": "boolean"
          },
          "remove_remaining_external_resources": {
            "description": "If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources",
            "nullable": true,
            "type": "boolean"
          },
          "remove_remaining_services": {
            "default": false,
            "description": "Set this to true if you want to remove all of the services that are not included in the services array from the functionality",
            "nullable": true,
            "type": "boolean"
          },
          "remove_remaining_teams": {
            "description": "If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams",
            "nullable": true,
            "type": "boolean"
          },
          "services": {
            "items": {
              "properties": {
                "id": {
                  "description": "ID of a service",
                  "type": "string"
                },
                "remove": {
                  "description": "Set to true if you want to remove the given service from the functionality",
                  "nullable": true,
                  "type": "boolean"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "teams": {
            "description": "An array of teams to attach to this functionality.",
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "remove": {
                  "description": "If you are trying to remove a team from a functionality, set this to 'true'",
                  "nullable": true,
                  "type": "boolean"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "update_incident": {
        "description": "Updates an incident with provided parameters",
        "properties": {
          "customer_impact_summary": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "incident_type_id": {
            "description": "The ID of the incident type. This will copy values from the incident type (if any) unless they are being overridden via parameters in this request.",
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "Key:value pairs to track custom data for the incident",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "priority": {
            "nullable": true,
            "type": "string"
          },
          "severity": {
            "nullable": true,
            "type": "string"
          },
          "severity_condition_id": {
            "nullable": true,
            "type": "string"
          },
          "severity_impact_id": {
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "tag_list": {
            "description": "List of tags for the incident",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "update_incident_alert_primary": {
        "description": "Setting an alert as primary will overwrite milestone times in the FireHydrant incident with times included in the primary alert. Services attached to the primary alert will also be automatically added to the incident.",
        "properties": {
          "primary": {
            "type": "boolean"
          }
        },
        "required": [
          "primary"
        ],
        "type": "object"
      },
      "update_incident_change_event": {
        "description": "Update a change attached to an incident",
        "properties": {
          "type": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "UpdateIncidentChangeEventTypeCaused",
                "value": "caused"
              },
              {
                "name": "UpdateIncidentChangeEventTypeFixed",
                "value": "fixed"
              },
              {
                "name": "UpdateIncidentChangeEventTypeSuspect",
                "value": "suspect"
              },
              {
                "name": "UpdateIncidentChangeEventTypeDismissed",
                "value": "dismissed"
              }
            ]
          },
          "why": {
            "description": "A short description about why this change event is related",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_incident_chat_message": {
        "description": "Update an existing generic chat message on an incident.",
        "properties": {
          "body": {
            "type": "string"
          }
        },
        "required": [
          "body"
        ],
        "type": "object"
      },
      "update_incident_impact_patch": {
        "description": "Allows updating an incident's impacted infrastructure, with the option to\nmove the incident into a different milestone and provide a note to update\nthe incident timeline and any attached status pages. If this method is\nrequested with the PUT verb, impacts will be completely replaced with the\ninformation in the request body, even if not provided (effectively clearing\nall impacts). If this method is requested with the PATCH verb, the provided\nimpacts will be added or updated, but no impacts will be removed.\n",
        "properties": {
          "impact": {
            "items": {
              "properties": {
                "condition_id": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "condition_id",
                "id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "milestone": {
            "nullable": true,
            "type": "string"
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "status_pages": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "integration_slug": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "integration_slug"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "update_incident_impact_put": {
        "description": "Allows updating an incident's impacted infrastructure, with the option to\nmove the incident into a different milestone and provide a note to update\nthe incident timeline and any attached status pages. If this method is\nrequested with the PUT verb, impacts will be completely replaced with the\ninformation in the request body, even if not provided (effectively clearing\nall impacts). If this method is requested with the PATCH verb, the provided\nimpacts will be added or updated, but no impacts will be removed.\n",
        "properties": {
          "impact": {
            "items": {
              "properties": {
                "condition_id": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "condition_id",
                "id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "milestone": {
            "nullable": true,
            "type": "string"
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "status_pages": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "integration_slug": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "integration_slug"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "update_incident_link": {
        "description": "Update the external incident link attributes",
        "properties": {
          "display_text": {
            "nullable": true,
            "type": "string"
          },
          "href_url": {
            "nullable": true,
            "type": "string"
          },
          "icon_url": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_incident_note": {
        "description": "Updates the body of a note",
        "properties": {
          "body": {
            "type": "string"
          }
        },
        "required": [
          "body"
        ],
        "type": "object"
      },
      "update_incident_retrospective": {
        "description": "Update a retrospective attached to an incident",
        "properties": {
          "is_hidden": {
            "description": "To hide or unhide the retrospective.",
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "update_incident_retrospective_field": {
        "description": "Update retrospective field value",
        "properties": {
          "dynamic_input_field_id": {
            "description": "The ID of the dynamic input field to update.",
            "nullable": true,
            "type": "string"
          },
          "value": {
            "description": "The value to set for the field.",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "update_incident_role": {
        "description": "Update a single incident role from its ID",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_incident_task": {
        "description": "Update a task's attributes",
        "properties": {
          "assignee_id": {
            "description": "The ID of the user assigned to the task.",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "A description of what the task is for.",
            "nullable": true,
            "type": "string"
          },
          "due_at": {
            "description": "The due date of the task. Relative values are supported such as '5m'",
            "nullable": true,
            "type": "string"
          },
          "state": {
            "description": "The state of the task. One of: open, in_progress, cancelled, done",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "description": "The title of the task.",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_incident_type": {
        "description": "Update a single incident type from its ID",
        "properties": {
          "description": {
            "description": "A description of the incident type",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "template": {
            "properties": {
              "customer_impact_summary": {
                "nullable": true,
                "type": "string"
              },
              "description": {
                "nullable": true,
                "type": "string"
              },
              "impacts": {
                "description": "An array of impact/condition combinations",
                "items": {
                  "properties": {
                    "condition_id": {
                      "description": "The id of the condition",
                      "type": "string"
                    },
                    "id": {
                      "description": "The id of impact",
                      "type": "string"
                    }
                  },
                  "required": [
                    "condition_id",
                    "id"
                  ],
                  "type": "object"
                },
                "nullable": true,
                "type": "array"
              },
              "labels": {
                "description": "A labels hash of keys and values",
                "nullable": true,
                "properties": {},
                "type": "object"
              },
              "priority": {
                "nullable": true,
                "type": "string"
              },
              "private_incident": {
                "nullable": true,
                "type": "boolean"
              },
              "runbook_ids": {
                "description": "List of ids of Runbooks to attach to incidents created from this type",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              },
              "severity": {
                "nullable": true,
                "type": "string"
              },
              "tag_list": {
                "description": "List of tags for the incident",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              },
              "team_ids": {
                "description": "List of ids of teams to be assigned to incidents",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "name",
          "template"
        ],
        "type": "object"
      },
      "update_lifecycle_measurement_definition": {
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ends_at_milestone_id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          },
          "starts_at_milestone_id": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_lifecycle_milestone": {
        "properties": {
          "auto_assign_timestamp_on_create": {
            "description": "The setting for auto-assigning the milestone's timestamp during incident declaration",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "UpdateLifecycleMilestoneAutoAssignTimestampOnCreateAlwaysSetOnCreate",
                "value": "always_set_on_create"
              },
              {
                "name": "UpdateLifecycleMilestoneAutoAssignTimestampOnCreateOnlySetOnManualCreate",
                "value": "only_set_on_manual_create"
              },
              {
                "name": "UpdateLifecycleMilestoneAutoAssignTimestampOnCreateNeverSetOnCreate",
                "value": "never_set_on_create"
              }
            ]
          },
          "description": {
            "description": "A long-form description of the milestone's purpose",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the milestone",
            "nullable": true,
            "type": "string"
          },
          "position": {
            "description": "The position of the milestone within the phase. If not provided, the milestone will be added as the last milestone in the phase.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "required_at_milestone_id": {
            "description": "The ID of a later milestone that cannot be started until this milestone has a timestamp populated",
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "description": "A unique identifier for the milestone. If not provided, one will be generated from the name.",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_notification_policy": {
        "properties": {
          "max_delay": {
            "description": "An ISO8601 duration string specifying the maximum delay of the notification.",
            "nullable": true,
            "type": "string"
          },
          "notification_group_method": {
            "description": "The group method of notification that will be delivered.",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "UpdateNotificationPolicyNotificationGroupMethodAny",
                "value": "any"
              },
              {
                "name": "UpdateNotificationPolicyNotificationGroupMethodPush",
                "value": "push"
              },
              {
                "name": "UpdateNotificationPolicyNotificationGroupMethodEmail",
                "value": "email"
              },
              {
                "name": "UpdateNotificationPolicyNotificationGroupMethodVoice",
                "value": "voice"
              },
              {
                "name": "UpdateNotificationPolicyNotificationGroupMethodMobileText",
                "value": "mobile_text"
              },
              {
                "name": "UpdateNotificationPolicyNotificationGroupMethodChat",
                "value": "chat"
              }
            ]
          },
          "priority": {
            "description": "The priority of the notification.",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "UpdateNotificationPolicyPriorityHigh",
                "value": "HIGH"
              },
              {
                "name": "UpdateNotificationPolicyPriorityMedium",
                "value": "MEDIUM"
              },
              {
                "name": "UpdateNotificationPolicyPriorityLow",
                "value": "LOW"
              }
            ]
          }
        },
        "type": "object"
      },
      "update_nunc_component_group": {
        "properties": {
          "component_group_id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "update_nunc_connection": {
        "properties": {
          "company_name": {
            "nullable": true,
            "type": "string"
          },
          "company_tos_url": {
            "nullable": true,
            "type": "string"
          },
          "company_website": {
            "nullable": true,
            "type": "string"
          },
          "components[infrastructure_id]": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "components[infrastructure_type]": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "conditions[condition_id]": {
            "description": "Severity matrix condition id",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "conditions[nunc_condition]": {
            "description": "Status page condition to map your severity matrix condition to",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enable_histogram": {
            "nullable": true,
            "type": "boolean"
          },
          "exposed_fields": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "greeting_body": {
            "nullable": true,
            "type": "string"
          },
          "greeting_title": {
            "nullable": true,
            "type": "string"
          },
          "operational_message": {
            "nullable": true,
            "type": "string"
          },
          "primary_color": {
            "nullable": true,
            "type": "string"
          },
          "secondary_color": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "ui_version": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "components[infrastructure_id]",
          "components[infrastructure_type]",
          "conditions[condition_id]",
          "conditions[nunc_condition]"
        ],
        "type": "object"
      },
      "update_nunc_image_form": {
        "properties": {
          "file": {
            "format": "binary",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_nunc_link": {
        "description": "Update a link to be displayed on a FireHydrant status page",
        "properties": {
          "display_text": {
            "nullable": true,
            "type": "string"
          },
          "href_url": {
            "nullable": true,
            "type": "string"
          },
          "icon_url": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_on_call_shift": {
        "description": "Update a Signals on-call shift by ID",
        "properties": {
          "coverage_request": {
            "description": "A description of why coverage is needed for this shift. If the shift is re-assigned, this will automatically be cleared unless provided again.",
            "nullable": true,
            "type": "string"
          },
          "end_time": {
            "description": "The end time of the shift in ISO8601 format.",
            "nullable": true,
            "type": "string"
          },
          "start_time": {
            "description": "The start time of the shift in ISO8601 format.",
            "nullable": true,
            "type": "string"
          },
          "user_id": {
            "description": "The ID of the user who is on-call for the shift. If not provided, the shift will be unassigned.",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_post_mortem_field": {
        "description": "Update a field value on a post mortem report",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "update_post_mortem_questions": {
        "description": "Update the questions configured to be provided and filled out on future retrospective reports.",
        "properties": {
          "_make_swagger_work_": {
            "nullable": true,
            "type": "string"
          },
          "questions": {
            "items": {
              "properties": {
                "id": {
                  "description": "ID of a question",
                  "nullable": true,
                  "type": "string"
                },
                "title": {
                  "description": "title of a question",
                  "nullable": true,
                  "type": "string"
                },
                "tooltip": {
                  "description": "tooltip of a question",
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "update_post_mortem_reason": {
        "description": "Update a contributing factor",
        "properties": {
          "summary": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_post_mortem_report": {
        "description": "Update a report",
        "properties": {
          "additional_details": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "questions": {
            "items": {
              "properties": {
                "body": {
                  "description": "Answer to question",
                  "nullable": true,
                  "type": "string"
                },
                "id": {
                  "description": "ID of a question",
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_priority": {
        "description": "Update a specific priority",
        "properties": {
          "default": {
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_retrospective_template": {
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "fields[help_text]": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "fields[id]": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "fields[is_required]": {
            "items": {
              "type": "boolean"
            },
            "nullable": true,
            "type": "array"
          },
          "fields[label]": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fields[permissible_values]": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "fields[schema]": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "fields[type]": {
            "items": {
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "UpdateRetrospectiveTemplateFieldsTypeText",
                  "value": "text"
                },
                {
                  "name": "UpdateRetrospectiveTemplateFieldsTypeSingleSelect",
                  "value": "single_select"
                },
                {
                  "name": "UpdateRetrospectiveTemplateFieldsTypeMultiSelect",
                  "value": "multi_select"
                },
                {
                  "name": "UpdateRetrospectiveTemplateFieldsTypeNumeric",
                  "value": "numeric"
                },
                {
                  "name": "UpdateRetrospectiveTemplateFieldsTypeDatetime",
                  "value": "datetime"
                },
                {
                  "name": "UpdateRetrospectiveTemplateFieldsTypeDynamicInputGroup",
                  "value": "dynamic_input_group"
                },
                {
                  "name": "UpdateRetrospectiveTemplateFieldsTypeMarkdown",
                  "value": "markdown"
                },
                {
                  "name": "UpdateRetrospectiveTemplateFieldsTypeMarkdownText",
                  "value": "markdown_text"
                }
              ]
            },
            "type": "array"
          },
          "is_default": {
            "nullable": true,
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "sections[elements]": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sections[slug]": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "fields[label]",
          "fields[type]",
          "sections[elements]",
          "sections[slug]"
        ],
        "type": "object"
      },
      "update_runbook": {
        "description": "Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything\nabout a runbook, including but not limited to the steps, environments, attachment rules, and severities.\n",
        "properties": {
          "attachment_rule": {
            "nullable": true,
            "properties": {
              "logic": {
                "description": "The JSON logic for the attaching the runbook",
                "type": "string"
              },
              "user_data": {
                "description": "The user data for the rule",
                "nullable": true,
                "type": "string"
              }
            },
            "required": [
              "logic"
            ],
            "type": "object"
          },
          "auto_attach_to_restricted_incidents": {
            "description": "Whether or not this runbook should be automatically attached to restricted incidents. Note that setting this to `true` will prevent it from being attached to public incidents, even manually. Defaults to `false`.",
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "environments": {
            "items": {
              "properties": {
                "id": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "owner": {
            "description": "An object representing a Team that owns the runbook",
            "nullable": true,
            "properties": {
              "id": {
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          },
          "services": {
            "items": {
              "properties": {
                "id": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "severities": {
            "items": {
              "properties": {
                "id": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "steps": {
            "items": {
              "properties": {
                "action_id": {
                  "description": "ID of action to use for this step.",
                  "type": "string"
                },
                "name": {
                  "description": "Name for step",
                  "type": "string"
                },
                "rule": {
                  "nullable": true,
                  "properties": {
                    "logic": {
                      "description": "The JSON logic for the rule",
                      "type": "string"
                    },
                    "user_data": {
                      "description": "The user data for the rule",
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "required": [
                    "logic"
                  ],
                  "type": "object"
                },
                "step_id": {
                  "description": "ID of step to be updated",
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "action_id",
                "name"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "tutorial": {
            "description": "Whether or not this runbook is a tutorial runbook",
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "update_runbook_execution_step": {
        "description": "Updates a runbook step execution, especially for changing the state of a step execution.",
        "properties": {
          "data": {
            "description": "Data for execution of this step",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "repeats_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "schedule_for": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "update_saved_search": {
        "description": "Update a specific saved search",
        "properties": {
          "filter_values": {
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "is_private": {
            "nullable": true,
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_scheduled_maintenance": {
        "description": "Change the conditions of a scheduled maintenance event, including updating any status page announcements of changes.",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ends_at": {
            "description": "ISO8601 timestamp for the end time of the scheduled maintenance",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "impacts": {
            "description": "An array of impact/condition combinations",
            "items": {
              "properties": {
                "condition_id": {
                  "description": "The id of the condition",
                  "type": "string"
                },
                "id": {
                  "description": "The id of impact",
                  "type": "string"
                },
                "type": {
                  "description": "The type of impact",
                  "type": "string"
                }
              },
              "required": [
                "condition_id",
                "id",
                "type"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "labels": {
            "description": "A json object of label keys and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "starts_at": {
            "description": "ISO8601 timestamp for the start time of the scheduled maintenance",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "status_pages": {
            "description": "An array of status pages to display this maintenance on",
            "items": {
              "properties": {
                "connection_id": {
                  "description": "The UUID of the status page to display this maintenance on",
                  "type": "string"
                },
                "integration_slug": {
                  "description": "The slug identifying the type of status page",
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "connection_id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_scim_group": {
        "description": "SCIM endpoint to update a Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role, any missing members will be removed from the team.",
        "properties": {
          "displayName": {
            "description": "The name of the team being updated",
            "type": "string"
          },
          "members": {
            "items": {
              "properties": {
                "value": {
                  "description": "String that represents the user's UUID to assign to the team",
                  "type": "string"
                }
              },
              "required": [
                "value"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "displayName",
          "members"
        ],
        "type": "object"
      },
      "update_scim_user": {
        "description": "PUT SCIM endpoint to update a User. This endpoint is used to replace a resource's attributes.",
        "properties": {
          "active": {
            "description": "Boolean that represents whether user is active",
            "nullable": true,
            "type": "boolean"
          },
          "emails": {
            "description": "Email addresses for the User",
            "items": {
              "properties": {
                "primary": {
                  "description": "Boolean which signifies if an email is intended as the primary email for the User",
                  "nullable": true,
                  "type": "boolean"
                },
                "value": {
                  "description": "String that represents an email address for the User",
                  "type": "string"
                }
              },
              "required": [
                "value"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "description": "The components of the user's name",
            "nullable": true,
            "properties": {
              "familyName": {
                "description": "The given name of the User, or first name in most Western languages",
                "type": "string"
              },
              "givenName": {
                "description": "The family name of the User, or last name in most Western languages",
                "type": "string"
              }
            },
            "required": [
              "familyName",
              "givenName"
            ],
            "type": "object"
          },
          "roles": {
            "description": "Roles for the User. Options are owner, member, collaborator, or viewer. Roles may be specified as strings or SCIM role objects.",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "userName": {
            "description": "A service provider's unique identifier for the user",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_service": {
        "description": "Update a services attributes, you may also add or remove functionalities from the service as well.\nNote: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.\n",
        "properties": {
          "alert_on_add": {
            "nullable": true,
            "type": "boolean"
          },
          "auto_add_responding_team": {
            "nullable": true,
            "type": "boolean"
          },
          "checklists": {
            "description": "Array of checklist IDs to attach to the service",
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "remove": {
                  "description": "Set to `true` to remove checklist from service",
                  "nullable": true,
                  "type": "boolean"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "external_resources": {
            "description": "An array of external resources to attach to this service.",
            "items": {
              "properties": {
                "connection_type": {
                  "description": "The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, victorops. Not required if the resource has already been imported.",
                  "nullable": true,
                  "type": "string"
                },
                "remote_id": {
                  "type": "string"
                },
                "remove": {
                  "description": "If you are trying to remove an external resource from a service, set this to 'true'.",
                  "nullable": true,
                  "type": "boolean"
                }
              },
              "required": [
                "remote_id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "functionalities": {
            "description": "An array of functionalities",
            "items": {
              "properties": {
                "id": {
                  "description": "If you are trying to reuse a functionality, you may set the ID to attach it to the service",
                  "nullable": true,
                  "type": "string"
                },
                "remove": {
                  "description": "If you are trying to remove a functionality from a service, set this to 'true'",
                  "nullable": true,
                  "type": "boolean"
                },
                "summary": {
                  "description": "If you are trying to create a new functionality and attach it to this service, set the summary key",
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "labels": {
            "description": "A hash of label keys and values",
            "nullable": true,
            "properties": {},
            "type": "object"
          },
          "links": {
            "description": "An array of links to associate with this service. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.",
            "items": {
              "properties": {
                "href_url": {
                  "description": "URL",
                  "type": "string"
                },
                "icon_url": {
                  "description": "An optional URL to an icon representing this link",
                  "nullable": true,
                  "type": "string"
                },
                "id": {
                  "description": "If updating an existing link, specify it's id.",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "Short name used to display and identify this link",
                  "type": "string"
                },
                "remove": {
                  "description": "If you are trying to remove a link, set this to 'true'",
                  "nullable": true,
                  "type": "boolean"
                }
              },
              "required": [
                "href_url",
                "name"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "owner": {
            "description": "An object representing a Team that owns the service",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "remove_owner": {
            "description": "If you are trying to remove a team as an owner from a service, set this to 'true'",
            "nullable": true,
            "type": "boolean"
          },
          "remove_remaining_checklists": {
            "description": "If set to true, any checklists tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the checklists",
            "nullable": true,
            "type": "boolean"
          },
          "remove_remaining_external_resources": {
            "description": "If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources",
            "nullable": true,
            "type": "boolean"
          },
          "remove_remaining_functionalities": {
            "description": "If set to true, any functionalities tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the functionalities",
            "nullable": true,
            "type": "boolean"
          },
          "remove_remaining_teams": {
            "description": "If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams",
            "nullable": true,
            "type": "boolean"
          },
          "service_tier": {
            "description": "Integer representing service tier",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5
            ],
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "teams": {
            "description": "An array of teams to attach to this service.",
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "remove": {
                  "description": "If you are trying to remove a team from a service, set this to 'true'",
                  "nullable": true,
                  "type": "boolean"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "update_service_dependency": {
        "description": "Update the notes of the service dependency",
        "properties": {
          "notes": {
            "description": "A note to describe the service dependency relationship",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_severity": {
        "description": "Update a specific severity",
        "properties": {
          "color": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "UpdateSeverityColorRed",
                "value": "red"
              },
              {
                "name": "UpdateSeverityColorOrange",
                "value": "orange"
              },
              {
                "name": "UpdateSeverityColorYellow",
                "value": "yellow"
              },
              {
                "name": "UpdateSeverityColorBlue",
                "value": "blue"
              },
              {
                "name": "UpdateSeverityColorTeal",
                "value": "teal"
              },
              {
                "name": "UpdateSeverityColorGrey",
                "value": "grey"
              },
              {
                "name": "UpdateSeverityColorGreen",
                "value": "green"
              }
            ]
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_severity_matrix": {
        "description": "Update available severities and impacts in your organization's severity matrix.",
        "properties": {
          "data": {
            "items": {
              "properties": {
                "condition_id": {
                  "description": "Condition id",
                  "type": "string"
                },
                "impact_id": {
                  "description": "Impact id",
                  "type": "string"
                },
                "severity": {
                  "description": "Slug of a severity",
                  "type": "string"
                }
              },
              "required": [
                "condition_id",
                "impact_id",
                "severity"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "update_severity_matrix_condition": {
        "description": "Update a severity matrix condition",
        "properties": {
          "name": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "description": "Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "update_severity_matrix_impact": {
        "description": "Update a severity matrix impact",
        "properties": {
          "name": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "update_signals_alert": {
        "description": "Update a Signal alert",
        "properties": {
          "noise": {
            "description": "Whether the alert is noisy",
            "type": "boolean"
          }
        },
        "required": [
          "noise"
        ],
        "type": "object"
      },
      "update_signals_alert_grouping_configuration": {
        "description": "Update a Signals alert grouping rule for the organization.",
        "properties": {
          "action": {
            "description": "The action to take when grouping alerts",
            "nullable": true,
            "properties": {
              "fyi": {
                "description": "Send FYI notification",
                "nullable": true,
                "properties": {
                  "slack_channel_ids": {
                    "description": "The slack channel ids to send the notification to",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "slack_channel_ids"
                ],
                "type": "object"
              },
              "link": {
                "description": "Link the alerts and do not notify anyone",
                "nullable": true,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "reference_alert_time_period": {
            "description": "How long to group alerts for",
            "nullable": true,
            "type": "string"
          },
          "strategy": {
            "description": "The strategy to use for grouping alerts",
            "nullable": true,
            "properties": {
              "substring": {
                "description": "The type of strategy to use for grouping alerts",
                "nullable": true,
                "properties": {
                  "field_name": {
                    "description": "The field to use for grouping alerts",
                    "type": "string",
                    "x-speakeasy-enums": [
                      {
                        "name": "UpdateSignalsAlertGroupingConfigurationFieldNameSummary",
                        "value": "summary"
                      },
                      {
                        "name": "UpdateSignalsAlertGroupingConfigurationFieldNameBody",
                        "value": "body"
                      },
                      {
                        "name": "UpdateSignalsAlertGroupingConfigurationFieldNameTags",
                        "value": "tags"
                      }
                    ]
                  },
                  "value": {
                    "description": "The value to use for grouping alerts",
                    "type": "string"
                  }
                },
                "required": [
                  "field_name",
                  "value"
                ],
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "update_signals_email_target": {
        "description": "Update a Signals email target by ID",
        "properties": {
          "allowed_senders": {
            "description": "A list of email addresses that are allowed to send events to the target. Must be exact match.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "description": {
            "description": "A detailed description of the email target.",
            "nullable": true,
            "type": "string"
          },
          "level_cel": {
            "description": "The CEL expression that defines the level of an incoming email that is sent to the target.",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The email target's name.",
            "nullable": true,
            "type": "string"
          },
          "rule_matching_strategy": {
            "description": "Whether or not all rules must match, or if only one rule must match.",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "UpdateSignalsEmailTargetRuleMatchingStrategyAll",
                "value": "all"
              },
              {
                "name": "UpdateSignalsEmailTargetRuleMatchingStrategyAny",
                "value": "any"
              }
            ]
          },
          "rules": {
            "description": "A list of CEL expressions that should be evaluated and matched to determine if the target should be notified.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "slug": {
            "description": "The email address that will be listening to events.",
            "nullable": true,
            "type": "string"
          },
          "status_cel": {
            "description": "The CEL expression that defines the status of an incoming email that is sent to the target.",
            "nullable": true,
            "type": "string"
          },
          "target": {
            "description": "The target that the email target will notify. This object must contain a `type`\nfield that specifies the type of target and an `id` field that specifies the ID of\nthe target. The `type` field must be one of \"escalation_policy\", \"on_call_schedule\",\n\"team\", \"user\", or \"slack_channel\".\n",
            "nullable": true,
            "properties": {
              "id": {
                "description": "The ID of the target that the inbound email will notify when matched.",
                "type": "string"
              },
              "type": {
                "description": "The type of target that the inbound email will notify when matched.",
                "type": "string",
                "x-speakeasy-enums": [
                  {
                    "name": "UpdateSignalsEmailTargetTypeTeam",
                    "value": "Team"
                  },
                  {
                    "name": "UpdateSignalsEmailTargetTypeEntireteam",
                    "value": "EntireTeam"
                  },
                  {
                    "name": "UpdateSignalsEmailTargetTypeEscalationpolicy",
                    "value": "EscalationPolicy"
                  },
                  {
                    "name": "UpdateSignalsEmailTargetTypeOncallschedule",
                    "value": "OnCallSchedule"
                  },
                  {
                    "name": "UpdateSignalsEmailTargetTypeUser",
                    "value": "User"
                  },
                  {
                    "name": "UpdateSignalsEmailTargetTypeSlackchannel",
                    "value": "SlackChannel"
                  },
                  {
                    "name": "UpdateSignalsEmailTargetTypeMicrosoftteamschannel",
                    "value": "MicrosoftTeamsChannel"
                  },
                  {
                    "name": "UpdateSignalsEmailTargetTypeWebhook",
                    "value": "Webhook"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "update_signals_webhook_target": {
        "description": "Update a Signals webhook target by ID",
        "properties": {
          "description": {
            "description": "An optional detailed description of the webhook target.",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The webhook target's name.",
            "nullable": true,
            "type": "string"
          },
          "signing_key": {
            "description": "An optional secret we will provide in the `FH-Signature` header\nwhen sending a payload to the webhook target. This key will not be\nshown in any response once configured.\n",
            "nullable": true,
            "type": "string"
          },
          "url": {
            "description": "The URL that the webhook target will notify.",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_slack_emoji_action": {
        "properties": {
          "emoji_name": {
            "description": "The name of the emoji to associate with this action",
            "nullable": true,
            "type": "string"
          },
          "incident_type_id": {
            "description": "The ID of the incident type to associate with this emoji action",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_status_update_template": {
        "description": "Update a single status update template",
        "properties": {
          "body": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_statuspage_connection": {
        "description": "Update the given Statuspage integration connection.",
        "properties": {
          "conditions": {
            "items": {
              "properties": {
                "condition_id": {
                  "description": "FireHydrant condition id",
                  "type": "string"
                },
                "statuspageio_condition": {
                  "description": "Statuspage.io condition name",
                  "type": "string"
                }
              },
              "required": [
                "condition_id",
                "statuspageio_condition"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "milestone_mappings": {
            "items": {
              "properties": {
                "milestone_id": {
                  "description": "FireHydrant milestone id",
                  "type": "string"
                },
                "status": {
                  "description": "Statuspage.io status",
                  "type": "string",
                  "x-speakeasy-enums": [
                    {
                      "name": "UpdateStatuspageConnectionStatusInvestigating",
                      "value": "investigating"
                    },
                    {
                      "name": "UpdateStatuspageConnectionStatusIdentified",
                      "value": "identified"
                    },
                    {
                      "name": "UpdateStatuspageConnectionStatusMonitoring",
                      "value": "monitoring"
                    },
                    {
                      "name": "UpdateStatuspageConnectionStatusResolved",
                      "value": "resolved"
                    }
                  ]
                }
              },
              "required": [
                "milestone_id",
                "status"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "page_id": {
            "nullable": true,
            "type": "string"
          },
          "severities": {
            "items": {
              "properties": {
                "remote_status": {
                  "description": "Statuspage.io severity name",
                  "type": "string"
                },
                "severity_slug": {
                  "description": "FireHydrant severity slug",
                  "type": "string"
                }
              },
              "required": [
                "remote_status",
                "severity_slug"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "update_task_list": {
        "description": "Updates a task list's attributes and task list items",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "task_list_items": {
            "items": {
              "properties": {
                "description": {
                  "description": "A long-form description for the task if additional context is helpful",
                  "nullable": true,
                  "type": "string"
                },
                "summary": {
                  "description": "A summary of the task",
                  "type": "string"
                }
              },
              "required": [
                "summary"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "update_team": {
        "description": "Update a single team from its ID",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "invite_emails": {
            "description": "A list of email addresses to invite to join the organization and automatically add to this team. If an email already has a pending invitation, the team will be added to their existing invitation.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "memberships": {
            "items": {
              "properties": {
                "incident_role_id": {
                  "description": "An incident role ID that this user will automatically assigned if this team is assigned to an incident",
                  "nullable": true,
                  "type": "string"
                },
                "schedule_id": {
                  "nullable": true,
                  "type": "string"
                },
                "user_id": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "ms_teams_channel": {
            "description": "MS Teams channel identity for channel associated with this team",
            "nullable": true,
            "properties": {
              "channel_id": {
                "type": "string"
              },
              "ms_team_id": {
                "type": "string"
              }
            },
            "required": [
              "channel_id",
              "ms_team_id"
            ],
            "type": "object"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "slack_channel_id": {
            "description": "The Slack channel ID associated with this team. This may be the reference in FireHydrant's system (i.e. UUID) or the ID value from Slack (e.g. C1234567890).\n",
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_team_escalation_policy": {
        "description": "Update a Signals escalation policy by ID",
        "properties": {
          "default": {
            "default": false,
            "description": "Whether this escalation policy should be the default for the team.",
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "description": "A detailed description of the escalation policy.",
            "nullable": true,
            "type": "string"
          },
          "handoff_step": {
            "description": "A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.",
            "nullable": true,
            "properties": {
              "target_id": {
                "description": "The ID of the target to which the policy will hand off.",
                "type": "string"
              },
              "target_type": {
                "description": "The type of target to which the policy will hand off.",
                "type": "string",
                "x-speakeasy-enums": [
                  {
                    "name": "UpdateTeamEscalationPolicyTargetTypeEscalationpolicy",
                    "value": "EscalationPolicy"
                  },
                  {
                    "name": "UpdateTeamEscalationPolicyTargetTypeTeam",
                    "value": "Team"
                  }
                ]
              }
            },
            "required": [
              "target_id",
              "target_type"
            ],
            "type": "object"
          },
          "name": {
            "description": "The escalation policy's name.",
            "nullable": true,
            "type": "string"
          },
          "prioritized_settings": {
            "description": "Priority-specific settings for dynamic escalation policies",
            "nullable": true,
            "properties": {
              "high": {
                "description": "Settings for HIGH priority alerts",
                "nullable": true,
                "properties": {
                  "handoff_step": {
                    "description": "Handoff step for HIGH priority alerts",
                    "nullable": true,
                    "properties": {
                      "target_id": {
                        "type": "string"
                      },
                      "target_type": {
                        "type": "string",
                        "x-speakeasy-enums": [
                          {
                            "name": "UpdateTeamEscalationPolicyTargetTypeEscalationpolicy",
                            "value": "EscalationPolicy"
                          },
                          {
                            "name": "UpdateTeamEscalationPolicyTargetTypeTeam",
                            "value": "Team"
                          }
                        ]
                      }
                    },
                    "required": [
                      "target_id",
                      "target_type"
                    ],
                    "type": "object"
                  },
                  "repetitions": {
                    "description": "Number of repetitions for HIGH priority alerts",
                    "format": "int32",
                    "nullable": true,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "low": {
                "description": "Settings for LOW priority alerts",
                "nullable": true,
                "properties": {
                  "handoff_step": {
                    "description": "Handoff step for LOW priority alerts",
                    "nullable": true,
                    "properties": {
                      "target_id": {
                        "type": "string"
                      },
                      "target_type": {
                        "type": "string",
                        "x-speakeasy-enums": [
                          {
                            "name": "UpdateTeamEscalationPolicyTargetTypeEscalationpolicy",
                            "value": "EscalationPolicy"
                          },
                          {
                            "name": "UpdateTeamEscalationPolicyTargetTypeTeam",
                            "value": "Team"
                          }
                        ]
                      }
                    },
                    "required": [
                      "target_id",
                      "target_type"
                    ],
                    "type": "object"
                  },
                  "repetitions": {
                    "description": "Number of repetitions for LOW priority alerts",
                    "format": "int32",
                    "nullable": true,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "medium": {
                "description": "Settings for MEDIUM priority alerts",
                "nullable": true,
                "properties": {
                  "handoff_step": {
                    "description": "Handoff step for MEDIUM priority alerts",
                    "nullable": true,
                    "properties": {
                      "target_id": {
                        "type": "string"
                      },
                      "target_type": {
                        "type": "string",
                        "x-speakeasy-enums": [
                          {
                            "name": "UpdateTeamEscalationPolicyTargetTypeEscalationpolicy",
                            "value": "EscalationPolicy"
                          },
                          {
                            "name": "UpdateTeamEscalationPolicyTargetTypeTeam",
                            "value": "Team"
                          }
                        ]
                      }
                    },
                    "required": [
                      "target_id",
                      "target_type"
                    ],
                    "type": "object"
                  },
                  "repetitions": {
                    "description": "Number of repetitions for MEDIUM priority alerts",
                    "format": "int32",
                    "nullable": true,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "repetitions": {
            "default": 0,
            "description": "The number of times that the escalation policy should repeat before an alert is dropped.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "step_strategy": {
            "description": "The strategy for handling steps in the escalation policy. Can be \"static\" or \"dynamic_by_priority\".",
            "nullable": true,
            "type": "string"
          },
          "steps": {
            "description": "A list of steps that define how an alert should escalate through the policy.",
            "items": {
              "properties": {
                "distribution_type": {
                  "description": "The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.",
                  "nullable": true,
                  "type": "string",
                  "x-speakeasy-enums": [
                    {
                      "name": "UpdateTeamEscalationPolicyDistributionTypeUnspecified",
                      "value": "unspecified"
                    },
                    {
                      "name": "UpdateTeamEscalationPolicyDistributionTypeRoundRobinByAlert",
                      "value": "round_robin_by_alert"
                    },
                    {
                      "name": "UpdateTeamEscalationPolicyDistributionTypeRoundRobinByEscalationPolicy",
                      "value": "round_robin_by_escalation_policy"
                    }
                  ]
                },
                "priorities": {
                  "description": "A list of priorities (HIGH, MEDIUM, LOW) to which the step applies when using a dynamic escalation policy.",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "targets": {
                  "description": "A list of targets that the step will notify. You can specify up to 15 targets per step.",
                  "items": {
                    "properties": {
                      "id": {
                        "description": "The ID of the target that the step will notify.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of target that the step will notify.",
                        "type": "string",
                        "x-speakeasy-enums": [
                          {
                            "name": "UpdateTeamEscalationPolicyTypeOncallschedule",
                            "value": "OnCallSchedule"
                          },
                          {
                            "name": "UpdateTeamEscalationPolicyTypeUser",
                            "value": "User"
                          },
                          {
                            "name": "UpdateTeamEscalationPolicyTypeSlackchannel",
                            "value": "SlackChannel"
                          },
                          {
                            "name": "UpdateTeamEscalationPolicyTypeMicrosoftteamschannel",
                            "value": "MicrosoftTeamsChannel"
                          },
                          {
                            "name": "UpdateTeamEscalationPolicyTypeEntireteam",
                            "value": "EntireTeam"
                          },
                          {
                            "name": "UpdateTeamEscalationPolicyTypeWebhook",
                            "value": "Webhook"
                          }
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "timeout": {
                  "description": "An ISO8601 duration string specifying how long to wait before moving on to the next step. For the last step, this value specifies how long to wait before the escalation policy should repeat, if it repeats.",
                  "type": "string"
                }
              },
              "required": [
                "timeout"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "update_team_on_call_schedule": {
        "description": "Update a Signals on-call schedule by ID. For backwards compatibility, all parameters except for\n`name` and `description` will be ignored if the schedule has more than one rotation. If the schedule\nhas only one rotation, you can continue to update that rotation using the rotation-specific parameters.\n",
        "properties": {
          "color": {
            "description": "A hex color code that will be used to represent the schedule's rotation in FireHydrant's UI.",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "A new, detailed description for the on-call schedule.",
            "nullable": true,
            "type": "string"
          },
          "effective_at": {
            "description": "An ISO8601 time string specifying when the updated schedule should take effect. This\nvalue must be provided if editing an attribute that would affect how the schedule's\nshifts are generated, such as the time zone, members, strategy, or restrictions.\n",
            "nullable": true,
            "type": "string"
          },
          "member_ids": {
            "description": "This parameter is deprecated; use `members` instead.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "members": {
            "description": "An ordered list of objects that specify members of the schedule's rotation.",
            "items": {
              "properties": {
                "user_id": {
                  "description": "The ID of a user who should be added to the schedule's rotation. You can add a user to the rotation\nmultiple times to construct more complex rotations, and you can specify a `null` user ID to create\nunassigned slots in the rotation.\n",
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "description": "A new name for the on-call schedule.",
            "nullable": true,
            "type": "string"
          },
          "restrictions": {
            "description": "A list of objects that restrict the schedule's rotation to specific on-call periods.",
            "items": {
              "properties": {
                "end_day": {
                  "description": "The day of the week on which the restriction should end, as its long-form name (e.g. \"monday\", \"tuesday\", etc).",
                  "type": "string",
                  "x-speakeasy-enums": [
                    {
                      "name": "UpdateTeamOnCallScheduleEndDayMonday",
                      "value": "monday"
                    },
                    {
                      "name": "UpdateTeamOnCallScheduleEndDayTuesday",
                      "value": "tuesday"
                    },
                    {
                      "name": "UpdateTeamOnCallScheduleEndDayWednesday",
                      "value": "wednesday"
                    },
                    {
                      "name": "UpdateTeamOnCallScheduleEndDayThursday",
                      "value": "thursday"
                    },
                    {
                      "name": "UpdateTeamOnCallScheduleEndDayFriday",
                      "value": "friday"
                    },
                    {
                      "name": "UpdateTeamOnCallScheduleEndDaySaturday",
                      "value": "saturday"
                    },
                    {
                      "name": "UpdateTeamOnCallScheduleEndDaySunday",
                      "value": "sunday"
                    }
                  ]
                },
                "end_time": {
                  "description": "An ISO8601 time string specifying when the restriction should end.",
                  "type": "string"
                },
                "start_day": {
                  "description": "The day of the week on which the restriction should start, as its long-form name (e.g. \"monday\", \"tuesday\", etc).",
                  "type": "string",
                  "x-speakeasy-enums": [
                    {
                      "name": "UpdateTeamOnCallScheduleStartDayMonday",
                      "value": "monday"
                    },
                    {
                      "name": "UpdateTeamOnCallScheduleStartDayTuesday",
                      "value": "tuesday"
                    },
                    {
                      "name": "UpdateTeamOnCallScheduleStartDayWednesday",
                      "value": "wednesday"
                    },
                    {
                      "name": "UpdateTeamOnCallScheduleStartDayThursday",
                      "value": "thursday"
                    },
                    {
                      "name": "UpdateTeamOnCallScheduleStartDayFriday",
                      "value": "friday"
                    },
                    {
                      "name": "UpdateTeamOnCallScheduleStartDaySaturday",
                      "value": "saturday"
                    },
                    {
                      "name": "UpdateTeamOnCallScheduleStartDaySunday",
                      "value": "sunday"
                    }
                  ]
                },
                "start_time": {
                  "description": "An ISO8601 time string specifying when the restriction should start.",
                  "type": "string"
                }
              },
              "required": [
                "end_day",
                "end_time",
                "start_day",
                "start_time"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "rotation_description": {
            "description": "A new, detailed description for the schedule's rotation.",
            "nullable": true,
            "type": "string"
          },
          "rotation_name": {
            "description": "A new name for the schedule's rotation.",
            "nullable": true,
            "type": "string"
          },
          "slack_user_group_id": {
            "description": "The ID of a Slack user group to sync the rotation's on-call members to.",
            "nullable": true,
            "type": "string"
          },
          "strategy": {
            "description": "An object that specifies how the rotation's on-call shifts should be generated.",
            "nullable": true,
            "properties": {
              "handoff_day": {
                "description": "The day of the week on which on-call shifts should hand off, as its long-form name (e.g. \"monday\", \"tuesday\", etc). This value is only used if the strategy type is \"weekly\".",
                "nullable": true,
                "type": "string",
                "x-speakeasy-enums": [
                  {
                    "name": "UpdateTeamOnCallScheduleHandoffDayMonday",
                    "value": "monday"
                  },
                  {
                    "name": "UpdateTeamOnCallScheduleHandoffDayTuesday",
                    "value": "tuesday"
                  },
                  {
                    "name": "UpdateTeamOnCallScheduleHandoffDayWednesday",
                    "value": "wednesday"
                  },
                  {
                    "name": "UpdateTeamOnCallScheduleHandoffDayThursday",
                    "value": "thursday"
                  },
                  {
                    "name": "UpdateTeamOnCallScheduleHandoffDayFriday",
                    "value": "friday"
                  },
                  {
                    "name": "UpdateTeamOnCallScheduleHandoffDaySaturday",
                    "value": "saturday"
                  },
                  {
                    "name": "UpdateTeamOnCallScheduleHandoffDaySunday",
                    "value": "sunday"
                  }
                ]
              },
              "handoff_time": {
                "description": "An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is \"daily\" or \"weekly\".",
                "nullable": true,
                "type": "string"
              },
              "shift_duration": {
                "description": "An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is \"custom\".",
                "nullable": true,
                "type": "string"
              },
              "type": {
                "description": "The type of strategy. Must be one of \"daily\", \"weekly\", or \"custom\".",
                "type": "string",
                "x-speakeasy-enums": [
                  {
                    "name": "UpdateTeamOnCallScheduleTypeDaily",
                    "value": "daily"
                  },
                  {
                    "name": "UpdateTeamOnCallScheduleTypeWeekly",
                    "value": "weekly"
                  },
                  {
                    "name": "UpdateTeamOnCallScheduleTypeCustom",
                    "value": "custom"
                  }
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          },
          "time_zone": {
            "description": "The time zone in which the on-call schedule's rotation will operate. This value must be a valid IANA time zone name.",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_team_signal_rule": {
        "description": "Update a Signals rule by ID",
        "properties": {
          "create_incident_condition_when": {
            "description": "Determines when an incident should be created when this rule is matched",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "UpdateTeamSignalRuleCreateIncidentConditionWhenWhenUnspecified",
                "value": "WHEN_UNSPECIFIED"
              },
              {
                "name": "UpdateTeamSignalRuleCreateIncidentConditionWhenWhenAlways",
                "value": "WHEN_ALWAYS"
              }
            ]
          },
          "deduplication_expiry": {
            "description": "The amount of time alerts created from this rule will be deduplicated",
            "nullable": true,
            "type": "string"
          },
          "expression": {
            "description": "The CEL expression that defines the rule.",
            "nullable": true,
            "type": "string"
          },
          "incident_type_id": {
            "description": "The ID of an incident type that should be used when an alert is promoted to an incident",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The rule's name.",
            "nullable": true,
            "type": "string"
          },
          "notification_priority_override": {
            "description": "A notification priority that will be set on the resulting alert (default: HIGH)",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "UpdateTeamSignalRuleNotificationPriorityOverrideHigh",
                "value": "HIGH"
              },
              {
                "name": "UpdateTeamSignalRuleNotificationPriorityOverrideMedium",
                "value": "MEDIUM"
              },
              {
                "name": "UpdateTeamSignalRuleNotificationPriorityOverrideLow",
                "value": "LOW"
              },
              {
                "name": "UpdateTeamSignalRuleNotificationPriorityOverrideEmpty",
                "value": ""
              }
            ]
          },
          "target_id": {
            "description": "The ID of the target that the rule will notify when matched.",
            "nullable": true,
            "type": "string"
          },
          "target_type": {
            "description": "The type of target that the rule will notify when matched.",
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "UpdateTeamSignalRuleTargetTypeEscalationpolicy",
                "value": "EscalationPolicy"
              },
              {
                "name": "UpdateTeamSignalRuleTargetTypeOncallschedule",
                "value": "OnCallSchedule"
              },
              {
                "name": "UpdateTeamSignalRuleTargetTypeUser",
                "value": "User"
              },
              {
                "name": "UpdateTeamSignalRuleTargetTypeWebhook",
                "value": "Webhook"
              },
              {
                "name": "UpdateTeamSignalRuleTargetTypeSlackchannel",
                "value": "SlackChannel"
              },
              {
                "name": "UpdateTeamSignalRuleTargetTypeMicrosoftteamschannel",
                "value": "MicrosoftTeamsChannel"
              }
            ]
          }
        },
        "type": "object"
      },
      "update_ticket": {
        "description": "Update a ticket's attributes",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "priority_id": {
            "nullable": true,
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "tag_list": {
            "description": "List of tags for the ticket",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_ticketing_priority": {
        "description": "Update a single ticketing priority's attributes",
        "properties": {
          "name": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "description": "The position that this priority should take in your list of priorities. Priorities should be ordered from highest to lowest, with the highest priority at 0. If a position isn't specified, the new priority will be added to the end of the list; if another priority already exists at the specified position, this priority will shift that priority and all priorities down the list.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "update_transcript_attribution": {
        "properties": {
          "conference_bridge_id": {
            "description": "The ID of the conference bridge to attribute the transcript to.",
            "nullable": true,
            "type": "string"
          },
          "from_speaker": {
            "description": "The speaker to attribute the transcript to.",
            "nullable": true,
            "type": "string"
          },
          "from_user_id": {
            "description": "The user to attribute the transcript to.",
            "nullable": true,
            "type": "string"
          },
          "to_user_id": {
            "description": "The ID of the user to attribute the transcript to.",
            "type": "string"
          },
          "transcript_id": {
            "description": "The ID of the specific transcript entry to change attribution for.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "to_user_id"
        ],
        "type": "object"
      },
      "update_vote": {
        "description": "Upvote or downvote an object",
        "properties": {
          "direction": {
            "description": "The direction you would like to vote, or if you dig it",
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "UpdateVoteDirectionUp",
                "value": "up"
              },
              {
                "name": "UpdateVoteDirectionDown",
                "value": "down"
              },
              {
                "name": "UpdateVoteDirectionDig",
                "value": "dig"
              }
            ]
          }
        },
        "required": [
          "direction"
        ],
        "type": "object"
      },
      "update_webhook": {
        "description": "Update a specific webhook",
        "properties": {
          "state": {
            "nullable": true,
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "UpdateWebhookStateActive",
                "value": "active"
              },
              {
                "name": "UpdateWebhookStateInactive",
                "value": "inactive"
              }
            ]
          },
          "url": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "validate_incident_tags": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "vote_ai_incident_summary": {
        "properties": {
          "direction": {
            "type": "string",
            "x-speakeasy-enums": [
              {
                "name": "VoteAiIncidentSummaryDirectionUp",
                "value": "up"
              },
              {
                "name": "VoteAiIncidentSummaryDirectionDown",
                "value": "down"
              }
            ]
          }
        },
        "required": [
          "direction"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "title": "FireHydrant API",
    "version": "0.0.1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v1/ai/preferences": {
      "get": {
        "description": "Retrieves the current AI preferences",
        "operationId": "get_ai_preferences",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AI_Entities_PreferencesEntity"
                }
              }
            },
            "description": "Retrieves the current AI preferences"
          }
        },
        "summary": "Get AI preferences",
        "tags": [
          "Account Settings"
        ]
      },
      "patch": {
        "description": "Updates the AI preferences",
        "operationId": "update_ai_preferences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_ai_preferences"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AI_Entities_PreferencesEntity"
                }
              }
            },
            "description": "Updates the AI preferences"
          }
        },
        "summary": "Update AI preferences",
        "tags": [
          "Account Settings"
        ]
      }
    },
    "/v1/ai/summarize_incident/{incident_id}/{generated_summary_id}/vote": {
      "put": {
        "description": "Vote on an AI-generated incident summary for the current user",
        "operationId": "vote_ai_incident_summary",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "generated_summary_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vote_ai_incident_summary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AI_Entities_IncidentSummaryEntity"
                }
              }
            },
            "description": "Vote on an AI-generated incident summary for the current user"
          }
        },
        "summary": "Vote on an AI-generated incident summary",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/ai/summarize_incident/{incident_id}/{generated_summary_id}/voted": {
      "get": {
        "description": "Get the current user's vote status for an AI-generated incident summary",
        "operationId": "get_ai_incident_summary_vote_status",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "generated_summary_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Get the current user's vote status for an AI-generated incident summary"
          }
        },
        "summary": "Get the current user's vote status for an AI-generated incident summary",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/alerts": {
      "get": {
        "description": "Retrieve all alerts from third parties",
        "operationId": "list_alerts",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "A text query for alerts",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of user IDs. This currently only works for Signals alerts.",
            "in": "query",
            "name": "users",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of team IDs. This currently only works for Signals alerts.",
            "in": "query",
            "name": "teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of signals rule IDs. This currently only works for Signals alerts.",
            "in": "query",
            "name": "signal_rules",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of environment IDs. This currently only works for Signals alerts.",
            "in": "query",
            "name": "environments",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of functionality IDs. This currently only works for Signals alerts.",
            "in": "query",
            "name": "functionalities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of service IDs. This currently only works for Signals alerts.",
            "in": "query",
            "name": "services",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of tags. This currently only works for Signals alerts.",
            "in": "query",
            "name": "tags",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The strategy to match tags. `any` will return alerts that have at least one of the supplied tags, `match_all` will return only alerts that have all of the supplied tags, and `exclude` will only return alerts that have none of the supplied tags. This currently only works for Signals alerts.",
            "in": "query",
            "name": "tag_match_strategy",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestTagmatchstrategyAny",
                  "value": "any"
                },
                {
                  "name": "RequestTagmatchstrategyMatchAll",
                  "value": "match_all"
                },
                {
                  "name": "RequestTagmatchstrategyExclude",
                  "value": "exclude"
                }
              ]
            }
          },
          {
            "description": "A comma separated list of statuses to filter by. Valid statuses are: opened, acknowledged, resolved, ignored, expired, or linked",
            "in": "query",
            "name": "statuses",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alerts_AlertEntityPaginated"
                }
              }
            },
            "description": "Retrieve all alerts from third parties"
          }
        },
        "summary": "List alerts",
        "tags": [
          "Alerts"
        ]
      }
    },
    "/v1/alerts/{alert_id}": {
      "get": {
        "description": "Retrieve a single alert",
        "operationId": "get_alert",
        "parameters": [
          {
            "in": "path",
            "name": "alert_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alerts_AlertEntity"
                }
              }
            },
            "description": "Retrieve a single alert"
          }
        },
        "summary": "Get an alert",
        "tags": [
          "Alerts"
        ]
      }
    },
    "/v1/audiences": {
      "get": {
        "description": "List all audiences",
        "operationId": "list_audiences",
        "parameters": [
          {
            "description": "Include archived (discarded) audiences",
            "in": "query",
            "name": "include_archived",
            "schema": {
              "default": false,
              "nullable": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            },
            "description": "List all audiences"
          }
        },
        "summary": "List audiences",
        "tags": [
          "Audiences"
        ]
      },
      "post": {
        "description": "Create a new audience",
        "operationId": "create_audience",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_audience"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            },
            "description": "Create a new audience"
          }
        },
        "summary": "Create audience",
        "tags": [
          "Audiences"
        ]
      }
    },
    "/v1/audiences/member/{member_id}/default": {
      "get": {
        "description": "Get member's default audience",
        "operationId": "get_member_default_audience",
        "parameters": [
          {
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            },
            "description": "Get member's default audience"
          }
        },
        "summary": "Get default audience",
        "tags": [
          "Audiences"
        ]
      },
      "put": {
        "description": "Set member's default audience",
        "operationId": "set_member_default_audience",
        "parameters": [
          {
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/set_member_default_audience"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            },
            "description": "Set member's default audience"
          }
        },
        "summary": "Set default audience",
        "tags": [
          "Audiences"
        ]
      }
    },
    "/v1/audiences/summaries/{incident_id}": {
      "get": {
        "description": "List all audience summaries for an incident",
        "operationId": "list_audience_summaries",
        "parameters": [
          {
            "description": "Unique identifier of the incident to summarize",
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Audiences_Entities_AudienceSummariesEntity"
                }
              }
            },
            "description": "List all audience summaries for an incident"
          }
        },
        "summary": "List audience summaries",
        "tags": [
          "Audiences"
        ]
      }
    },
    "/v1/audiences/{audience_id}": {
      "delete": {
        "description": "Archive an audience",
        "operationId": "archive_audience",
        "parameters": [
          {
            "description": "Unique identifier of the audience",
            "in": "path",
            "name": "audience_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            },
            "description": "Archive an audience"
          }
        },
        "summary": "Archive audience",
        "tags": [
          "Audiences"
        ]
      },
      "get": {
        "description": "Get audience details",
        "operationId": "get_audience",
        "parameters": [
          {
            "description": "Unique identifier of the audience",
            "in": "path",
            "name": "audience_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            },
            "description": "Get audience details"
          }
        },
        "summary": "Get audience",
        "tags": [
          "Audiences"
        ]
      },
      "patch": {
        "description": "Update an existing audience",
        "operationId": "update_audience",
        "parameters": [
          {
            "description": "Unique identifier of the audience",
            "in": "path",
            "name": "audience_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_audience"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            },
            "description": "Update an existing audience"
          }
        },
        "summary": "Update audience",
        "tags": [
          "Audiences"
        ]
      }
    },
    "/v1/audiences/{audience_id}/restore": {
      "patch": {
        "description": "Restore a previously archived audience",
        "operationId": "restore_audience",
        "parameters": [
          {
            "description": "Unique identifier of the audience",
            "in": "path",
            "name": "audience_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            },
            "description": "Restore a previously archived audience"
          }
        },
        "summary": "Restore audience",
        "tags": [
          "Audiences"
        ]
      }
    },
    "/v1/audiences/{audience_id}/summaries/{incident_id}": {
      "get": {
        "description": "Get the latest audience-specific summary for an incident",
        "operationId": "get_audience_summary",
        "parameters": [
          {
            "description": "Unique identifier of the audience",
            "in": "path",
            "name": "audience_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the incident to summarize",
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AI_Entities_IncidentSummaryEntity"
                }
              }
            },
            "description": "Get the latest audience-specific summary for an incident"
          }
        },
        "summary": "Get latest summary",
        "tags": [
          "Audiences"
        ]
      },
      "post": {
        "description": "Generate a new audience-specific summary for an incident",
        "operationId": "generate_audience_summary",
        "parameters": [
          {
            "description": "Unique identifier of the audience",
            "in": "path",
            "name": "audience_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the incident to summarize",
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/generate_audience_summary"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AI_Entities_IncidentSummaryEntity"
                }
              }
            },
            "description": "Generate a new audience-specific summary for an incident"
          }
        },
        "summary": "Generate summary",
        "tags": [
          "Audiences"
        ]
      }
    },
    "/v1/audit_events": {
      "get": {
        "description": "List audit events",
        "operationId": "list_audit_events",
        "parameters": [
          {
            "description": "Cursor for pagination.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Query string to filter audit events, concatenated with AND keyword.\nAvailable filters with example:\n  - event.occurred_at \u003c 2023-01-01T00:00:00Z\n  - event.key = signals.on_call_rotation.generate\n  - event.actor.kind = user\n  - event.actor.id = 00000000-0000-0000-0000-000000000000\n  - resource.kind = incident\n  - resource.id = 00000000-0000-0000-0000-000000000000\n  - parent_id = 00000000-0000-0000-0000-000000000000\nValid query looks like (without quotes):\n  event.occurred_at \u003c 2023-01-01T00:00:00Z AND event.key = signals.on_call_rotation.generate\n",
            "in": "query",
            "name": "filter",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Number of records to display in a single page, maximum is 100 entries. Smaller number is recommended for better performance.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 20,
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "List audit events"
          }
        },
        "summary": "List audit events",
        "tags": [
          "Audit Events"
        ]
      }
    },
    "/v1/audit_events/{id}": {
      "get": {
        "description": "Get a single audit event",
        "operationId": "get_audit_event",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Get a single audit event"
          }
        },
        "summary": "Get a single audit event",
        "tags": [
          "Audit Events"
        ]
      }
    },
    "/v1/bootstrap": {
      "get": {
        "description": "Get initial application configuration",
        "operationId": "get_bootstrap",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicAPI_V1_BootstrapEntity"
                }
              }
            },
            "description": "Get initial application configuration"
          }
        },
        "summary": "Get initial application configuration",
        "tags": [
          "Account Settings"
        ]
      }
    },
    "/v1/catalogs/{catalog_id}/ingest": {
      "post": {
        "description": "Accepts catalog data in the configured format and asyncronously processes the data to incorporate changes into service catalog.",
        "operationId": "ingest_catalog_data",
        "parameters": [
          {
            "in": "path",
            "name": "catalog_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ingest_catalog_data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Imports_ImportEntity"
                }
              }
            },
            "description": "Accepts catalog data in the configured format and asyncronously processes the data to incorporate changes into service catalog."
          }
        },
        "summary": "Ingest service catalog data",
        "tags": [
          "Catalog Entries"
        ],
        "x-codegen-request-body-name": "ingest_catalog_data"
      }
    },
    "/v1/catalogs/{catalog_id}/refresh": {
      "get": {
        "description": "Schedules an async task to re-import catalog info and update catalog data accordingly.",
        "operationId": "refresh_catalog",
        "parameters": [
          {
            "in": "path",
            "name": "catalog_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Schedules an async task to re-import catalog info and update catalog data accordingly."
          }
        },
        "summary": "Refresh a service catalog",
        "tags": [
          "Catalog Entries"
        ]
      }
    },
    "/v1/change_types": {
      "get": {
        "description": "List change types for the organization",
        "operationId": "list_change_types",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeTypeEntityPaginated"
                }
              }
            },
            "description": "List change types for the organization"
          }
        },
        "summary": "List change types",
        "tags": [
          "Changes"
        ]
      }
    },
    "/v1/changes": {
      "get": {
        "description": "List changes for the organization",
        "operationId": "list_changes",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Filter changes by summary",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "List changes for the organization"
          }
        },
        "summary": "List changes",
        "tags": [
          "Changes"
        ]
      },
      "post": {
        "description": "Create a new change entry",
        "operationId": "create_change",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_change"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeEntity"
                }
              }
            },
            "description": "Create a new change entry"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "summary": "Create a new change entry",
        "tags": [
          "Changes"
        ],
        "x-codegen-request-body-name": "create_change"
      }
    },
    "/v1/changes/events": {
      "get": {
        "description": "List change events for the organization. Note: Not all information is included on a change event like attachments and related changes. You must fetch a change event separately to retrieve all of the information about it",
        "operationId": "list_change_events",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "The id of a previously saved search.",
            "in": "query",
            "name": "saved_search_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A text query for change events",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of label key / values in the format of \"key=value,key2=value2\". To filter change events that have a key (with no specific value), omit the value",
            "in": "query",
            "name": "labels",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of environment IDs",
            "in": "query",
            "name": "environments",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of service IDs",
            "in": "query",
            "name": "services",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The start time to start returning change events from",
            "in": "query",
            "name": "starts_at",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The end time to return change events up to",
            "in": "query",
            "name": "ends_at",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeEventSlimEntityPaginated"
                }
              }
            },
            "description": "List change events for the organization. Note: Not all information is included on a change event like attachments and related changes. You must fetch a change event separately to retrieve all of the information about it"
          }
        },
        "summary": "List change events",
        "tags": [
          "Changes"
        ]
      },
      "post": {
        "description": "Create a change event",
        "operationId": "create_change_event",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_change_event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeEventEntity"
                }
              }
            },
            "description": "Create a change event"
          }
        },
        "summary": "Create a change event",
        "tags": [
          "Changes"
        ],
        "x-codegen-request-body-name": "create_change_event"
      }
    },
    "/v1/changes/events/{change_event_id}": {
      "delete": {
        "description": "Delete a change event",
        "operationId": "delete_change_event",
        "parameters": [
          {
            "in": "path",
            "name": "change_event_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete a change event"
          }
        },
        "summary": "Delete a change event",
        "tags": [
          "Changes"
        ]
      },
      "get": {
        "description": "Retrieve a change event",
        "operationId": "get_change_event",
        "parameters": [
          {
            "in": "path",
            "name": "change_event_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeEventEntity"
                }
              }
            },
            "description": "Retrieve a change event"
          }
        },
        "summary": "Get a change event",
        "tags": [
          "Changes"
        ]
      },
      "patch": {
        "description": "Update a change event",
        "operationId": "update_change_event",
        "parameters": [
          {
            "in": "path",
            "name": "change_event_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_change_event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeEventEntity"
                }
              }
            },
            "description": "Update a change event"
          }
        },
        "summary": "Update a change event",
        "tags": [
          "Changes"
        ],
        "x-codegen-request-body-name": "update_change_event"
      }
    },
    "/v1/changes/{change_id}": {
      "delete": {
        "description": "Archive a change entry",
        "operationId": "delete_change",
        "parameters": [
          {
            "in": "path",
            "name": "change_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Archive a change entry"
          }
        },
        "summary": "Archive a change entry",
        "tags": [
          "Changes"
        ]
      },
      "patch": {
        "description": "Update a change entry",
        "operationId": "update_change",
        "parameters": [
          {
            "in": "path",
            "name": "change_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_change"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeEntity"
                }
              }
            },
            "description": "Update a change entry"
          }
        },
        "summary": "Update a change entry",
        "tags": [
          "Changes"
        ],
        "x-codegen-request-body-name": "update_change"
      }
    },
    "/v1/changes/{change_id}/identities": {
      "get": {
        "description": "Retrieve all identities for the change entry",
        "operationId": "list_change_identities",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "change_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeIdentityEntityPaginated"
                }
              }
            },
            "description": "Retrieve all identities for the change entry"
          }
        },
        "summary": "List identities for a change entry",
        "tags": [
          "Changes"
        ]
      },
      "post": {
        "description": "Create an identity for the change entry",
        "operationId": "create_change_identity",
        "parameters": [
          {
            "in": "path",
            "name": "change_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_change_identity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeIdentityEntity"
                }
              }
            },
            "description": "Create an identity for the change entry"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "summary": "Create an identity for a change entry",
        "tags": [
          "Changes"
        ],
        "x-codegen-request-body-name": "create_change_identity"
      }
    },
    "/v1/changes/{change_id}/identities/{identity_id}": {
      "delete": {
        "description": "Delete an identity from the change entry",
        "operationId": "delete_change_identity",
        "parameters": [
          {
            "in": "path",
            "name": "identity_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "change_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete an identity from the change entry"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "summary": "Delete an identity from a change entry",
        "tags": [
          "Changes"
        ]
      },
      "patch": {
        "description": "Update an identity for the change entry",
        "operationId": "update_change_identity",
        "parameters": [
          {
            "in": "path",
            "name": "identity_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "change_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_change_identity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeIdentityEntity"
                }
              }
            },
            "description": "Update an identity for the change entry"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "summary": "Update an identity for a change entry",
        "tags": [
          "Changes"
        ],
        "x-codegen-request-body-name": "update_change_identity"
      }
    },
    "/v1/checklist_templates": {
      "get": {
        "description": "List all of the checklist templates that have been added to the organization",
        "operationId": "list_checklist_templates",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "A query to search checklist templates by their name",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistTemplateEntityPaginated"
                }
              }
            },
            "description": "List all of the checklist templates that have been added to the organization"
          }
        },
        "summary": "List checklist templates",
        "tags": [
          "Tasks"
        ]
      },
      "post": {
        "description": "Creates a checklist template for the organization",
        "operationId": "create_checklist_template",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_checklist_template"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistTemplateEntity"
                }
              }
            },
            "description": "Creates a checklist template for the organization"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "summary": "Create a checklist template",
        "tags": [
          "Tasks"
        ],
        "x-codegen-request-body-name": "create_checklist_template"
      }
    },
    "/v1/checklist_templates/{id}": {
      "delete": {
        "description": "Archive a checklist template",
        "operationId": "delete_checklist_template",
        "parameters": [
          {
            "description": "Checklist Template UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistTemplateEntity"
                }
              }
            },
            "description": "Archive a checklist template"
          }
        },
        "summary": "Archive a checklist template",
        "tags": [
          "Tasks"
        ]
      },
      "get": {
        "description": "Retrieves a single checklist template by ID",
        "operationId": "get_checklist_template",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistTemplateEntity"
                }
              }
            },
            "description": "Retrieves a single checklist template by ID"
          }
        },
        "summary": "Get a checklist template",
        "tags": [
          "Tasks"
        ]
      },
      "patch": {
        "description": "Update a checklist templates attributes",
        "operationId": "update_checklist_template",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_checklist_template"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistTemplateEntity"
                }
              }
            },
            "description": "Update a checklist templates attributes"
          }
        },
        "summary": "Update a checklist template",
        "tags": [
          "Tasks"
        ],
        "x-codegen-request-body-name": "update_checklist_template"
      }
    },
    "/v1/conversations/{conversation_id}/comments": {
      "get": {
        "description": "List all of the comments that have been added to the organization",
        "operationId": "list_comments",
        "parameters": [
          {
            "description": "An ISO8601 timestamp that allows filtering for comments posted before the provided time.",
            "in": "query",
            "name": "before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "An ISO8601 timestamp that allows filtering for comments posted after the provided time.",
            "in": "query",
            "name": "after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Allows sorting comments by the time they were posted, ascending or descending.",
            "in": "query",
            "name": "sort",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortAsc",
                  "value": "asc"
                },
                {
                  "name": "RequestSortDesc",
                  "value": "desc"
                }
              ]
            }
          },
          {
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "List all of the comments that have been added to the organization"
          }
        },
        "summary": "List comments for a conversation",
        "tags": [
          "Conversations"
        ]
      },
      "post": {
        "description": "Creates a comment for a project",
        "operationId": "create_comment",
        "parameters": [
          {
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_comment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Creates a comment for a project"
          }
        },
        "summary": "Create a conversation comment",
        "tags": [
          "Conversations"
        ],
        "x-codegen-request-body-name": "create_comment"
      }
    },
    "/v1/conversations/{conversation_id}/comments/{comment_id}": {
      "delete": {
        "description": "Archive a comment",
        "operationId": "delete_comment",
        "parameters": [
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Archive a comment"
          }
        },
        "summary": "Archive a conversation comment",
        "tags": [
          "Conversations"
        ]
      },
      "get": {
        "description": "Retrieves a single comment by ID",
        "operationId": "get_comment",
        "parameters": [
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Retrieves a single comment by ID"
          }
        },
        "summary": "Get a conversation comment",
        "tags": [
          "Conversations"
        ]
      },
      "patch": {
        "description": "Update a comment's attributes",
        "operationId": "update_comment",
        "parameters": [
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_comment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Update a comment's attributes"
          }
        },
        "summary": "Update a conversation comment",
        "tags": [
          "Conversations"
        ],
        "x-codegen-request-body-name": "update_comment"
      }
    },
    "/v1/conversations/{conversation_id}/comments/{comment_id}/reactions": {
      "get": {
        "description": "List all of the reactions that have been added to a comment",
        "operationId": "list_comment_reactions",
        "parameters": [
          {
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "List all of the reactions that have been added to a comment"
          }
        },
        "summary": "List reactions for a conversation comment",
        "tags": [
          "Conversations"
        ]
      },
      "post": {
        "description": "Create a reaction on a comment",
        "operationId": "create_comment_reaction",
        "parameters": [
          {
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_comment_reaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Create a reaction on a comment"
          }
        },
        "summary": "Create a reaction for a conversation comment",
        "tags": [
          "Conversations"
        ],
        "x-codegen-request-body-name": "create_comment_reaction"
      }
    },
    "/v1/conversations/{conversation_id}/comments/{comment_id}/reactions/{reaction_id}": {
      "delete": {
        "description": "Archive a reaction",
        "operationId": "delete_comment_reaction",
        "parameters": [
          {
            "in": "path",
            "name": "reaction_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Archive a reaction"
          }
        },
        "summary": "Delete a reaction from a conversation comment",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/v1/current_user": {
      "get": {
        "description": "Retrieve the current user",
        "operationId": "get_current_user",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserEntity"
                }
              }
            },
            "description": "Retrieve the current user"
          }
        },
        "summary": "Get the currently authenticated user",
        "tags": [
          "Users"
        ]
      }
    },
    "/v1/custom_fields/definitions": {
      "get": {
        "description": "List all custom field definitions",
        "operationId": "list_custom_field_definitions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organizations_CustomFieldDefinitionEntity"
                }
              }
            },
            "description": "List all custom field definitions"
          }
        },
        "summary": "List custom field definitions",
        "tags": [
          "Incident Settings"
        ]
      },
      "post": {
        "description": "Create a new custom field definition",
        "operationId": "create_custom_field_definition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_custom_field_definition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organizations_CustomFieldDefinitionEntity"
                }
              }
            },
            "description": "Create a new custom field definition"
          }
        },
        "summary": "Create a custom field definition",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "create_custom_field_definition"
      }
    },
    "/v1/custom_fields/definitions/{field_id}": {
      "delete": {
        "description": "Delete a custom field definition",
        "operationId": "delete_custom_field_definition",
        "parameters": [
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organizations_CustomFieldDefinitionEntity"
                }
              }
            },
            "description": "Delete a custom field definition"
          }
        },
        "summary": "Delete a custom field definition",
        "tags": [
          "Incident Settings"
        ]
      },
      "patch": {
        "description": "Update a single custom field definition",
        "operationId": "update_custom_field_definition",
        "parameters": [
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_custom_field_definition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organizations_CustomFieldDefinitionEntity"
                }
              }
            },
            "description": "Update a single custom field definition"
          }
        },
        "summary": "Update a custom field definition",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "update_custom_field_definition"
      }
    },
    "/v1/custom_fields/definitions/{field_id}/select_options": {
      "get": {
        "description": "Get the permissible values for the a currently active custom select or multi-select field.",
        "operationId": "list_custom_field_select_options",
        "parameters": [
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Text string of a query for filtering values.",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "If true, return all versions of the custom field definition.",
            "in": "query",
            "name": "all_versions",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organizations_CustomFieldDefinitionEntity"
                }
              }
            },
            "description": "Get the permissible values for the a currently active custom select or multi-select field."
          }
        },
        "summary": "Get available values for a custom field",
        "tags": [
          "Incident Settings"
        ]
      }
    },
    "/v1/entitlements": {
      "get": {
        "description": "List the organization's entitlements",
        "operationId": "list_entitlements",
        "parameters": [
          {
            "description": "Name of Entitlement",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Type of Entitlement",
            "in": "query",
            "name": "type",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestTypeQuota",
                  "value": "quota"
                },
                {
                  "name": "RequestTypeAccess",
                  "value": "access"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementEntityPaginated"
                }
              }
            },
            "description": "List the organization's entitlements"
          }
        },
        "summary": "List entitlements",
        "tags": [
          "Account Settings"
        ]
      }
    },
    "/v1/environments": {
      "get": {
        "description": "List all of the environments that have been added to the organiation",
        "operationId": "list_environments",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "A query to search environments by their name or description",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search environments by their name",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentEntryEntityPaginated"
                }
              }
            },
            "description": "List all of the environments that have been added to the organiation"
          }
        },
        "summary": "List environments",
        "tags": [
          "Catalog Entries"
        ]
      },
      "post": {
        "description": "Creates an environment for the organization",
        "operationId": "create_environment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_environment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentEntryEntity"
                }
              }
            },
            "description": "Creates an environment for the organization"
          }
        },
        "summary": "Create an environment",
        "tags": [
          "Catalog Entries"
        ],
        "x-codegen-request-body-name": "create_environment"
      }
    },
    "/v1/environments/{environment_id}": {
      "delete": {
        "description": "Archive an environment",
        "operationId": "delete_environment",
        "parameters": [
          {
            "description": "Environment UUID",
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentEntryEntity"
                }
              }
            },
            "description": "Archive an environment"
          }
        },
        "summary": "Archive an environment",
        "tags": [
          "Catalog Entries"
        ]
      },
      "get": {
        "description": "Retrieves a single environment by ID",
        "operationId": "get_environment",
        "parameters": [
          {
            "description": "Environment UUID",
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentEntryEntity"
                }
              }
            },
            "description": "Retrieves a single environment by ID"
          }
        },
        "summary": "Get an environment",
        "tags": [
          "Catalog Entries"
        ]
      },
      "patch": {
        "description": "Update a environments attributes",
        "operationId": "update_environment",
        "parameters": [
          {
            "description": "Environment UUID",
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_environment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentEntryEntity"
                }
              }
            },
            "description": "Update a environments attributes"
          }
        },
        "summary": "Update an environment",
        "tags": [
          "Catalog Entries"
        ],
        "x-codegen-request-body-name": "update_environment"
      }
    },
    "/v1/form_configurations/{slug}": {
      "get": {
        "description": "Get a form configuration",
        "operationId": "get_form_configuration",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormConfigurationEntity"
                }
              }
            },
            "description": "Get a form configuration"
          }
        },
        "summary": "Get a form configuration",
        "tags": [
          "Incident Settings"
        ]
      }
    },
    "/v1/form_configurations/{slug}/append_data_on_select/{field_id}/{selected_value}": {
      "get": {
        "description": "Get data for a form field on select that should be appended to a form by using a template",
        "operationId": "append_form_data_on_selected_value_get",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "selected_value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicAPI_V1_FormConfigurations_SelectedValueEntity"
                }
              }
            },
            "description": "Get data for a form field on select that should be appended to a form by using a template"
          }
        },
        "summary": "Get data for a form field on select",
        "tags": [
          "Incident Settings"
        ]
      }
    },
    "/v1/functionalities": {
      "get": {
        "description": "List all of the functionalities that have been added to the organiation",
        "operationId": "list_functionalities",
        "parameters": [
          {
            "description": "A query to search functionalities by their name or description",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search functionalities by their name",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search services by if they are impacted with active incidents",
            "in": "query",
            "name": "impacted",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of label key / values in the format of 'key=value,key2=value2'. To filter change events that have a key (with no specific value), omit the value",
            "in": "query",
            "name": "labels",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search functionalities by their owning team ID",
            "in": "query",
            "name": "owner",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Boolean to determine whether to return a slimified version of the functionalities object",
            "in": "query",
            "name": "lite",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionalityEntityPaginated"
                }
              }
            },
            "description": "List all of the functionalities that have been added to the organiation"
          }
        },
        "summary": "List functionalities",
        "tags": [
          "Catalog Entries"
        ]
      },
      "post": {
        "description": "Creates a functionality for the organization",
        "operationId": "create_functionality",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_functionality"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionalityEntity"
                }
              }
            },
            "description": "Creates a functionality for the organization"
          }
        },
        "summary": "Create a functionality",
        "tags": [
          "Catalog Entries"
        ],
        "x-codegen-request-body-name": "create_functionality"
      }
    },
    "/v1/functionalities/{functionality_id}": {
      "delete": {
        "description": "Archive a functionality",
        "operationId": "delete_functionality",
        "parameters": [
          {
            "in": "path",
            "name": "functionality_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionalityEntity"
                }
              }
            },
            "description": "Archive a functionality"
          }
        },
        "summary": "Archive a functionality",
        "tags": [
          "Catalog Entries"
        ]
      },
      "get": {
        "description": "Retrieves a single functionality by ID",
        "operationId": "get_functionality",
        "parameters": [
          {
            "in": "path",
            "name": "functionality_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionalityEntity"
                }
              }
            },
            "description": "Retrieves a single functionality by ID"
          }
        },
        "summary": "Get a functionality",
        "tags": [
          "Catalog Entries"
        ]
      },
      "patch": {
        "description": "Update a functionalities attributes",
        "operationId": "update_functionality",
        "parameters": [
          {
            "in": "path",
            "name": "functionality_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_functionality"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionalityEntity"
                }
              }
            },
            "description": "Update a functionalities attributes"
          }
        },
        "summary": "Update a functionality",
        "tags": [
          "Catalog Entries"
        ],
        "x-codegen-request-body-name": "update_functionality"
      }
    },
    "/v1/functionalities/{functionality_id}/services": {
      "get": {
        "description": "List services for a functionality",
        "operationId": "list_functionality_services",
        "parameters": [
          {
            "in": "path",
            "name": "functionality_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionalityWithAllServicesEntity"
                }
              }
            },
            "description": "List services for a functionality"
          }
        },
        "summary": "List services for a functionality",
        "tags": [
          "Catalog Entries"
        ]
      }
    },
    "/v1/incident_roles": {
      "get": {
        "description": "List all of the incident roles in the organization",
        "operationId": "list_incident_roles",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentRoleEntityPaginated"
                }
              }
            },
            "description": "List all of the incident roles in the organization"
          }
        },
        "summary": "List incident roles",
        "tags": [
          "Incident Settings"
        ]
      },
      "post": {
        "description": "Create a new incident role",
        "operationId": "create_incident_role",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentRoleEntity"
                }
              }
            },
            "description": "Create a new incident role"
          }
        },
        "summary": "Create an incident role",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "create_incident_role"
      }
    },
    "/v1/incident_roles/{incident_role_id}": {
      "delete": {
        "description": "Archives an incident role which will hide it from lists and metrics",
        "operationId": "delete_incident_role",
        "parameters": [
          {
            "in": "path",
            "name": "incident_role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentRoleEntity"
                }
              }
            },
            "description": "Archives an incident role which will hide it from lists and metrics"
          }
        },
        "summary": "Archive an incident role",
        "tags": [
          "Incident Settings"
        ]
      },
      "get": {
        "description": "Retrieve a single incident role from its ID",
        "operationId": "get_incident_role",
        "parameters": [
          {
            "in": "path",
            "name": "incident_role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentRoleEntity"
                }
              }
            },
            "description": "Retrieve a single incident role from its ID"
          }
        },
        "summary": "Get an incident role",
        "tags": [
          "Incident Settings"
        ]
      },
      "patch": {
        "description": "Update a single incident role from its ID",
        "operationId": "update_incident_role",
        "parameters": [
          {
            "in": "path",
            "name": "incident_role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentRoleEntity"
                }
              }
            },
            "description": "Update a single incident role from its ID"
          }
        },
        "summary": "Update an incident role",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "update_incident_role"
      }
    },
    "/v1/incident_tags": {
      "get": {
        "description": "List all of the incident tags in the organization",
        "operationId": "list_incident_tags",
        "parameters": [
          {
            "in": "query",
            "name": "prefix",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntityPaginated"
                }
              }
            },
            "description": "List all of the incident tags in the organization"
          }
        },
        "summary": "List incident tags",
        "tags": [
          "Incident Settings"
        ]
      }
    },
    "/v1/incident_tags/validate": {
      "post": {
        "description": "Validate the format of a list of tags",
        "operationId": "validate_incident_tags",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/validate_incident_tags"
              }
            }
          },
          "description": "A list of tags to validate",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntity"
                }
              }
            },
            "description": "Validate the format of a list of tags"
          }
        },
        "summary": "Validate incident tags",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "tags"
      }
    },
    "/v1/incident_types": {
      "get": {
        "description": "List all of the incident types in the organization",
        "operationId": "list_incident_types",
        "parameters": [
          {
            "description": "A query to search incident types by their name",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentTypeEntityPaginated"
                }
              }
            },
            "description": "List all of the incident types in the organization"
          }
        },
        "summary": "List incident types",
        "tags": [
          "Incident Settings"
        ]
      },
      "post": {
        "description": "Create a new incident type",
        "operationId": "create_incident_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_type"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentTypeEntity"
                }
              }
            },
            "description": "Create a new incident type"
          }
        },
        "summary": "Create an incident type",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "create_incident_type"
      }
    },
    "/v1/incident_types/{id}": {
      "delete": {
        "description": "Archives an incident type which will hide it from lists and metrics",
        "operationId": "delete_incident_type",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentTypeEntity"
                }
              }
            },
            "description": "Archives an incident type which will hide it from lists and metrics"
          }
        },
        "summary": "Archive an incident type",
        "tags": [
          "Incident Settings"
        ]
      },
      "get": {
        "description": "Retrieve a single incident type from its ID",
        "operationId": "get_incident_type",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentTypeEntity"
                }
              }
            },
            "description": "Retrieve a single incident type from its ID"
          }
        },
        "summary": "Get an incident type",
        "tags": [
          "Incident Settings"
        ]
      },
      "patch": {
        "description": "Update a single incident type from its ID",
        "operationId": "update_incident_type",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_type"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentTypeEntity"
                }
              }
            },
            "description": "Update a single incident type from its ID"
          }
        },
        "summary": "Update an incident type",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "update_incident_type"
      }
    },
    "/v1/incidents": {
      "get": {
        "description": "List all of the incidents in the organization",
        "operationId": "list_incidents",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "A JSON string that defines 'logic' and 'user_data'",
            "in": "query",
            "name": "conditions",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments",
            "in": "query",
            "name": "environments",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services",
            "in": "query",
            "name": "services",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities",
            "in": "query",
            "name": "functionalities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of infrastructure IDs. Returns incidents that do not have the following infrastructure ids associated with them.",
            "in": "query",
            "name": "excluded_infrastructure_ids",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of team IDs",
            "in": "query",
            "name": "teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments",
            "in": "query",
            "name": "assigned_teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Incident status",
            "in": "query",
            "name": "status",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that started on or after this date",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that started on or before this date",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
            "in": "query",
            "name": "resolved_at_or_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
            "in": "query",
            "name": "resolved_at_or_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were closed at or after this time",
            "in": "query",
            "name": "closed_at_or_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were closed at or before this time",
            "in": "query",
            "name": "closed_at_or_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were created at or after this time",
            "in": "query",
            "name": "created_at_or_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were created at or before this time",
            "in": "query",
            "name": "created_at_or_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A text query for an incident that searches on name, summary, and desciption",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search incidents by their name",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The id of a previously saved search.",
            "in": "query",
            "name": "saved_search_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A text value of priority",
            "in": "query",
            "name": "priorities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Flag for including incidents where priority has not been set",
            "in": "query",
            "name": "priority_not_set",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "A text value of severity",
            "in": "query",
            "name": "severities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Flag for including incidents where severity has not been set",
            "in": "query",
            "name": "severity_not_set",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "A comma separated list of current milestones",
            "in": "query",
            "name": "current_milestones",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of tags",
            "in": "query",
            "name": "tags",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A matching strategy for the tags provided",
            "in": "query",
            "name": "tag_match_strategy",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestTagmatchstrategyAny",
                  "value": "any"
                },
                {
                  "name": "RequestTagmatchstrategyMatchAll",
                  "value": "match_all"
                },
                {
                  "name": "RequestTagmatchstrategyExclude",
                  "value": "exclude"
                }
              ]
            }
          },
          {
            "description": "Return archived incidents",
            "in": "query",
            "name": "archived",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Filters for incidents that were updated after this date",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were updated before this date",
            "in": "query",
            "name": "updated_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of incident type IDs",
            "in": "query",
            "name": "incident_type_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of retrospective template IDs",
            "in": "query",
            "name": "retrospective_templates",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEntityPaginated"
                }
              }
            },
            "description": "List all of the incidents in the organization"
          }
        },
        "summary": "List incidents",
        "tags": [
          "Incidents"
        ]
      },
      "post": {
        "description": "Create a new incident",
        "operationId": "create_incident",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEntity"
                }
              }
            },
            "description": "Create a new incident"
          }
        },
        "summary": "Create an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "create_incident"
      }
    },
    "/v1/incidents/{incident_id}": {
      "delete": {
        "description": "Archives an incident which will hide it from lists and metrics",
        "operationId": "delete_incident",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEntity"
                }
              }
            },
            "description": "Archives an incident which will hide it from lists and metrics"
          }
        },
        "summary": "Archive an incident",
        "tags": [
          "Incidents"
        ]
      },
      "get": {
        "description": "Retrieve a single incident from its ID",
        "operationId": "get_incident",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEntity"
                }
              }
            },
            "description": "Retrieve a single incident from its ID"
          }
        },
        "summary": "Get an incident",
        "tags": [
          "Incidents"
        ]
      },
      "patch": {
        "description": "Updates an incident with provided parameters",
        "operationId": "update_incident",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEntity"
                }
              }
            },
            "description": "Updates an incident with provided parameters"
          }
        },
        "summary": "Update an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "update_incident"
      }
    },
    "/v1/incidents/{incident_id}/alerts": {
      "get": {
        "description": "List alerts that have been attached to an incident",
        "operationId": "list_incident_alerts",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_AlertEntityPaginated"
                }
              }
            },
            "description": "List alerts that have been attached to an incident"
          }
        },
        "summary": "List alerts for an incident",
        "tags": [
          "Alerts"
        ]
      },
      "post": {
        "description": "Add an alert to an incident. FireHydrant needs to have ingested the alert from a third party system in order to attach it to the incident.",
        "operationId": "create_incident_alert",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_alert"
              }
            }
          },
          "description": "Array of alert IDs to be assigned to the incident",
          "required": true
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Add an alert to an incident. FireHydrant needs to have ingested the alert from a third party system in order to attach it to the incident."
          }
        },
        "summary": "Attach an alert to an incident",
        "tags": [
          "Alerts"
        ],
        "x-codegen-request-body-name": "alert_ids"
      }
    },
    "/v1/incidents/{incident_id}/alerts/{incident_alert_id}": {
      "delete": {
        "description": "Remove an alert from an incident",
        "operationId": "delete_incident_alert",
        "parameters": [
          {
            "in": "path",
            "name": "incident_alert_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Remove an alert from an incident"
          }
        },
        "summary": "Remove an alert from an incident",
        "tags": [
          "Alerts"
        ]
      }
    },
    "/v1/incidents/{incident_id}/alerts/{incident_alert_id}/primary": {
      "patch": {
        "description": "Setting an alert as primary will overwrite milestone times in the FireHydrant incident with times included in the primary alert. Services attached to the primary alert will also be automatically added to the incident.",
        "operationId": "update_incident_alert_primary",
        "parameters": [
          {
            "in": "path",
            "name": "incident_alert_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_alert_primary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_AlertEntity"
                }
              }
            },
            "description": "Setting an alert as primary will overwrite milestone times in the FireHydrant incident with times included in the primary alert. Services attached to the primary alert will also be automatically added to the incident."
          }
        },
        "summary": "Set an alert as primary for an incident",
        "tags": [
          "Alerts"
        ],
        "x-codegen-request-body-name": "update_incident_alert_primary"
      }
    },
    "/v1/incidents/{incident_id}/attachments": {
      "get": {
        "description": "List attachments for an incident",
        "operationId": "list_incident_attachments",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "attachable_type",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachments_TypedAttachmentEntityPaginated"
                }
              }
            },
            "description": "List attachments for an incident"
          }
        },
        "summary": "List attachments for an incident",
        "tags": [
          "Incidents"
        ]
      },
      "post": {
        "description": "Allows adding image attachments to an incident",
        "operationId": "create_incident_attachment",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_attachment_form"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentAttachmentEntity"
                }
              }
            },
            "description": "Allows adding image attachments to an incident"
          }
        },
        "summary": "Add an attachment to the incident timeline",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/channel": {
      "get": {
        "description": "Gives chat channel information for the specified incident",
        "operationId": "get_incident_channel",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_ChannelEntity"
                }
              }
            },
            "description": "Gives chat channel information for the specified incident"
          }
        },
        "summary": "Get chat channel information for an incident",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/close": {
      "put": {
        "description": "Closes an incident and optionally close all children",
        "operationId": "close_incident",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEntity"
                }
              }
            },
            "description": "Closes an incident and optionally close all children"
          }
        },
        "summary": "Close an incident",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/conference_bridges": {
      "get": {
        "description": "Retrieve all conference bridges for an incident",
        "operationId": "list_incident_conference_bridges",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_ConferenceBridgeEntity"
                }
              }
            },
            "description": "Retrieve all conference bridges for an incident"
          }
        },
        "summary": "Retrieve all conference bridges for an incident",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/conference_bridges/{id}/translations/{language_code}": {
      "get": {
        "description": "Retrieve the translations for a specific conference bridge",
        "operationId": "get_conference_bridge_translation",
        "parameters": [
          {
            "description": "The ID of the conference bridge",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The language code of the translation",
            "in": "path",
            "name": "language_code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_ConferenceBridgeEntity"
                }
              }
            },
            "description": "Retrieve the translations for a specific conference bridge"
          }
        },
        "summary": "Retrieve the translations for a specific conference bridge",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/events": {
      "get": {
        "description": "List all events for an incident. An event is a timeline entry. This can be filtered with params to retrieve events of a certain type.",
        "operationId": "list_incident_events",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of types of events to filter by. Possible values are:\n - `add_task_list`: Task list was added\n - `alert_event`: Someone was paged or took action on a linked alert\n - `alert_linked`: An alert was linked to the incident\n - `bulk_milestone_update`: When a milestone change occurs with no other changes\n - `bulk_update`: When an incident note/update is posted or when impacted components are updated. If other changes occur together with either of these changes (e.g., milestone change), they are all bundled together into a bulk_update\n - `change_type`: Updates to associated change events\n - `chat_message`: Any chat message event in a linked chat app like Slack or MS Teams\n - `children_changed`: When adding or updating child related incidents\n - `external_link`: When an external link is added or updated\n - `general_update`: Currently only describes Runbook stoppage events\n - `generic_chat_message`: When an event or message is manually added to the timeline via the web UI or API\n - `incident_attachment`: When attachments or files are added to the timeline\n - `generic_resource_change`: Any changes to individual fields within the incident, including custom fields\n - `incident_restriction`: When an incident is converted to private\n - `incident_status`: Only used when an incident starts and changes to an `active` state\n - `note`: When a message is posted to a status page directly and not via `/fh update`\n - `role_update`: Any updates to assigned roles\n - `runbook_attachment`: Any updates to a runbook\n - `runbook_step_execution_update`: Any Runbook step events\n - `task_update`: Task update events\n - `team_assignment`: Team assignment events\n - `ticket_update`: Updates to incident and follow-up tickets",
            "in": "query",
            "name": "types",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEventEntityPaginated"
                }
              }
            },
            "description": "List all events for an incident. An event is a timeline entry. This can be filtered with params to retrieve events of a certain type."
          }
        },
        "summary": "List events for an incident",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/events/{event_id}": {
      "delete": {
        "description": "Delete an event for an incident",
        "operationId": "delete_incident_event",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEventEntity"
                }
              }
            },
            "description": "Delete an event for an incident"
          }
        },
        "summary": "Delete an incident event",
        "tags": [
          "Incidents"
        ]
      },
      "get": {
        "description": "Retrieve a single event for an incident",
        "operationId": "get_incident_event",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEventEntity"
                }
              }
            },
            "description": "Retrieve a single event for an incident"
          }
        },
        "summary": "Get an incident event",
        "tags": [
          "Incidents"
        ]
      },
      "patch": {
        "description": "Update a single event for an incident",
        "operationId": "update_incident_event",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEventEntity"
                }
              }
            },
            "description": "Update a single event for an incident"
          }
        },
        "summary": "Update an incident event",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/events/{event_id}/votes": {
      "patch": {
        "description": "Upvote or downvote an object",
        "operationId": "update_vote",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_vote"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VotesEntity"
                }
              }
            },
            "description": "Upvote or downvote an object"
          }
        },
        "summary": "Update votes",
        "tags": [
          "Conversations"
        ],
        "x-codegen-request-body-name": "update_vote"
      }
    },
    "/v1/incidents/{incident_id}/events/{event_id}/votes/status": {
      "get": {
        "description": "Get an object's current vote counts",
        "operationId": "get_vote_status",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VotesEntity"
                }
              }
            },
            "description": "Get an object's current vote counts"
          }
        },
        "summary": "Get votes",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/v1/incidents/{incident_id}/generic_chat_messages": {
      "post": {
        "description": "Create a new generic chat message on an incident timeline. These are independent of any specific chat provider.",
        "operationId": "create_incident_chat_message",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_chat_message"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event_GenericChatMessageEntity"
                }
              }
            },
            "description": "Create a new generic chat message on an incident timeline. These are independent of any specific chat provider."
          }
        },
        "summary": "Add a chat message to an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "create_incident_chat_message"
      }
    },
    "/v1/incidents/{incident_id}/generic_chat_messages/{message_id}": {
      "delete": {
        "description": "Delete an existing generic chat message on an incident.",
        "operationId": "delete_incident_chat_message",
        "parameters": [
          {
            "in": "path",
            "name": "message_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event_GenericChatMessageEntity"
                }
              }
            },
            "description": "Delete an existing generic chat message on an incident."
          }
        },
        "summary": "Delete a chat message from an incident",
        "tags": [
          "Incidents"
        ]
      },
      "patch": {
        "description": "Update an existing generic chat message on an incident.",
        "operationId": "update_incident_chat_message",
        "parameters": [
          {
            "in": "path",
            "name": "message_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_chat_message"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event_GenericChatMessageEntity"
                }
              }
            },
            "description": "Update an existing generic chat message on an incident."
          }
        },
        "summary": "Update a chat message on an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "update_incident_chat_message"
      }
    },
    "/v1/incidents/{incident_id}/impact": {
      "patch": {
        "description": "Allows updating an incident's impacted infrastructure, with the option to\nmove the incident into a different milestone and provide a note to update\nthe incident timeline and any attached status pages. If this method is\nrequested with the PUT verb, impacts will be completely replaced with the\ninformation in the request body, even if not provided (effectively clearing\nall impacts). If this method is requested with the PATCH verb, the provided\nimpacts will be added or updated, but no impacts will be removed.\n",
        "operationId": "update_incident_impact_patch",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_impact_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEntity"
                }
              }
            },
            "description": "Allows updating an incident's impacted infrastructure, with the option to\nmove the incident into a different milestone and provide a note to update\nthe incident timeline and any attached status pages. If this method is\nrequested with the PUT verb, impacts will be completely replaced with the\ninformation in the request body, even if not provided (effectively clearing\nall impacts). If this method is requested with the PATCH verb, the provided\nimpacts will be added or updated, but no impacts will be removed.\n"
          }
        },
        "summary": "Update impacts for an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "update_incident_impact_patch"
      },
      "put": {
        "description": "Allows updating an incident's impacted infrastructure, with the option to\nmove the incident into a different milestone and provide a note to update\nthe incident timeline and any attached status pages. If this method is\nrequested with the PUT verb, impacts will be completely replaced with the\ninformation in the request body, even if not provided (effectively clearing\nall impacts). If this method is requested with the PATCH verb, the provided\nimpacts will be added or updated, but no impacts will be removed.\n",
        "operationId": "update_incident_impact_put",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_impact_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEntity"
                }
              }
            },
            "description": "Allows updating an incident's impacted infrastructure, with the option to\nmove the incident into a different milestone and provide a note to update\nthe incident timeline and any attached status pages. If this method is\nrequested with the PUT verb, impacts will be completely replaced with the\ninformation in the request body, even if not provided (effectively clearing\nall impacts). If this method is requested with the PATCH verb, the provided\nimpacts will be added or updated, but no impacts will be removed.\n"
          }
        },
        "summary": "Update impacts for an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "update_incident_impact_put"
      }
    },
    "/v1/incidents/{incident_id}/impact/{type}": {
      "get": {
        "description": "List impacted infrastructure on an incident by specifying type",
        "operationId": "list_incident_impacts",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestTypeEnvironments",
                  "value": "environments"
                },
                {
                  "name": "RequestTypeFunctionalities",
                  "value": "functionalities"
                },
                {
                  "name": "RequestTypeServices",
                  "value": "services"
                },
                {
                  "name": "RequestTypeCustomers",
                  "value": "customers"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentImpactEntityPaginated"
                }
              }
            },
            "description": "List impacted infrastructure on an incident by specifying type"
          }
        },
        "summary": "List impacted infrastructure for an incident",
        "tags": [
          "Incidents"
        ]
      },
      "post": {
        "description": "Add impacted infrastructure to an incident",
        "operationId": "create_incident_impact",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestTypeEnvironments",
                  "value": "environments"
                },
                {
                  "name": "RequestTypeFunctionalities",
                  "value": "functionalities"
                },
                {
                  "name": "RequestTypeServices",
                  "value": "services"
                },
                {
                  "name": "RequestTypeCustomers",
                  "value": "customers"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_impact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentImpactEntity"
                }
              }
            },
            "description": "Add impacted infrastructure to an incident"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "summary": "Add impacted infrastructure to an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "create_incident_impact"
      }
    },
    "/v1/incidents/{incident_id}/impact/{type}/{id}": {
      "delete": {
        "description": "Remove impacted infrastructure from an incident",
        "operationId": "delete_incident_impact",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestTypeEnvironments",
                  "value": "environments"
                },
                {
                  "name": "RequestTypeFunctionalities",
                  "value": "functionalities"
                },
                {
                  "name": "RequestTypeServices",
                  "value": "services"
                },
                {
                  "name": "RequestTypeCustomers",
                  "value": "customers"
                }
              ]
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Remove impacted infrastructure from an incident"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "summary": "Remove impacted infrastructure from an incident",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/links": {
      "get": {
        "description": "List all the editable, external incident links attached to an incident",
        "operationId": "list_incident_links",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachments_LinkEntityPaginated"
                }
              }
            },
            "description": "List all the editable, external incident links attached to an incident"
          }
        },
        "summary": "List links on an incident",
        "tags": [
          "Incidents"
        ]
      },
      "post": {
        "description": "Allows adding adhoc links to an incident as an attachment",
        "operationId": "create_incident_link",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_link"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachments_LinkEntity"
                }
              }
            },
            "description": "Allows adding adhoc links to an incident as an attachment"
          }
        },
        "summary": "Add a link to an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "create_incident_link"
      }
    },
    "/v1/incidents/{incident_id}/links/{link_id}": {
      "delete": {
        "description": "Remove a link from an incident",
        "operationId": "delete_incident_link",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Remove a link from an incident"
          }
        },
        "summary": "Remove a link from an incident",
        "tags": [
          "Incidents"
        ]
      },
      "put": {
        "description": "Update the external incident link attributes",
        "operationId": "update_incident_link",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_link"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Update the external incident link attributes"
          }
        },
        "summary": "Update the external incident link",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "update_incident_link"
      }
    },
    "/v1/incidents/{incident_id}/milestones": {
      "get": {
        "description": "List times and durations for each milestone on an incident",
        "operationId": "list_incident_milestones",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_MilestoneEntityPaginated"
                }
              }
            },
            "description": "List times and durations for each milestone on an incident"
          }
        },
        "summary": "List incident milestones",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/milestones/bulk_update": {
      "put": {
        "description": "Update milestone times in bulk for a given incident. All milestone\ntimes for an incident must occur in chronological order\ncorresponding to the configured order of milestones. If the result\nof this request would cause any milestone(s) to appear out of place,\na 422 response will instead be returned. This includes milestones\nnot explicitly submitted or updated in this request.\n",
        "operationId": "bulk_update_incident_milestones",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bulk_update_incident_milestones"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_MilestoneEntityPaginated"
                }
              }
            },
            "description": "Update milestone times in bulk for a given incident. All milestone\ntimes for an incident must occur in chronological order\ncorresponding to the configured order of milestones. If the result\nof this request would cause any milestone(s) to appear out of place,\na 422 response will instead be returned. This includes milestones\nnot explicitly submitted or updated in this request.\n"
          }
        },
        "summary": "Update milestone times",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "bulk_update_incident_milestones"
      }
    },
    "/v1/incidents/{incident_id}/notes": {
      "post": {
        "description": "Create a new note on for an incident. The visibility field on a note determines where it gets posted.",
        "operationId": "create_incident_note",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_note"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event_NoteEntity"
                }
              }
            },
            "description": "Create a new note on for an incident. The visibility field on a note determines where it gets posted."
          }
        },
        "summary": "Add a note to an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "create_incident_note"
      }
    },
    "/v1/incidents/{incident_id}/notes/{note_id}": {
      "patch": {
        "description": "Updates the body of a note",
        "operationId": "update_incident_note",
        "parameters": [
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_note"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event_NoteEntity"
                }
              }
            },
            "description": "Updates the body of a note"
          }
        },
        "summary": "Update a note",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "update_incident_note"
      }
    },
    "/v1/incidents/{incident_id}/related_change_events": {
      "get": {
        "description": "List related changes that have been attached to an incident",
        "operationId": "list_incident_change_events",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "The type of the relation to the incident",
            "in": "query",
            "name": "type",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestTypeCaused",
                  "value": "caused"
                },
                {
                  "name": "RequestTypeFixed",
                  "value": "fixed"
                },
                {
                  "name": "RequestTypeSuspect",
                  "value": "suspect"
                },
                {
                  "name": "RequestTypeDismissed",
                  "value": "dismissed"
                }
              ]
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RelatedChangeEventEntityPaginated"
                }
              }
            },
            "description": "List related changes that have been attached to an incident"
          }
        },
        "summary": "List related changes on an incident",
        "tags": [
          "Incidents"
        ]
      },
      "post": {
        "description": "Add a related change to an incident. Changes added to an incident can be causes, fixes, or suspects. To remove a change from an incident, the type field should be set to dismissed.",
        "operationId": "create_incident_change_event",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_change_event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RelatedChangeEventEntity"
                }
              }
            },
            "description": "Add a related change to an incident. Changes added to an incident can be causes, fixes, or suspects. To remove a change from an incident, the type field should be set to dismissed."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Bad Request"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Already Added"
          }
        },
        "summary": "Add a related change to an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "create_incident_change_event"
      }
    },
    "/v1/incidents/{incident_id}/related_change_events/{related_change_event_id}": {
      "patch": {
        "description": "Update a change attached to an incident",
        "operationId": "update_incident_change_event",
        "parameters": [
          {
            "in": "path",
            "name": "related_change_event_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_change_event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RelatedChangeEventEntity"
                }
              }
            },
            "description": "Update a change attached to an incident"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Bad Request"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Already Added"
          }
        },
        "summary": "Update a change attached to an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "update_incident_change_event"
      }
    },
    "/v1/incidents/{incident_id}/relationships": {
      "get": {
        "description": "List any parent/child relationships for an incident",
        "operationId": "get_incident_relationships",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RelationshipsEntity"
                }
              }
            },
            "description": "List any parent/child relationships for an incident"
          }
        },
        "summary": "List incident relationships",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/resolve": {
      "put": {
        "description": "Resolves a currently active incident",
        "operationId": "resolve_incident",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resolve_incident"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEntity"
                }
              }
            },
            "description": "Resolves a currently active incident"
          }
        },
        "summary": "Resolve an incident",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/retrospectives": {
      "get": {
        "description": "Retrieve retrospectives attached to an incident",
        "operationId": "list_incident_retrospectives",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Filter by hidden status.",
            "in": "query",
            "name": "is_hidden",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RetrospectiveEntityPaginated"
                }
              }
            },
            "description": "Retrieve retrospectives attached to an incident"
          }
        },
        "summary": "All attached retrospectives for an incident",
        "tags": [
          "Retrospectives"
        ]
      },
      "post": {
        "description": "Create a new retrospective for an incident",
        "operationId": "create_incident_retrospective",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_retrospective"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RetrospectiveEntity"
                }
              }
            },
            "description": "Create a new retrospective for an incident"
          }
        },
        "summary": "Create a new retrospective on the incident using the template",
        "tags": [
          "Retrospectives"
        ]
      }
    },
    "/v1/incidents/{incident_id}/retrospectives/export": {
      "post": {
        "description": "Export incident's retrospective(s) using their templates",
        "operationId": "export_incident_retrospectives",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/export_incident_retrospectives"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_ExportRetrospectivesResultEntity"
                }
              }
            },
            "description": "Export incident's retrospective(s) using their templates"
          }
        },
        "summary": "Export an incident's retrospective(s)",
        "tags": [
          "Retrospectives"
        ]
      }
    },
    "/v1/incidents/{incident_id}/retrospectives/share": {
      "post": {
        "description": "Share incident retrospectives with users or teams",
        "operationId": "share_incident_retrospectives",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/share_incident_retrospectives"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_ShareRetrospectivesResultEntity"
                }
              }
            },
            "description": "Share incident retrospectives with users or teams"
          }
        },
        "summary": "Share an incident's retrospective",
        "tags": [
          "Retrospectives"
        ]
      }
    },
    "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}": {
      "patch": {
        "description": "Update a retrospective attached to an incident",
        "operationId": "update_incident_retrospective",
        "parameters": [
          {
            "in": "path",
            "name": "retrospective_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_retrospective"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RetrospectiveEntity"
                }
              }
            },
            "description": "Update a retrospective attached to an incident"
          }
        },
        "summary": "Update a retrospective on the incident",
        "tags": [
          "Retrospectives"
        ],
        "x-codegen-request-body-name": "update_incident_retrospective"
      }
    },
    "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields": {
      "patch": {
        "description": "Add a new field to an incident retrospective",
        "operationId": "create_incident_retrospective_field",
        "parameters": [
          {
            "in": "path",
            "name": "retrospective_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_retrospective_field"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RetrospectiveFieldEntity"
                }
              }
            },
            "description": "Add a new field to an incident retrospective"
          }
        },
        "summary": "Appends a new incident retrospective field to an incident retrospective",
        "tags": [
          "Retrospectives"
        ]
      }
    },
    "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields/{field_id}": {
      "get": {
        "description": "Retrieve a field on an incident retrospective",
        "operationId": "get_incident_retrospective_field",
        "parameters": [
          {
            "in": "path",
            "name": "retrospective_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RetrospectiveFieldEntity"
                }
              }
            },
            "description": "Retrieve a field on an incident retrospective"
          }
        },
        "summary": "Get a retrospective field",
        "tags": [
          "Retrospectives"
        ]
      },
      "patch": {
        "description": "Update retrospective field value",
        "operationId": "update_incident_retrospective_field",
        "parameters": [
          {
            "in": "path",
            "name": "retrospective_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_retrospective_field"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RetrospectiveFieldEntity"
                }
              }
            },
            "description": "Update retrospective field value"
          }
        },
        "summary": "Update the value on a retrospective field",
        "tags": [
          "Retrospectives"
        ],
        "x-codegen-request-body-name": "update_incident_retrospective_field"
      }
    },
    "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields/{field_id}/inputs": {
      "delete": {
        "description": "Delete a dynamic input on a dynamic input group",
        "operationId": "delete_incident_retrospective_dynamic_input",
        "parameters": [
          {
            "in": "path",
            "name": "retrospective_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the dynamic input field to delete.",
            "in": "query",
            "name": "dynamic_input_field_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RetrospectiveFieldEntity"
                }
              }
            },
            "description": "Delete a dynamic input on a dynamic input group"
          }
        },
        "summary": "Removes a dynamic input from a retrospective's dynamic input group field",
        "tags": [
          "Retrospectives"
        ]
      },
      "post": {
        "description": "Add a new dynamic input field to a dynamic input group",
        "operationId": "create_incident_retrospective_dynamic_input",
        "parameters": [
          {
            "in": "path",
            "name": "retrospective_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RetrospectiveFieldEntity"
                }
              }
            },
            "description": "Add a new dynamic input field to a dynamic input group"
          }
        },
        "summary": "Add a new dynamic input field to a retrospective's dynamic input group field",
        "tags": [
          "Retrospectives"
        ]
      }
    },
    "/v1/incidents/{incident_id}/role_assignments": {
      "get": {
        "description": "Retrieve a list of all of the current role assignments for the incident",
        "operationId": "list_incident_role_assignments",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter on status of the role assignment",
            "in": "query",
            "name": "status",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestStatusActive",
                  "value": "active"
                },
                {
                  "name": "RequestStatusInactive",
                  "value": "inactive"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RoleAssignmentEntityPaginated"
                }
              }
            },
            "description": "Retrieve a list of all of the current role assignments for the incident"
          }
        },
        "summary": "List incident assignees",
        "tags": [
          "Incidents"
        ]
      },
      "post": {
        "description": "Assign a role to a user for this incident",
        "operationId": "create_incident_role_assignment",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_role_assignment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RoleAssignmentEntity"
                }
              }
            },
            "description": "Assign a role to a user for this incident"
          }
        },
        "summary": "Assign a user to an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "create_incident_role_assignment"
      }
    },
    "/v1/incidents/{incident_id}/role_assignments/{role_assignment_id}": {
      "delete": {
        "description": "Unassign a role from a user",
        "operationId": "delete_incident_role_assignment",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "role_assignment_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RoleAssignmentEntity"
                }
              }
            },
            "description": "Unassign a role from a user"
          }
        },
        "summary": "Unassign a user from an incident",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/similar": {
      "get": {
        "description": "Retrieve a list of similar incidents",
        "operationId": "list_similar_incidents",
        "parameters": [
          {
            "in": "query",
            "name": "threshold",
            "schema": {
              "default": 0.2,
              "format": "float",
              "nullable": true,
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 5,
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimilarIncidentEntityPaginated"
                }
              }
            },
            "description": "Retrieve a list of similar incidents"
          }
        },
        "summary": "List similar incidents",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/status_pages": {
      "get": {
        "description": "List status pages that are attached to an incident",
        "operationId": "list_incident_status_pages",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_StatusPageEntityPaginated"
                }
              }
            },
            "description": "List status pages that are attached to an incident"
          }
        },
        "summary": "List status pages for an incident",
        "tags": [
          "Incidents"
        ]
      },
      "post": {
        "description": "Add a status page to an incident.",
        "operationId": "create_incident_status_page",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_status_page"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_StatusPageEntity"
                }
              }
            },
            "description": "Add a status page to an incident."
          }
        },
        "summary": "Add a status page to an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "create_incident_status_page"
      }
    },
    "/v1/incidents/{incident_id}/status_pages/{status_page_id}": {
      "delete": {
        "description": "Remove a status page incident attached to an incident",
        "operationId": "delete_incident_status_page",
        "parameters": [
          {
            "in": "path",
            "name": "status_page_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Remove a status page incident attached to an incident"
          }
        },
        "summary": "Remove a status page from an incident",
        "tags": [
          "Status Pages"
        ]
      }
    },
    "/v1/incidents/{incident_id}/task_lists": {
      "post": {
        "description": "Add all tasks from list to incident",
        "operationId": "create_incident_task_list",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_task_list"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskEntity"
                }
              }
            },
            "description": "Add all tasks from list to incident"
          }
        },
        "summary": "Add tasks from a task list to an incident",
        "tags": [
          "Tasks"
        ],
        "x-codegen-request-body-name": "create_incident_task_list"
      }
    },
    "/v1/incidents/{incident_id}/tasks": {
      "get": {
        "description": "Retrieve a list of all tasks for a specific incident",
        "operationId": "list_incident_tasks",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskEntityPaginated"
                }
              }
            },
            "description": "Retrieve a list of all tasks for a specific incident"
          }
        },
        "summary": "List tasks for an incident",
        "tags": [
          "Tasks"
        ]
      },
      "post": {
        "description": "Create a task",
        "operationId": "create_incident_task",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_task"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskEntity"
                }
              }
            },
            "description": "Create a task"
          }
        },
        "summary": "Create an incident task",
        "tags": [
          "Tasks"
        ],
        "x-codegen-request-body-name": "create_incident_task"
      }
    },
    "/v1/incidents/{incident_id}/tasks/{task_id}": {
      "delete": {
        "description": "Delete a task",
        "operationId": "delete_incident_task",
        "parameters": [
          {
            "in": "path",
            "name": "task_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete a task"
          }
        },
        "summary": "Delete an incident task",
        "tags": [
          "Tasks"
        ]
      },
      "get": {
        "description": "Retrieve a single task for an incident",
        "operationId": "get_incident_task",
        "parameters": [
          {
            "in": "path",
            "name": "task_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Retrieve a single task for an incident"
          }
        },
        "summary": "Get an incident task",
        "tags": [
          "Tasks"
        ]
      },
      "patch": {
        "description": "Update a task's attributes",
        "operationId": "update_incident_task",
        "parameters": [
          {
            "in": "path",
            "name": "task_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_task"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskEntity"
                }
              }
            },
            "description": "Update a task's attributes"
          }
        },
        "summary": "Update an incident task",
        "tags": [
          "Tasks"
        ],
        "x-codegen-request-body-name": "update_incident_task"
      }
    },
    "/v1/incidents/{incident_id}/tasks/{task_id}/convert": {
      "post": {
        "description": "Convert a task to a follow-up",
        "operationId": "convert_incident_task",
        "parameters": [
          {
            "in": "path",
            "name": "task_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/convert_incident_task"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskEntityPaginated"
                }
              }
            },
            "description": "Convert a task to a follow-up"
          }
        },
        "summary": "Convert a task to a follow-up",
        "tags": [
          "Tasks"
        ],
        "x-codegen-request-body-name": "convert_incident_task"
      }
    },
    "/v1/incidents/{incident_id}/team_assignments": {
      "post": {
        "description": "Assign a team for this incident",
        "operationId": "create_incident_team_assignment",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_incident_team_assignment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Assign a team for this incident"
          }
        },
        "summary": "Assign a team to an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "create_incident_team_assignment"
      }
    },
    "/v1/incidents/{incident_id}/team_assignments/{team_assignment_id}": {
      "delete": {
        "description": "Unassign a team from an incident",
        "operationId": "delete_incident_team_assignment",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "team_assignment_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "role_assignment_ids": {
                    "description": "Team role assignments to unassign from the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Unassign a team from an incident"
          }
        },
        "summary": "Unassign a team from an incident",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/transcript": {
      "get": {
        "description": "Retrieve the transcript for a specific incident",
        "operationId": "list_transcript_entries",
        "parameters": [
          {
            "description": "The ID of the transcript entry to start after.",
            "in": "query",
            "name": "after",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The ID of the transcript entry to start before.",
            "in": "query",
            "name": "before",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The order to sort the transcript entries.",
            "in": "query",
            "name": "sort",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortAsc",
                  "value": "asc"
                },
                {
                  "name": "RequestSortDesc",
                  "value": "desc"
                }
              ]
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicAPI_V1_Incidents_TranscriptEntity"
                }
              }
            },
            "description": "Retrieve the transcript for a specific incident"
          }
        },
        "summary": "Lists all of the messages in the incident's transcript",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/transcript/attribution": {
      "put": {
        "description": "Update the attribution of a transcript",
        "operationId": "update_transcript_attribution",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_transcript_attribution"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Update the attribution of a transcript"
          }
        },
        "summary": "Update the attribution of a transcript",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/transcript/{transcript_id}": {
      "delete": {
        "description": "Delete a transcript from an incident",
        "operationId": "delete_transcript_entry",
        "parameters": [
          {
            "in": "path",
            "name": "transcript_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicAPI_V1_Incidents_TranscriptEntity"
                }
              }
            },
            "description": "Delete a transcript from an incident"
          }
        },
        "summary": "Delete a transcript from an incident",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/unarchive": {
      "post": {
        "description": "Unarchive an incident",
        "operationId": "unarchive_incident",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentEntity"
                }
              }
            },
            "description": "Unarchive an incident"
          }
        },
        "summary": "Unarchive an incident",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/incidents/{incident_id}/users/{user_id}": {
      "get": {
        "description": "Retrieve a user with current roles for an incident",
        "operationId": "get_incident_user",
        "parameters": [
          {
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RoleAssignmentEntity"
                }
              }
            },
            "description": "Retrieve a user with current roles for an incident"
          }
        },
        "summary": "Get the current user's incident role",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/v1/infrastructures": {
      "get": {
        "description": "Lists functionality, service and environment objects",
        "operationId": "list_infrastructures",
        "parameters": [
          {
            "description": "A query to search infrastructures by their name",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Omit for any infrastructure that is added to an incident using the format \"incident/{incident_id}\"",
            "in": "query",
            "name": "omit_for",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Restrict infrastructure search to given type.",
            "in": "query",
            "name": "type",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfrastructureSearchEntity"
                }
              }
            },
            "description": "Lists functionality, service and environment objects"
          }
        },
        "summary": "Lists functionality, service and environment objects",
        "tags": [
          "Catalog Entries"
        ]
      }
    },
    "/v1/integrations": {
      "get": {
        "description": "Lists the available and configured integrations",
        "operationId": "list_integrations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_IntegrationEntityPaginated"
                }
              }
            },
            "description": "Lists the available and configured integrations"
          }
        },
        "summary": "List integrations",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/authed_providers/{integration_slug}/{connection_id}": {
      "get": {
        "description": "Lists the available and configured integrations",
        "operationId": "list_authed_providers",
        "parameters": [
          {
            "description": "Integration slug",
            "in": "path",
            "name": "integration_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Connection ID",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Query for users by name",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_AuthedProviderEntityPaginated"
                }
              }
            },
            "description": "Lists the available and configured integrations"
          }
        },
        "summary": "Lists the available and configured integrations",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/authed_providers/{integration_slug}/{connection_id}/{authed_provider_id}": {
      "patch": {
        "description": "Retrieve a single authed provider",
        "operationId": "update_authed_provider",
        "parameters": [
          {
            "description": "Integration slug",
            "in": "path",
            "name": "integration_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Connection ID",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Authed provider ID",
            "in": "path",
            "name": "authed_provider_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_authed_provider"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicAPI_V1_Integrations_AuthedProviderEntity"
                }
              }
            },
            "description": "Retrieve a single authed provider"
          }
        },
        "summary": "Get an authed provider",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/aws/cloudtrail_batches": {
      "get": {
        "description": "Lists CloudTrail batches for the authenticated organization.",
        "operationId": "list_aws_cloudtrail_batches",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "AWS connection ID",
            "in": "query",
            "name": "connection_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Aws_CloudtrailBatchEntityPaginated"
                }
              }
            },
            "description": "Lists CloudTrail batches for the authenticated organization."
          }
        },
        "summary": "List CloudTrail batches",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/aws/cloudtrail_batches/{id}": {
      "get": {
        "description": "Retrieve a single CloudTrail batch.",
        "operationId": "get_aws_cloudtrail_batch",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Aws_CloudtrailBatchEntity"
                }
              }
            },
            "description": "Retrieve a single CloudTrail batch."
          }
        },
        "summary": "Get a CloudTrail batch",
        "tags": [
          "Integrations"
        ]
      },
      "patch": {
        "description": "Update a CloudTrail batch with new information.",
        "operationId": "update_aws_cloudtrail_batch",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_aws_cloudtrail_batch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Aws_CloudtrailBatchEntity"
                }
              }
            },
            "description": "Update a CloudTrail batch with new information."
          }
        },
        "summary": "Update a CloudTrail batch",
        "tags": [
          "Integrations"
        ],
        "x-codegen-request-body-name": "update_aws_cloudtrail_batch"
      }
    },
    "/v1/integrations/aws/cloudtrail_batches/{id}/events": {
      "get": {
        "description": "List events for an AWS CloudTrail batch",
        "operationId": "list_aws_cloudtrail_batch_events",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeEventEntity"
                }
              }
            },
            "description": "List events for an AWS CloudTrail batch"
          }
        },
        "summary": "List events for an AWS CloudTrail batch",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/aws/connections": {
      "get": {
        "description": "Lists the available and configured AWS integration connections for the authenticated organization.",
        "operationId": "list_aws_connections",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "AWS account ID containing the role to be assumed",
            "in": "query",
            "name": "aws_account_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "ARN of the role to be assumed",
            "in": "query",
            "name": "target_arn",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The external ID supplied when assuming the role",
            "in": "query",
            "name": "external_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Aws_ConnectionEntityPaginated"
                }
              }
            },
            "description": "Lists the available and configured AWS integration connections for the authenticated organization."
          }
        },
        "summary": "List AWS connections",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/aws/connections/{id}": {
      "get": {
        "description": "Retrieves the information about the AWS connection.",
        "operationId": "get_aws_connection",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Aws_ConnectionEntity"
                }
              }
            },
            "description": "Retrieves the information about the AWS connection."
          }
        },
        "summary": "Get an AWS connection",
        "tags": [
          "Integrations"
        ]
      },
      "patch": {
        "description": "Update the AWS connection with the provided data.",
        "operationId": "update_aws_connection",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_aws_connection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Aws_ConnectionEntity"
                }
              }
            },
            "description": "Update the AWS connection with the provided data."
          }
        },
        "summary": "Update an AWS connection",
        "tags": [
          "Integrations"
        ],
        "x-codegen-request-body-name": "update_aws_connection"
      }
    },
    "/v1/integrations/confluence_cloud/connections/{id}/space/search": {
      "get": {
        "description": "Lists available space keys for the Confluence integration connection.",
        "operationId": "search_confluence_spaces",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Space Key",
            "in": "query",
            "name": "keyword",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_ConfluenceCloud_SpaceKeyEntity"
                }
              }
            },
            "description": "Lists available space keys for the Confluence integration connection."
          }
        },
        "summary": "List Confluence spaces",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/connections": {
      "get": {
        "description": "List available integration connections",
        "operationId": "list_connections",
        "parameters": [
          {
            "description": "Only return installed integrations with the supplied slugs (types).",
            "in": "query",
            "name": "integration_slug",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_ConnectionEntityPaginated"
                }
              }
            },
            "description": "List available integration connections"
          }
        },
        "summary": "List integration connections",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/connections/{slug}": {
      "post": {
        "description": "Create a new integration connection",
        "operationId": "create_connection",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_ConnectionEntity"
                }
              }
            },
            "description": "Create a new integration connection"
          }
        },
        "summary": "Create a new integration connection",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/connections/{slug}/{connection_id}": {
      "patch": {
        "description": "Update the integration connection with the provided data",
        "operationId": "update_connection",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_ConnectionEntity"
                }
              }
            },
            "description": "Update the integration connection with the provided data"
          }
        },
        "summary": "Update an integration connection",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/connections/{slug}/{connection_id}/refresh": {
      "patch": {
        "description": "Refresh the integration connection with the provided data",
        "operationId": "refresh_connection",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_ConnectionEntity"
                }
              }
            },
            "description": "Refresh the integration connection with the provided data"
          }
        },
        "summary": "Refresh an integration connection",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/field_maps/{field_map_id}": {
      "patch": {
        "description": "Update field mapping",
        "operationId": "update_field_map",
        "parameters": [
          {
            "in": "path",
            "name": "field_map_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldMapping_FieldMapEntity"
                }
              }
            },
            "description": "Update field mapping"
          }
        },
        "summary": "Update field mapping",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/field_maps/{field_map_id}/available_fields": {
      "get": {
        "description": "Get a description of the fields to which data can be mapped",
        "operationId": "list_field_map_available_fields",
        "parameters": [
          {
            "in": "path",
            "name": "field_map_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldMapping_MappableFieldEntity"
                }
              }
            },
            "description": "Get a description of the fields to which data can be mapped"
          }
        },
        "summary": "List available fields for field mapping",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/slack/connections/{connection_id}/emoji_actions": {
      "get": {
        "description": "Lists Slack emoji actions",
        "operationId": "list_slack_emoji_actions",
        "parameters": [
          {
            "description": "Slack Connection UUID",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Lists Slack emoji actions"
          }
        },
        "summary": "List Slack emoji actions",
        "tags": [
          "Integrations"
        ]
      },
      "post": {
        "description": "Creates a new Slack emoji action",
        "operationId": "create_slack_emoji_action",
        "parameters": [
          {
            "description": "Slack Connection UUID",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_slack_emoji_action"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Creates a new Slack emoji action"
          }
        },
        "summary": "Create a new Slack emoji action",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/slack/connections/{connection_id}/emoji_actions/{emoji_action_id}": {
      "delete": {
        "description": "Deletes a Slack emoji action",
        "operationId": "delete_slack_emoji_action",
        "parameters": [
          {
            "description": "Slack Connection UUID",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "emoji_action_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Deletes a Slack emoji action"
          }
        },
        "summary": "Delete a Slack emoji action",
        "tags": [
          "Integrations"
        ]
      },
      "get": {
        "description": "Retrieves a Slack emoji action",
        "operationId": "get_slack_emoji_action",
        "parameters": [
          {
            "description": "Slack Connection UUID",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "emoji_action_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Retrieves a Slack emoji action"
          }
        },
        "summary": "Get a Slack emoji action",
        "tags": [
          "Integrations"
        ]
      },
      "patch": {
        "description": "Updates a Slack emoji action",
        "operationId": "update_slack_emoji_action",
        "parameters": [
          {
            "description": "Slack Connection UUID",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "emoji_action_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_slack_emoji_action"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Updates a Slack emoji action"
          }
        },
        "summary": "Update a Slack emoji action",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/slack/connections/{connection_id}/workspaces": {
      "get": {
        "description": "Lists all Slack workspaces",
        "operationId": "list_slack_workspaces",
        "parameters": [
          {
            "description": "Connection UUID",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Slack_WorkspaceEntity"
                }
              }
            },
            "description": "Lists all Slack workspaces"
          }
        },
        "summary": "List Slack workspaces",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/slack/usergroups": {
      "get": {
        "description": "Lists all Slack user groups",
        "operationId": "list_slack_usergroups",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Slack_UsergroupEntity"
                }
              }
            },
            "description": "Lists all Slack user groups"
          }
        },
        "summary": "List Slack user groups",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/statuses": {
      "get": {
        "description": "Retrieve overall integration connection status",
        "operationId": "list_connection_statuses",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_ConnectionStatusEntity"
                }
              }
            },
            "description": "Retrieve overall integration connection status"
          }
        },
        "summary": "Get integration connection status",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/statuses/{slug}": {
      "get": {
        "description": "Retrieve a single integration connection status",
        "operationId": "list_connection_statuses_by_slug",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_ConnectionStatusEntity"
                }
              }
            },
            "description": "Retrieve a single integration connection status"
          }
        },
        "summary": "Get an integration connection status",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/statuses/{slug}/{by_connection_id}": {
      "get": {
        "description": "Retrieve a single integration connection status",
        "operationId": "list_connection_statuses_by_slug_and_id",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "by_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_ConnectionStatusEntity"
                }
              }
            },
            "description": "Retrieve a single integration connection status"
          }
        },
        "summary": "Get an integration connection status",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/statuspage/connections": {
      "get": {
        "description": "Lists the available and configured Statuspage integrations connections for the authenticated organization.",
        "operationId": "list_statuspage_connections",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Statuspage_ConnectionEntityPaginated"
                }
              }
            },
            "description": "Lists the available and configured Statuspage integrations connections for the authenticated organization."
          }
        },
        "summary": "List Statuspage connections",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/statuspage/connections/{connection_id}": {
      "delete": {
        "description": "Deletes the given Statuspage integration connection.",
        "operationId": "delete_statuspage_connection",
        "parameters": [
          {
            "description": "Connection UUID",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Statuspage_ConnectionEntity"
                }
              }
            },
            "description": "Deletes the given Statuspage integration connection."
          }
        },
        "summary": "Delete a Statuspage connection",
        "tags": [
          "Integrations"
        ]
      },
      "get": {
        "description": "Retrieve the information about the Statuspage connection.",
        "operationId": "get_statuspage_connection",
        "parameters": [
          {
            "description": "Connection UUID",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Statuspage_ConnectionEntity"
                }
              }
            },
            "description": "Retrieve the information about the Statuspage connection."
          }
        },
        "summary": "Get a Statuspage connection",
        "tags": [
          "Integrations"
        ]
      },
      "patch": {
        "description": "Update the given Statuspage integration connection.",
        "operationId": "update_statuspage_connection",
        "parameters": [
          {
            "description": "Connection UUID",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_statuspage_connection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Statuspage_ConnectionEntity"
                }
              }
            },
            "description": "Update the given Statuspage integration connection."
          }
        },
        "summary": "Update a Statuspage connection",
        "tags": [
          "Integrations"
        ],
        "x-codegen-request-body-name": "update_statuspage_connection"
      }
    },
    "/v1/integrations/statuspage/connections/{connection_id}/pages": {
      "get": {
        "description": "Lists available page IDs for the Statuspage integration connection.",
        "operationId": "list_statuspage_connection_pages",
        "parameters": [
          {
            "description": "Connection UUID",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Statuspage_PageEntity"
                }
              }
            },
            "description": "Lists available page IDs for the Statuspage integration connection."
          }
        },
        "summary": "List StatusPage pages for a connection",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/zendesk/search": {
      "get": {
        "description": "Search for Zendesk tickets",
        "operationId": "get_zendesk_customer_support_issue",
        "parameters": [
          {
            "description": "Zendesk ticket ID",
            "in": "query",
            "name": "ticket_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Use to include attached_incidents",
            "in": "query",
            "name": "include",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Search for Zendesk tickets"
          }
        },
        "summary": "Search for Zendesk tickets",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/zendesk/{connection_id}/tickets/search": {
      "get": {
        "description": "Search for Zendesk tickets",
        "operationId": "search_zendesk_tickets",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_Zendesk_SearchTickets_PaginatedEntity"
                }
              }
            },
            "description": "Search for Zendesk tickets"
          }
        },
        "summary": "Search for Zendesk tickets",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/{integration_id}": {
      "get": {
        "description": "Retrieve a single integration",
        "operationId": "get_integration",
        "parameters": [
          {
            "description": "Integration UUID",
            "in": "path",
            "name": "integration_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations_IntegrationEntity"
                }
              }
            },
            "description": "Retrieve a single integration"
          }
        },
        "summary": "Get an integration",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/lifecycles/measurement_definitions": {
      "get": {
        "description": "List all of the measurement definitions in the organization",
        "operationId": "list_lifecycle_measurement_definitions",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "List all of the measurement definitions in the organization"
          }
        },
        "summary": "List measurement definitions",
        "tags": [
          "Incident Settings"
        ]
      },
      "post": {
        "description": "Create a new measurement definition",
        "operationId": "create_lifecycle_measurement_definition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_lifecycle_measurement_definition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Create a new measurement definition"
          }
        },
        "summary": "Create a measurement definition",
        "tags": [
          "Incident Settings"
        ]
      }
    },
    "/v1/lifecycles/measurement_definitions/{measurement_definition_id}": {
      "delete": {
        "description": "Archives a measurement definition which will hide it from lists and metrics",
        "operationId": "delete_lifecycle_measurement_definition",
        "parameters": [
          {
            "in": "path",
            "name": "measurement_definition_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Archives a measurement definition which will hide it from lists and metrics"
          }
        },
        "summary": "Archive a measurement definition",
        "tags": [
          "Incident Settings"
        ]
      },
      "get": {
        "description": "Retrieve a single measurement definition from its ID",
        "operationId": "get_lifecycle_measurement_definition",
        "parameters": [
          {
            "in": "path",
            "name": "measurement_definition_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Retrieve a single measurement definition from its ID"
          }
        },
        "summary": "Get a measurement definition",
        "tags": [
          "Incident Settings"
        ]
      },
      "patch": {
        "description": "Update a single measurement definition from its ID",
        "operationId": "update_lifecycle_measurement_definition",
        "parameters": [
          {
            "in": "path",
            "name": "measurement_definition_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_lifecycle_measurement_definition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Update a single measurement definition from its ID"
          }
        },
        "summary": "Update a measurement definition",
        "tags": [
          "Incident Settings"
        ]
      }
    },
    "/v1/lifecycles/milestones": {
      "post": {
        "description": "Create a new milestone",
        "operationId": "create_lifecycle_milestone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_lifecycle_milestone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lifecycles_PhaseEntityList"
                }
              }
            },
            "description": "Create a new milestone"
          }
        },
        "summary": "Create a milestone",
        "tags": [
          "Incident Settings"
        ]
      }
    },
    "/v1/lifecycles/milestones/{milestone_id}": {
      "delete": {
        "description": "Delete a milestone",
        "operationId": "delete_lifecycle_milestone",
        "parameters": [
          {
            "in": "path",
            "name": "milestone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lifecycles_PhaseEntity"
                }
              }
            },
            "description": "Delete a milestone"
          }
        },
        "summary": "Delete a milestone",
        "tags": [
          "Incident Settings"
        ]
      },
      "patch": {
        "description": "Update a milestone",
        "operationId": "update_lifecycle_milestone",
        "parameters": [
          {
            "in": "path",
            "name": "milestone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_lifecycle_milestone"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lifecycles_PhaseEntity"
                }
              }
            },
            "description": "Update a milestone"
          }
        },
        "summary": "Update a milestone",
        "tags": [
          "Incident Settings"
        ]
      }
    },
    "/v1/lifecycles/phases": {
      "get": {
        "description": "List all of the lifecycle phases and milestones in the organization",
        "operationId": "list_lifecycle_phases",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lifecycles_PhaseEntityList"
                }
              }
            },
            "description": "List all of the lifecycle phases and milestones in the organization"
          }
        },
        "summary": "List phases and milestones",
        "tags": [
          "Incident Settings"
        ]
      }
    },
    "/v1/metrics/incidents": {
      "get": {
        "description": "Returns a report with time bucketed analytics data",
        "operationId": "list_incident_metrics",
        "parameters": [
          {
            "description": "The start date to return metrics from",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The end date to return metrics from",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "bucket_size",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestBucketsizeWeek",
                  "value": "week"
                },
                {
                  "name": "RequestBucketsizeDay",
                  "value": "day"
                },
                {
                  "name": "RequestBucketsizeMonth",
                  "value": "month"
                },
                {
                  "name": "RequestBucketsizeAllTime",
                  "value": "all_time"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "by",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestByTotal",
                  "value": "total"
                },
                {
                  "name": "RequestBySeverity",
                  "value": "severity"
                },
                {
                  "name": "RequestByPriority",
                  "value": "priority"
                },
                {
                  "name": "RequestByFunctionality",
                  "value": "functionality"
                },
                {
                  "name": "RequestByService",
                  "value": "service"
                },
                {
                  "name": "RequestByEnvironment",
                  "value": "environment"
                },
                {
                  "name": "RequestByUser",
                  "value": "user"
                },
                {
                  "name": "RequestByUserInvolvement",
                  "value": "user_involvement"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_field",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortfieldMttd",
                  "value": "mttd"
                },
                {
                  "name": "RequestSortfieldMtta",
                  "value": "mtta"
                },
                {
                  "name": "RequestSortfieldMttm",
                  "value": "mttm"
                },
                {
                  "name": "RequestSortfieldMttr",
                  "value": "mttr"
                },
                {
                  "name": "RequestSortfieldCount",
                  "value": "count"
                },
                {
                  "name": "RequestSortfieldTotalTime",
                  "value": "total_time"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_direction",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortdirectionAsc",
                  "value": "asc"
                },
                {
                  "name": "RequestSortdirectionDesc",
                  "value": "desc"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_limit",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "conditions",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics_MetricsEntity"
                }
              }
            },
            "description": "Returns a report with time bucketed analytics data"
          }
        },
        "summary": "List incident metrics and analytics",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/metrics/milestone_funnel": {
      "get": {
        "description": "Returns a report with time bucketed milestone data",
        "operationId": "list_milestone_funnel_metrics",
        "parameters": [
          {
            "description": "A JSON string that defines 'logic' and 'user_data'",
            "in": "query",
            "name": "conditions",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments",
            "in": "query",
            "name": "environments",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services",
            "in": "query",
            "name": "services",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities",
            "in": "query",
            "name": "functionalities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of infrastructure IDs. Returns incidents that do not have the following infrastructure ids associated with them.",
            "in": "query",
            "name": "excluded_infrastructure_ids",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of team IDs",
            "in": "query",
            "name": "teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments",
            "in": "query",
            "name": "assigned_teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Incident status",
            "in": "query",
            "name": "status",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that started on or after this date",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that started on or before this date",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
            "in": "query",
            "name": "resolved_at_or_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
            "in": "query",
            "name": "resolved_at_or_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were closed at or after this time",
            "in": "query",
            "name": "closed_at_or_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were closed at or before this time",
            "in": "query",
            "name": "closed_at_or_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were created at or after this time",
            "in": "query",
            "name": "created_at_or_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were created at or before this time",
            "in": "query",
            "name": "created_at_or_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A text query for an incident that searches on name, summary, and desciption",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search incidents by their name",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The id of a previously saved search.",
            "in": "query",
            "name": "saved_search_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A text value of priority",
            "in": "query",
            "name": "priorities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Flag for including incidents where priority has not been set",
            "in": "query",
            "name": "priority_not_set",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "A text value of severity",
            "in": "query",
            "name": "severities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Flag for including incidents where severity has not been set",
            "in": "query",
            "name": "severity_not_set",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "A comma separated list of current milestones",
            "in": "query",
            "name": "current_milestones",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of tags",
            "in": "query",
            "name": "tags",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A matching strategy for the tags provided",
            "in": "query",
            "name": "tag_match_strategy",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestTagmatchstrategyAny",
                  "value": "any"
                },
                {
                  "name": "RequestTagmatchstrategyMatchAll",
                  "value": "match_all"
                },
                {
                  "name": "RequestTagmatchstrategyExclude",
                  "value": "exclude"
                }
              ]
            }
          },
          {
            "description": "Return archived incidents",
            "in": "query",
            "name": "archived",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Filters for incidents that were updated after this date",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were updated before this date",
            "in": "query",
            "name": "updated_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of incident type IDs",
            "in": "query",
            "name": "incident_type_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of retrospective template IDs",
            "in": "query",
            "name": "retrospective_templates",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "group_by": {
                    "items": {
                      "type": "string",
                      "x-speakeasy-enums": [
                        {
                          "name": "FormgroupbyStartedDay",
                          "value": "started_day"
                        },
                        {
                          "name": "FormgroupbyStartedWeek",
                          "value": "started_week"
                        },
                        {
                          "name": "FormgroupbyStartedMonth",
                          "value": "started_month"
                        },
                        {
                          "name": "FormgroupbyAllTime",
                          "value": "all_time"
                        }
                      ]
                    },
                    "nullable": true,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics_MilestonesFunnelEntity"
                }
              }
            },
            "description": "Returns a report with time bucketed milestone data"
          }
        },
        "summary": "List milestone funnel metrics",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/metrics/mttx": {
      "get": {
        "description": "Fetch infrastructure metrics based on custom query",
        "operationId": "list_mttx_metrics",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "A JSON string that defines 'logic' and 'user_data'",
            "in": "query",
            "name": "conditions",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments",
            "in": "query",
            "name": "environments",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services",
            "in": "query",
            "name": "services",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities",
            "in": "query",
            "name": "functionalities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of infrastructure IDs. Returns incidents that do not have the following infrastructure ids associated with them.",
            "in": "query",
            "name": "excluded_infrastructure_ids",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of team IDs",
            "in": "query",
            "name": "teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments",
            "in": "query",
            "name": "assigned_teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Incident status",
            "in": "query",
            "name": "status",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that started on or after this date",
            "in": "query",
            "name": "start_date",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that started on or before this date",
            "in": "query",
            "name": "end_date",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
            "in": "query",
            "name": "resolved_at_or_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
            "in": "query",
            "name": "resolved_at_or_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were closed at or after this time",
            "in": "query",
            "name": "closed_at_or_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were closed at or before this time",
            "in": "query",
            "name": "closed_at_or_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were created at or after this time",
            "in": "query",
            "name": "created_at_or_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were created at or before this time",
            "in": "query",
            "name": "created_at_or_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A text query for an incident that searches on name, summary, and desciption",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search incidents by their name",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The id of a previously saved search.",
            "in": "query",
            "name": "saved_search_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A text value of priority",
            "in": "query",
            "name": "priorities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Flag for including incidents where priority has not been set",
            "in": "query",
            "name": "priority_not_set",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "A text value of severity",
            "in": "query",
            "name": "severities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Flag for including incidents where severity has not been set",
            "in": "query",
            "name": "severity_not_set",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "A comma separated list of current milestones",
            "in": "query",
            "name": "current_milestones",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of tags",
            "in": "query",
            "name": "tags",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A matching strategy for the tags provided",
            "in": "query",
            "name": "tag_match_strategy",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestTagmatchstrategyAny",
                  "value": "any"
                },
                {
                  "name": "RequestTagmatchstrategyMatchAll",
                  "value": "match_all"
                },
                {
                  "name": "RequestTagmatchstrategyExclude",
                  "value": "exclude"
                }
              ]
            }
          },
          {
            "description": "Return archived incidents",
            "in": "query",
            "name": "archived",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Filters for incidents that were updated after this date",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were updated before this date",
            "in": "query",
            "name": "updated_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of incident type IDs",
            "in": "query",
            "name": "incident_type_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of retrospective template IDs",
            "in": "query",
            "name": "retrospective_templates",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "custom_field_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortbyCountAsc",
                  "value": "count_asc"
                },
                {
                  "name": "RequestSortbyMttrAsc",
                  "value": "mttr_asc"
                },
                {
                  "name": "RequestSortbyMttaAsc",
                  "value": "mtta_asc"
                },
                {
                  "name": "RequestSortbyMttdAsc",
                  "value": "mttd_asc"
                },
                {
                  "name": "RequestSortbyMttmAsc",
                  "value": "mttm_asc"
                },
                {
                  "name": "RequestSortbyHealthinessAsc",
                  "value": "healthiness_asc"
                },
                {
                  "name": "RequestSortbyCountDesc",
                  "value": "count_desc"
                },
                {
                  "name": "RequestSortbyMttrDesc",
                  "value": "mttr_desc"
                },
                {
                  "name": "RequestSortbyMttaDesc",
                  "value": "mtta_desc"
                },
                {
                  "name": "RequestSortbyMttdDesc",
                  "value": "mttd_desc"
                },
                {
                  "name": "RequestSortbyMttmDesc",
                  "value": "mttm_desc"
                },
                {
                  "name": "RequestSortbyHealthinessDesc",
                  "value": "healthiness_desc"
                }
              ]
            }
          },
          {
            "description": "Comma-separated list of measurements to include in the response",
            "in": "query",
            "name": "measurements",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Comma-separated list of label key / values in the format of 'key=value,key2=value2'",
            "in": "query",
            "name": "labels",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Comma-separated list of user IDs for the incident openers",
            "in": "query",
            "name": "incident_openers",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Comma-separated list of ticket status states",
            "in": "query",
            "name": "ticket_status",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "group_by": {
                    "items": {
                      "type": "string",
                      "x-speakeasy-enums": [
                        {
                          "name": "FormgroupbyServices",
                          "value": "services"
                        },
                        {
                          "name": "FormgroupbyEnvironments",
                          "value": "environments"
                        },
                        {
                          "name": "FormgroupbyFunctionalities",
                          "value": "functionalities"
                        },
                        {
                          "name": "FormgroupbyTeams",
                          "value": "teams"
                        },
                        {
                          "name": "FormgroupbySeverities",
                          "value": "severities"
                        },
                        {
                          "name": "FormgroupbyUsers",
                          "value": "users"
                        },
                        {
                          "name": "FormgroupbyIncidentTypes",
                          "value": "incident_types"
                        },
                        {
                          "name": "FormgroupbyStartedDay",
                          "value": "started_day"
                        },
                        {
                          "name": "FormgroupbyStartedWeek",
                          "value": "started_week"
                        },
                        {
                          "name": "FormgroupbyStartedMonth",
                          "value": "started_month"
                        },
                        {
                          "name": "FormgroupbyCustomFields",
                          "value": "custom_fields"
                        }
                      ]
                    },
                    "nullable": true,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics_MttxDataEntity"
                }
              }
            },
            "description": "Fetch infrastructure metrics based on custom query"
          }
        },
        "summary": "Get infrastructure metrics",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/metrics/retrospectives": {
      "get": {
        "description": "Returns a report with retrospective analytics data",
        "operationId": "list_retrospective_metrics",
        "parameters": [
          {
            "description": "The start date to return metrics from",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The end date to return metrics from",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics_RetrospectiveEntity"
                }
              }
            },
            "description": "Returns a report with retrospective analytics data"
          }
        },
        "summary": "List retrospective metrics",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/metrics/ticket_funnel": {
      "get": {
        "description": "Returns a report with task and follow up creation and completion data",
        "operationId": "list_ticket_funnel_metrics",
        "parameters": [
          {
            "description": "A JSON string that defines 'logic' and 'user_data'",
            "in": "query",
            "name": "conditions",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments",
            "in": "query",
            "name": "environments",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services",
            "in": "query",
            "name": "services",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities",
            "in": "query",
            "name": "functionalities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of infrastructure IDs. Returns incidents that do not have the following infrastructure ids associated with them.",
            "in": "query",
            "name": "excluded_infrastructure_ids",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of team IDs",
            "in": "query",
            "name": "teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments",
            "in": "query",
            "name": "assigned_teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Incident status",
            "in": "query",
            "name": "status",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that started on or after this date",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that started on or before this date",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
            "in": "query",
            "name": "resolved_at_or_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
            "in": "query",
            "name": "resolved_at_or_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were closed at or after this time",
            "in": "query",
            "name": "closed_at_or_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were closed at or before this time",
            "in": "query",
            "name": "closed_at_or_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were created at or after this time",
            "in": "query",
            "name": "created_at_or_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were created at or before this time",
            "in": "query",
            "name": "created_at_or_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A text query for an incident that searches on name, summary, and desciption",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search incidents by their name",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The id of a previously saved search.",
            "in": "query",
            "name": "saved_search_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A text value of priority",
            "in": "query",
            "name": "priorities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Flag for including incidents where priority has not been set",
            "in": "query",
            "name": "priority_not_set",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "A text value of severity",
            "in": "query",
            "name": "severities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Flag for including incidents where severity has not been set",
            "in": "query",
            "name": "severity_not_set",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "A comma separated list of current milestones",
            "in": "query",
            "name": "current_milestones",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of tags",
            "in": "query",
            "name": "tags",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A matching strategy for the tags provided",
            "in": "query",
            "name": "tag_match_strategy",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestTagmatchstrategyAny",
                  "value": "any"
                },
                {
                  "name": "RequestTagmatchstrategyMatchAll",
                  "value": "match_all"
                },
                {
                  "name": "RequestTagmatchstrategyExclude",
                  "value": "exclude"
                }
              ]
            }
          },
          {
            "description": "Return archived incidents",
            "in": "query",
            "name": "archived",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Filters for incidents that were updated after this date",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filters for incidents that were updated before this date",
            "in": "query",
            "name": "updated_before",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of incident type IDs",
            "in": "query",
            "name": "incident_type_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of retrospective template IDs",
            "in": "query",
            "name": "retrospective_templates",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "group_by": {
                    "items": {
                      "type": "string",
                      "x-speakeasy-enums": [
                        {
                          "name": "FormgroupbyStartedDay",
                          "value": "started_day"
                        },
                        {
                          "name": "FormgroupbyStartedWeek",
                          "value": "started_week"
                        },
                        {
                          "name": "FormgroupbyStartedMonth",
                          "value": "started_month"
                        },
                        {
                          "name": "FormgroupbyAllTime",
                          "value": "all_time"
                        }
                      ]
                    },
                    "nullable": true,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics_TicketFunnelMetricsEntity"
                }
              }
            },
            "description": "Returns a report with task and follow up creation and completion data"
          }
        },
        "summary": "List ticket task and follow up creation and completion metrics",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/metrics/user_involvements": {
      "get": {
        "description": "Returns a report with time bucketed analytics data",
        "operationId": "list_user_involvement_metrics",
        "parameters": [
          {
            "description": "The start date to return metrics from",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The end date to return metrics from",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "bucket_size",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "by",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_field",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortfieldUserCount",
                  "value": "user_count"
                },
                {
                  "name": "RequestSortfieldIncidentCount",
                  "value": "incident_count"
                },
                {
                  "name": "RequestSortfieldTimeSpent",
                  "value": "time_spent"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_direction",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortdirectionAsc",
                  "value": "asc"
                },
                {
                  "name": "RequestSortdirectionDesc",
                  "value": "desc"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_limit",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics_MetricsEntity"
                }
              }
            },
            "description": "Returns a report with time bucketed analytics data"
          }
        },
        "summary": "List user metrics",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/metrics/{infra_type}": {
      "get": {
        "description": "Returns metrics for all components of a given type",
        "operationId": "list_infrastructure_type_metrics",
        "parameters": [
          {
            "in": "path",
            "name": "infra_type",
            "required": true,
            "schema": {
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestInfratypeEnvironments",
                  "value": "environments"
                },
                {
                  "name": "RequestInfratypeFunctionalities",
                  "value": "functionalities"
                },
                {
                  "name": "RequestInfratypeServices",
                  "value": "services"
                },
                {
                  "name": "RequestInfratypeCustomers",
                  "value": "customers"
                }
              ]
            }
          },
          {
            "description": "The start date to return metrics from; defaults to 30 days ago",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The end date to return metrics from, defaults to today",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics_InfrastructureListEntity"
                }
              }
            },
            "description": "Returns metrics for all components of a given type"
          }
        },
        "summary": "List metrics for a component type",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/metrics/{infra_type}/{infra_id}": {
      "get": {
        "description": "Return metrics for a specific component",
        "operationId": "list_infrastructure_metrics",
        "parameters": [
          {
            "in": "path",
            "name": "infra_type",
            "required": true,
            "schema": {
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestInfratypeEnvironments",
                  "value": "environments"
                },
                {
                  "name": "RequestInfratypeFunctionalities",
                  "value": "functionalities"
                },
                {
                  "name": "RequestInfratypeServices",
                  "value": "services"
                },
                {
                  "name": "RequestInfratypeCustomers",
                  "value": "customers"
                }
              ]
            }
          },
          {
            "description": "Component UUID",
            "in": "path",
            "name": "infra_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The start date to return metrics from; defaults to 30 days ago",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The end date to return metrics from, defaults to today",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics_InfrastructureMetricsEntity"
                }
              }
            },
            "description": "Return metrics for a specific component"
          }
        },
        "summary": "Get metrics for a component",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/noauth/ping": {
      "get": {
        "description": "Simple endpoint to verify your API connection is working",
        "operationId": "ping_noauth",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PongEntity"
                }
              }
            },
            "description": "Simple endpoint to verify your API connection is working"
          }
        },
        "summary": "Check API connectivity",
        "tags": [
          "Account Settings"
        ]
      }
    },
    "/v1/nunc/subscriptions": {
      "post": {
        "description": "Subscribe to status page updates",
        "operationId": "create_nunc_subscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_nunc_subscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nunc_NuncSubscription"
                }
              }
            },
            "description": "Subscribe to status page updates"
          }
        },
        "summary": "Create a status page subscription",
        "tags": [
          "Status Pages"
        ],
        "x-codegen-request-body-name": "create_nunc_subscription"
      }
    },
    "/v1/nunc/subscriptions/{unsubscribe_token}": {
      "delete": {
        "description": "Unsubscribe from status page updates",
        "operationId": "delete_nunc_subscription",
        "parameters": [
          {
            "in": "path",
            "name": "unsubscribe_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nunc_NuncSubscription"
                }
              }
            },
            "description": "Unsubscribe from status page updates"
          }
        },
        "summary": "Unsubscribe from status page notifications",
        "tags": [
          "Status Pages"
        ]
      }
    },
    "/v1/nunc_connections": {
      "get": {
        "description": "Lists the information displayed as part of your FireHydrant hosted status pages.",
        "operationId": "list_nunc_connections",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NuncConnectionEntityPaginated"
                }
              }
            },
            "description": "Lists the information displayed as part of your FireHydrant hosted status pages."
          }
        },
        "summary": "List status pages",
        "tags": [
          "Status Pages"
        ]
      },
      "post": {
        "description": "Create a new FireHydrant hosted status page for customer facing statuses.",
        "operationId": "create_nunc_connection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_nunc_connection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NuncConnectionEntity"
                }
              }
            },
            "description": "Create a new FireHydrant hosted status page for customer facing statuses."
          }
        },
        "summary": "Create a status page",
        "tags": [
          "Status Pages"
        ]
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}": {
      "delete": {
        "description": "Delete a FireHydrant hosted status page, stopping updates of your incidents to it.",
        "operationId": "delete_nunc_connection",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NuncConnectionEntity"
                }
              }
            },
            "description": "Delete a FireHydrant hosted status page, stopping updates of your incidents to it."
          }
        },
        "summary": "Delete a status page",
        "tags": [
          "Status Pages"
        ]
      },
      "get": {
        "description": "Retrieve the information displayed as part of your FireHydrant hosted status page.",
        "operationId": "get_nunc_connection",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NuncConnectionEntity"
                }
              }
            },
            "description": "Retrieve the information displayed as part of your FireHydrant hosted status page."
          }
        },
        "summary": "Get a status page",
        "tags": [
          "Status Pages"
        ]
      },
      "put": {
        "description": "Update your company's information and other components in the specified FireHydrant hosted status page.",
        "operationId": "update_nunc_connection",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_nunc_connection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NuncConnectionEntity"
                }
              }
            },
            "description": "Update your company's information and other components in the specified FireHydrant hosted status page."
          }
        },
        "summary": "Update a status page",
        "tags": [
          "Status Pages"
        ]
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}/component_groups": {
      "post": {
        "description": "Add a component group to be displayed on a FireHydrant status page",
        "operationId": "create_nunc_component_group",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_nunc_component_group"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NuncConnectionEntity"
                }
              }
            },
            "description": "Add a component group to be displayed on a FireHydrant status page"
          }
        },
        "summary": "Create a component group for a status page",
        "tags": [
          "Status Pages"
        ]
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}/component_groups/{group_id}": {
      "delete": {
        "description": "Delete a component group displayed on a FireHydrant status page",
        "operationId": "delete_nunc_component_group",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete a component group displayed on a FireHydrant status page"
          }
        },
        "summary": "Delete a status page component group",
        "tags": [
          "Status Pages"
        ]
      },
      "patch": {
        "description": "Update a component group to be displayed on a FireHydrant status page",
        "operationId": "update_nunc_component_group",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_nunc_component_group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Update a component group to be displayed on a FireHydrant status page"
          }
        },
        "summary": "Update a status page component group",
        "tags": [
          "Status Pages"
        ]
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}/images/{type}": {
      "delete": {
        "description": "Delete an image attached to a FireHydrant status page",
        "operationId": "delete_nunc_image",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NuncConnectionEntity"
                }
              }
            },
            "description": "Delete an image attached to a FireHydrant status page"
          }
        },
        "summary": "Delete an image from a status page",
        "tags": [
          "Status Pages"
        ]
      },
      "put": {
        "description": "Add or replace an image attached to a FireHydrant status page",
        "operationId": "update_nunc_image",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/update_nunc_image_form"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NuncConnectionEntity"
                }
              }
            },
            "description": "Add or replace an image attached to a FireHydrant status page"
          }
        },
        "summary": "Upload an image for a status page",
        "tags": [
          "Status Pages"
        ]
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}/links": {
      "post": {
        "description": "Add a link to be displayed on a FireHydrant status page",
        "operationId": "create_nunc_link",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NuncConnectionEntity"
                }
              }
            },
            "description": "Add a link to be displayed on a FireHydrant status page"
          }
        },
        "summary": "Add link to a status page",
        "tags": [
          "Status Pages"
        ]
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}/links/{link_id}": {
      "delete": {
        "description": "Delete a link displayed on a FireHydrant status page",
        "operationId": "delete_nunc_link",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "link_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete a link displayed on a FireHydrant status page"
          }
        },
        "summary": "Delete a status page link",
        "tags": [
          "Status Pages"
        ]
      },
      "patch": {
        "description": "Update a link to be displayed on a FireHydrant status page",
        "operationId": "update_nunc_link",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "link_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_nunc_link"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Update a link to be displayed on a FireHydrant status page"
          }
        },
        "summary": "Update a status page link",
        "tags": [
          "Status Pages"
        ],
        "x-codegen-request-body-name": "update_nunc_link"
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}/subscribers": {
      "delete": {
        "description": "Unsubscribes one or more status page subscribers.",
        "operationId": "delete_email_subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A list of subscriber IDs to unsubscribe.",
            "in": "query",
            "name": "subscriber_ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NuncEmailSubscribersEntity"
                }
              }
            },
            "description": "Unsubscribes one or more status page subscribers."
          }
        },
        "summary": "Remove subscribers from a status page",
        "tags": [
          "Status Pages"
        ]
      },
      "get": {
        "description": "Retrieves the list of subscribers for a status page.",
        "operationId": "list_email_subscribers",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NuncEmailSubscribersEntity"
                }
              }
            },
            "description": "Retrieves the list of subscribers for a status page."
          }
        },
        "summary": "List status page subscribers",
        "tags": [
          "Status Pages"
        ]
      },
      "post": {
        "description": "Subscribes a comma-separated string of emails to status page updates",
        "operationId": "create_email_subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "nunc_connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_email_subscriber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NuncEmailSubscribersEntity"
                }
              }
            },
            "description": "Subscribes a comma-separated string of emails to status page updates"
          }
        },
        "summary": "Add subscribers to a status page",
        "tags": [
          "Status Pages"
        ]
      }
    },
    "/v1/ping": {
      "get": {
        "description": "Simple endpoint to verify your API connection is working",
        "operationId": "ping",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PongEntity"
                }
              }
            },
            "description": "Simple endpoint to verify your API connection is working"
          }
        },
        "summary": "Check API connectivity",
        "tags": [
          "Account Settings"
        ]
      }
    },
    "/v1/post_mortems/questions": {
      "get": {
        "description": "List the questions configured to be provided and filled out on each retrospective report.",
        "operationId": "list_post_mortem_questions",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMortems_QuestionTypeEntityPaginated"
                }
              }
            },
            "description": "List the questions configured to be provided and filled out on each retrospective report."
          }
        },
        "summary": "List retrospective questions",
        "tags": [
          "Retrospectives"
        ]
      },
      "put": {
        "description": "Update the questions configured to be provided and filled out on future retrospective reports.",
        "operationId": "update_post_mortem_questions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_post_mortem_questions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMortems_QuestionTypeEntity"
                }
              }
            },
            "description": "Update the questions configured to be provided and filled out on future retrospective reports."
          }
        },
        "summary": "Update retrospective questions",
        "tags": [
          "Retrospectives"
        ],
        "x-codegen-request-body-name": "update_post_mortem_questions"
      }
    },
    "/v1/post_mortems/questions/{question_id}": {
      "get": {
        "description": "Get an incident retrospective question configured to be provided and filled out on each retrospective report.",
        "operationId": "get_post_mortem_question",
        "parameters": [
          {
            "in": "path",
            "name": "question_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Get an incident retrospective question configured to be provided and filled out on each retrospective report."
          }
        },
        "summary": "Get a retrospective question",
        "tags": [
          "Retrospectives"
        ]
      }
    },
    "/v1/post_mortems/reports": {
      "get": {
        "description": "List all reports",
        "operationId": "list_post_mortem_reports",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Filter the reports by an incident ID",
            "in": "query",
            "name": "incident_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filter for reports updated after the given ISO8601 timestamp",
            "in": "query",
            "name": "updated_since",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMortems_PostMortemReportEntityPaginated"
                }
              }
            },
            "description": "List all reports"
          }
        },
        "summary": "List retrospective reports",
        "tags": [
          "Retrospectives"
        ]
      },
      "post": {
        "description": "Create a report",
        "operationId": "create_post_mortem_report",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_post_mortem_report"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMortems_PostMortemReportEntity"
                }
              }
            },
            "description": "Create a report"
          }
        },
        "summary": "Create a retrospective report",
        "tags": [
          "Retrospectives"
        ],
        "x-codegen-request-body-name": "create_post_mortem_report"
      }
    },
    "/v1/post_mortems/reports/{report_id}": {
      "get": {
        "description": "Get a report",
        "operationId": "get_post_mortem_report",
        "parameters": [
          {
            "in": "path",
            "name": "report_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMortems_PostMortemReportEntity"
                }
              }
            },
            "description": "Get a report"
          }
        },
        "summary": "Get a retrospective report",
        "tags": [
          "Retrospectives"
        ]
      },
      "patch": {
        "description": "Update a report",
        "operationId": "update_post_mortem_report",
        "parameters": [
          {
            "in": "path",
            "name": "report_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_post_mortem_report"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMortems_PostMortemReportEntity"
                }
              }
            },
            "description": "Update a report"
          }
        },
        "summary": "Update a retrospective report",
        "tags": [
          "Retrospectives"
        ],
        "x-codegen-request-body-name": "update_post_mortem_report"
      }
    },
    "/v1/post_mortems/reports/{report_id}/fields/{field_id}": {
      "patch": {
        "description": "Update a field value on a post mortem report",
        "operationId": "update_post_mortem_field",
        "parameters": [
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "report_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_post_mortem_field"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMortems_SectionFieldEntity"
                }
              }
            },
            "description": "Update a field value on a post mortem report"
          }
        },
        "summary": "Update a retrospective field",
        "tags": [
          "Retrospectives"
        ],
        "x-codegen-request-body-name": "update_post_mortem_field"
      }
    },
    "/v1/post_mortems/reports/{report_id}/publish": {
      "post": {
        "description": "Marks an incident retrospective as published and emails all of the participants in the report the summary",
        "operationId": "publish_post_mortem_report",
        "parameters": [
          {
            "in": "path",
            "name": "report_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publish_post_mortem_report"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMortems_PostMortemReportEntity"
                }
              }
            },
            "description": "Marks an incident retrospective as published and emails all of the participants in the report the summary"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "summary": "Publish a retrospective report",
        "tags": [
          "Retrospectives"
        ],
        "x-codegen-request-body-name": "publish_post_mortem_report"
      }
    },
    "/v1/post_mortems/reports/{report_id}/reasons": {
      "get": {
        "description": "List all contributing factors to an incident",
        "operationId": "list_post_mortem_reasons",
        "parameters": [
          {
            "in": "path",
            "name": "report_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMortems_ReasonEntityPaginated"
                }
              }
            },
            "description": "List all contributing factors to an incident"
          }
        },
        "summary": "List contributing factors for a retrospective report",
        "tags": [
          "Retrospectives"
        ]
      },
      "post": {
        "description": "Add a new contributing factor to an incident",
        "operationId": "create_post_mortem_reason",
        "parameters": [
          {
            "in": "path",
            "name": "report_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_post_mortem_reason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMortems_ReasonEntity"
                }
              }
            },
            "description": "Add a new contributing factor to an incident"
          }
        },
        "summary": "Create a contributing factor for a retrospective report",
        "tags": [
          "Retrospectives"
        ],
        "x-codegen-request-body-name": "create_post_mortem_reason"
      }
    },
    "/v1/post_mortems/reports/{report_id}/reasons/order": {
      "put": {
        "description": "Update the order of contributing factors in a retrospective report",
        "operationId": "reorder_post_mortem_reasons",
        "parameters": [
          {
            "in": "path",
            "name": "report_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reorder_post_mortem_reasons"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMortems_ReasonEntity"
                }
              }
            },
            "description": "Update the order of contributing factors in a retrospective report"
          }
        },
        "summary": "Reorder a contributing factor for a retrospective report",
        "tags": [
          "Retrospectives"
        ],
        "x-codegen-request-body-name": "reorder_post_mortem_reasons"
      }
    },
    "/v1/post_mortems/reports/{report_id}/reasons/{reason_id}": {
      "delete": {
        "description": "Delete a contributing factor",
        "operationId": "delete_post_mortem_reason",
        "parameters": [
          {
            "in": "path",
            "name": "report_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "reason_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMortems_ReasonEntity"
                }
              }
            },
            "description": "Delete a contributing factor"
          }
        },
        "summary": "Delete a contributing factor from a retrospective report",
        "tags": [
          "Retrospectives"
        ]
      },
      "patch": {
        "description": "Update a contributing factor",
        "operationId": "update_post_mortem_reason",
        "parameters": [
          {
            "in": "path",
            "name": "report_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "reason_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_post_mortem_reason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMortems_ReasonEntity"
                }
              }
            },
            "description": "Update a contributing factor"
          }
        },
        "summary": "Update a contributing factor in a retrospective report",
        "tags": [
          "Retrospectives"
        ],
        "x-codegen-request-body-name": "update_post_mortem_reason"
      }
    },
    "/v1/priorities": {
      "get": {
        "description": "Lists priorities",
        "operationId": "list_priorities",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriorityEntity"
                }
              }
            },
            "description": "Lists priorities"
          }
        },
        "summary": "List priorities",
        "tags": [
          "Incident Settings"
        ]
      },
      "post": {
        "description": "Create a new priority",
        "operationId": "create_priority",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_priority"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriorityEntity"
                }
              }
            },
            "description": "Create a new priority"
          }
        },
        "summary": "Create a priority",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "create_priority"
      }
    },
    "/v1/priorities/{priority_slug}": {
      "delete": {
        "description": "Delete a specific priority",
        "operationId": "delete_priority",
        "parameters": [
          {
            "in": "path",
            "name": "priority_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriorityEntity"
                }
              }
            },
            "description": "Delete a specific priority"
          }
        },
        "summary": "Delete a priority",
        "tags": [
          "Incident Settings"
        ]
      },
      "get": {
        "description": "Retrieve a specific priority",
        "operationId": "get_priority",
        "parameters": [
          {
            "in": "path",
            "name": "priority_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriorityEntity"
                }
              }
            },
            "description": "Retrieve a specific priority"
          }
        },
        "summary": "Get a priority",
        "tags": [
          "Incident Settings"
        ]
      },
      "patch": {
        "description": "Update a specific priority",
        "operationId": "update_priority",
        "parameters": [
          {
            "in": "path",
            "name": "priority_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_priority"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriorityEntity"
                }
              }
            },
            "description": "Update a specific priority"
          }
        },
        "summary": "Update a priority",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "update_priority"
      }
    },
    "/v1/processing_log_entries": {
      "get": {
        "description": "Processing Log Entries for a specific alert",
        "operationId": "list_processing_log_entries",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Scopes returned log entries to a specific integration ID",
            "in": "query",
            "name": "integration_slug",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Scopes returned log entries to a specific connection ID",
            "in": "query",
            "name": "connection_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Returns logs of all levels equal to or above the provided level",
            "in": "query",
            "name": "of_level",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestOflevelUnknown",
                  "value": "unknown"
                },
                {
                  "name": "RequestOflevelDebug",
                  "value": "debug"
                },
                {
                  "name": "RequestOflevelInfo",
                  "value": "info"
                },
                {
                  "name": "RequestOflevelWarn",
                  "value": "warn"
                },
                {
                  "name": "RequestOflevelError",
                  "value": "error"
                },
                {
                  "name": "RequestOflevelFatal",
                  "value": "fatal"
                }
              ]
            }
          },
          {
            "description": "Returns log entries of all levels equal to the provided level",
            "in": "query",
            "name": "exact_level",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestExactlevelUnknown",
                  "value": "unknown"
                },
                {
                  "name": "RequestExactlevelDebug",
                  "value": "debug"
                },
                {
                  "name": "RequestExactlevelInfo",
                  "value": "info"
                },
                {
                  "name": "RequestExactlevelWarn",
                  "value": "warn"
                },
                {
                  "name": "RequestExactlevelError",
                  "value": "error"
                },
                {
                  "name": "RequestExactlevelFatal",
                  "value": "fatal"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alerts_ProcessingLogEntryEntityPaginated"
                }
              }
            },
            "description": "Processing Log Entries for a specific alert"
          }
        },
        "summary": "List alert processing log entries",
        "tags": [
          "Alerts"
        ]
      }
    },
    "/v1/reports/mean_time": {
      "get": {
        "description": "Returns a report with time bucketed analytics data",
        "operationId": "get_mean_time_report",
        "parameters": [
          {
            "description": "A comma separated list of environment IDs",
            "in": "query",
            "name": "environments",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of team IDs",
            "in": "query",
            "name": "teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of service IDs",
            "in": "query",
            "name": "services",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Incident status",
            "in": "query",
            "name": "status",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The start date to return incidents from",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The end date to return incidents from",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A text query for an incident that searches on name, summary, and desciption",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The id of a previously saved search.",
            "in": "query",
            "name": "saved_search_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of priorities",
            "in": "query",
            "name": "priorities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Flag for including incidents where priority has not been set",
            "in": "query",
            "name": "priority_not_set",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "A comma separated list of severities",
            "in": "query",
            "name": "severities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Flag for including incidents where severity has not been set",
            "in": "query",
            "name": "severity_not_set",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "A comma separated list of current milestones",
            "in": "query",
            "name": "current_milestones",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportEntity"
                }
              }
            },
            "description": "Returns a report with time bucketed analytics data"
          }
        },
        "summary": "Get mean time metrics for incidents",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/retrospective_templates": {
      "get": {
        "description": "List all retrospective templates",
        "operationId": "list_retrospective_templates",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "for_incident",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Retrospectives_IndexTemplateEntityPaginated"
                }
              }
            },
            "description": "List all retrospective templates"
          }
        },
        "summary": "List retrospective templates",
        "tags": [
          "Retrospectives"
        ]
      },
      "post": {
        "description": "Create a new retrospective template",
        "operationId": "create_retrospective_template",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_retrospective_template"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Retrospectives_TemplateEntity"
                }
              }
            },
            "description": "Create a new retrospective template"
          }
        },
        "summary": "Create a retrospective template",
        "tags": [
          "Retrospectives"
        ]
      }
    },
    "/v1/retrospective_templates/{retrospective_template_id}": {
      "delete": {
        "description": "Delete a single retrospective template",
        "operationId": "delete_retrospective_template",
        "parameters": [
          {
            "in": "path",
            "name": "retrospective_template_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Retrospectives_TemplateEntity"
                }
              }
            },
            "description": "Delete a single retrospective template"
          }
        },
        "summary": "Delete a retrospective template",
        "tags": [
          "Retrospectives"
        ]
      },
      "get": {
        "description": "Retrieve a single retrospective template by ID",
        "operationId": "get_retrospective_template",
        "parameters": [
          {
            "in": "path",
            "name": "retrospective_template_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Retrospectives_TemplateEntity"
                }
              }
            },
            "description": "Retrieve a single retrospective template by ID"
          }
        },
        "summary": "Get a retrospective template",
        "tags": [
          "Retrospectives"
        ]
      },
      "patch": {
        "description": "Update a single retrospective template",
        "operationId": "update_retrospective_template",
        "parameters": [
          {
            "in": "path",
            "name": "retrospective_template_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_retrospective_template"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Retrospectives_TemplateEntity"
                }
              }
            },
            "description": "Update a single retrospective template"
          }
        },
        "summary": "Update a retrospective template",
        "tags": [
          "Retrospectives"
        ]
      }
    },
    "/v1/retrospectives": {
      "get": {
        "description": "List all retrospective reports",
        "operationId": "list_retrospectives",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Filter the reports by an incident ID",
            "in": "query",
            "name": "incident_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filter for reports updated after the given ISO8601 timestamp",
            "in": "query",
            "name": "updated_since",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incidents_RetrospectiveEntityPaginated"
                }
              }
            },
            "description": "List all retrospective reports"
          }
        },
        "summary": "List retrospective reports",
        "tags": [
          "Retrospectives"
        ]
      }
    },
    "/v1/runbook_audits": {
      "get": {
        "description": "Please contact support to enable audit logging for your account.",
        "operationId": "list_runbook_audits",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "A query to filter audits by type",
            "in": "query",
            "name": "auditable_type",
            "schema": {
              "default": "Runbooks::Step",
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestAuditabletypeRunbooksStep",
                  "value": "Runbooks::Step"
                },
                {
                  "name": "RequestAuditabletypeRunbooksRunbook",
                  "value": "Runbooks::Runbook"
                }
              ]
            }
          },
          {
            "description": "A query to sort audits by their created_at timestamp. Options are 'asc' or 'desc'",
            "in": "query",
            "name": "sort",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "List runbook audits"
          }
        },
        "summary": "List runbook audits",
        "tags": [
          "Runbooks"
        ]
      }
    },
    "/v1/runbooks": {
      "get": {
        "description": "Lists all available runbooks.",
        "operationId": "list_runbooks",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "A query to search runbooks by their name",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search runbooks by their owners",
            "in": "query",
            "name": "owners",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Sort runbooks by their updated date. Accepts 'asc', 'desc'. This parameter is deprecated in favor of 'order_by' and 'order_direction'.",
            "in": "query",
            "name": "sort",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortAsc",
                  "value": "asc"
                },
                {
                  "name": "RequestSortDesc",
                  "value": "desc"
                }
              ]
            }
          },
          {
            "description": "Sort runbooks by their updated date or name. Accepts 'updated_at', 'name', and 'created_at'.",
            "in": "query",
            "name": "order_by",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestOrderbyUpdatedAt",
                  "value": "updated_at"
                },
                {
                  "name": "RequestOrderbyName",
                  "value": "name"
                },
                {
                  "name": "RequestOrderbyCreatedAt",
                  "value": "created_at"
                }
              ]
            }
          },
          {
            "description": "Allows assigning a direction to how the specified `order_by` parameter is sorted. This parameter must be paired with `order_by` and does nothing on its own.",
            "in": "query",
            "name": "order_direction",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestOrderdirectionAsc",
                  "value": "asc"
                },
                {
                  "name": "RequestOrderdirectionDesc",
                  "value": "desc"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunbookEntity"
                }
              }
            },
            "description": "Lists all available runbooks."
          }
        },
        "summary": "List runbooks",
        "tags": [
          "Runbooks"
        ]
      },
      "post": {
        "description": "Create a new runbook for use with incidents.",
        "operationId": "create_runbook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_runbook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunbookEntity"
                }
              }
            },
            "description": "Create a new runbook for use with incidents."
          }
        },
        "summary": "Create a runbook",
        "tags": [
          "Runbooks"
        ],
        "x-codegen-request-body-name": "create_runbook"
      }
    },
    "/v1/runbooks/actions": {
      "get": {
        "description": "List all runbook actions available through your connected integrations",
        "operationId": "list_runbook_actions",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "List actions supporting this specific Runbook type",
            "in": "query",
            "name": "type",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Boolean to determine whether to return a slimified version of the action object's integration",
            "in": "query",
            "name": "lite",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runbooks_ActionsEntityPaginated"
                }
              }
            },
            "description": "List all runbook actions available through your connected integrations"
          }
        },
        "summary": "List runbook actions",
        "tags": [
          "Runbooks"
        ]
      }
    },
    "/v1/runbooks/executions": {
      "get": {
        "description": "List all runbook executions across all runbooks",
        "operationId": "list_runbook_executions",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runbooks_ExecutionEntityPaginated"
                }
              }
            },
            "description": "List all runbook executions across all runbooks"
          }
        },
        "summary": "List runbook executions",
        "tags": [
          "Runbooks"
        ]
      },
      "post": {
        "description": "Attaches a runbook to an incident and executes it",
        "operationId": "create_runbook_execution",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_runbook_execution"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runbooks_ExecutionEntity"
                }
              }
            },
            "description": "Attaches a runbook to an incident and executes it"
          }
        },
        "summary": "Create a runbook execution",
        "tags": [
          "Runbooks"
        ],
        "x-codegen-request-body-name": "create_runbook_execution"
      }
    },
    "/v1/runbooks/executions/{execution_id}": {
      "delete": {
        "description": "Terminates a runbook execution, preventing any further steps from being executed",
        "operationId": "delete_runbook_execution",
        "parameters": [
          {
            "in": "path",
            "name": "execution_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The reason for terminating the runbook execution",
            "in": "query",
            "name": "reason",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Terminates a runbook execution, preventing any further steps from being executed"
          }
        },
        "summary": "Terminate a runbook execution",
        "tags": [
          "Runbooks"
        ]
      },
      "get": {
        "description": "Retrieve a runbook execution by ID",
        "operationId": "get_runbook_execution",
        "parameters": [
          {
            "in": "path",
            "name": "execution_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runbooks_ExecutionEntity"
                }
              }
            },
            "description": "Retrieve a runbook execution by ID"
          }
        },
        "summary": "Get a runbook execution",
        "tags": [
          "Runbooks"
        ]
      }
    },
    "/v1/runbooks/executions/{execution_id}/steps/{step_id}": {
      "put": {
        "description": "Updates a runbook step execution, especially for changing the state of a step execution.",
        "operationId": "update_runbook_execution_step",
        "parameters": [
          {
            "in": "path",
            "name": "execution_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "step_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_runbook_execution_step"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runbooks_ExecutionEntity"
                }
              }
            },
            "description": "Updates a runbook step execution, especially for changing the state of a step execution."
          }
        },
        "summary": "Update a runbook step execution",
        "tags": [
          "Runbooks"
        ],
        "x-codegen-request-body-name": "update_runbook_execution_step"
      }
    },
    "/v1/runbooks/executions/{execution_id}/steps/{step_id}/script": {
      "get": {
        "description": "Retrieves the bash script from a \"script\" step.",
        "operationId": "get_runbook_execution_step_script",
        "parameters": [
          {
            "in": "path",
            "name": "execution_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "step_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runbooks_ExecutionEntity"
                }
              }
            },
            "description": "Retrieves the bash script from a \"script\" step."
          }
        },
        "summary": "Get a step's bash script",
        "tags": [
          "Runbooks"
        ]
      }
    },
    "/v1/runbooks/executions/{execution_id}/steps/{step_id}/script/{state}": {
      "put": {
        "description": "Updates the execution's step.",
        "operationId": "update_runbook_execution_step_script",
        "parameters": [
          {
            "in": "path",
            "name": "execution_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "step_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "state",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runbooks_ExecutionEntity"
                }
              }
            },
            "description": "Updates the execution's step."
          }
        },
        "summary": "Update a script step's execution status",
        "tags": [
          "Runbooks"
        ]
      }
    },
    "/v1/runbooks/select_options/{integration_slug}/{action_slug}/{field}": {
      "get": {
        "description": "List select options for a runbook integration action field",
        "operationId": "get_runbook_action_field_options",
        "parameters": [
          {
            "in": "path",
            "name": "integration_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "action_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Text string of a query for filtering values.",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Generic params used to add specificity (eg an id of some kind) to the select options request",
            "in": "query",
            "name": "scope",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Maximum number of items to return.",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "List select options for a runbook integration action field"
          }
        },
        "summary": "List select options for a runbook integration action field",
        "tags": [
          "Runbooks"
        ]
      }
    },
    "/v1/runbooks/{runbook_id}": {
      "delete": {
        "description": "Delete a runbook and make it unavailable for any future incidents.",
        "operationId": "delete_runbook",
        "parameters": [
          {
            "in": "path",
            "name": "runbook_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunbookEntity"
                }
              }
            },
            "description": "Delete a runbook and make it unavailable for any future incidents."
          }
        },
        "summary": "Delete a runbook",
        "tags": [
          "Runbooks"
        ]
      },
      "get": {
        "description": "Get a runbook and all its configuration",
        "operationId": "get_runbook",
        "parameters": [
          {
            "in": "path",
            "name": "runbook_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunbookEntity"
                }
              }
            },
            "description": "Get a runbook and all its configuration"
          }
        },
        "summary": "Get a runbook",
        "tags": [
          "Runbooks"
        ]
      },
      "put": {
        "description": "Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything\nabout a runbook, including but not limited to the steps, environments, attachment rules, and severities.\n",
        "operationId": "update_runbook",
        "parameters": [
          {
            "in": "path",
            "name": "runbook_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_runbook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunbookEntity"
                }
              }
            },
            "description": "Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything\nabout a runbook, including but not limited to the steps, environments, attachment rules, and severities.\n"
          }
        },
        "summary": "Update a runbook",
        "tags": [
          "Runbooks"
        ],
        "x-codegen-request-body-name": "update_runbook"
      }
    },
    "/v1/saved_searches/{resource_type}": {
      "get": {
        "description": "Lists saved searches",
        "operationId": "list_saved_searches",
        "parameters": [
          {
            "in": "path",
            "name": "resource_type",
            "required": true,
            "schema": {
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestResourcetypeChangeEvents",
                  "value": "change_events"
                },
                {
                  "name": "RequestResourcetypeIncidents",
                  "value": "incidents"
                },
                {
                  "name": "RequestResourcetypeServices",
                  "value": "services"
                },
                {
                  "name": "RequestResourcetypeScheduledMaintenances",
                  "value": "scheduled_maintenances"
                },
                {
                  "name": "RequestResourcetypeTicketTasks",
                  "value": "ticket_tasks"
                },
                {
                  "name": "RequestResourcetypeTicketFollowUps",
                  "value": "ticket_follow_ups"
                },
                {
                  "name": "RequestResourcetypeAnalytics",
                  "value": "analytics"
                },
                {
                  "name": "RequestResourcetypeImpactAnalytics",
                  "value": "impact_analytics"
                },
                {
                  "name": "RequestResourcetypeAlerts",
                  "value": "alerts"
                },
                {
                  "name": "RequestResourcetypeIncidentEvents",
                  "value": "incident_events"
                }
              ]
            }
          },
          {
            "description": "The user ID used to filter saved searches.",
            "in": "query",
            "name": "user_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filter saved searches with a query on their name",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchEntity"
                }
              }
            },
            "description": "Lists saved searches"
          }
        },
        "summary": "List saved searches",
        "tags": [
          "Metrics/Reporting"
        ]
      },
      "post": {
        "description": "Create a new saved search for a particular resource type",
        "operationId": "create_saved_search",
        "parameters": [
          {
            "in": "path",
            "name": "resource_type",
            "required": true,
            "schema": {
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestResourcetypeChangeEvents",
                  "value": "change_events"
                },
                {
                  "name": "RequestResourcetypeIncidents",
                  "value": "incidents"
                },
                {
                  "name": "RequestResourcetypeServices",
                  "value": "services"
                },
                {
                  "name": "RequestResourcetypeScheduledMaintenances",
                  "value": "scheduled_maintenances"
                },
                {
                  "name": "RequestResourcetypeTicketTasks",
                  "value": "ticket_tasks"
                },
                {
                  "name": "RequestResourcetypeTicketFollowUps",
                  "value": "ticket_follow_ups"
                },
                {
                  "name": "RequestResourcetypeAnalytics",
                  "value": "analytics"
                },
                {
                  "name": "RequestResourcetypeImpactAnalytics",
                  "value": "impact_analytics"
                },
                {
                  "name": "RequestResourcetypeAlerts",
                  "value": "alerts"
                },
                {
                  "name": "RequestResourcetypeIncidentEvents",
                  "value": "incident_events"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_saved_search"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchEntity"
                }
              }
            },
            "description": "Create a new saved search for a particular resource type"
          }
        },
        "summary": "Create a saved search",
        "tags": [
          "Metrics/Reporting"
        ],
        "x-codegen-request-body-name": "create_saved_search"
      }
    },
    "/v1/saved_searches/{resource_type}/{saved_search_id}": {
      "delete": {
        "description": "Delete a specific saved search",
        "operationId": "delete_saved_search",
        "parameters": [
          {
            "in": "path",
            "name": "resource_type",
            "required": true,
            "schema": {
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestResourcetypeChangeEvents",
                  "value": "change_events"
                },
                {
                  "name": "RequestResourcetypeIncidents",
                  "value": "incidents"
                },
                {
                  "name": "RequestResourcetypeServices",
                  "value": "services"
                },
                {
                  "name": "RequestResourcetypeScheduledMaintenances",
                  "value": "scheduled_maintenances"
                },
                {
                  "name": "RequestResourcetypeTicketTasks",
                  "value": "ticket_tasks"
                },
                {
                  "name": "RequestResourcetypeTicketFollowUps",
                  "value": "ticket_follow_ups"
                },
                {
                  "name": "RequestResourcetypeAnalytics",
                  "value": "analytics"
                },
                {
                  "name": "RequestResourcetypeImpactAnalytics",
                  "value": "impact_analytics"
                },
                {
                  "name": "RequestResourcetypeAlerts",
                  "value": "alerts"
                },
                {
                  "name": "RequestResourcetypeIncidentEvents",
                  "value": "incident_events"
                }
              ]
            }
          },
          {
            "in": "path",
            "name": "saved_search_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchEntity"
                }
              }
            },
            "description": "Delete a specific saved search"
          }
        },
        "summary": "Delete a saved search",
        "tags": [
          "Metrics/Reporting"
        ]
      },
      "get": {
        "description": "Retrieve a specific save search",
        "operationId": "get_saved_search",
        "parameters": [
          {
            "in": "path",
            "name": "resource_type",
            "required": true,
            "schema": {
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestResourcetypeChangeEvents",
                  "value": "change_events"
                },
                {
                  "name": "RequestResourcetypeIncidents",
                  "value": "incidents"
                },
                {
                  "name": "RequestResourcetypeServices",
                  "value": "services"
                },
                {
                  "name": "RequestResourcetypeScheduledMaintenances",
                  "value": "scheduled_maintenances"
                },
                {
                  "name": "RequestResourcetypeTicketTasks",
                  "value": "ticket_tasks"
                },
                {
                  "name": "RequestResourcetypeTicketFollowUps",
                  "value": "ticket_follow_ups"
                },
                {
                  "name": "RequestResourcetypeAnalytics",
                  "value": "analytics"
                },
                {
                  "name": "RequestResourcetypeImpactAnalytics",
                  "value": "impact_analytics"
                },
                {
                  "name": "RequestResourcetypeAlerts",
                  "value": "alerts"
                },
                {
                  "name": "RequestResourcetypeIncidentEvents",
                  "value": "incident_events"
                }
              ]
            }
          },
          {
            "in": "path",
            "name": "saved_search_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchEntity"
                }
              }
            },
            "description": "Retrieve a specific save search"
          }
        },
        "summary": "Get a saved search",
        "tags": [
          "Metrics/Reporting"
        ]
      },
      "patch": {
        "description": "Update a specific saved search",
        "operationId": "update_saved_search",
        "parameters": [
          {
            "in": "path",
            "name": "resource_type",
            "required": true,
            "schema": {
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestResourcetypeChangeEvents",
                  "value": "change_events"
                },
                {
                  "name": "RequestResourcetypeIncidents",
                  "value": "incidents"
                },
                {
                  "name": "RequestResourcetypeServices",
                  "value": "services"
                },
                {
                  "name": "RequestResourcetypeScheduledMaintenances",
                  "value": "scheduled_maintenances"
                },
                {
                  "name": "RequestResourcetypeTicketTasks",
                  "value": "ticket_tasks"
                },
                {
                  "name": "RequestResourcetypeTicketFollowUps",
                  "value": "ticket_follow_ups"
                },
                {
                  "name": "RequestResourcetypeAnalytics",
                  "value": "analytics"
                },
                {
                  "name": "RequestResourcetypeImpactAnalytics",
                  "value": "impact_analytics"
                },
                {
                  "name": "RequestResourcetypeAlerts",
                  "value": "alerts"
                },
                {
                  "name": "RequestResourcetypeIncidentEvents",
                  "value": "incident_events"
                }
              ]
            }
          },
          {
            "in": "path",
            "name": "saved_search_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_saved_search"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchEntity"
                }
              }
            },
            "description": "Update a specific saved search"
          }
        },
        "summary": "Update a saved search",
        "tags": [
          "Metrics/Reporting"
        ],
        "x-codegen-request-body-name": "update_saved_search"
      }
    },
    "/v1/scheduled_maintenances": {
      "get": {
        "description": "Lists all scheduled maintenance events",
        "operationId": "list_scheduled_maintenances",
        "parameters": [
          {
            "description": "Filter scheduled_maintenances with a query on their name",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledMaintenanceEntity"
                }
              }
            },
            "description": "Lists all scheduled maintenance events"
          }
        },
        "summary": "List scheduled maintenance events",
        "tags": [
          "Incidents"
        ]
      },
      "post": {
        "description": "Create a new scheduled maintenance event",
        "operationId": "create_scheduled_maintenance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_scheduled_maintenance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledMaintenanceEntity"
                }
              }
            },
            "description": "Create a new scheduled maintenance event"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "summary": "Create a scheduled maintenance event",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "create_scheduled_maintenance"
      }
    },
    "/v1/scheduled_maintenances/{scheduled_maintenance_id}": {
      "delete": {
        "description": "Delete a scheduled maintenance event, preventing it from taking place.",
        "operationId": "delete_scheduled_maintenance",
        "parameters": [
          {
            "in": "path",
            "name": "scheduled_maintenance_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete a scheduled maintenance event, preventing it from taking place."
          }
        },
        "summary": "Delete a scheduled maintenance event",
        "tags": [
          "Incidents"
        ]
      },
      "get": {
        "description": "Fetch the details of a scheduled maintenance event.",
        "operationId": "get_scheduled_maintenance",
        "parameters": [
          {
            "in": "path",
            "name": "scheduled_maintenance_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledMaintenanceEntity"
                }
              }
            },
            "description": "Fetch the details of a scheduled maintenance event."
          }
        },
        "summary": "Get a scheduled maintenance event",
        "tags": [
          "Incidents"
        ]
      },
      "patch": {
        "description": "Change the conditions of a scheduled maintenance event, including updating any status page announcements of changes.",
        "operationId": "update_scheduled_maintenance",
        "parameters": [
          {
            "in": "path",
            "name": "scheduled_maintenance_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_scheduled_maintenance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledMaintenanceEntity"
                }
              }
            },
            "description": "Change the conditions of a scheduled maintenance event, including updating any status page announcements of changes."
          }
        },
        "summary": "Update a scheduled maintenance event",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "update_scheduled_maintenance"
      }
    },
    "/v1/schedules": {
      "get": {
        "description": "List all known schedules in FireHydrant as pulled from external sources",
        "operationId": "list_schedules",
        "parameters": [
          {
            "description": "Filter schedules with a query on their name",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleEntityPaginated"
                }
              }
            },
            "description": "List all known schedules in FireHydrant as pulled from external sources"
          }
        },
        "summary": "List schedules",
        "tags": [
          "Teams"
        ]
      }
    },
    "/v1/scim/v2/Groups": {
      "get": {
        "description": "SCIM endpoint that lists all Teams (Colloquial for Group in the SCIM protocol)",
        "operationId": "list_scim_groups",
        "parameters": [
          {
            "in": "query",
            "name": "startIndex",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "count",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "This is a string used to query groups by displayName.\n        Proper example syntax for this would be `?filter=displayName eq \"My Team Name\"`.\n        Currently we only support the `eq` operator",
            "in": "query",
            "name": "filter",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "SCIM endpoint that lists all Teams (Colloquial for Group in the SCIM protocol)"
          }
        },
        "summary": "List SCIM groups",
        "tags": [
          "SCIM"
        ]
      },
      "post": {
        "description": "SCIM endpoint to create a new Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role.",
        "operationId": "create_scim_group",
        "requestBody": {
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/create_scim_group"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {},
            "description": "SCIM endpoint to create a new Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role."
          }
        },
        "summary": "Create a SCIM group and assign members",
        "tags": [
          "SCIM"
        ],
        "x-codegen-request-body-name": "create_scim_group"
      }
    },
    "/v1/scim/v2/Groups/{id}": {
      "delete": {
        "description": "SCIM endpoint to delete a Team (Colloquial for Group in the SCIM protocol).",
        "operationId": "delete_scim_group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "SCIM endpoint to delete a Team (Colloquial for Group in the SCIM protocol)."
          }
        },
        "summary": "Delete a SCIM group",
        "tags": [
          "SCIM"
        ]
      },
      "get": {
        "description": "SCIM endpoint that lists a Team (Colloquial for Group in the SCIM protocol)",
        "operationId": "get_scim_group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "SCIM endpoint that lists a Team (Colloquial for Group in the SCIM protocol)"
          }
        },
        "summary": "Get a SCIM group",
        "tags": [
          "SCIM"
        ]
      },
      "put": {
        "description": "SCIM endpoint to update a Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role, any missing members will be removed from the team.",
        "operationId": "update_scim_group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/update_scim_group"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {},
            "description": "SCIM endpoint to update a Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role, any missing members will be removed from the team."
          }
        },
        "summary": "Update a SCIM group and assign members",
        "tags": [
          "SCIM"
        ],
        "x-codegen-request-body-name": "update_scim_group"
      }
    },
    "/v1/scim/v2/Users": {
      "get": {
        "description": "SCIM endpoint that lists users. This endpoint will display a list of Users currently in the system.",
        "operationId": "list_scim_users",
        "parameters": [
          {
            "description": "This is a string used to query users by either userName or email.\n        Proper example syntax for this would be `?filter=userName eq john` or `?filter=userName eq \"john@firehydrant.com\"`.\n        Currently we only support the `eq` operator",
            "in": "query",
            "name": "filter",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "This is an integer which represents a pagination offset",
            "in": "query",
            "name": "startIndex",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "This is an integer which represents the number of items per page in the response",
            "in": "query",
            "name": "count",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "SCIM endpoint that lists users. This endpoint will display a list of Users currently in the system."
          }
        },
        "summary": "List SCIM users",
        "tags": [
          "SCIM"
        ]
      },
      "post": {
        "description": "SCIM endpoint to create and provision a new User. This endpoint will provision the User, which allows them to accept their account throught their IDP or via the Forgot Password flow.",
        "operationId": "create_scim_user",
        "requestBody": {
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/create_scim_user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {},
            "description": "SCIM endpoint to create and provision a new User. This endpoint will provision the User, which allows them to accept their account throught their IDP or via the Forgot Password flow."
          }
        },
        "summary": "Create a User from SCIM data",
        "tags": [
          "SCIM"
        ],
        "x-codegen-request-body-name": "create_scim_user"
      }
    },
    "/v1/scim/v2/Users/{id}": {
      "delete": {
        "description": "SCIM endpoint to delete a User. This endpoint will deactivate a confirmed User record in our system.",
        "operationId": "delete_scim_user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "SCIM endpoint to delete a User. This endpoint will deactivate a confirmed User record in our system."
          }
        },
        "summary": "Delete a User matching SCIM data",
        "tags": [
          "SCIM"
        ]
      },
      "get": {
        "description": "SCIM endpoint that lists a User",
        "operationId": "get_scim_user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "SCIM endpoint that lists a User"
          }
        },
        "summary": "Get a SCIM user",
        "tags": [
          "SCIM"
        ]
      },
      "patch": {
        "description": "PATCH SCIM endpoint to update a User. This endpoint is used to update a resource's attributes.",
        "operationId": "patch_scim_user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/patch_scim_user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {},
            "description": "PATCH SCIM endpoint to update a User. This endpoint is used to update a resource's attributes."
          }
        },
        "summary": "Update a User from SCIM data",
        "tags": [
          "SCIM"
        ],
        "x-codegen-request-body-name": "patch_scim_user"
      },
      "put": {
        "description": "PUT SCIM endpoint to update a User. This endpoint is used to replace a resource's attributes.",
        "operationId": "update_scim_user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/update_scim_user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {},
            "description": "PUT SCIM endpoint to update a User. This endpoint is used to replace a resource's attributes."
          }
        },
        "summary": "Update a User from SCIM data",
        "tags": [
          "SCIM"
        ],
        "x-codegen-request-body-name": "update_scim_user"
      }
    },
    "/v1/service_dependencies": {
      "post": {
        "description": "Creates a service dependency relationship between two services",
        "operationId": "create_service_dependency",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_service_dependency"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDependencyEntity"
                }
              }
            },
            "description": "Creates a service dependency relationship between two services"
          }
        },
        "summary": "Create a service dependency",
        "tags": [
          "Catalog Entries"
        ],
        "x-codegen-request-body-name": "create_service_dependency"
      }
    },
    "/v1/service_dependencies/{service_dependency_id}": {
      "delete": {
        "description": "Deletes a single service dependency",
        "operationId": "delete_service_dependency",
        "parameters": [
          {
            "in": "path",
            "name": "service_dependency_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDependencyEntity"
                }
              }
            },
            "description": "Deletes a single service dependency"
          }
        },
        "summary": "Delete a service dependency",
        "tags": [
          "Catalog Entries"
        ]
      },
      "get": {
        "description": "Retrieves a single service dependency by ID",
        "operationId": "get_service_dependency",
        "parameters": [
          {
            "in": "path",
            "name": "service_dependency_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDependencyEntity"
                }
              }
            },
            "description": "Retrieves a single service dependency by ID"
          }
        },
        "summary": "Get a service dependency",
        "tags": [
          "Catalog Entries"
        ]
      },
      "patch": {
        "description": "Update the notes of the service dependency",
        "operationId": "update_service_dependency",
        "parameters": [
          {
            "in": "path",
            "name": "service_dependency_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_service_dependency"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDependencyEntity"
                }
              }
            },
            "description": "Update the notes of the service dependency"
          }
        },
        "summary": "Update a service dependency",
        "tags": [
          "Catalog Entries"
        ],
        "x-codegen-request-body-name": "update_service_dependency"
      }
    },
    "/v1/services": {
      "get": {
        "description": "List all of the services that have been added to the organization.",
        "operationId": "list_services",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "A comma separated list of label key / values in the format of 'key=value,key2=value2'. To filter change events that have a key (with no specific value), omit the value",
            "in": "query",
            "name": "labels",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search services by their name or description",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search services by their name",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search services by their tier",
            "in": "query",
            "name": "tiers",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search services by if they are impacted with active incidents",
            "in": "query",
            "name": "impacted",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search services by their owner",
            "in": "query",
            "name": "owner",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of team ids",
            "in": "query",
            "name": "responding_teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of functionality ids",
            "in": "query",
            "name": "functionalities",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to find services that are available to be downstream dependencies for the passed service ID",
            "in": "query",
            "name": "available_downstream_dependencies_for_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to find services that are available to be upstream dependencies for the passed service ID",
            "in": "query",
            "name": "available_upstream_dependencies_for_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Boolean to determine whether to return a slimified version of the services object",
            "in": "query",
            "name": "lite",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Use in conjunction with lite param to specify additional attributes to include",
            "explode": false,
            "in": "query",
            "name": "include",
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEntityPaginated"
                }
              }
            },
            "description": "List all of the services that have been added to the organization."
          }
        },
        "summary": "List services",
        "tags": [
          "Catalog Entries"
        ]
      },
      "post": {
        "description": "Creates a service for the organization, you may also create or attach functionalities to the service on create.",
        "operationId": "create_service",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_service"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEntity"
                }
              }
            },
            "description": "Creates a service for the organization, you may also create or attach functionalities to the service on create."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "summary": "Create a service",
        "tags": [
          "Catalog Entries"
        ],
        "x-codegen-request-body-name": "create_service"
      }
    },
    "/v1/services/service_links": {
      "post": {
        "description": "Creates a service with the appropriate integration for each external service ID passed",
        "operationId": "create_service_links",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_service_links"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ServiceLinkEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Creates a service with the appropriate integration for each external service ID passed"
          }
        },
        "summary": "Create multiple services linked to external services",
        "tags": [
          "Catalog Entries"
        ],
        "x-codegen-request-body-name": "create_service_links"
      }
    },
    "/v1/services/{service_id}": {
      "delete": {
        "description": "Deletes the service from FireHydrant.",
        "operationId": "delete_service",
        "parameters": [
          {
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEntity"
                }
              }
            },
            "description": "Deletes the service from FireHydrant."
          }
        },
        "summary": "Delete a service",
        "tags": [
          "Catalog Entries"
        ]
      },
      "get": {
        "description": "Retrieves a single service by ID",
        "operationId": "get_service",
        "parameters": [
          {
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEntity"
                }
              }
            },
            "description": "Retrieves a single service by ID"
          }
        },
        "summary": "Get a service",
        "tags": [
          "Catalog Entries"
        ]
      },
      "patch": {
        "description": "Update a services attributes, you may also add or remove functionalities from the service as well.\nNote: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.\n",
        "operationId": "update_service",
        "parameters": [
          {
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_service"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEntity"
                }
              }
            },
            "description": "Update a services attributes, you may also add or remove functionalities from the service as well.\nNote: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.\n"
          }
        },
        "summary": "Update a service",
        "tags": [
          "Catalog Entries"
        ],
        "x-codegen-request-body-name": "update_service"
      }
    },
    "/v1/services/{service_id}/available_downstream_dependencies": {
      "get": {
        "description": "Retrieves all services that are available to be downstream dependencies",
        "operationId": "list_service_available_downstream_dependencies",
        "parameters": [
          {
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEntityLite"
                }
              }
            },
            "description": "Retrieves all services that are available to be downstream dependencies"
          }
        },
        "summary": "List available downstream service dependencies",
        "tags": [
          "Catalog Entries"
        ]
      }
    },
    "/v1/services/{service_id}/available_upstream_dependencies": {
      "get": {
        "description": "Retrieves all services that are available to be upstream dependencies",
        "operationId": "list_service_available_upstream_dependencies",
        "parameters": [
          {
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEntityLite"
                }
              }
            },
            "description": "Retrieves all services that are available to be upstream dependencies"
          }
        },
        "summary": "List available upstream service dependencies",
        "tags": [
          "Catalog Entries"
        ]
      }
    },
    "/v1/services/{service_id}/checklist_response/{checklist_id}": {
      "post": {
        "description": "Creates a response for a checklist item",
        "operationId": "create_service_checklist_response",
        "parameters": [
          {
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "checklist_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_service_checklist_response"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Creates a response for a checklist item"
          }
        },
        "summary": "Record a response for a checklist item",
        "tags": [
          "Catalog Entries"
        ],
        "x-codegen-request-body-name": "create_service_checklist_response"
      }
    },
    "/v1/services/{service_id}/dependencies": {
      "get": {
        "description": "Retrieves a service's dependencies",
        "operationId": "get_service_dependencies",
        "parameters": [
          {
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true, returns all dependencies in one array. If false, splits dependencies into different arrays for child and parent dependencies",
            "in": "query",
            "name": "flatten",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceWithAllDependenciesEntity"
                }
              }
            },
            "description": "Retrieves a service's dependencies"
          }
        },
        "summary": "List dependencies for a service",
        "tags": [
          "Catalog Entries"
        ]
      }
    },
    "/v1/services/{service_id}/service_links/{remote_id}": {
      "delete": {
        "description": "Deletes a service link from FireHydrant.",
        "operationId": "delete_service_link",
        "parameters": [
          {
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The external service ID which can be found in the JSON\nfrom GET services/:service_id endpoint under\nfunctionalities \u003e external_resources \u003e remote_id\n",
            "in": "path",
            "name": "remote_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Deletes a service link from FireHydrant."
          }
        },
        "summary": "Delete a service link",
        "tags": [
          "Catalog Entries"
        ]
      }
    },
    "/v1/severities": {
      "get": {
        "description": "Lists severities",
        "operationId": "list_severities",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityEntityPaginated"
                }
              }
            },
            "description": "Lists severities"
          }
        },
        "summary": "List severities",
        "tags": [
          "Incident Settings"
        ]
      },
      "post": {
        "description": "Create a new severity",
        "operationId": "create_severity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_severity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityEntity"
                }
              }
            },
            "description": "Create a new severity"
          }
        },
        "summary": "Create a severity",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "create_severity"
      }
    },
    "/v1/severities/{severity_slug}": {
      "delete": {
        "description": "Delete a specific severity",
        "operationId": "delete_severity",
        "parameters": [
          {
            "in": "path",
            "name": "severity_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityEntity"
                }
              }
            },
            "description": "Delete a specific severity"
          }
        },
        "summary": "Delete a severity",
        "tags": [
          "Incident Settings"
        ]
      },
      "get": {
        "description": "Retrieve a specific severity",
        "operationId": "get_severity",
        "parameters": [
          {
            "in": "path",
            "name": "severity_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityEntity"
                }
              }
            },
            "description": "Retrieve a specific severity"
          }
        },
        "summary": "Get a severity",
        "tags": [
          "Incident Settings"
        ]
      },
      "patch": {
        "description": "Update a specific severity",
        "operationId": "update_severity",
        "parameters": [
          {
            "in": "path",
            "name": "severity_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_severity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityEntity"
                }
              }
            },
            "description": "Update a specific severity"
          }
        },
        "summary": "Update a severity",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "update_severity"
      }
    },
    "/v1/severity_matrix": {
      "get": {
        "description": "Retrieve the Severity matrix for your organization and its components and configured severities.",
        "operationId": "get_severity_matrix",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityMatrix_SeverityMatrixEntity"
                }
              }
            },
            "description": "Retrieve the Severity matrix for your organization and its components and configured severities."
          }
        },
        "summary": "Get severity matrix",
        "tags": [
          "Incident Settings"
        ]
      },
      "patch": {
        "description": "Update available severities and impacts in your organization's severity matrix.",
        "operationId": "update_severity_matrix",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_severity_matrix"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityMatrix_SeverityMatrixEntity"
                }
              }
            },
            "description": "Update available severities and impacts in your organization's severity matrix."
          }
        },
        "summary": "Update severity matrix",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "update_severity_matrix"
      }
    },
    "/v1/severity_matrix/conditions": {
      "get": {
        "description": "Lists conditions",
        "operationId": "list_severity_matrix_conditions",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityMatrix_ConditionEntity"
                }
              }
            },
            "description": "Lists conditions"
          }
        },
        "summary": "List severity matrix conditions",
        "tags": [
          "Incident Settings"
        ]
      },
      "post": {
        "description": "Create a new condition",
        "operationId": "create_severity_matrix_condition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_severity_matrix_condition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityMatrix_ConditionEntity"
                }
              }
            },
            "description": "Create a new condition"
          }
        },
        "summary": "Create a severity matrix condition",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "create_severity_matrix_condition"
      }
    },
    "/v1/severity_matrix/conditions/{condition_id}": {
      "delete": {
        "description": "Delete a specific condition",
        "operationId": "delete_severity_matrix_condition",
        "parameters": [
          {
            "in": "path",
            "name": "condition_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityMatrix_ConditionEntity"
                }
              }
            },
            "description": "Delete a specific condition"
          }
        },
        "summary": "Delete a severity matrix condition",
        "tags": [
          "Incident Settings"
        ]
      },
      "get": {
        "description": "Retrieve a specific condition",
        "operationId": "get_severity_matrix_condition",
        "parameters": [
          {
            "in": "path",
            "name": "condition_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityMatrix_ConditionEntity"
                }
              }
            },
            "description": "Retrieve a specific condition"
          }
        },
        "summary": "Get a severity matrix condition",
        "tags": [
          "Incident Settings"
        ]
      },
      "patch": {
        "description": "Update a severity matrix condition",
        "operationId": "update_severity_matrix_condition",
        "parameters": [
          {
            "in": "path",
            "name": "condition_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_severity_matrix_condition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityMatrix_ConditionEntity"
                }
              }
            },
            "description": "Update a severity matrix condition"
          }
        },
        "summary": "Update a severity matrix condition",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "update_severity_matrix_condition"
      }
    },
    "/v1/severity_matrix/impacts": {
      "get": {
        "description": "Lists impacts",
        "operationId": "list_severity_matrix_impacts",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityMatrix_ImpactEntity"
                }
              }
            },
            "description": "Lists impacts"
          }
        },
        "summary": "List severity matrix impacts",
        "tags": [
          "Incident Settings"
        ]
      },
      "post": {
        "description": "Create a new impact",
        "operationId": "create_severity_matrix_impact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_severity_matrix_impact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityMatrix_ImpactEntity"
                }
              }
            },
            "description": "Create a new impact"
          }
        },
        "summary": "Create a severity matrix impact",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "create_severity_matrix_impact"
      }
    },
    "/v1/severity_matrix/impacts/{impact_id}": {
      "delete": {
        "description": "Delete a specific impact",
        "operationId": "delete_severity_matrix_impact",
        "parameters": [
          {
            "in": "path",
            "name": "impact_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityMatrix_ImpactEntity"
                }
              }
            },
            "description": "Delete a specific impact"
          }
        },
        "summary": "Delete a severity matrix impact",
        "tags": [
          "Incident Settings"
        ]
      },
      "patch": {
        "description": "Update a severity matrix impact",
        "operationId": "update_severity_matrix_impact",
        "parameters": [
          {
            "in": "path",
            "name": "impact_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_severity_matrix_impact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityMatrix_ImpactEntity"
                }
              }
            },
            "description": "Update a severity matrix impact"
          }
        },
        "summary": "Update a severity matrix impact",
        "tags": [
          "Incident Settings"
        ],
        "x-codegen-request-body-name": "update_severity_matrix_impact"
      }
    },
    "/v1/signals/alerts/{id}": {
      "patch": {
        "description": "Update a Signal alert",
        "operationId": "update_signals_alert",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_signals_alert"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alerts_SignalAlertEntity"
                }
              }
            },
            "description": "Update a Signal alert"
          }
        },
        "summary": "Update a Signal alert",
        "tags": [
          "Alerts"
        ],
        "x-codegen-request-body-name": "update_signals_alert"
      }
    },
    "/v1/signals/analytics/grouped_metrics": {
      "get": {
        "description": "Generate a report of grouped metrics for Signals alerts",
        "operationId": "get_signals_grouped_metrics",
        "parameters": [
          {
            "description": "A comma separated list of signal rule IDs",
            "in": "query",
            "name": "signal_rules",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of team IDs",
            "in": "query",
            "name": "teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of environment IDs",
            "in": "query",
            "name": "environments",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of service IDs",
            "in": "query",
            "name": "services",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of tags",
            "in": "query",
            "name": "tags",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of user IDs",
            "in": "query",
            "name": "users",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "String that determines how records are grouped",
            "in": "query",
            "name": "group_by",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestGroupbySignalRules",
                  "value": "signal_rules"
                },
                {
                  "name": "RequestGroupbyTeams",
                  "value": "teams"
                },
                {
                  "name": "RequestGroupbyServices",
                  "value": "services"
                },
                {
                  "name": "RequestGroupbyEnvironments",
                  "value": "environments"
                },
                {
                  "name": "RequestGroupbyTags",
                  "value": "tags"
                }
              ]
            }
          },
          {
            "description": "String that determines how records are sorted",
            "in": "query",
            "name": "sort_by",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortbyTotalOpenedAlerts",
                  "value": "total_opened_alerts"
                },
                {
                  "name": "RequestSortbyTotalAckedAlerts",
                  "value": "total_acked_alerts"
                },
                {
                  "name": "RequestSortbyTotalIncidents",
                  "value": "total_incidents"
                },
                {
                  "name": "RequestSortbyAckedPercentage",
                  "value": "acked_percentage"
                },
                {
                  "name": "RequestSortbyIncidentsPercentage",
                  "value": "incidents_percentage"
                }
              ]
            }
          },
          {
            "description": "String that determines how records are sorted",
            "in": "query",
            "name": "sort_direction",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortdirectionAsc",
                  "value": "asc"
                },
                {
                  "name": "RequestSortdirectionDesc",
                  "value": "desc"
                }
              ]
            }
          },
          {
            "description": "The start date to return metrics from",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The end date to return metrics from",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_Analytics_GroupedMetricsEntity"
                }
              }
            },
            "description": "Generate a report of grouped metrics for Signals alerts"
          }
        },
        "summary": "Generate grouped alert metrics",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/signals/analytics/mttx": {
      "get": {
        "description": "Get mean-time-to-acknowledged (MTTA) and mean-time-to-resolved (MTTR) metrics for Signals alerts",
        "operationId": "get_signals_mttx_analytics",
        "parameters": [
          {
            "description": "A comma separated list of signal rule IDs",
            "in": "query",
            "name": "signal_rules",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of team IDs",
            "in": "query",
            "name": "teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of environment IDs",
            "in": "query",
            "name": "environments",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of service IDs",
            "in": "query",
            "name": "services",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of tags",
            "in": "query",
            "name": "tags",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of user IDs",
            "in": "query",
            "name": "users",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "String that determines how records are grouped",
            "in": "query",
            "name": "group_by",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestGroupbySignalRules",
                  "value": "signal_rules"
                },
                {
                  "name": "RequestGroupbyTeams",
                  "value": "teams"
                },
                {
                  "name": "RequestGroupbyServices",
                  "value": "services"
                },
                {
                  "name": "RequestGroupbyEnvironments",
                  "value": "environments"
                },
                {
                  "name": "RequestGroupbyTags",
                  "value": "tags"
                }
              ]
            }
          },
          {
            "description": "String that determines how records are sorted",
            "in": "query",
            "name": "sort_by",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortbyTotalOpenedAlerts",
                  "value": "total_opened_alerts"
                },
                {
                  "name": "RequestSortbyTotalAckedAlerts",
                  "value": "total_acked_alerts"
                },
                {
                  "name": "RequestSortbyTotalIncidents",
                  "value": "total_incidents"
                },
                {
                  "name": "RequestSortbyAckedPercentage",
                  "value": "acked_percentage"
                },
                {
                  "name": "RequestSortbyIncidentsPercentage",
                  "value": "incidents_percentage"
                }
              ]
            }
          },
          {
            "description": "String that determines how records are sorted",
            "in": "query",
            "name": "sort_direction",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortdirectionAsc",
                  "value": "asc"
                },
                {
                  "name": "RequestSortdirectionDesc",
                  "value": "desc"
                }
              ]
            }
          },
          {
            "description": "The start date to return metrics from",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The end date to return metrics from",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_Analytics_MttxMetricsEntity"
                }
              }
            },
            "description": "Get mean-time-to-acknowledged (MTTA) and mean-time-to-resolved (MTTR) metrics for Signals alerts"
          }
        },
        "summary": "Get MTTX analytics for signals",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/signals/analytics/noise/metrics": {
      "get": {
        "description": "Get noise metrics for Signals alerts",
        "operationId": "get_signals_noise_analytics",
        "parameters": [
          {
            "description": "String that determines how records are grouped",
            "in": "query",
            "name": "bucket",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestBucketMonth",
                  "value": "month"
                },
                {
                  "name": "RequestBucketWeek",
                  "value": "week"
                },
                {
                  "name": "RequestBucketDay",
                  "value": "day"
                }
              ]
            }
          },
          {
            "description": "A comma separated list of signal rule IDs",
            "in": "query",
            "name": "signal_rules",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of team IDs",
            "in": "query",
            "name": "teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of environment IDs",
            "in": "query",
            "name": "environments",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of service IDs",
            "in": "query",
            "name": "services",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of tags",
            "in": "query",
            "name": "tags",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of user IDs",
            "in": "query",
            "name": "users",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "String that determines how records are grouped",
            "in": "query",
            "name": "group_by",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestGroupbySignalRules",
                  "value": "signal_rules"
                },
                {
                  "name": "RequestGroupbyTeams",
                  "value": "teams"
                },
                {
                  "name": "RequestGroupbyServices",
                  "value": "services"
                },
                {
                  "name": "RequestGroupbyEnvironments",
                  "value": "environments"
                },
                {
                  "name": "RequestGroupbyTags",
                  "value": "tags"
                }
              ]
            }
          },
          {
            "description": "String that determines how records are sorted",
            "in": "query",
            "name": "sort_by",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortbyTotalOpenedAlerts",
                  "value": "total_opened_alerts"
                },
                {
                  "name": "RequestSortbyTotalAckedAlerts",
                  "value": "total_acked_alerts"
                },
                {
                  "name": "RequestSortbyTotalIncidents",
                  "value": "total_incidents"
                },
                {
                  "name": "RequestSortbyAckedPercentage",
                  "value": "acked_percentage"
                },
                {
                  "name": "RequestSortbyIncidentsPercentage",
                  "value": "incidents_percentage"
                }
              ]
            }
          },
          {
            "description": "String that determines how records are sorted",
            "in": "query",
            "name": "sort_direction",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortdirectionAsc",
                  "value": "asc"
                },
                {
                  "name": "RequestSortdirectionDesc",
                  "value": "desc"
                }
              ]
            }
          },
          {
            "description": "The start date to return metrics from",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The end date to return metrics from",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_Analytics_NoiseMetricsEntity"
                }
              }
            },
            "description": "Get noise metrics for Signals alerts"
          }
        },
        "summary": "Get noise analytics for signals",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/signals/analytics/shifts/export": {
      "get": {
        "description": "Export on-call hours report for users/teams during a time period",
        "operationId": "export_signals_shift_analytics",
        "parameters": [
          {
            "description": "Start of the period to fetch hours for (UTC)",
            "in": "query",
            "name": "period_start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End of the period to fetch hours for (UTC)",
            "in": "query",
            "name": "period_end",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "team_ids": {
                    "description": "Array of team IDs to fetch oncall hours for",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "type": "array"
                  },
                  "user_ids": {
                    "description": "Array of user IDs to fetch oncall hours for",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Export on-call hours report for users/teams during a time period"
          }
        },
        "summary": "Export on-call hours report",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/signals/analytics/timeseries": {
      "get": {
        "description": "Generate a timeseries-based report of metrics for Signals alerts",
        "operationId": "get_signals_timeseries_analytics",
        "parameters": [
          {
            "description": "String that determines how records are grouped",
            "in": "query",
            "name": "bucket",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestBucketMonth",
                  "value": "month"
                },
                {
                  "name": "RequestBucketWeek",
                  "value": "week"
                },
                {
                  "name": "RequestBucketDay",
                  "value": "day"
                }
              ]
            }
          },
          {
            "description": "A comma separated list of signal rule IDs",
            "in": "query",
            "name": "signal_rules",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of team IDs",
            "in": "query",
            "name": "teams",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of environment IDs",
            "in": "query",
            "name": "environments",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of service IDs",
            "in": "query",
            "name": "services",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of tags",
            "in": "query",
            "name": "tags",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of user IDs",
            "in": "query",
            "name": "users",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "String that determines how records are grouped",
            "in": "query",
            "name": "group_by",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestGroupbySignalRules",
                  "value": "signal_rules"
                },
                {
                  "name": "RequestGroupbyTeams",
                  "value": "teams"
                },
                {
                  "name": "RequestGroupbyServices",
                  "value": "services"
                },
                {
                  "name": "RequestGroupbyEnvironments",
                  "value": "environments"
                },
                {
                  "name": "RequestGroupbyTags",
                  "value": "tags"
                }
              ]
            }
          },
          {
            "description": "String that determines how records are sorted",
            "in": "query",
            "name": "sort_by",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortbyTotalOpenedAlerts",
                  "value": "total_opened_alerts"
                },
                {
                  "name": "RequestSortbyTotalAckedAlerts",
                  "value": "total_acked_alerts"
                },
                {
                  "name": "RequestSortbyTotalIncidents",
                  "value": "total_incidents"
                },
                {
                  "name": "RequestSortbyAckedPercentage",
                  "value": "acked_percentage"
                },
                {
                  "name": "RequestSortbyIncidentsPercentage",
                  "value": "incidents_percentage"
                }
              ]
            }
          },
          {
            "description": "String that determines how records are sorted",
            "in": "query",
            "name": "sort_direction",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestSortdirectionAsc",
                  "value": "asc"
                },
                {
                  "name": "RequestSortdirectionDesc",
                  "value": "desc"
                }
              ]
            }
          },
          {
            "description": "The start date to return metrics from",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The end date to return metrics from",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_Analytics_TimeseriesPointEntity"
                }
              }
            },
            "description": "Generate a timeseries-based report of metrics for Signals alerts"
          }
        },
        "summary": "Generate timeseries alert metrics",
        "tags": [
          "Metrics/Reporting"
        ]
      }
    },
    "/v1/signals/call_routes": {
      "get": {
        "description": "List call routes for the organization",
        "operationId": "list_call_routes",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_CallRouteEntityPaginated"
                }
              }
            },
            "description": "List call routes for the organization"
          }
        },
        "summary": "List call routes",
        "tags": [
          "Call Routes"
        ]
      }
    },
    "/v1/signals/call_routes/{id}": {
      "delete": {
        "description": "Delete a call route by ID",
        "operationId": "delete_call_route",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_CallRouteEntity"
                }
              }
            },
            "description": "Delete a call route by ID"
          }
        },
        "summary": "Delete a call route",
        "tags": [
          "Call Routes"
        ]
      },
      "get": {
        "description": "Retrieve a call route by ID",
        "operationId": "get_call_route",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_CallRouteEntity"
                }
              }
            },
            "description": "Retrieve a call route by ID"
          }
        },
        "summary": "Retrieve a call route",
        "tags": [
          "Call Routes"
        ]
      },
      "patch": {
        "description": "Update a call route by ID",
        "operationId": "update_call_route",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_call_route"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_CallRouteEntity"
                }
              }
            },
            "description": "Update a call route by ID"
          }
        },
        "summary": "Update a call route",
        "tags": [
          "Call Routes"
        ],
        "x-codegen-request-body-name": "update_call_route"
      }
    },
    "/v1/signals/debugger": {
      "post": {
        "description": "Debug Signals expressions",
        "operationId": "debug_signals_expression",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/debug_signals_expression"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Debug Signals expressions"
          }
        },
        "summary": "Debug Signals expressions",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "debug_signals_expression"
      }
    },
    "/v1/signals/email_targets": {
      "get": {
        "description": "List all Signals email targets for a team.",
        "operationId": "list_signals_email_targets",
        "parameters": [
          {
            "description": "A query string to search the list of targets by.",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_EmailTargetEntityPaginated"
                }
              }
            },
            "description": "List all Signals email targets for a team."
          }
        },
        "summary": "List email targets for signals",
        "tags": [
          "Signals"
        ]
      },
      "post": {
        "description": "Create a Signals email target for a team.",
        "operationId": "create_signals_email_target",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_signals_email_target"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_EmailTargetEntity"
                }
              }
            },
            "description": "Create a Signals email target for a team."
          }
        },
        "summary": "Create an email target for signals",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "create_signals_email_target"
      }
    },
    "/v1/signals/email_targets/{id}": {
      "delete": {
        "description": "Delete a Signals email target by ID",
        "operationId": "delete_signals_email_target",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete a Signals email target by ID"
          }
        },
        "summary": "Delete a signal email target",
        "tags": [
          "Signals"
        ]
      },
      "get": {
        "description": "Get a Signals email target by ID",
        "operationId": "get_signals_email_target",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_EmailTargetEntity"
                }
              }
            },
            "description": "Get a Signals email target by ID"
          }
        },
        "summary": "Get a signal email target",
        "tags": [
          "Signals"
        ]
      },
      "patch": {
        "description": "Update a Signals email target by ID",
        "operationId": "update_signals_email_target",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_signals_email_target"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_EmailTargetEntity"
                }
              }
            },
            "description": "Update a Signals email target by ID"
          }
        },
        "summary": "Update an email target",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "update_signals_email_target"
      }
    },
    "/v1/signals/event_sources": {
      "get": {
        "description": "List all Signals event sources for the authenticated user.",
        "operationId": "list_signals_event_sources",
        "parameters": [
          {
            "description": "Team ID to send signals to directly",
            "in": "query",
            "name": "team_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Escalation policy ID to send signals to directly. `team_id` is required if this is provided.",
            "in": "query",
            "name": "escalation_policy_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "On-call schedule ID to send signals to directly. `team_id` is required if this is provided.",
            "in": "query",
            "name": "on_call_schedule_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "User ID to send signals to directly",
            "in": "query",
            "name": "user_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_TransposerListEntity"
                }
              }
            },
            "description": "List all Signals event sources for the authenticated user."
          }
        },
        "summary": "List event sources for Signals",
        "tags": [
          "Signals"
        ]
      },
      "put": {
        "description": "Create a Signals event source for the authenticated user.",
        "operationId": "create_signals_event_source",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_signals_event_source"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_TransposerEntity"
                }
              }
            },
            "description": "Create a Signals event source for the authenticated user."
          }
        },
        "summary": "Create an event source for Signals",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "create_signals_event_source"
      }
    },
    "/v1/signals/event_sources/{transposer_slug}": {
      "delete": {
        "description": "Delete a Signals event source by slug",
        "operationId": "delete_signals_event_source",
        "parameters": [
          {
            "in": "path",
            "name": "transposer_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_TransposerEntity"
                }
              }
            },
            "description": "Delete a Signals event source by slug"
          }
        },
        "summary": "Delete an event source for Signals",
        "tags": [
          "Signals"
        ]
      },
      "get": {
        "description": "Get a Signals event source by slug",
        "operationId": "get_signals_event_source",
        "parameters": [
          {
            "in": "path",
            "name": "transposer_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_TransposerEntity"
                }
              }
            },
            "description": "Get a Signals event source by slug"
          }
        },
        "summary": "Get an event source for Signals",
        "tags": [
          "Signals"
        ]
      }
    },
    "/v1/signals/grouping": {
      "get": {
        "description": "List all Signals alert grouping rules for the organization.",
        "operationId": "list_signals_alert_grouping_configurations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_GroupingEntityPaginated"
                }
              }
            },
            "description": "List all Signals alert grouping rules for the organization."
          }
        },
        "summary": "List alert grouping configurations.",
        "tags": [
          "Signals"
        ]
      },
      "post": {
        "description": "Create a Signals alert grouping rule for the organization.",
        "operationId": "create_signals_alert_grouping_configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_signals_alert_grouping_configuration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_GroupingEntity"
                }
              }
            },
            "description": "Create a Signals alert grouping rule for the organization."
          }
        },
        "summary": "Create an alert grouping configuration.",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "create_signals_alert_grouping_configuration"
      }
    },
    "/v1/signals/grouping/{id}": {
      "delete": {
        "description": "Delete a Signals alert grouping rule by ID.",
        "operationId": "delete_signals_alert_grouping_configuration",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_GroupingEntity"
                }
              }
            },
            "description": "Delete a Signals alert grouping rule by ID."
          }
        },
        "summary": "Delete an alert grouping configuration.",
        "tags": [
          "Signals"
        ]
      },
      "get": {
        "description": "Get a Signals alert grouping rule by ID.",
        "operationId": "get_signals_alert_grouping_configuration",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_GroupingEntity"
                }
              }
            },
            "description": "Get a Signals alert grouping rule by ID."
          }
        },
        "summary": "Get an alert grouping configuration.",
        "tags": [
          "Signals"
        ]
      },
      "patch": {
        "description": "Update a Signals alert grouping rule for the organization.",
        "operationId": "update_signals_alert_grouping_configuration",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_signals_alert_grouping_configuration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_GroupingEntity"
                }
              }
            },
            "description": "Update a Signals alert grouping rule for the organization."
          }
        },
        "summary": "Update an alert grouping configuration.",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "update_signals_alert_grouping_configuration"
      }
    },
    "/v1/signals/hacker_mode": {
      "get": {
        "description": "Get the status of the hacker mode for the current user",
        "operationId": "get_signals_hacker_mode",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_HackerModeEntity"
                }
              }
            },
            "description": "Get the status of the hacker mode for the current user"
          }
        },
        "summary": "Get hacker mode status",
        "tags": [
          "Signals"
        ]
      }
    },
    "/v1/signals/ingest_url": {
      "get": {
        "description": "Retrieve the url for ingesting signals for your organization",
        "operationId": "get_signals_ingest_url",
        "parameters": [
          {
            "description": "Team ID to send signals to directly",
            "in": "query",
            "name": "team_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Escalation policy ID to send signals to directly. `team_id` is required if this is provided.",
            "in": "query",
            "name": "escalation_policy_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "On-call schedule ID to send signals to directly. `team_id` is required if this is provided.",
            "in": "query",
            "name": "on_call_schedule_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "User ID to send signals to directly",
            "in": "query",
            "name": "user_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_IngestKeyEntity"
                }
              }
            },
            "description": "Retrieve the url for ingesting signals for your organization"
          }
        },
        "summary": "Get the signals ingestion URL",
        "tags": [
          "Signals"
        ]
      }
    },
    "/v1/signals/notification_policy_items": {
      "get": {
        "description": "List all Signals notification policies.",
        "operationId": "list_notification_policy_settings",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_NotificationPolicyItemEntityPaginated"
                }
              }
            },
            "description": "List all Signals notification policies."
          }
        },
        "summary": "List notification policies",
        "tags": [
          "Signals"
        ]
      },
      "post": {
        "description": "Create a Signals notification policy.",
        "operationId": "create_handoff_notification_setting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_handoff_notification_setting"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_NotificationPolicyItemEntity"
                }
              }
            },
            "description": "Create a Signals notification policy."
          }
        },
        "summary": "Create a notification policy",
        "tags": [
          "Signals"
        ]
      }
    },
    "/v1/signals/notification_policy_items/{id}": {
      "delete": {
        "description": "Delete a Signals notification policy by ID",
        "operationId": "delete_notification_policy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete a Signals notification policy by ID"
          }
        },
        "summary": "Delete a notification policy",
        "tags": [
          "Signals"
        ]
      },
      "get": {
        "description": "Get a Signals notification policy by ID",
        "operationId": "get_notification_policy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_NotificationPolicyItemEntity"
                }
              }
            },
            "description": "Get a Signals notification policy by ID"
          }
        },
        "summary": "Get a notification policy",
        "tags": [
          "Signals"
        ]
      },
      "patch": {
        "description": "Update a Signals notification policy by ID",
        "operationId": "update_notification_policy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_notification_policy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Update a Signals notification policy by ID"
          }
        },
        "summary": "Update a notification policy",
        "tags": [
          "Signals"
        ]
      }
    },
    "/v1/signals/transposers": {
      "get": {
        "description": "List all transposers for your organization",
        "operationId": "list_signals_transposers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_TransposerListEntity"
                }
              }
            },
            "description": "List all transposers for your organization"
          }
        },
        "summary": "List signal transposers",
        "tags": [
          "Signals"
        ]
      }
    },
    "/v1/signals/webhook_targets": {
      "get": {
        "description": "List all Signals webhook targets.",
        "operationId": "list_signals_webhook_targets",
        "parameters": [
          {
            "description": "A query string for searching through the list of webhook targets.",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_WebhookTargetEntityPaginated"
                }
              }
            },
            "description": "List all Signals webhook targets."
          }
        },
        "summary": "List webhook targets",
        "tags": [
          "Signals"
        ]
      },
      "post": {
        "description": "Create a Signals webhook target.",
        "operationId": "create_signals_webhook_target",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_signals_webhook_target"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_WebhookTargetEntity"
                }
              }
            },
            "description": "Create a Signals webhook target."
          }
        },
        "summary": "Create a webhook target",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "create_signals_webhook_target"
      }
    },
    "/v1/signals/webhook_targets/{id}": {
      "delete": {
        "description": "Delete a Signals webhook target by ID",
        "operationId": "delete_signals_webhook_target",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete a Signals webhook target by ID"
          }
        },
        "summary": "Delete a webhook target",
        "tags": [
          "Signals"
        ]
      },
      "get": {
        "description": "Get a Signals webhook target by ID",
        "operationId": "get_signals_webhook_target",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_WebhookTargetEntity"
                }
              }
            },
            "description": "Get a Signals webhook target by ID"
          }
        },
        "summary": "Get a webhook target",
        "tags": [
          "Signals"
        ]
      },
      "patch": {
        "description": "Update a Signals webhook target by ID",
        "operationId": "update_signals_webhook_target",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_signals_webhook_target"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_WebhookTargetEntity"
                }
              }
            },
            "description": "Update a Signals webhook target by ID"
          }
        },
        "summary": "Update a webhook target",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "update_signals_webhook_target"
      }
    },
    "/v1/signals_on_call": {
      "get": {
        "description": "List all users who are currently on-call across the entire organization.",
        "operationId": "list_organization_on_call_schedules",
        "parameters": [
          {
            "description": "An optional comma separated list of team IDs to filter currently on-call users by",
            "in": "query",
            "name": "team_id",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_OrganizationOnCallScheduleEntityPaginated"
                }
              }
            },
            "description": "List all users who are currently on-call across the entire organization."
          }
        },
        "summary": "List who's on call for the organization",
        "tags": [
          "Signals"
        ]
      }
    },
    "/v1/status_update_templates": {
      "get": {
        "description": "List all status update templates for your organization",
        "operationId": "list_status_update_templates",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusUpdateTemplateEntity"
                }
              }
            },
            "description": "List all status update templates for your organization"
          }
        },
        "summary": "List status update templates",
        "tags": [
          "Communication"
        ]
      },
      "post": {
        "description": "Create a status update template for your organization",
        "operationId": "create_status_update_template",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_status_update_template"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusUpdateTemplateEntity"
                }
              }
            },
            "description": "Create a status update template for your organization"
          }
        },
        "summary": "Create a status update template",
        "tags": [
          "Communication"
        ],
        "x-codegen-request-body-name": "create_status_update_template"
      }
    },
    "/v1/status_update_templates/{status_update_template_id}": {
      "delete": {
        "description": "Delete a single status update template",
        "operationId": "delete_status_update_template",
        "parameters": [
          {
            "in": "path",
            "name": "status_update_template_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusUpdateTemplateEntity"
                }
              }
            },
            "description": "Delete a single status update template"
          }
        },
        "summary": "Delete a status update template",
        "tags": [
          "Communication"
        ]
      },
      "get": {
        "description": "Get a single status update template by ID",
        "operationId": "get_status_update_template",
        "parameters": [
          {
            "in": "path",
            "name": "status_update_template_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusUpdateTemplateEntity"
                }
              }
            },
            "description": "Get a single status update template by ID"
          }
        },
        "summary": "Get a status update template",
        "tags": [
          "Communication"
        ]
      },
      "patch": {
        "description": "Update a single status update template",
        "operationId": "update_status_update_template",
        "parameters": [
          {
            "in": "path",
            "name": "status_update_template_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_status_update_template"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusUpdateTemplateEntity"
                }
              }
            },
            "description": "Update a single status update template"
          }
        },
        "summary": "Update a status update template",
        "tags": [
          "Communication"
        ],
        "x-codegen-request-body-name": "update_status_update_template"
      }
    },
    "/v1/task_lists": {
      "get": {
        "description": "Lists all task lists for your organization",
        "operationId": "list_task_lists",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListEntity"
                }
              }
            },
            "description": "Lists all task lists for your organization"
          }
        },
        "summary": "List task lists",
        "tags": [
          "Tasks"
        ]
      },
      "post": {
        "description": "Creates a new task list",
        "operationId": "create_task_list",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_task_list"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListEntity"
                }
              }
            },
            "description": "Creates a new task list"
          }
        },
        "summary": "Create a task list",
        "tags": [
          "Tasks"
        ],
        "x-codegen-request-body-name": "create_task_list"
      }
    },
    "/v1/task_lists/{task_list_id}": {
      "delete": {
        "description": "Delete a task list",
        "operationId": "delete_task_list",
        "parameters": [
          {
            "in": "path",
            "name": "task_list_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListEntity"
                }
              }
            },
            "description": "Delete a task list"
          }
        },
        "summary": "Delete a task list",
        "tags": [
          "Tasks"
        ]
      },
      "get": {
        "description": "Retrieves a single task list by ID",
        "operationId": "get_task_list",
        "parameters": [
          {
            "in": "path",
            "name": "task_list_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListEntity"
                }
              }
            },
            "description": "Retrieves a single task list by ID"
          }
        },
        "summary": "Get a task list",
        "tags": [
          "Tasks"
        ]
      },
      "patch": {
        "description": "Updates a task list's attributes and task list items",
        "operationId": "update_task_list",
        "parameters": [
          {
            "in": "path",
            "name": "task_list_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_task_list"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListEntity"
                }
              }
            },
            "description": "Updates a task list's attributes and task list items"
          }
        },
        "summary": "Update a task list",
        "tags": [
          "Tasks"
        ],
        "x-codegen-request-body-name": "update_task_list"
      }
    },
    "/v1/teams": {
      "get": {
        "description": "List all of the teams in the organization",
        "operationId": "list_teams",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "A query to search teams by their name or description",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query to search teams by their name",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of service IDs",
            "in": "query",
            "name": "services",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filter by teams that have or do not have members with a default incident role asssigned. Value may be 'present', 'blank', or the ID of an incident role.",
            "in": "query",
            "name": "default_incident_role",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Boolean to determine whether to return a slimified version of the teams object",
            "in": "query",
            "name": "lite",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamEntityPaginated"
                }
              }
            },
            "description": "List all of the teams in the organization"
          }
        },
        "summary": "List teams",
        "tags": [
          "Teams"
        ]
      },
      "post": {
        "description": "Create a new team",
        "operationId": "create_team",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_team"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamEntity"
                }
              }
            },
            "description": "Create a new team"
          }
        },
        "summary": "Create a team",
        "tags": [
          "Teams"
        ],
        "x-codegen-request-body-name": "create_team"
      }
    },
    "/v1/teams/{team_id}": {
      "delete": {
        "description": "Archives an team which will hide it from lists and metrics",
        "operationId": "delete_team",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamEntity"
                }
              }
            },
            "description": "Archives an team which will hide it from lists and metrics"
          }
        },
        "summary": "Archive a team",
        "tags": [
          "Teams"
        ]
      },
      "get": {
        "description": "Retrieve a single team from its ID",
        "operationId": "get_team",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Boolean to determine whether to return a slimified version of the teams object",
            "in": "query",
            "name": "lite",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamEntity"
                }
              }
            },
            "description": "Retrieve a single team from its ID"
          }
        },
        "summary": "Get a team",
        "tags": [
          "Teams"
        ]
      },
      "patch": {
        "description": "Update a single team from its ID",
        "operationId": "update_team",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_team"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamEntity"
                }
              }
            },
            "description": "Update a single team from its ID"
          }
        },
        "summary": "Update a team",
        "tags": [
          "Teams"
        ],
        "x-codegen-request-body-name": "update_team"
      }
    },
    "/v1/teams/{team_id}/call_routes": {
      "get": {
        "description": "List call routes for a team",
        "operationId": "list_team_call_routes",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_CallRouteEntityPaginated"
                }
              }
            },
            "description": "List call routes for a team"
          }
        },
        "summary": "List call routes for a team",
        "tags": [
          "Call Routes"
        ]
      },
      "post": {
        "description": "Create a call route for a team",
        "operationId": "create_team_call_route",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_team_call_route"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_CallRouteEntity"
                }
              }
            },
            "description": "Create a call route for a team"
          }
        },
        "summary": "Create a call route for a team",
        "tags": [
          "Call Routes"
        ],
        "x-codegen-request-body-name": "create_team_call_route"
      }
    },
    "/v1/teams/{team_id}/escalation_policies": {
      "get": {
        "description": "List all Signals escalation policies for a team.",
        "operationId": "list_team_escalation_policies",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query string for searching through the list of escalation policies.",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_EscalationPolicyEntityPaginated"
                }
              }
            },
            "description": "List all Signals escalation policies for a team."
          }
        },
        "summary": "List escalation policies for a team",
        "tags": [
          "Signals"
        ]
      },
      "post": {
        "description": "Create a Signals escalation policy for a team.",
        "operationId": "create_team_escalation_policy",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_team_escalation_policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_EscalationPolicyEntity"
                }
              }
            },
            "description": "Create a Signals escalation policy for a team."
          }
        },
        "summary": "Create an escalation policy for a team",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "create_team_escalation_policy"
      }
    },
    "/v1/teams/{team_id}/escalation_policies/{id}": {
      "delete": {
        "description": "Delete a Signals escalation policy by ID",
        "operationId": "delete_team_escalation_policy",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete a Signals escalation policy by ID"
          }
        },
        "summary": "Delete an escalation policy for a team",
        "tags": [
          "Signals"
        ]
      },
      "get": {
        "description": "Get a Signals escalation policy by ID",
        "operationId": "get_team_escalation_policy",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_EscalationPolicyEntity"
                }
              }
            },
            "description": "Get a Signals escalation policy by ID"
          }
        },
        "summary": "Get an escalation policy for a team",
        "tags": [
          "Signals"
        ]
      },
      "patch": {
        "description": "Update a Signals escalation policy by ID",
        "operationId": "update_team_escalation_policy",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_team_escalation_policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_EscalationPolicyEntity"
                }
              }
            },
            "description": "Update a Signals escalation policy by ID"
          }
        },
        "summary": "Update an escalation policy for a team",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "update_team_escalation_policy"
      }
    },
    "/v1/teams/{team_id}/on_call_schedules": {
      "get": {
        "description": "List all Signals on-call schedules for a team.",
        "operationId": "list_team_on_call_schedules",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional ISO8601 timestamp for filtering the shifts listed in each on-call schedule to only include shifts that overlap with the provided time window. If provided, only shifts that end at or after this time will be included.",
            "in": "query",
            "name": "shift_time_window_start",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "An optional ISO8601 timestamp for filtering the shifts listed in each on-call schedule to only include shifts that overlap with the provided time window.. If provided, only shifts that start at or before this time will be included.",
            "in": "query",
            "name": "shift_time_window_end",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A query string for searching through the list of on-call schedules.",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_OnCallScheduleEntityPaginated"
                }
              }
            },
            "description": "List all Signals on-call schedules for a team."
          }
        },
        "summary": "List on-call schedules for a team",
        "tags": [
          "Signals"
        ]
      },
      "post": {
        "description": "Create a Signals on-call schedule for a team with a single rotation. More rotations can be created later.",
        "operationId": "create_team_on_call_schedule",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_team_on_call_schedule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_OnCallScheduleEntity"
                }
              }
            },
            "description": "Create a Signals on-call schedule for a team with a single rotation. More rotations can be created later."
          }
        },
        "summary": "Create an on-call schedule for a team",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "create_team_on_call_schedule"
      }
    },
    "/v1/teams/{team_id}/on_call_schedules/{schedule_id}": {
      "delete": {
        "description": "Delete a Signals on-call schedule by ID",
        "operationId": "delete_team_on_call_schedule",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schedule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete a Signals on-call schedule by ID"
          }
        },
        "summary": "Delete an on-call schedule for a team",
        "tags": [
          "Signals"
        ]
      },
      "get": {
        "description": "Get a Signals on-call schedule by ID",
        "operationId": "get_team_on_call_schedule",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schedule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional ISO8601 timestamp for filtering the shifts listed in each on-call schedule to only include shifts that overlap with the provided time window. If provided, only shifts that end at or after this time will be included.",
            "in": "query",
            "name": "shift_time_window_start",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "An optional ISO8601 timestamp for filtering the shifts listed in each on-call schedule to only include shifts that overlap with the provided time window.. If provided, only shifts that start at or before this time will be included.",
            "in": "query",
            "name": "shift_time_window_end",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_OnCallScheduleEntity"
                }
              }
            },
            "description": "Get a Signals on-call schedule by ID"
          }
        },
        "summary": "Get an on-call schedule for a team",
        "tags": [
          "Signals"
        ]
      },
      "patch": {
        "description": "Update a Signals on-call schedule by ID. For backwards compatibility, all parameters except for\n`name` and `description` will be ignored if the schedule has more than one rotation. If the schedule\nhas only one rotation, you can continue to update that rotation using the rotation-specific parameters.\n",
        "operationId": "update_team_on_call_schedule",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schedule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_team_on_call_schedule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_OnCallScheduleEntity"
                }
              }
            },
            "description": "Update a Signals on-call schedule by ID. For backwards compatibility, all parameters except for\n`name` and `description` will be ignored if the schedule has more than one rotation. If the schedule\nhas only one rotation, you can continue to update that rotation using the rotation-specific parameters.\n"
          }
        },
        "summary": "Update an on-call schedule for a team",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "update_team_on_call_schedule"
      }
    },
    "/v1/teams/{team_id}/on_call_schedules/{schedule_id}/shifts": {
      "post": {
        "description": "Create a Signals on-call shift in a schedule.",
        "operationId": "create_on_call_shift",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schedule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_on_call_shift"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_OnCallShiftEntity"
                }
              }
            },
            "description": "Create a Signals on-call shift in a schedule."
          }
        },
        "summary": "Create a shift for an on-call schedule",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "create_on_call_shift"
      }
    },
    "/v1/teams/{team_id}/on_call_schedules/{schedule_id}/shifts/{id}": {
      "delete": {
        "description": "Delete a Signals on-call shift by ID",
        "operationId": "delete_on_call_shift",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schedule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete a Signals on-call shift by ID"
          }
        },
        "summary": "Delete an on-call shift from a team schedule",
        "tags": [
          "Signals"
        ]
      },
      "get": {
        "description": "Get a Signals on-call shift by ID",
        "operationId": "get_on_call_shift",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schedule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_OnCallShiftEntity"
                }
              }
            },
            "description": "Get a Signals on-call shift by ID"
          }
        },
        "summary": "Get an on-call shift for a team schedule",
        "tags": [
          "Signals"
        ]
      },
      "patch": {
        "description": "Update a Signals on-call shift by ID",
        "operationId": "update_on_call_shift",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schedule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_on_call_shift"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_OnCallShiftEntity"
                }
              }
            },
            "description": "Update a Signals on-call shift by ID"
          }
        },
        "summary": "Update an on-call shift for a team schedule",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "update_on_call_shift"
      }
    },
    "/v1/teams/{team_id}/signal_rules": {
      "get": {
        "description": "List all Signals rules for a team.",
        "operationId": "list_team_signal_rules",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query string for searching through the list of alerting rules.",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_RuleEntityPaginated"
                }
              }
            },
            "description": "List all Signals rules for a team."
          }
        },
        "summary": "List Signals rules",
        "tags": [
          "Signals"
        ]
      },
      "post": {
        "description": "Create a Signals rule for a team.",
        "operationId": "create_team_signal_rule",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_team_signal_rule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_RuleEntity"
                }
              }
            },
            "description": "Create a Signals rule for a team."
          }
        },
        "summary": "Create a Signals rule",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "create_team_signal_rule"
      }
    },
    "/v1/teams/{team_id}/signal_rules/{id}": {
      "delete": {
        "description": "Delete a Signals rule by ID",
        "operationId": "delete_team_signal_rule",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete a Signals rule by ID"
          }
        },
        "summary": "Delete a Signals rule",
        "tags": [
          "Signals"
        ]
      },
      "get": {
        "description": "Get a Signals rule by ID.",
        "operationId": "get_team_signal_rule",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_RuleEntity"
                }
              }
            },
            "description": "Get a Signals rule by ID."
          }
        },
        "summary": "Get a Signals rule",
        "tags": [
          "Signals"
        ]
      },
      "patch": {
        "description": "Update a Signals rule by ID",
        "operationId": "update_team_signal_rule",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_team_signal_rule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals_API_RuleEntity"
                }
              }
            },
            "description": "Update a Signals rule by ID"
          }
        },
        "summary": "Update a Signals rule",
        "tags": [
          "Signals"
        ],
        "x-codegen-request-body-name": "update_team_signal_rule"
      }
    },
    "/v1/ticketing/priorities": {
      "get": {
        "description": "List all ticketing priorities available to the organization",
        "operationId": "list_ticketing_priorities",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_PriorityEntity"
                }
              }
            },
            "description": "List all ticketing priorities available to the organization"
          }
        },
        "summary": "List ticketing priorities",
        "tags": [
          "Ticketing"
        ]
      },
      "post": {
        "description": "Create a single ticketing priority",
        "operationId": "create_ticketing_priority",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_ticketing_priority"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_PriorityEntity"
                }
              }
            },
            "description": "Create a single ticketing priority"
          }
        },
        "summary": "Create a ticketing priority",
        "tags": [
          "Ticketing"
        ],
        "x-codegen-request-body-name": "create_ticketing_priority"
      }
    },
    "/v1/ticketing/priorities/{id}": {
      "delete": {
        "description": "Delete a single ticketing priority by ID",
        "operationId": "delete_ticketing_priority",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_PriorityEntity"
                }
              }
            },
            "description": "Delete a single ticketing priority by ID"
          }
        },
        "summary": "Delete a ticketing priority",
        "tags": [
          "Ticketing"
        ]
      },
      "get": {
        "description": "Retrieve a single ticketing priority by ID",
        "operationId": "get_ticketing_priority",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_PriorityEntity"
                }
              }
            },
            "description": "Retrieve a single ticketing priority by ID"
          }
        },
        "summary": "Get a ticketing priority",
        "tags": [
          "Ticketing"
        ]
      },
      "patch": {
        "description": "Update a single ticketing priority's attributes",
        "operationId": "update_ticketing_priority",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_ticketing_priority"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_PriorityEntity"
                }
              }
            },
            "description": "Update a single ticketing priority's attributes"
          }
        },
        "summary": "Update a ticketing priority",
        "tags": [
          "Ticketing"
        ],
        "x-codegen-request-body-name": "update_ticketing_priority"
      }
    },
    "/v1/ticketing/projects": {
      "get": {
        "description": "List all ticketing projects available to the organization",
        "operationId": "list_ticketing_projects",
        "parameters": [
          {
            "in": "query",
            "name": "supports_ticket_types",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "providers",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "connection_ids",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "configured_projects",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_Projects_ProjectListItemEntity"
                }
              }
            },
            "description": "List all ticketing projects available to the organization"
          }
        },
        "summary": "List ticketing projects",
        "tags": [
          "Ticketing"
        ]
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}": {
      "get": {
        "description": "Retrieve a single ticketing project by ID",
        "operationId": "get_ticketing_project",
        "parameters": [
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_Projects_ProjectListItemEntity"
                }
              }
            },
            "description": "Retrieve a single ticketing project by ID"
          }
        },
        "summary": "Get a ticketing project",
        "tags": [
          "Ticketing"
        ]
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/configuration_options": {
      "get": {
        "description": "List all configuration options for a ticketing project",
        "operationId": "get_configuration_options",
        "parameters": [
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "List all configuration options for a ticketing project"
          }
        },
        "summary": "List configuration options for a ticketing project",
        "tags": [
          "Ticketing"
        ]
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/configuration_options/options_for/{field_id}": {
      "get": {
        "description": "List a field's configuration options for a ticketing project",
        "operationId": "get_options_for_field",
        "parameters": [
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "List a field's configuration options for a ticketing project"
          }
        },
        "summary": "List a field's configuration options for a ticketing project",
        "tags": [
          "Ticketing"
        ]
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/field_maps": {
      "post": {
        "description": "Creates field map for a ticketing project",
        "operationId": "create_ticketing_field_map",
        "parameters": [
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_ProjectFieldMapEntity"
                }
              }
            },
            "description": "Creates field map for a ticketing project"
          }
        },
        "summary": "Create a field mapping for a ticketing project",
        "tags": [
          "Ticketing"
        ]
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/field_maps/available_fields": {
      "get": {
        "description": "Returns metadata for the fields that are available for field mapping.",
        "operationId": "list_available_ticketing_field_maps",
        "parameters": [
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_FieldMaps_MappableFieldEntity"
                }
              }
            },
            "description": "Returns metadata for the fields that are available for field mapping."
          }
        },
        "summary": "List available fields for ticket field mapping",
        "tags": [
          "Ticketing"
        ]
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/field_maps/{map_id}": {
      "delete": {
        "description": "Archive field map for a ticketing project",
        "operationId": "delete_ticketing_field_map",
        "parameters": [
          {
            "in": "path",
            "name": "map_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Archive field map for a ticketing project"
          }
        },
        "summary": "Archive a field map for a ticketing project",
        "tags": [
          "Ticketing"
        ]
      },
      "get": {
        "description": "Retrieve field map for a ticketing project",
        "operationId": "get_ticketing_field_map",
        "parameters": [
          {
            "in": "path",
            "name": "map_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_ProjectFieldMapEntity"
                }
              }
            },
            "description": "Retrieve field map for a ticketing project"
          }
        },
        "summary": "Get a field map for a ticketing project",
        "tags": [
          "Ticketing"
        ]
      },
      "patch": {
        "description": "Update field map for a ticketing project",
        "operationId": "update_ticketing_field_map",
        "parameters": [
          {
            "in": "path",
            "name": "map_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_ProjectFieldMapEntity"
                }
              }
            },
            "description": "Update field map for a ticketing project"
          }
        },
        "summary": "Update a field map for a ticketing project",
        "tags": [
          "Ticketing"
        ]
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/inbound_field_maps": {
      "get": {
        "description": "List all inbound field maps for a ticketing project",
        "operationId": "list_inbound_field_maps",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Filter by ticket type. Values: incident, follow_up",
            "in": "query",
            "name": "ticket_type",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestTickettypeIncident",
                  "value": "incident"
                },
                {
                  "name": "RequestTickettypeFollowUp",
                  "value": "follow_up"
                }
              ]
            }
          },
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_ProjectInboundFieldMapEntity"
                }
              }
            },
            "description": "List all inbound field maps for a ticketing project"
          }
        },
        "summary": "List inbound field maps for a ticketing project",
        "tags": [
          "Ticketing"
        ]
      },
      "post": {
        "description": "Creates inbound field map for a ticketing project",
        "operationId": "create_inbound_field_map",
        "parameters": [
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_ProjectInboundFieldMapEntity"
                }
              }
            },
            "description": "Creates inbound field map for a ticketing project"
          }
        },
        "summary": "Create inbound field map for a ticketing project",
        "tags": [
          "Ticketing"
        ]
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/inbound_field_maps/available_fields": {
      "get": {
        "description": "Returns metadata for the fields that are available for inbound field mapping.",
        "operationId": "list_available_inbound_field_maps",
        "parameters": [
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_ProjectInboundMappableFieldEntity"
                }
              }
            },
            "description": "Returns metadata for the fields that are available for inbound field mapping."
          }
        },
        "summary": "List available fields for ticket field mapping",
        "tags": [
          "Ticketing"
        ]
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/inbound_field_maps/{map_id}": {
      "delete": {
        "description": "Archive inbound field map for a ticketing project",
        "operationId": "delete_inbound_field_map",
        "parameters": [
          {
            "in": "path",
            "name": "map_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Archive inbound field map for a ticketing project"
          }
        },
        "summary": "Archive inbound field map for a ticketing project",
        "tags": [
          "Ticketing"
        ]
      },
      "get": {
        "description": "Retrieve inbound field map for a ticketing project",
        "operationId": "get_inbound_field_map",
        "parameters": [
          {
            "in": "path",
            "name": "map_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_ProjectInboundFieldMapEntity"
                }
              }
            },
            "description": "Retrieve inbound field map for a ticketing project"
          }
        },
        "summary": "Get inbound field map for a ticketing project",
        "tags": [
          "Ticketing"
        ]
      },
      "put": {
        "description": "Update inbound field map for a ticketing project",
        "operationId": "update_inbound_field_map",
        "parameters": [
          {
            "in": "path",
            "name": "map_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_ProjectInboundFieldMapEntity"
                }
              }
            },
            "description": "Update inbound field map for a ticketing project"
          }
        },
        "summary": "Update inbound field map for a ticketing project",
        "tags": [
          "Ticketing"
        ]
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/provider_project_configurations": {
      "post": {
        "description": "Creates configuration for a ticketing project",
        "operationId": "create_ticketing_project_config",
        "parameters": [
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_ProjectConfigEntity"
                }
              }
            },
            "description": "Creates configuration for a ticketing project"
          }
        },
        "summary": "Create a ticketing project configuration",
        "tags": [
          "Ticketing"
        ]
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/provider_project_configurations/{config_id}": {
      "delete": {
        "description": "Archive configuration for a ticketing project",
        "operationId": "delete_ticketing_project_config",
        "parameters": [
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "config_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_ProjectConfigEntity"
                }
              }
            },
            "description": "Archive configuration for a ticketing project"
          }
        },
        "summary": "Archive a ticketing project configuration",
        "tags": [
          "Ticketing"
        ]
      },
      "get": {
        "description": "Retrieve configuration for a ticketing project",
        "operationId": "get_ticketing_project_config",
        "parameters": [
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "config_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_ProjectConfigEntity"
                }
              }
            },
            "description": "Retrieve configuration for a ticketing project"
          }
        },
        "summary": "Get configuration for a ticketing project",
        "tags": [
          "Ticketing"
        ]
      },
      "patch": {
        "description": "Update configuration for a ticketing project",
        "operationId": "update_ticketing_project_config",
        "parameters": [
          {
            "in": "path",
            "name": "ticketing_project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "config_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_ProjectConfigEntity"
                }
              }
            },
            "description": "Update configuration for a ticketing project"
          }
        },
        "summary": "Update configuration for a ticketing project",
        "tags": [
          "Ticketing"
        ]
      }
    },
    "/v1/ticketing/ticket_tags": {
      "get": {
        "description": "List all of the ticket tags in the organization",
        "operationId": "list_ticket_tags",
        "parameters": [
          {
            "in": "query",
            "name": "prefix",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntityPaginated"
                }
              }
            },
            "description": "List all of the ticket tags in the organization"
          }
        },
        "summary": "List ticket tags",
        "tags": [
          "Ticketing"
        ]
      }
    },
    "/v1/ticketing/tickets": {
      "get": {
        "description": "List all of the tickets that have been added to the organiation",
        "operationId": "list_tickets",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "A comma separated list of tags",
            "in": "query",
            "name": "tags",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "A matching strategy for the tags provided",
            "in": "query",
            "name": "tag_match_strategy",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestTagmatchstrategyAny",
                  "value": "any"
                },
                {
                  "name": "RequestTagmatchstrategyMatchAll",
                  "value": "match_all"
                },
                {
                  "name": "RequestTagmatchstrategyExclude",
                  "value": "exclude"
                }
              ]
            }
          },
          {
            "description": "Filter tickets assigned to this user id",
            "in": "query",
            "name": "assigned_user",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filter tickets by state",
            "in": "query",
            "name": "state",
            "schema": {
              "nullable": true,
              "type": "string",
              "x-speakeasy-enums": [
                {
                  "name": "RequestStateOpen",
                  "value": "open"
                },
                {
                  "name": "RequestStateInProgress",
                  "value": "in_progress"
                },
                {
                  "name": "RequestStateCancelled",
                  "value": "cancelled"
                },
                {
                  "name": "RequestStateDone",
                  "value": "done"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_TicketEntity"
                }
              }
            },
            "description": "List all of the tickets that have been added to the organiation"
          }
        },
        "summary": "List tickets",
        "tags": [
          "Ticketing"
        ]
      },
      "post": {
        "description": "Creates a ticket for a project",
        "operationId": "create_ticket",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_ticket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_TicketEntity"
                }
              }
            },
            "description": "Creates a ticket for a project"
          }
        },
        "summary": "Create a ticket",
        "tags": [
          "Ticketing"
        ],
        "x-codegen-request-body-name": "create_ticket"
      }
    },
    "/v1/ticketing/tickets/{ticket_id}": {
      "delete": {
        "description": "Archive a ticket",
        "operationId": "delete_ticket",
        "parameters": [
          {
            "in": "path",
            "name": "ticket_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Archive a ticket"
          }
        },
        "summary": "Archive a ticket",
        "tags": [
          "Ticketing"
        ]
      },
      "get": {
        "description": "Retrieves a single ticket by ID",
        "operationId": "get_ticket",
        "parameters": [
          {
            "in": "path",
            "name": "ticket_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_TicketEntity"
                }
              }
            },
            "description": "Retrieves a single ticket by ID"
          }
        },
        "summary": "Get a ticket",
        "tags": [
          "Ticketing"
        ]
      },
      "patch": {
        "description": "Update a ticket's attributes",
        "operationId": "update_ticket",
        "parameters": [
          {
            "in": "path",
            "name": "ticket_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_ticket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticketing_TicketEntity"
                }
              }
            },
            "description": "Update a ticket's attributes"
          }
        },
        "summary": "Update a ticket",
        "tags": [
          "Ticketing"
        ],
        "x-codegen-request-body-name": "update_ticket"
      }
    },
    "/v1/users": {
      "get": {
        "description": "Retrieve a list of all users in an organization",
        "operationId": "list_users",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Text string of a query to filter users by name or email",
            "in": "query",
            "name": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Text string of a query to filter users by name",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntityPaginated"
                }
              }
            },
            "description": "Retrieve a list of all users in an organization"
          }
        },
        "summary": "List users",
        "tags": [
          "Users"
        ]
      }
    },
    "/v1/users/{id}": {
      "get": {
        "description": "Retrieve a single user by ID",
        "operationId": "get_user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            },
            "description": "Retrieve a single user by ID"
          }
        },
        "summary": "Get a user",
        "tags": [
          "Users"
        ]
      }
    },
    "/v1/users/{id}/services": {
      "get": {
        "description": "Retrieves a list of services owned by the teams a user is on",
        "operationId": "list_user_owned_services",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TeamEntityPaginated"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Retrieves a list of services owned by the teams a user is on"
          }
        },
        "summary": "List services owned by a user's teams",
        "tags": [
          "Catalog Entries"
        ]
      }
    },
    "/v1/webhooks": {
      "get": {
        "description": "Lists webhooks",
        "operationId": "list_webhooks",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhooks_Entities_WebhookEntity"
                }
              }
            },
            "description": "Lists webhooks"
          }
        },
        "summary": "List webhooks",
        "tags": [
          "Webhooks"
        ]
      },
      "post": {
        "description": "Create a new webhook",
        "operationId": "create_webhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_webhook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhooks_Entities_WebhookEntity"
                }
              }
            },
            "description": "Create a new webhook"
          }
        },
        "summary": "Create a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-codegen-request-body-name": "create_webhook"
      }
    },
    "/v1/webhooks/{webhook_id}": {
      "delete": {
        "description": "Delete a specific webhook",
        "operationId": "delete_webhook",
        "parameters": [
          {
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Delete a specific webhook"
          }
        },
        "summary": "Delete a webhook",
        "tags": [
          "Webhooks"
        ]
      },
      "get": {
        "description": "Retrieve a specific webhook",
        "operationId": "get_webhook",
        "parameters": [
          {
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhooks_Entities_WebhookEntity"
                }
              }
            },
            "description": "Retrieve a specific webhook"
          }
        },
        "summary": "Get a webhook",
        "tags": [
          "Webhooks"
        ]
      },
      "patch": {
        "description": "Update a specific webhook",
        "operationId": "update_webhook",
        "parameters": [
          {
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_webhook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhooks_Entities_WebhookEntity"
                }
              }
            },
            "description": "Update a specific webhook"
          }
        },
        "summary": "Update a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-codegen-request-body-name": "update_webhook"
      }
    },
    "/v1/webhooks/{webhook_id}/deliveries": {
      "get": {
        "description": "Get webhook deliveries",
        "operationId": "list_webhook_deliveries",
        "parameters": [
          {
            "description": "ID of a webhook",
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Get webhook deliveries"
          }
        },
        "summary": "List webhook deliveries",
        "tags": [
          "Webhooks"
        ]
      }
    }
  },
  "security": [
    {
      "api_key": []
    }
  ],
  "servers": [
    {
      "url": "https://api.staging.firehydrant.io/"
    }
  ],
  "tags": [
    {
      "description": "Operations about Call Routes",
      "name": "Call Routes"
    },
    {
      "description": "Operations about Audit Events",
      "name": "Audit Events"
    },
    {
      "description": "Operations related to Account Settings",
      "name": "Account Settings"
    },
    {
      "description": "Operations related to Alerts",
      "name": "Alerts"
    },
    {
      "description": "Operations related to Audiences",
      "name": "Audiences"
    },
    {
      "description": "Operations related to Changes",
      "name": "Changes"
    },
    {
      "description": "Operations related to Communication",
      "name": "Communication"
    },
    {
      "description": "Operations related to Conversations",
      "name": "Conversations"
    },
    {
      "description": "Operations related to Incidents",
      "name": "Incidents"
    },
    {
      "description": "Operations related to Incident Settings",
      "name": "Incident Settings"
    },
    {
      "description": "Operations related to Integrations",
      "name": "Integrations"
    },
    {
      "description": "Operations related to Metrics \u0026 Reporting",
      "name": "Metrics/Reporting"
    },
    {
      "description": "Operations related to Retrospectives",
      "name": "Retrospectives"
    },
    {
      "description": "Operations related to Runbooks",
      "name": "Runbooks"
    },
    {
      "description": "Operations related to SCIM",
      "name": "SCIM"
    },
    {
      "description": "Operations related to Catalog Entries",
      "name": "Catalog Entries"
    },
    {
      "description": "Operations related to Signals",
      "name": "Signals"
    },
    {
      "description": "Operations related to Status Pages",
      "name": "Status Pages"
    },
    {
      "description": "Operations related to Tasks",
      "name": "Tasks"
    },
    {
      "description": "Operations related to Teams",
      "name": "Teams"
    },
    {
      "description": "Operations related to Ticketing",
      "name": "Ticketing"
    },
    {
      "description": "Operations related to Users",
      "name": "Users"
    },
    {
      "description": "Operations related to Webhooks",
      "name": "Webhooks"
    }
  ],
  "x-original-swagger-version": "2.0"
}