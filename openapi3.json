{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "FireHydrant API",
    "version" : "0.0.1"
  },
  "servers" : [ {
    "url" : "https://api.staging.firehydrant.io/"
  } ],
  "security" : [ {
    "api_key" : [ ]
  } ],
  "tags" : [ {
    "name" : "Call Routes",
    "description" : "Operations about Call Routes"
  }, {
    "name" : "Audit Events",
    "description" : "Operations about Audit Events"
  }, {
    "name" : "Account Settings",
    "description" : "Operations related to Account Settings"
  }, {
    "name" : "Alerts",
    "description" : "Operations related to Alerts"
  }, {
    "name" : "Audiences",
    "description" : "Operations related to Audiences"
  }, {
    "name" : "Changes",
    "description" : "Operations related to Changes"
  }, {
    "name" : "Communication",
    "description" : "Operations related to Communication"
  }, {
    "name" : "Conversations",
    "description" : "Operations related to Conversations"
  }, {
    "name" : "Incidents",
    "description" : "Operations related to Incidents"
  }, {
    "name" : "Incident Settings",
    "description" : "Operations related to Incident Settings"
  }, {
    "name" : "Integrations",
    "description" : "Operations related to Integrations"
  }, {
    "name" : "Metrics/Reporting",
    "description" : "Operations related to Metrics & Reporting"
  }, {
    "name" : "Retrospectives",
    "description" : "Operations related to Retrospectives"
  }, {
    "name" : "Runbooks",
    "description" : "Operations related to Runbooks"
  }, {
    "name" : "SCIM",
    "description" : "Operations related to SCIM"
  }, {
    "name" : "Catalog Entries",
    "description" : "Operations related to Catalog Entries"
  }, {
    "name" : "Signals",
    "description" : "Operations related to Signals"
  }, {
    "name" : "Status Pages",
    "description" : "Operations related to Status Pages"
  }, {
    "name" : "Tasks",
    "description" : "Operations related to Tasks"
  }, {
    "name" : "Teams",
    "description" : "Operations related to Teams"
  }, {
    "name" : "Ticketing",
    "description" : "Operations related to Ticketing"
  }, {
    "name" : "Users",
    "description" : "Operations related to Users"
  }, {
    "name" : "Webhooks",
    "description" : "Operations related to Webhooks"
  } ],
  "paths" : {
    "/v1/ping" : {
      "get" : {
        "tags" : [ "Account Settings" ],
        "summary" : "Check API connectivity",
        "description" : "Simple endpoint to verify your API connection is working",
        "operationId" : "ping",
        "responses" : {
          "200" : {
            "description" : "Simple endpoint to verify your API connection is working",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PongEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/environments" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "List environments",
        "description" : "List all of the environments that have been added to the organiation",
        "operationId" : "list_environments",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A query to search environments by their name or description",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "A query to search environments by their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the environments that have been added to the organiation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnvironmentEntryEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Create an environment",
        "description" : "Creates an environment for the organization",
        "operationId" : "create_environment",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_environment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Creates an environment for the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnvironmentEntryEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_environment"
      }
    },
    "/v1/environments/{environment_id}" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Get an environment",
        "description" : "Retrieves a single environment by ID",
        "operationId" : "get_environment",
        "parameters" : [ {
          "name" : "environment_id",
          "in" : "path",
          "description" : "Environment UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves a single environment by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnvironmentEntryEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Archive an environment",
        "description" : "Archive an environment",
        "operationId" : "delete_environment",
        "parameters" : [ {
          "name" : "environment_id",
          "in" : "path",
          "description" : "Environment UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Archive an environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnvironmentEntryEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Update an environment",
        "description" : "Update a environments attributes",
        "operationId" : "update_environment",
        "parameters" : [ {
          "name" : "environment_id",
          "in" : "path",
          "description" : "Environment UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_environment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a environments attributes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnvironmentEntryEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_environment"
      }
    },
    "/v1/services" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "List services",
        "description" : "List all of the services that have been added to the organization.",
        "operationId" : "list_services",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "labels",
          "in" : "query",
          "description" : "A comma separated list of label key / values in the format of 'key=value,key2=value2'. To filter change events that have a key (with no specific value), omit the value",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A query to search services by their name or description",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "A query to search services by their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tiers",
          "in" : "query",
          "description" : "A query to search services by their tier",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "impacted",
          "in" : "query",
          "description" : "A query to search services by if they are impacted with active incidents",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "A query to search services by their owner",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "responding_teams",
          "in" : "query",
          "description" : "A comma separated list of team ids",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "functionalities",
          "in" : "query",
          "description" : "A comma separated list of functionality ids",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "available_downstream_dependencies_for_id",
          "in" : "query",
          "description" : "A query to find services that are available to be downstream dependencies for the passed service ID",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "available_upstream_dependencies_for_id",
          "in" : "query",
          "description" : "A query to find services that are available to be upstream dependencies for the passed service ID",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "lite",
          "in" : "query",
          "description" : "Boolean to determine whether to return a slimified version of the services object",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Use in conjunction with lite param to specify additional attributes to include",
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the services that have been added to the organization.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Create a service",
        "description" : "Creates a service for the organization, you may also create or attach functionalities to the service on create.",
        "operationId" : "create_service",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_service"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Creates a service for the organization, you may also create or attach functionalities to the service on create.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_service"
      }
    },
    "/v1/services/service_links" : {
      "post" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Create multiple services linked to external services",
        "description" : "Creates a service with the appropriate integration for each external service ID passed",
        "operationId" : "create_service_links",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_service_links"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Creates a service with the appropriate integration for each external service ID passed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServiceLinkEntity"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_service_links"
      }
    },
    "/v1/services/{service_id}" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Get a service",
        "description" : "Retrieves a single service by ID",
        "operationId" : "get_service",
        "parameters" : [ {
          "name" : "service_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves a single service by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Delete a service",
        "description" : "Deletes the service from FireHydrant.",
        "operationId" : "delete_service",
        "parameters" : [ {
          "name" : "service_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes the service from FireHydrant.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Update a service",
        "description" : "Update a services attributes, you may also add or remove functionalities from the service as well.\nNote: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.\n",
        "operationId" : "update_service",
        "parameters" : [ {
          "name" : "service_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_service"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a services attributes, you may also add or remove functionalities from the service as well.\nNote: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_service"
      }
    },
    "/v1/services/{service_id}/dependencies" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "List dependencies for a service",
        "description" : "Retrieves a service's dependencies",
        "operationId" : "get_service_dependencies",
        "parameters" : [ {
          "name" : "service_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "flatten",
          "in" : "query",
          "description" : "If true, returns all dependencies in one array. If false, splits dependencies into different arrays for child and parent dependencies",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves a service's dependencies",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceWithAllDependenciesEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/{service_id}/available_upstream_dependencies" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "List available upstream service dependencies",
        "description" : "Retrieves all services that are available to be upstream dependencies",
        "operationId" : "list_service_available_upstream_dependencies",
        "parameters" : [ {
          "name" : "service_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves all services that are available to be upstream dependencies",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceEntityLite"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/{service_id}/available_downstream_dependencies" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "List available downstream service dependencies",
        "description" : "Retrieves all services that are available to be downstream dependencies",
        "operationId" : "list_service_available_downstream_dependencies",
        "parameters" : [ {
          "name" : "service_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves all services that are available to be downstream dependencies",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceEntityLite"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/{service_id}/service_links/{remote_id}" : {
      "delete" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Delete a service link",
        "description" : "Deletes a service link from FireHydrant.",
        "operationId" : "delete_service_link",
        "parameters" : [ {
          "name" : "service_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "remote_id",
          "in" : "path",
          "description" : "The external service ID which can be found in the JSON\nfrom GET services/:service_id endpoint under\nfunctionalities > external_resources > remote_id\n",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deletes a service link from FireHydrant.",
            "content" : { }
          }
        }
      }
    },
    "/v1/services/{service_id}/checklist_response/{checklist_id}" : {
      "post" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Record a response for a checklist item",
        "description" : "Creates a response for a checklist item",
        "operationId" : "create_service_checklist_response",
        "parameters" : [ {
          "name" : "service_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "checklist_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_service_checklist_response"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Creates a response for a checklist item",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "create_service_checklist_response"
      }
    },
    "/v1/service_dependencies" : {
      "post" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Create a service dependency",
        "description" : "Creates a service dependency relationship between two services",
        "operationId" : "create_service_dependency",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_service_dependency"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Creates a service dependency relationship between two services",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDependencyEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_service_dependency"
      }
    },
    "/v1/service_dependencies/{service_dependency_id}" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Get a service dependency",
        "description" : "Retrieves a single service dependency by ID",
        "operationId" : "get_service_dependency",
        "parameters" : [ {
          "name" : "service_dependency_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves a single service dependency by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDependencyEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Delete a service dependency",
        "description" : "Deletes a single service dependency",
        "operationId" : "delete_service_dependency",
        "parameters" : [ {
          "name" : "service_dependency_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes a single service dependency",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDependencyEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Update a service dependency",
        "description" : "Update the notes of the service dependency",
        "operationId" : "update_service_dependency",
        "parameters" : [ {
          "name" : "service_dependency_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_service_dependency"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update the notes of the service dependency",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDependencyEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_service_dependency"
      }
    },
    "/v1/functionalities" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "List functionalities",
        "description" : "List all of the functionalities that have been added to the organiation",
        "operationId" : "list_functionalities",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "A query to search functionalities by their name or description",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "A query to search functionalities by their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "impacted",
          "in" : "query",
          "description" : "A query to search services by if they are impacted with active incidents",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "labels",
          "in" : "query",
          "description" : "A comma separated list of label key / values in the format of 'key=value,key2=value2'. To filter change events that have a key (with no specific value), omit the value",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "A query to search functionalities by their owning team ID",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "lite",
          "in" : "query",
          "description" : "Boolean to determine whether to return a slimified version of the functionalities object",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the functionalities that have been added to the organiation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FunctionalityEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Create a functionality",
        "description" : "Creates a functionality for the organization",
        "operationId" : "create_functionality",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_functionality"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Creates a functionality for the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FunctionalityEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_functionality"
      }
    },
    "/v1/functionalities/{functionality_id}" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Get a functionality",
        "description" : "Retrieves a single functionality by ID",
        "operationId" : "get_functionality",
        "parameters" : [ {
          "name" : "functionality_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves a single functionality by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FunctionalityEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Archive a functionality",
        "description" : "Archive a functionality",
        "operationId" : "delete_functionality",
        "parameters" : [ {
          "name" : "functionality_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Archive a functionality",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FunctionalityEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Update a functionality",
        "description" : "Update a functionalities attributes",
        "operationId" : "update_functionality",
        "parameters" : [ {
          "name" : "functionality_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_functionality"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a functionalities attributes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FunctionalityEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_functionality"
      }
    },
    "/v1/functionalities/{functionality_id}/services" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "List services for a functionality",
        "description" : "List services for a functionality",
        "operationId" : "list_functionality_services",
        "parameters" : [ {
          "name" : "functionality_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List services for a functionality",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FunctionalityWithAllServicesEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams" : {
      "get" : {
        "tags" : [ "Teams" ],
        "summary" : "List teams",
        "description" : "List all of the teams in the organization",
        "operationId" : "list_teams",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A query to search teams by their name or description",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "A query to search teams by their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "services",
          "in" : "query",
          "description" : "A comma separated list of service IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "default_incident_role",
          "in" : "query",
          "description" : "Filter by teams that have or do not have members with a default incident role asssigned. Value may be 'present', 'blank', or the ID of an incident role.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "lite",
          "in" : "query",
          "description" : "Boolean to determine whether to return a slimified version of the teams object",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the teams in the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Teams" ],
        "summary" : "Create a team",
        "description" : "Create a new team",
        "operationId" : "create_team",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_team"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new team",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_team"
      }
    },
    "/v1/teams/{team_id}" : {
      "get" : {
        "tags" : [ "Teams" ],
        "summary" : "Get a team",
        "description" : "Retrieve a single team from its ID",
        "operationId" : "get_team",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lite",
          "in" : "query",
          "description" : "Boolean to determine whether to return a slimified version of the teams object",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single team from its ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Teams" ],
        "summary" : "Archive a team",
        "description" : "Archives an team which will hide it from lists and metrics",
        "operationId" : "delete_team",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Archives an team which will hide it from lists and metrics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Teams" ],
        "summary" : "Update a team",
        "description" : "Update a single team from its ID",
        "operationId" : "update_team",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_team"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a single team from its ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_team"
      }
    },
    "/v1/teams/{team_id}/call_routes" : {
      "get" : {
        "tags" : [ "Call Routes" ],
        "summary" : "List call routes for a team",
        "description" : "List call routes for a team",
        "operationId" : "list_team_call_routes",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List call routes for a team",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_CallRouteEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Call Routes" ],
        "summary" : "Create a call route for a team",
        "description" : "Create a call route for a team",
        "operationId" : "create_team_call_route",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_team_call_route"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a call route for a team",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_CallRouteEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_team_call_route"
      }
    },
    "/v1/teams/{team_id}/escalation_policies" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "List escalation policies for a team",
        "description" : "List all Signals escalation policies for a team.",
        "operationId" : "list_team_escalation_policies",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A query string for searching through the list of escalation policies.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all Signals escalation policies for a team.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_EscalationPolicyEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Signals" ],
        "summary" : "Create an escalation policy for a team",
        "description" : "Create a Signals escalation policy for a team.",
        "operationId" : "create_team_escalation_policy",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_team_escalation_policy"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a Signals escalation policy for a team.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_EscalationPolicyEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_team_escalation_policy"
      }
    },
    "/v1/teams/{team_id}/escalation_policies/{id}" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "Get an escalation policy for a team",
        "description" : "Get a Signals escalation policy by ID",
        "operationId" : "get_team_escalation_policy",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a Signals escalation policy by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_EscalationPolicyEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Signals" ],
        "summary" : "Delete an escalation policy for a team",
        "description" : "Delete a Signals escalation policy by ID",
        "operationId" : "delete_team_escalation_policy",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete a Signals escalation policy by ID",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Signals" ],
        "summary" : "Update an escalation policy for a team",
        "description" : "Update a Signals escalation policy by ID",
        "operationId" : "update_team_escalation_policy",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_team_escalation_policy"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a Signals escalation policy by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_EscalationPolicyEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_team_escalation_policy"
      }
    },
    "/v1/teams/{team_id}/on_call_schedules" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "List on-call schedules for a team",
        "description" : "List all Signals on-call schedules for a team.",
        "operationId" : "list_team_on_call_schedules",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "shift_time_window_start",
          "in" : "query",
          "description" : "An optional ISO8601 timestamp for filtering the shifts listed in each on-call schedule to only include shifts that overlap with the provided time window. If provided, only shifts that end at or after this time will be included.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "shift_time_window_end",
          "in" : "query",
          "description" : "An optional ISO8601 timestamp for filtering the shifts listed in each on-call schedule to only include shifts that overlap with the provided time window.. If provided, only shifts that start at or before this time will be included.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A query string for searching through the list of on-call schedules.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all Signals on-call schedules for a team.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_OnCallScheduleEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Signals" ],
        "summary" : "Create an on-call schedule for a team",
        "description" : "Create a Signals on-call schedule for a team with a single rotation. More rotations can be created later.",
        "operationId" : "create_team_on_call_schedule",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_team_on_call_schedule"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a Signals on-call schedule for a team with a single rotation. More rotations can be created later.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_OnCallScheduleEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_team_on_call_schedule"
      }
    },
    "/v1/teams/{team_id}/on_call_schedules/{schedule_id}" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "Get an on-call schedule for a team",
        "description" : "Get a Signals on-call schedule by ID",
        "operationId" : "get_team_on_call_schedule",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "schedule_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "shift_time_window_start",
          "in" : "query",
          "description" : "An optional ISO8601 timestamp for filtering the shifts listed in each on-call schedule to only include shifts that overlap with the provided time window. If provided, only shifts that end at or after this time will be included.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "shift_time_window_end",
          "in" : "query",
          "description" : "An optional ISO8601 timestamp for filtering the shifts listed in each on-call schedule to only include shifts that overlap with the provided time window.. If provided, only shifts that start at or before this time will be included.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a Signals on-call schedule by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_OnCallScheduleEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Signals" ],
        "summary" : "Delete an on-call schedule for a team",
        "description" : "Delete a Signals on-call schedule by ID",
        "operationId" : "delete_team_on_call_schedule",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "schedule_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete a Signals on-call schedule by ID",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Signals" ],
        "summary" : "Update an on-call schedule for a team",
        "description" : "Update a Signals on-call schedule by ID. For backwards compatibility, all parameters except for\n`name` and `description` will be ignored if the schedule has more than one rotation. If the schedule\nhas only one rotation, you can continue to update that rotation using the rotation-specific parameters.\n",
        "operationId" : "update_team_on_call_schedule",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "schedule_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_team_on_call_schedule"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a Signals on-call schedule by ID. For backwards compatibility, all parameters except for\n`name` and `description` will be ignored if the schedule has more than one rotation. If the schedule\nhas only one rotation, you can continue to update that rotation using the rotation-specific parameters.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_OnCallScheduleEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_team_on_call_schedule"
      }
    },
    "/v1/teams/{team_id}/on_call_schedules/{schedule_id}/shifts" : {
      "post" : {
        "tags" : [ "Signals" ],
        "summary" : "Create a shift for an on-call schedule",
        "description" : "Create a Signals on-call shift in a schedule.",
        "operationId" : "create_on_call_shift",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "schedule_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_on_call_shift"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a Signals on-call shift in a schedule.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_OnCallShiftEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_on_call_shift"
      }
    },
    "/v1/teams/{team_id}/on_call_schedules/{schedule_id}/shifts/{id}" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "Get an on-call shift for a team schedule",
        "description" : "Get a Signals on-call shift by ID",
        "operationId" : "get_on_call_shift",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "schedule_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a Signals on-call shift by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_OnCallShiftEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Signals" ],
        "summary" : "Delete an on-call shift from a team schedule",
        "description" : "Delete a Signals on-call shift by ID",
        "operationId" : "delete_on_call_shift",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "schedule_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete a Signals on-call shift by ID",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Signals" ],
        "summary" : "Update an on-call shift for a team schedule",
        "description" : "Update a Signals on-call shift by ID",
        "operationId" : "update_on_call_shift",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "schedule_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_on_call_shift"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a Signals on-call shift by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_OnCallShiftEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_on_call_shift"
      }
    },
    "/v1/teams/{team_id}/signal_rules" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "List Signals rules",
        "description" : "List all Signals rules for a team.",
        "operationId" : "list_team_signal_rules",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A query string for searching through the list of alerting rules.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all Signals rules for a team.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_RuleEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Signals" ],
        "summary" : "Create a Signals rule",
        "description" : "Create a Signals rule for a team.",
        "operationId" : "create_team_signal_rule",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_team_signal_rule"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a Signals rule for a team.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_RuleEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_team_signal_rule"
      }
    },
    "/v1/teams/{team_id}/signal_rules/{id}" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "Get a Signals rule",
        "description" : "Get a Signals rule by ID.",
        "operationId" : "get_team_signal_rule",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a Signals rule by ID.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_RuleEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Signals" ],
        "summary" : "Delete a Signals rule",
        "description" : "Delete a Signals rule by ID",
        "operationId" : "delete_team_signal_rule",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete a Signals rule by ID",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Signals" ],
        "summary" : "Update a Signals rule",
        "description" : "Update a Signals rule by ID",
        "operationId" : "update_team_signal_rule",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_team_signal_rule"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a Signals rule by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_RuleEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_team_signal_rule"
      }
    },
    "/v1/changes" : {
      "get" : {
        "tags" : [ "Changes" ],
        "summary" : "List changes",
        "description" : "List changes for the organization",
        "operationId" : "list_changes",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Filter changes by summary",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List changes for the organization",
            "content" : { }
          }
        }
      },
      "post" : {
        "tags" : [ "Changes" ],
        "summary" : "Create a new change entry",
        "description" : "Create a new change entry",
        "operationId" : "create_change",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_change"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new change entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_change"
      }
    },
    "/v1/changes/{change_id}" : {
      "delete" : {
        "tags" : [ "Changes" ],
        "summary" : "Archive a change entry",
        "description" : "Archive a change entry",
        "operationId" : "delete_change",
        "parameters" : [ {
          "name" : "change_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Archive a change entry",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Changes" ],
        "summary" : "Update a change entry",
        "description" : "Update a change entry",
        "operationId" : "update_change",
        "parameters" : [ {
          "name" : "change_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_change"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a change entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_change"
      }
    },
    "/v1/changes/{change_id}/identities" : {
      "get" : {
        "tags" : [ "Changes" ],
        "summary" : "List identities for a change entry",
        "description" : "Retrieve all identities for the change entry",
        "operationId" : "list_change_identities",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "change_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve all identities for the change entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeIdentityEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Changes" ],
        "summary" : "Create an identity for a change entry",
        "description" : "Create an identity for the change entry",
        "operationId" : "create_change_identity",
        "parameters" : [ {
          "name" : "change_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_change_identity"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create an identity for the change entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeIdentityEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_change_identity"
      }
    },
    "/v1/changes/{change_id}/identities/{identity_id}" : {
      "delete" : {
        "tags" : [ "Changes" ],
        "summary" : "Delete an identity from a change entry",
        "description" : "Delete an identity from the change entry",
        "operationId" : "delete_change_identity",
        "parameters" : [ {
          "name" : "identity_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "change_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete an identity from the change entry",
            "content" : { }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Changes" ],
        "summary" : "Update an identity for a change entry",
        "description" : "Update an identity for the change entry",
        "operationId" : "update_change_identity",
        "parameters" : [ {
          "name" : "identity_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "change_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_change_identity"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update an identity for the change entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeIdentityEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_change_identity"
      }
    },
    "/v1/changes/events" : {
      "get" : {
        "tags" : [ "Changes" ],
        "summary" : "List change events",
        "description" : "List change events for the organization. Note: Not all information is included on a change event like attachments and related changes. You must fetch a change event separately to retrieve all of the information about it",
        "operationId" : "list_change_events",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "saved_search_id",
          "in" : "query",
          "description" : "The id of a previously saved search.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A text query for change events",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "labels",
          "in" : "query",
          "description" : "A comma separated list of label key / values in the format of \"key=value,key2=value2\". To filter change events that have a key (with no specific value), omit the value",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "environments",
          "in" : "query",
          "description" : "A comma separated list of environment IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "services",
          "in" : "query",
          "description" : "A comma separated list of service IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "starts_at",
          "in" : "query",
          "description" : "The start time to start returning change events from",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "ends_at",
          "in" : "query",
          "description" : "The end time to return change events up to",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List change events for the organization. Note: Not all information is included on a change event like attachments and related changes. You must fetch a change event separately to retrieve all of the information about it",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEventSlimEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Changes" ],
        "summary" : "Create a change event",
        "description" : "Create a change event",
        "operationId" : "create_change_event",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_change_event"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a change event",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEventEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_change_event"
      }
    },
    "/v1/changes/events/{change_event_id}" : {
      "get" : {
        "tags" : [ "Changes" ],
        "summary" : "Get a change event",
        "description" : "Retrieve a change event",
        "operationId" : "get_change_event",
        "parameters" : [ {
          "name" : "change_event_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a change event",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEventEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Changes" ],
        "summary" : "Delete a change event",
        "description" : "Delete a change event",
        "operationId" : "delete_change_event",
        "parameters" : [ {
          "name" : "change_event_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete a change event",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Changes" ],
        "summary" : "Update a change event",
        "description" : "Update a change event",
        "operationId" : "update_change_event",
        "parameters" : [ {
          "name" : "change_event_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_change_event"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a change event",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEventEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_change_event"
      }
    },
    "/v1/change_types" : {
      "get" : {
        "tags" : [ "Changes" ],
        "summary" : "List change types",
        "description" : "List change types for the organization",
        "operationId" : "list_change_types",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List change types for the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeTypeEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/entitlements" : {
      "get" : {
        "tags" : [ "Account Settings" ],
        "summary" : "List entitlements",
        "description" : "List the organization's entitlements",
        "operationId" : "list_entitlements",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Name of Entitlement",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Type of Entitlement",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "quota", "access" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List the organization's entitlements",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntitlementEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "List incidents",
        "description" : "List all of the incidents in the organization",
        "operationId" : "list_incidents",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "conditions",
          "in" : "query",
          "description" : "A JSON string that defines 'logic' and 'user_data'",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "environments",
          "in" : "query",
          "description" : "A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "services",
          "in" : "query",
          "description" : "A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "functionalities",
          "in" : "query",
          "description" : "A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "excluded_infrastructure_ids",
          "in" : "query",
          "description" : "A comma separated list of infrastructure IDs. Returns incidents that do not have the following infrastructure ids associated with them.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "teams",
          "in" : "query",
          "description" : "A comma separated list of team IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "assigned_teams",
          "in" : "query",
          "description" : "A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Incident status",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "Filters for incidents that started on or after this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "Filters for incidents that started on or before this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "resolved_at_or_after",
          "in" : "query",
          "description" : "Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "resolved_at_or_before",
          "in" : "query",
          "description" : "Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "closed_at_or_after",
          "in" : "query",
          "description" : "Filters for incidents that were closed at or after this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "closed_at_or_before",
          "in" : "query",
          "description" : "Filters for incidents that were closed at or before this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "created_at_or_after",
          "in" : "query",
          "description" : "Filters for incidents that were created at or after this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "created_at_or_before",
          "in" : "query",
          "description" : "Filters for incidents that were created at or before this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A text query for an incident that searches on name, summary, and desciption",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "A query to search incidents by their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "saved_search_id",
          "in" : "query",
          "description" : "The id of a previously saved search.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "priorities",
          "in" : "query",
          "description" : "A text value of priority",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "priority_not_set",
          "in" : "query",
          "description" : "Flag for including incidents where priority has not been set",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "severities",
          "in" : "query",
          "description" : "A text value of severity",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "severity_not_set",
          "in" : "query",
          "description" : "Flag for including incidents where severity has not been set",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "current_milestones",
          "in" : "query",
          "description" : "A comma separated list of current milestones",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "A comma separated list of tags",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tag_match_strategy",
          "in" : "query",
          "description" : "A matching strategy for the tags provided",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "any", "match_all", "exclude" ]
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Return archived incidents",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "updated_after",
          "in" : "query",
          "description" : "Filters for incidents that were updated after this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updated_before",
          "in" : "query",
          "description" : "Filters for incidents that were updated before this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "incident_type_id",
          "in" : "query",
          "description" : "A comma separated list of incident type IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "retrospective_templates",
          "in" : "query",
          "description" : "A comma separated list of retrospective template IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the incidents in the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "Create an incident",
        "description" : "Create a new incident",
        "operationId" : "create_incident",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_incident"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_incident"
      }
    },
    "/v1/incidents/{incident_id}/channel" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "Get chat channel information for an incident",
        "description" : "Gives chat channel information for the specified incident",
        "operationId" : "get_incident_channel",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Gives chat channel information for the specified incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_ChannelEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/close" : {
      "put" : {
        "tags" : [ "Incidents" ],
        "summary" : "Close an incident",
        "description" : "Closes an incident and optionally close all children",
        "operationId" : "close_incident",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Closes an incident and optionally close all children",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/resolve" : {
      "put" : {
        "tags" : [ "Incidents" ],
        "summary" : "Resolve an incident",
        "description" : "Resolves a currently active incident",
        "operationId" : "resolve_incident",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "milestone" : {
                    "type" : "string",
                    "description" : "The slug of any milestone in the post-incident or closed phase to set on the incident (and its children, if `resolve_children` os set). Must be one of the configured milestones available on this incident.",
                    "nullable" : true
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resolves a currently active incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "Get an incident",
        "description" : "Retrieve a single incident from its ID",
        "operationId" : "get_incident",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single incident from its ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Incidents" ],
        "summary" : "Archive an incident",
        "description" : "Archives an incident which will hide it from lists and metrics",
        "operationId" : "delete_incident",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Archives an incident which will hide it from lists and metrics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incidents" ],
        "summary" : "Update an incident",
        "description" : "Updates an incident with provided parameters",
        "operationId" : "update_incident",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_incident"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updates an incident with provided parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_incident"
      }
    },
    "/v1/incidents/{incident_id}/unarchive" : {
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "Unarchive an incident",
        "description" : "Unarchive an incident",
        "operationId" : "unarchive_incident",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Unarchive an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/alerts" : {
      "get" : {
        "tags" : [ "Alerts" ],
        "summary" : "List alerts for an incident",
        "description" : "List alerts that have been attached to an incident",
        "operationId" : "list_incident_alerts",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List alerts that have been attached to an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_AlertEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Alerts" ],
        "summary" : "Attach an alert to an incident",
        "description" : "Add an alert to an incident. FireHydrant needs to have ingested the alert from a third party system in order to attach it to the incident.",
        "operationId" : "create_incident_alert",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Array of alert IDs to be assigned to the incident",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Add an alert to an incident. FireHydrant needs to have ingested the alert from a third party system in order to attach it to the incident.",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "alert_ids"
      }
    },
    "/v1/incidents/{incident_id}/alerts/{incident_alert_id}/primary" : {
      "patch" : {
        "tags" : [ "Alerts" ],
        "summary" : "Set an alert as primary for an incident",
        "description" : "Setting an alert as primary will overwrite milestone times in the FireHydrant incident with times included in the primary alert. Services attached to the primary alert will also be automatically added to the incident.",
        "operationId" : "update_incident_alert_primary",
        "parameters" : [ {
          "name" : "incident_alert_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_incident_alert_primary"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Setting an alert as primary will overwrite milestone times in the FireHydrant incident with times included in the primary alert. Services attached to the primary alert will also be automatically added to the incident.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_AlertEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_incident_alert_primary"
      }
    },
    "/v1/incidents/{incident_id}/alerts/{incident_alert_id}" : {
      "delete" : {
        "tags" : [ "Alerts" ],
        "summary" : "Remove an alert from an incident",
        "description" : "Remove an alert from an incident",
        "operationId" : "delete_incident_alert",
        "parameters" : [ {
          "name" : "incident_alert_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Remove an alert from an incident",
            "content" : { }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/milestones/bulk_update" : {
      "put" : {
        "tags" : [ "Incidents" ],
        "summary" : "Update milestone times",
        "description" : "Update milestone times in bulk for a given incident. All milestone\ntimes for an incident must occur in chronological order\ncorresponding to the configured order of milestones. If the result\nof this request would cause any milestone(s) to appear out of place,\na 422 response will instead be returned. This includes milestones\nnot explicitly submitted or updated in this request.\n",
        "operationId" : "bulk_update_incident_milestones",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/bulk_update_incident_milestones"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update milestone times in bulk for a given incident. All milestone\ntimes for an incident must occur in chronological order\ncorresponding to the configured order of milestones. If the result\nof this request would cause any milestone(s) to appear out of place,\na 422 response will instead be returned. This includes milestones\nnot explicitly submitted or updated in this request.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_MilestoneEntityPaginated"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "bulk_update_incident_milestones"
      }
    },
    "/v1/incidents/{incident_id}/milestones" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "List incident milestones",
        "description" : "List times and durations for each milestone on an incident",
        "operationId" : "list_incident_milestones",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List times and durations for each milestone on an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_MilestoneEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/related_change_events" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "List related changes on an incident",
        "description" : "List related changes that have been attached to an incident",
        "operationId" : "list_incident_change_events",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type of the relation to the incident",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "caused", "fixed", "suspect", "dismissed" ]
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List related changes that have been attached to an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RelatedChangeEventEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "Add a related change to an incident",
        "description" : "Add a related change to an incident. Changes added to an incident can be causes, fixes, or suspects. To remove a change from an incident, the type field should be set to dismissed.",
        "operationId" : "create_incident_change_event",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_incident_change_event"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Add a related change to an incident. Changes added to an incident can be causes, fixes, or suspects. To remove a change from an incident, the type field should be set to dismissed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RelatedChangeEventEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "409" : {
            "description" : "Already Added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_incident_change_event"
      }
    },
    "/v1/incidents/{incident_id}/related_change_events/{related_change_event_id}" : {
      "patch" : {
        "tags" : [ "Incidents" ],
        "summary" : "Update a change attached to an incident",
        "description" : "Update a change attached to an incident",
        "operationId" : "update_incident_change_event",
        "parameters" : [ {
          "name" : "related_change_event_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_incident_change_event"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a change attached to an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RelatedChangeEventEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "409" : {
            "description" : "Already Added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_incident_change_event"
      }
    },
    "/v1/incidents/{incident_id}/status_pages" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "List status pages for an incident",
        "description" : "List status pages that are attached to an incident",
        "operationId" : "list_incident_status_pages",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List status pages that are attached to an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_StatusPageEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "Add a status page to an incident",
        "description" : "Add a status page to an incident.",
        "operationId" : "create_incident_status_page",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_incident_status_page"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Add a status page to an incident.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_StatusPageEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_incident_status_page"
      }
    },
    "/v1/incidents/{incident_id}/status_pages/{status_page_id}" : {
      "delete" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Remove a status page from an incident",
        "description" : "Remove a status page incident attached to an incident",
        "operationId" : "delete_incident_status_page",
        "parameters" : [ {
          "name" : "status_page_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Remove a status page incident attached to an incident",
            "content" : { }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/task_lists" : {
      "post" : {
        "tags" : [ "Tasks" ],
        "summary" : "Add tasks from a task list to an incident",
        "description" : "Add all tasks from list to incident",
        "operationId" : "create_incident_task_list",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_incident_task_list"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Add all tasks from list to incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_incident_task_list"
      }
    },
    "/v1/incidents/{incident_id}/tasks" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "List tasks for an incident",
        "description" : "Retrieve a list of all tasks for a specific incident",
        "operationId" : "list_incident_tasks",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a list of all tasks for a specific incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Tasks" ],
        "summary" : "Create an incident task",
        "description" : "Create a task",
        "operationId" : "create_incident_task",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_incident_task"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a task",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_incident_task"
      }
    },
    "/v1/incidents/{incident_id}/tasks/{task_id}" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Get an incident task",
        "description" : "Retrieve a single task for an incident",
        "operationId" : "get_incident_task",
        "parameters" : [ {
          "name" : "task_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single task for an incident",
            "content" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "Tasks" ],
        "summary" : "Delete an incident task",
        "description" : "Delete a task",
        "operationId" : "delete_incident_task",
        "parameters" : [ {
          "name" : "task_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete a task",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Tasks" ],
        "summary" : "Update an incident task",
        "description" : "Update a task's attributes",
        "operationId" : "update_incident_task",
        "parameters" : [ {
          "name" : "task_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_incident_task"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a task's attributes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_incident_task"
      }
    },
    "/v1/incidents/{incident_id}/tasks/{task_id}/convert" : {
      "post" : {
        "tags" : [ "Tasks" ],
        "summary" : "Convert a task to a follow-up",
        "description" : "Convert a task to a follow-up",
        "operationId" : "convert_incident_task",
        "parameters" : [ {
          "name" : "task_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/convert_incident_task"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Convert a task to a follow-up",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskEntityPaginated"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "convert_incident_task"
      }
    },
    "/v1/incidents/{incident_id}/links" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "List links on an incident",
        "description" : "List all the editable, external incident links attached to an incident",
        "operationId" : "list_incident_links",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all the editable, external incident links attached to an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Attachments_LinkEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "Add a link to an incident",
        "description" : "Allows adding adhoc links to an incident as an attachment",
        "operationId" : "create_incident_link",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_incident_link"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Allows adding adhoc links to an incident as an attachment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Attachments_LinkEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_incident_link"
      }
    },
    "/v1/incidents/{incident_id}/links/{link_id}" : {
      "put" : {
        "tags" : [ "Incidents" ],
        "summary" : "Update the external incident link",
        "description" : "Update the external incident link attributes",
        "operationId" : "update_incident_link",
        "parameters" : [ {
          "name" : "link_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_incident_link"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update the external incident link attributes",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "update_incident_link"
      },
      "delete" : {
        "tags" : [ "Incidents" ],
        "summary" : "Remove a link from an incident",
        "description" : "Remove a link from an incident",
        "operationId" : "delete_incident_link",
        "parameters" : [ {
          "name" : "link_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Remove a link from an incident",
            "content" : { }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/transcript/attribution" : {
      "put" : {
        "tags" : [ "Incidents" ],
        "summary" : "Update the attribution of a transcript",
        "description" : "Update the attribution of a transcript",
        "operationId" : "update_transcript_attribution",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "to_user_id" ],
                "type" : "object",
                "properties" : {
                  "from_speaker" : {
                    "type" : "string",
                    "description" : "The speaker to attribute the transcript to.",
                    "nullable" : true
                  },
                  "from_user_id" : {
                    "type" : "string",
                    "description" : "The user to attribute the transcript to.",
                    "nullable" : true
                  },
                  "to_user_id" : {
                    "type" : "string",
                    "description" : "The ID of the user to attribute the transcript to."
                  },
                  "transcript_id" : {
                    "type" : "string",
                    "description" : "The ID of the specific transcript entry to change attribution for.",
                    "nullable" : true
                  },
                  "conference_bridge_id" : {
                    "type" : "string",
                    "description" : "The ID of the conference bridge to attribute the transcript to.",
                    "nullable" : true
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update the attribution of a transcript",
            "content" : { }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/transcript" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "Lists all of the messages in the incident's transcript",
        "description" : "Retrieve the transcript for a specific incident",
        "operationId" : "list_transcript_entries",
        "parameters" : [ {
          "name" : "after",
          "in" : "query",
          "description" : "The ID of the transcript entry to start after.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "The ID of the transcript entry to start before.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The order to sort the transcript entries.",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "asc", "desc" ],
            "default" : "asc"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve the transcript for a specific incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PublicAPI_V1_Incidents_TranscriptEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/transcript/{transcript_id}" : {
      "delete" : {
        "tags" : [ "Incidents" ],
        "summary" : "Delete a transcript from an incident",
        "description" : "Delete a transcript from an incident",
        "operationId" : "delete_transcript_entry",
        "parameters" : [ {
          "name" : "transcript_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a transcript from an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PublicAPI_V1_Incidents_TranscriptEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/conference_bridges" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "Retrieve all conference bridges for an incident",
        "description" : "Retrieve all conference bridges for an incident",
        "operationId" : "list_incident_conference_bridges",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve all conference bridges for an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_ConferenceBridgeEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/conference_bridges/{id}/translations/{language_code}" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "Retrieve the translations for a specific conference bridge",
        "description" : "Retrieve the translations for a specific conference bridge",
        "operationId" : "get_conference_bridge_translation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the conference bridge",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "language_code",
          "in" : "path",
          "description" : "The language code of the translation",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve the translations for a specific conference bridge",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_ConferenceBridgeEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/similar" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "List similar incidents",
        "description" : "Retrieve a list of similar incidents",
        "operationId" : "list_similar_incidents",
        "parameters" : [ {
          "name" : "threshold",
          "in" : "query",
          "schema" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true,
            "default" : 0.2
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true,
            "default" : 5
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a list of similar incidents",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimilarIncidentEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/attachments" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "List attachments for an incident",
        "description" : "List attachments for an incident",
        "operationId" : "list_incident_attachments",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attachable_type",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List attachments for an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Attachments_TypedAttachmentEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "Add an attachment to the incident timeline",
        "description" : "Allows adding image attachments to an incident",
        "operationId" : "create_incident_attachment",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "required" : [ "file" ],
                "type" : "object",
                "properties" : {
                  "file" : {
                    "type" : "string",
                    "format" : "binary"
                  },
                  "description" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "occurred_at" : {
                    "type" : "string",
                    "format" : "date-time",
                    "nullable" : true
                  },
                  "vote_direction" : {
                    "type" : "string",
                    "nullable" : true,
                    "enum" : [ "up", "down" ]
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Allows adding image attachments to an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentAttachmentEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/events" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "List events for an incident",
        "description" : "List all events for an incident. An event is a timeline entry. This can be filtered with params to retrieve events of a certain type.",
        "operationId" : "list_incident_events",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "types",
          "in" : "query",
          "description" : "A comma separated list of types of events to filter by. Possible values are:\n - `add_task_list`: Task list was added\n - `alert_event`: Someone was paged or took action on a linked alert\n - `alert_linked`: An alert was linked to the incident\n - `bulk_milestone_update`: When a milestone change occurs with no other changes\n - `bulk_update`: When an incident note/update is posted or when impacted components are updated. If other changes occur together with either of these changes (e.g., milestone change), they are all bundled together into a bulk_update\n - `change_type`: Updates to associated change events\n - `chat_message`: Any chat message event in a linked chat app like Slack or MS Teams\n - `children_changed`: When adding or updating child related incidents\n - `external_link`: When an external link is added or updated\n - `general_update`: Currently only describes Runbook stoppage events\n - `generic_chat_message`: When an event or message is manually added to the timeline via the web UI or API\n - `incident_attachment`: When attachments or files are added to the timeline\n - `generic_resource_change`: Any changes to individual fields within the incident, including custom fields\n - `incident_restriction`: When an incident is converted to private\n - `incident_status`: Only used when an incident starts and changes to an `active` state\n - `note`: When a message is posted to a status page directly and not via `/fh update`\n - `role_update`: Any updates to assigned roles\n - `runbook_attachment`: Any updates to a runbook\n - `runbook_step_execution_update`: Any Runbook step events\n - `task_update`: Task update events\n - `team_assignment`: Team assignment events\n - `ticket_update`: Updates to incident and follow-up tickets",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all events for an incident. An event is a timeline entry. This can be filtered with params to retrieve events of a certain type.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEventEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/events/{event_id}" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "Get an incident event",
        "description" : "Retrieve a single event for an incident",
        "operationId" : "get_incident_event",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "event_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single event for an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEventEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Incidents" ],
        "summary" : "Delete an incident event",
        "description" : "Delete an event for an incident",
        "operationId" : "delete_incident_event",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "event_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete an event for an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEventEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incidents" ],
        "summary" : "Update an incident event",
        "description" : "Update a single event for an incident",
        "operationId" : "update_incident_event",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "event_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Update a single event for an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEventEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/events/{event_id}/votes/status" : {
      "get" : {
        "tags" : [ "Conversations" ],
        "summary" : "Get votes",
        "description" : "Get an object's current vote counts",
        "operationId" : "get_vote_status",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "event_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get an object's current vote counts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VotesEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/events/{event_id}/votes" : {
      "patch" : {
        "tags" : [ "Conversations" ],
        "summary" : "Update votes",
        "description" : "Upvote or downvote an object",
        "operationId" : "update_vote",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "event_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_vote"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Upvote or downvote an object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VotesEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_vote"
      }
    },
    "/v1/incidents/{incident_id}/impact" : {
      "put" : {
        "tags" : [ "Incidents" ],
        "summary" : "Update impacts for an incident",
        "description" : "Allows updating an incident's impacted infrastructure, with the option to\nmove the incident into a different milestone and provide a note to update\nthe incident timeline and any attached status pages. If this method is\nrequested with the PUT verb, impacts will be completely replaced with the\ninformation in the request body, even if not provided (effectively clearing\nall impacts). If this method is requested with the PATCH verb, the provided\nimpacts will be added or updated, but no impacts will be removed.\n",
        "operationId" : "update_incident_impact_put",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_incident_impact_put"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Allows updating an incident's impacted infrastructure, with the option to\nmove the incident into a different milestone and provide a note to update\nthe incident timeline and any attached status pages. If this method is\nrequested with the PUT verb, impacts will be completely replaced with the\ninformation in the request body, even if not provided (effectively clearing\nall impacts). If this method is requested with the PATCH verb, the provided\nimpacts will be added or updated, but no impacts will be removed.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_incident_impact_put"
      },
      "patch" : {
        "tags" : [ "Incidents" ],
        "summary" : "Update impacts for an incident",
        "description" : "Allows updating an incident's impacted infrastructure, with the option to\nmove the incident into a different milestone and provide a note to update\nthe incident timeline and any attached status pages. If this method is\nrequested with the PUT verb, impacts will be completely replaced with the\ninformation in the request body, even if not provided (effectively clearing\nall impacts). If this method is requested with the PATCH verb, the provided\nimpacts will be added or updated, but no impacts will be removed.\n",
        "operationId" : "update_incident_impact_patch",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_incident_impact_patch"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Allows updating an incident's impacted infrastructure, with the option to\nmove the incident into a different milestone and provide a note to update\nthe incident timeline and any attached status pages. If this method is\nrequested with the PUT verb, impacts will be completely replaced with the\ninformation in the request body, even if not provided (effectively clearing\nall impacts). If this method is requested with the PATCH verb, the provided\nimpacts will be added or updated, but no impacts will be removed.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_incident_impact_patch"
      }
    },
    "/v1/incidents/{incident_id}/impact/{type}" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "List impacted infrastructure for an incident",
        "description" : "List impacted infrastructure on an incident by specifying type",
        "operationId" : "list_incident_impacts",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "environments", "functionalities", "services", "customers" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List impacted infrastructure on an incident by specifying type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentImpactEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "Add impacted infrastructure to an incident",
        "description" : "Add impacted infrastructure to an incident",
        "operationId" : "create_incident_impact",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "environments", "functionalities", "services", "customers" ]
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_incident_impact"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Add impacted infrastructure to an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentImpactEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_incident_impact"
      }
    },
    "/v1/incidents/{incident_id}/impact/{type}/{id}" : {
      "delete" : {
        "tags" : [ "Incidents" ],
        "summary" : "Remove impacted infrastructure from an incident",
        "description" : "Remove impacted infrastructure from an incident",
        "operationId" : "delete_incident_impact",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "environments", "functionalities", "services", "customers" ]
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Remove impacted infrastructure from an incident",
            "content" : { }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/notes" : {
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "Add a note to an incident",
        "description" : "Create a new note on for an incident. The visibility field on a note determines where it gets posted.",
        "operationId" : "create_incident_note",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_incident_note"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new note on for an incident. The visibility field on a note determines where it gets posted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event_NoteEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_incident_note"
      }
    },
    "/v1/incidents/{incident_id}/notes/{note_id}" : {
      "patch" : {
        "tags" : [ "Incidents" ],
        "summary" : "Update a note",
        "description" : "Updates the body of a note",
        "operationId" : "update_incident_note",
        "parameters" : [ {
          "name" : "note_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_incident_note"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updates the body of a note",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event_NoteEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_incident_note"
      }
    },
    "/v1/incidents/{incident_id}/generic_chat_messages" : {
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "Add a chat message to an incident",
        "description" : "Create a new generic chat message on an incident timeline. These are independent of any specific chat provider.",
        "operationId" : "create_incident_chat_message",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_incident_chat_message"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new generic chat message on an incident timeline. These are independent of any specific chat provider.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event_GenericChatMessageEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_incident_chat_message"
      }
    },
    "/v1/incidents/{incident_id}/generic_chat_messages/{message_id}" : {
      "delete" : {
        "tags" : [ "Incidents" ],
        "summary" : "Delete a chat message from an incident",
        "description" : "Delete an existing generic chat message on an incident.",
        "operationId" : "delete_incident_chat_message",
        "parameters" : [ {
          "name" : "message_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete an existing generic chat message on an incident.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event_GenericChatMessageEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incidents" ],
        "summary" : "Update a chat message on an incident",
        "description" : "Update an existing generic chat message on an incident.",
        "operationId" : "update_incident_chat_message",
        "parameters" : [ {
          "name" : "message_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_incident_chat_message"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update an existing generic chat message on an incident.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event_GenericChatMessageEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_incident_chat_message"
      }
    },
    "/v1/incidents/{incident_id}/role_assignments" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "List incident assignees",
        "description" : "Retrieve a list of all of the current role assignments for the incident",
        "operationId" : "list_incident_role_assignments",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Filter on status of the role assignment",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "active", "inactive" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a list of all of the current role assignments for the incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RoleAssignmentEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "Assign a user to an incident",
        "description" : "Assign a role to a user for this incident",
        "operationId" : "create_incident_role_assignment",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_incident_role_assignment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Assign a role to a user for this incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RoleAssignmentEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_incident_role_assignment"
      }
    },
    "/v1/incidents/{incident_id}/role_assignments/{role_assignment_id}" : {
      "delete" : {
        "tags" : [ "Incidents" ],
        "summary" : "Unassign a user from an incident",
        "description" : "Unassign a role from a user",
        "operationId" : "delete_incident_role_assignment",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "role_assignment_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Unassign a role from a user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RoleAssignmentEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/team_assignments" : {
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "Assign a team to an incident",
        "description" : "Assign a team for this incident",
        "operationId" : "create_incident_team_assignment",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_incident_team_assignment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Assign a team for this incident",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "create_incident_team_assignment"
      }
    },
    "/v1/incidents/{incident_id}/team_assignments/{team_assignment_id}" : {
      "delete" : {
        "tags" : [ "Incidents" ],
        "summary" : "Unassign a team from an incident",
        "description" : "Unassign a team from an incident",
        "operationId" : "delete_incident_team_assignment",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "team_assignment_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "role_assignment_ids" : {
                    "type" : "array",
                    "description" : "Team role assignments to unassign from the incident",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Unassign a team from an incident",
            "content" : { }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/users/{user_id}" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "Get the current user's incident role",
        "description" : "Retrieve a user with current roles for an incident",
        "operationId" : "get_incident_user",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "user_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a user with current roles for an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RoleAssignmentEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/relationships" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "List incident relationships",
        "description" : "List any parent/child relationships for an incident",
        "operationId" : "get_incident_relationships",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List any parent/child relationships for an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RelationshipsEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/retrospectives/share" : {
      "post" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Share an incident's retrospective",
        "description" : "Share incident retrospectives with users or teams",
        "operationId" : "share_incident_retrospectives",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "retrospective_ids" ],
                "type" : "object",
                "properties" : {
                  "user_ids" : {
                    "type" : "array",
                    "description" : "An array of user IDs with whom to share the report",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "team_ids" : {
                    "type" : "array",
                    "description" : "An array of team IDs with whom to share the report",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "retrospective_ids" : {
                    "type" : "array",
                    "description" : "An array of retrospective IDs to share",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Share incident retrospectives with users or teams",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_ShareRetrospectivesResultEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/retrospectives/export" : {
      "post" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Export an incident's retrospective(s)",
        "description" : "Export incident's retrospective(s) using their templates",
        "operationId" : "export_incident_retrospectives",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "integration_slug" ],
                "type" : "object",
                "properties" : {
                  "integration_slug" : {
                    "type" : "string",
                    "description" : "The name of the integration to export the retrospective to.",
                    "enum" : [ "confluence_cloud", "google_docs" ]
                  },
                  "parent_page_id" : {
                    "type" : "string",
                    "description" : "The ID of the parent page to export the retrospective to.",
                    "nullable" : true
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Export incident's retrospective(s) using their templates",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_ExportRetrospectivesResultEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/retrospectives" : {
      "get" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "All attached retrospectives for an incident",
        "description" : "Retrieve retrospectives attached to an incident",
        "operationId" : "list_incident_retrospectives",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "is_hidden",
          "in" : "query",
          "description" : "Filter by hidden status.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve retrospectives attached to an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RetrospectiveEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Create a new retrospective on the incident using the template",
        "description" : "Create a new retrospective for an incident",
        "operationId" : "create_incident_retrospective",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "retrospective_template_id" ],
                "type" : "object",
                "properties" : {
                  "retrospective_template_id" : {
                    "type" : "string",
                    "description" : "The id of the retrospective template to apply."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new retrospective for an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RetrospectiveEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}" : {
      "patch" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Update a retrospective on the incident",
        "description" : "Update a retrospective attached to an incident",
        "operationId" : "update_incident_retrospective",
        "parameters" : [ {
          "name" : "retrospective_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_incident_retrospective"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a retrospective attached to an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RetrospectiveEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_incident_retrospective"
      }
    },
    "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields" : {
      "patch" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Appends a new incident retrospective field to an incident retrospective",
        "description" : "Add a new field to an incident retrospective",
        "operationId" : "create_incident_retrospective_field",
        "parameters" : [ {
          "name" : "retrospective_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "label", "type" ],
                "type" : "object",
                "properties" : {
                  "label" : {
                    "type" : "string"
                  },
                  "type" : {
                    "type" : "string",
                    "enum" : [ "text", "single_select", "multi_select", "numeric", "datetime", "dynamic_input_group", "markdown", "markdown_text" ]
                  },
                  "help_text" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "permissible_values" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "is_required" : {
                    "type" : "boolean",
                    "nullable" : true
                  },
                  "schema" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Add a new field to an incident retrospective",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RetrospectiveFieldEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields/{field_id}" : {
      "get" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Get a retrospective field",
        "description" : "Retrieve a field on an incident retrospective",
        "operationId" : "get_incident_retrospective_field",
        "parameters" : [ {
          "name" : "retrospective_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "field_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a field on an incident retrospective",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RetrospectiveFieldEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Update the value on a retrospective field",
        "description" : "Update retrospective field value",
        "operationId" : "update_incident_retrospective_field",
        "parameters" : [ {
          "name" : "retrospective_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "field_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_incident_retrospective_field"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update retrospective field value",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RetrospectiveFieldEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_incident_retrospective_field"
      }
    },
    "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields/{field_id}/inputs" : {
      "post" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Add a new dynamic input field to a retrospective's dynamic input group field",
        "description" : "Add a new dynamic input field to a dynamic input group",
        "operationId" : "create_incident_retrospective_dynamic_input",
        "parameters" : [ {
          "name" : "retrospective_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "field_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Add a new dynamic input field to a dynamic input group",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RetrospectiveFieldEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Removes a dynamic input from a retrospective's dynamic input group field",
        "description" : "Delete a dynamic input on a dynamic input group",
        "operationId" : "delete_incident_retrospective_dynamic_input",
        "parameters" : [ {
          "name" : "retrospective_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "field_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dynamic_input_field_id",
          "in" : "query",
          "description" : "The ID of the dynamic input field to delete.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a dynamic input on a dynamic input group",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RetrospectiveFieldEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incident_roles" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "List incident roles",
        "description" : "List all of the incident roles in the organization",
        "operationId" : "list_incident_roles",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the incident roles in the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentRoleEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Create an incident role",
        "description" : "Create a new incident role",
        "operationId" : "create_incident_role",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_incident_role"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new incident role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentRoleEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_incident_role"
      }
    },
    "/v1/incident_roles/{incident_role_id}" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Get an incident role",
        "description" : "Retrieve a single incident role from its ID",
        "operationId" : "get_incident_role",
        "parameters" : [ {
          "name" : "incident_role_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single incident role from its ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentRoleEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Archive an incident role",
        "description" : "Archives an incident role which will hide it from lists and metrics",
        "operationId" : "delete_incident_role",
        "parameters" : [ {
          "name" : "incident_role_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Archives an incident role which will hide it from lists and metrics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentRoleEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Update an incident role",
        "description" : "Update a single incident role from its ID",
        "operationId" : "update_incident_role",
        "parameters" : [ {
          "name" : "incident_role_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_incident_role"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a single incident role from its ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentRoleEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_incident_role"
      }
    },
    "/v1/incident_tags/validate" : {
      "post" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Validate incident tags",
        "description" : "Validate the format of a list of tags",
        "operationId" : "validate_incident_tags",
        "requestBody" : {
          "description" : "A list of tags to validate",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Validate the format of a list of tags",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "tags"
      }
    },
    "/v1/incident_tags" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "List incident tags",
        "description" : "List all of the incident tags in the organization",
        "operationId" : "list_incident_tags",
        "parameters" : [ {
          "name" : "prefix",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the incident tags in the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/incident_types" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "List incident types",
        "description" : "List all of the incident types in the organization",
        "operationId" : "list_incident_types",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "A query to search incident types by their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the incident types in the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentTypeEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Create an incident type",
        "description" : "Create a new incident type",
        "operationId" : "create_incident_type",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_incident_type"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new incident type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentTypeEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_incident_type"
      }
    },
    "/v1/incident_types/{id}" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Get an incident type",
        "description" : "Retrieve a single incident type from its ID",
        "operationId" : "get_incident_type",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single incident type from its ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentTypeEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Archive an incident type",
        "description" : "Archives an incident type which will hide it from lists and metrics",
        "operationId" : "delete_incident_type",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Archives an incident type which will hide it from lists and metrics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentTypeEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Update an incident type",
        "description" : "Update a single incident type from its ID",
        "operationId" : "update_incident_type",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_incident_type"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a single incident type from its ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentTypeEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_incident_type"
      }
    },
    "/v1/integrations" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "List integrations",
        "description" : "Lists the available and configured integrations",
        "operationId" : "list_integrations",
        "responses" : {
          "200" : {
            "description" : "Lists the available and configured integrations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_IntegrationEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/{integration_id}" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Get an integration",
        "description" : "Retrieve a single integration",
        "operationId" : "get_integration",
        "parameters" : [ {
          "name" : "integration_id",
          "in" : "path",
          "description" : "Integration UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_IntegrationEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/field_maps/{field_map_id}" : {
      "patch" : {
        "tags" : [ "Integrations" ],
        "summary" : "Update field mapping",
        "description" : "Update field mapping",
        "operationId" : "update_field_map",
        "parameters" : [ {
          "name" : "field_map_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Update field mapping",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FieldMapping_FieldMapEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/field_maps/{field_map_id}/available_fields" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "List available fields for field mapping",
        "description" : "Get a description of the fields to which data can be mapped",
        "operationId" : "list_field_map_available_fields",
        "parameters" : [ {
          "name" : "field_map_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a description of the fields to which data can be mapped",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FieldMapping_MappableFieldEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/authed_providers/{integration_slug}/{connection_id}" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Lists the available and configured integrations",
        "description" : "Lists the available and configured integrations",
        "operationId" : "list_authed_providers",
        "parameters" : [ {
          "name" : "integration_slug",
          "in" : "path",
          "description" : "Integration slug",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "connection_id",
          "in" : "path",
          "description" : "Connection ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query for users by name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists the available and configured integrations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_AuthedProviderEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/authed_providers/{integration_slug}/{connection_id}/{authed_provider_id}" : {
      "patch" : {
        "tags" : [ "Integrations" ],
        "summary" : "Get an authed provider",
        "description" : "Retrieve a single authed provider",
        "operationId" : "update_authed_provider",
        "parameters" : [ {
          "name" : "integration_slug",
          "in" : "path",
          "description" : "Integration slug",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "connection_id",
          "in" : "path",
          "description" : "Connection ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "authed_provider_id",
          "in" : "path",
          "description" : "Authed provider ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "integration_default" : {
                    "type" : "boolean",
                    "description" : "Set as the default integration for the account",
                    "nullable" : true
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Retrieve a single authed provider",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PublicAPI_V1_Integrations_AuthedProviderEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/connections" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "List integration connections",
        "description" : "List available integration connections",
        "operationId" : "list_connections",
        "parameters" : [ {
          "name" : "integration_slug",
          "in" : "query",
          "description" : "Only return installed integrations with the supplied slugs (types).",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List available integration connections",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_ConnectionEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/connections/{slug}" : {
      "post" : {
        "tags" : [ "Integrations" ],
        "summary" : "Create a new integration connection",
        "description" : "Create a new integration connection",
        "operationId" : "create_connection",
        "parameters" : [ {
          "name" : "slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Create a new integration connection",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_ConnectionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/connections/{slug}/{connection_id}/refresh" : {
      "patch" : {
        "tags" : [ "Integrations" ],
        "summary" : "Refresh an integration connection",
        "description" : "Refresh the integration connection with the provided data",
        "operationId" : "refresh_connection",
        "parameters" : [ {
          "name" : "slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Refresh the integration connection with the provided data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_ConnectionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/connections/{slug}/{connection_id}" : {
      "patch" : {
        "tags" : [ "Integrations" ],
        "summary" : "Update an integration connection",
        "description" : "Update the integration connection with the provided data",
        "operationId" : "update_connection",
        "parameters" : [ {
          "name" : "slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Update the integration connection with the provided data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_ConnectionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/statuses" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Get integration connection status",
        "description" : "Retrieve overall integration connection status",
        "operationId" : "list_connection_statuses",
        "responses" : {
          "200" : {
            "description" : "Retrieve overall integration connection status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_ConnectionStatusEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/statuses/{slug}" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Get an integration connection status",
        "description" : "Retrieve a single integration connection status",
        "operationId" : "list_connection_statuses_by_slug",
        "parameters" : [ {
          "name" : "slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single integration connection status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_ConnectionStatusEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/statuses/{slug}/{by_connection_id}" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Get an integration connection status",
        "description" : "Retrieve a single integration connection status",
        "operationId" : "list_connection_statuses_by_slug_and_id",
        "parameters" : [ {
          "name" : "slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "by_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single integration connection status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_ConnectionStatusEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/aws/connections" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "List AWS connections",
        "description" : "Lists the available and configured AWS integration connections for the authenticated organization.",
        "operationId" : "list_aws_connections",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "aws_account_id",
          "in" : "query",
          "description" : "AWS account ID containing the role to be assumed",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "target_arn",
          "in" : "query",
          "description" : "ARN of the role to be assumed",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "external_id",
          "in" : "query",
          "description" : "The external ID supplied when assuming the role",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists the available and configured AWS integration connections for the authenticated organization.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Aws_ConnectionEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/aws/connections/{id}" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Get an AWS connection",
        "description" : "Retrieves the information about the AWS connection.",
        "operationId" : "get_aws_connection",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves the information about the AWS connection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Aws_ConnectionEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Integrations" ],
        "summary" : "Update an AWS connection",
        "description" : "Update the AWS connection with the provided data.",
        "operationId" : "update_aws_connection",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_aws_connection"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update the AWS connection with the provided data.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Aws_ConnectionEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_aws_connection"
      }
    },
    "/v1/integrations/aws/cloudtrail_batches" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "List CloudTrail batches",
        "description" : "Lists CloudTrail batches for the authenticated organization.",
        "operationId" : "list_aws_cloudtrail_batches",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "connection_id",
          "in" : "query",
          "description" : "AWS connection ID",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists CloudTrail batches for the authenticated organization.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Aws_CloudtrailBatchEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/aws/cloudtrail_batches/{id}" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Get a CloudTrail batch",
        "description" : "Retrieve a single CloudTrail batch.",
        "operationId" : "get_aws_cloudtrail_batch",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single CloudTrail batch.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Aws_CloudtrailBatchEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Integrations" ],
        "summary" : "Update a CloudTrail batch",
        "description" : "Update a CloudTrail batch with new information.",
        "operationId" : "update_aws_cloudtrail_batch",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_aws_cloudtrail_batch"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a CloudTrail batch with new information.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Aws_CloudtrailBatchEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_aws_cloudtrail_batch"
      }
    },
    "/v1/integrations/aws/cloudtrail_batches/{id}/events" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "List events for an AWS CloudTrail batch",
        "description" : "List events for an AWS CloudTrail batch",
        "operationId" : "list_aws_cloudtrail_batch_events",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List events for an AWS CloudTrail batch",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEventEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/confluence_cloud/connections/{id}/space/search" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "List Confluence spaces",
        "description" : "Lists available space keys for the Confluence integration connection.",
        "operationId" : "search_confluence_spaces",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyword",
          "in" : "query",
          "description" : "Space Key",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists available space keys for the Confluence integration connection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_ConfluenceCloud_SpaceKeyEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/slack/connections/{connection_id}/workspaces" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "List Slack workspaces",
        "description" : "Lists all Slack workspaces",
        "operationId" : "list_slack_workspaces",
        "parameters" : [ {
          "name" : "connection_id",
          "in" : "path",
          "description" : "Connection UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists all Slack workspaces",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Slack_WorkspaceEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/slack/usergroups" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "List Slack user groups",
        "description" : "Lists all Slack user groups",
        "operationId" : "list_slack_usergroups",
        "responses" : {
          "200" : {
            "description" : "Lists all Slack user groups",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Slack_UsergroupEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/slack/connections/{connection_id}/emoji_actions" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "List Slack emoji actions",
        "description" : "Lists Slack emoji actions",
        "operationId" : "list_slack_emoji_actions",
        "parameters" : [ {
          "name" : "connection_id",
          "in" : "path",
          "description" : "Slack Connection UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists Slack emoji actions",
            "content" : { }
          }
        }
      },
      "post" : {
        "tags" : [ "Integrations" ],
        "summary" : "Create a new Slack emoji action",
        "description" : "Creates a new Slack emoji action",
        "operationId" : "create_slack_emoji_action",
        "parameters" : [ {
          "name" : "connection_id",
          "in" : "path",
          "description" : "Slack Connection UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "emoji_name" ],
                "type" : "object",
                "properties" : {
                  "emoji_name" : {
                    "type" : "string",
                    "description" : "The name of the emoji to associate with this action"
                  },
                  "incident_type_id" : {
                    "type" : "string",
                    "description" : "The ID of the incident type to associate with this emoji action",
                    "nullable" : true
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Creates a new Slack emoji action",
            "content" : { }
          }
        }
      }
    },
    "/v1/integrations/slack/connections/{connection_id}/emoji_actions/{emoji_action_id}" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Get a Slack emoji action",
        "description" : "Retrieves a Slack emoji action",
        "operationId" : "get_slack_emoji_action",
        "parameters" : [ {
          "name" : "connection_id",
          "in" : "path",
          "description" : "Slack Connection UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "emoji_action_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves a Slack emoji action",
            "content" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "Integrations" ],
        "summary" : "Delete a Slack emoji action",
        "description" : "Deletes a Slack emoji action",
        "operationId" : "delete_slack_emoji_action",
        "parameters" : [ {
          "name" : "connection_id",
          "in" : "path",
          "description" : "Slack Connection UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "emoji_action_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deletes a Slack emoji action",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Integrations" ],
        "summary" : "Update a Slack emoji action",
        "description" : "Updates a Slack emoji action",
        "operationId" : "update_slack_emoji_action",
        "parameters" : [ {
          "name" : "connection_id",
          "in" : "path",
          "description" : "Slack Connection UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "emoji_action_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "emoji_name" : {
                    "type" : "string",
                    "description" : "The name of the emoji to associate with this action",
                    "nullable" : true
                  },
                  "incident_type_id" : {
                    "type" : "string",
                    "description" : "The ID of the incident type to associate with this emoji action",
                    "nullable" : true
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updates a Slack emoji action",
            "content" : { }
          }
        }
      }
    },
    "/v1/integrations/statuspage/connections" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "List Statuspage connections",
        "description" : "Lists the available and configured Statuspage integrations connections for the authenticated organization.",
        "operationId" : "list_statuspage_connections",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists the available and configured Statuspage integrations connections for the authenticated organization.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Statuspage_ConnectionEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/statuspage/connections/{connection_id}" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Get a Statuspage connection",
        "description" : "Retrieve the information about the Statuspage connection.",
        "operationId" : "get_statuspage_connection",
        "parameters" : [ {
          "name" : "connection_id",
          "in" : "path",
          "description" : "Connection UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve the information about the Statuspage connection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Statuspage_ConnectionEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Integrations" ],
        "summary" : "Delete a Statuspage connection",
        "description" : "Deletes the given Statuspage integration connection.",
        "operationId" : "delete_statuspage_connection",
        "parameters" : [ {
          "name" : "connection_id",
          "in" : "path",
          "description" : "Connection UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes the given Statuspage integration connection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Statuspage_ConnectionEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Integrations" ],
        "summary" : "Update a Statuspage connection",
        "description" : "Update the given Statuspage integration connection.",
        "operationId" : "update_statuspage_connection",
        "parameters" : [ {
          "name" : "connection_id",
          "in" : "path",
          "description" : "Connection UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_statuspage_connection"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update the given Statuspage integration connection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Statuspage_ConnectionEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_statuspage_connection"
      }
    },
    "/v1/integrations/statuspage/connections/{connection_id}/pages" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "List StatusPage pages for a connection",
        "description" : "Lists available page IDs for the Statuspage integration connection.",
        "operationId" : "list_statuspage_connection_pages",
        "parameters" : [ {
          "name" : "connection_id",
          "in" : "path",
          "description" : "Connection UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists available page IDs for the Statuspage integration connection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Statuspage_PageEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/zendesk/{connection_id}/tickets/search" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Search for Zendesk tickets",
        "description" : "Search for Zendesk tickets",
        "operationId" : "search_zendesk_tickets",
        "parameters" : [ {
          "name" : "connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Search for Zendesk tickets",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations_Zendesk_SearchTickets_PaginatedEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/zendesk/search" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Search for Zendesk tickets",
        "description" : "Search for Zendesk tickets",
        "operationId" : "get_zendesk_customer_support_issue",
        "parameters" : [ {
          "name" : "ticket_id",
          "in" : "query",
          "description" : "Zendesk ticket ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Use to include attached_incidents",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Search for Zendesk tickets",
            "content" : { }
          }
        }
      }
    },
    "/v1/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "List users",
        "description" : "Retrieve a list of all users in an organization",
        "operationId" : "list_users",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Text string of a query to filter users by name or email",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Text string of a query to filter users by name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a list of all users in an organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{id}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get a user",
        "description" : "Retrieve a single user by ID",
        "operationId" : "get_user",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single user by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{id}/services" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "List services owned by a user's teams",
        "description" : "Retrieves a list of services owned by the teams a user is on",
        "operationId" : "list_user_owned_services",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves a list of services owned by the teams a user is on",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TeamEntityPaginated"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/current_user" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get the currently authenticated user",
        "description" : "Retrieve the current user",
        "operationId" : "get_current_user",
        "responses" : {
          "200" : {
            "description" : "Retrieve the current user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CurrentUserEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/mean_time" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "Get mean time metrics for incidents",
        "description" : "Returns a report with time bucketed analytics data",
        "operationId" : "get_mean_time_report",
        "parameters" : [ {
          "name" : "environments",
          "in" : "query",
          "description" : "A comma separated list of environment IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "teams",
          "in" : "query",
          "description" : "A comma separated list of team IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "services",
          "in" : "query",
          "description" : "A comma separated list of service IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Incident status",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "The start date to return incidents from",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "The end date to return incidents from",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A text query for an incident that searches on name, summary, and desciption",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "saved_search_id",
          "in" : "query",
          "description" : "The id of a previously saved search.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "priorities",
          "in" : "query",
          "description" : "A comma separated list of priorities",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "priority_not_set",
          "in" : "query",
          "description" : "Flag for including incidents where priority has not been set",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "severities",
          "in" : "query",
          "description" : "A comma separated list of severities",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "severity_not_set",
          "in" : "query",
          "description" : "Flag for including incidents where severity has not been set",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "current_milestones",
          "in" : "query",
          "description" : "A comma separated list of current milestones",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a report with time bucketed analytics data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/retrospectives" : {
      "get" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "List retrospective reports",
        "description" : "List all retrospective reports",
        "operationId" : "list_retrospectives",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "incident_id",
          "in" : "query",
          "description" : "Filter the reports by an incident ID",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "updated_since",
          "in" : "query",
          "description" : "Filter for reports updated after the given ISO8601 timestamp",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all retrospective reports",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Incidents_RetrospectiveEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metrics/ticket_funnel" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "List ticket task and follow up creation and completion metrics",
        "description" : "Returns a report with task and follow up creation and completion data",
        "operationId" : "list_ticket_funnel_metrics",
        "parameters" : [ {
          "name" : "conditions",
          "in" : "query",
          "description" : "A JSON string that defines 'logic' and 'user_data'",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "environments",
          "in" : "query",
          "description" : "A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "services",
          "in" : "query",
          "description" : "A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "functionalities",
          "in" : "query",
          "description" : "A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "excluded_infrastructure_ids",
          "in" : "query",
          "description" : "A comma separated list of infrastructure IDs. Returns incidents that do not have the following infrastructure ids associated with them.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "teams",
          "in" : "query",
          "description" : "A comma separated list of team IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "assigned_teams",
          "in" : "query",
          "description" : "A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Incident status",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "Filters for incidents that started on or after this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "Filters for incidents that started on or before this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "resolved_at_or_after",
          "in" : "query",
          "description" : "Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "resolved_at_or_before",
          "in" : "query",
          "description" : "Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "closed_at_or_after",
          "in" : "query",
          "description" : "Filters for incidents that were closed at or after this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "closed_at_or_before",
          "in" : "query",
          "description" : "Filters for incidents that were closed at or before this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "created_at_or_after",
          "in" : "query",
          "description" : "Filters for incidents that were created at or after this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "created_at_or_before",
          "in" : "query",
          "description" : "Filters for incidents that were created at or before this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A text query for an incident that searches on name, summary, and desciption",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "A query to search incidents by their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "saved_search_id",
          "in" : "query",
          "description" : "The id of a previously saved search.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "priorities",
          "in" : "query",
          "description" : "A text value of priority",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "priority_not_set",
          "in" : "query",
          "description" : "Flag for including incidents where priority has not been set",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "severities",
          "in" : "query",
          "description" : "A text value of severity",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "severity_not_set",
          "in" : "query",
          "description" : "Flag for including incidents where severity has not been set",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "current_milestones",
          "in" : "query",
          "description" : "A comma separated list of current milestones",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "A comma separated list of tags",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tag_match_strategy",
          "in" : "query",
          "description" : "A matching strategy for the tags provided",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "any", "match_all", "exclude" ]
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Return archived incidents",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "updated_after",
          "in" : "query",
          "description" : "Filters for incidents that were updated after this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updated_before",
          "in" : "query",
          "description" : "Filters for incidents that were updated before this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "incident_type_id",
          "in" : "query",
          "description" : "A comma separated list of incident type IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "retrospective_templates",
          "in" : "query",
          "description" : "A comma separated list of retrospective template IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "group_by" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string",
                      "enum" : [ "started_day", "started_week", "started_month", "all_time" ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a report with task and follow up creation and completion data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Metrics_TicketFunnelMetricsEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metrics/retrospectives" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "List retrospective metrics",
        "description" : "Returns a report with retrospective analytics data",
        "operationId" : "list_retrospective_metrics",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "description" : "The start date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "The end date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a report with retrospective analytics data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Metrics_RetrospectiveEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metrics/milestone_funnel" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "List milestone funnel metrics",
        "description" : "Returns a report with time bucketed milestone data",
        "operationId" : "list_milestone_funnel_metrics",
        "parameters" : [ {
          "name" : "conditions",
          "in" : "query",
          "description" : "A JSON string that defines 'logic' and 'user_data'",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "environments",
          "in" : "query",
          "description" : "A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "services",
          "in" : "query",
          "description" : "A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "functionalities",
          "in" : "query",
          "description" : "A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "excluded_infrastructure_ids",
          "in" : "query",
          "description" : "A comma separated list of infrastructure IDs. Returns incidents that do not have the following infrastructure ids associated with them.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "teams",
          "in" : "query",
          "description" : "A comma separated list of team IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "assigned_teams",
          "in" : "query",
          "description" : "A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Incident status",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "Filters for incidents that started on or after this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "Filters for incidents that started on or before this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "resolved_at_or_after",
          "in" : "query",
          "description" : "Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "resolved_at_or_before",
          "in" : "query",
          "description" : "Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "closed_at_or_after",
          "in" : "query",
          "description" : "Filters for incidents that were closed at or after this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "closed_at_or_before",
          "in" : "query",
          "description" : "Filters for incidents that were closed at or before this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "created_at_or_after",
          "in" : "query",
          "description" : "Filters for incidents that were created at or after this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "created_at_or_before",
          "in" : "query",
          "description" : "Filters for incidents that were created at or before this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A text query for an incident that searches on name, summary, and desciption",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "A query to search incidents by their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "saved_search_id",
          "in" : "query",
          "description" : "The id of a previously saved search.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "priorities",
          "in" : "query",
          "description" : "A text value of priority",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "priority_not_set",
          "in" : "query",
          "description" : "Flag for including incidents where priority has not been set",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "severities",
          "in" : "query",
          "description" : "A text value of severity",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "severity_not_set",
          "in" : "query",
          "description" : "Flag for including incidents where severity has not been set",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "current_milestones",
          "in" : "query",
          "description" : "A comma separated list of current milestones",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "A comma separated list of tags",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tag_match_strategy",
          "in" : "query",
          "description" : "A matching strategy for the tags provided",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "any", "match_all", "exclude" ]
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Return archived incidents",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "updated_after",
          "in" : "query",
          "description" : "Filters for incidents that were updated after this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updated_before",
          "in" : "query",
          "description" : "Filters for incidents that were updated before this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "incident_type_id",
          "in" : "query",
          "description" : "A comma separated list of incident type IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "retrospective_templates",
          "in" : "query",
          "description" : "A comma separated list of retrospective template IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "group_by" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string",
                      "enum" : [ "started_day", "started_week", "started_month", "all_time" ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a report with time bucketed milestone data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Metrics_MilestonesFunnelEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metrics/user_involvements" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "List user metrics",
        "description" : "Returns a report with time bucketed analytics data",
        "operationId" : "list_user_involvement_metrics",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "description" : "The start date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "The end date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        }, {
          "name" : "bucket_size",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "by",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "sort_field",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "user_count", "incident_count", "time_spent" ]
          }
        }, {
          "name" : "sort_direction",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "asc", "desc" ]
          }
        }, {
          "name" : "sort_limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a report with time bucketed analytics data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Metrics_MetricsEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metrics/incidents" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "List incident metrics and analytics",
        "description" : "Returns a report with time bucketed analytics data",
        "operationId" : "list_incident_metrics",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "description" : "The start date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "The end date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        }, {
          "name" : "bucket_size",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "week", "day", "month", "all_time" ]
          }
        }, {
          "name" : "by",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "total", "severity", "priority", "functionality", "service", "environment", "user", "user_involvement" ]
          }
        }, {
          "name" : "sort_field",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "mttd", "mtta", "mttm", "mttr", "count", "total_time" ]
          }
        }, {
          "name" : "sort_direction",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "asc", "desc" ]
          }
        }, {
          "name" : "sort_limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "conditions",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a report with time bucketed analytics data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Metrics_MetricsEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metrics/mttx" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "Get infrastructure metrics",
        "description" : "Fetch infrastructure metrics based on custom query",
        "operationId" : "list_mttx_metrics",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "conditions",
          "in" : "query",
          "description" : "A JSON string that defines 'logic' and 'user_data'",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "environments",
          "in" : "query",
          "description" : "A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "services",
          "in" : "query",
          "description" : "A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "functionalities",
          "in" : "query",
          "description" : "A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "excluded_infrastructure_ids",
          "in" : "query",
          "description" : "A comma separated list of infrastructure IDs. Returns incidents that do not have the following infrastructure ids associated with them.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "teams",
          "in" : "query",
          "description" : "A comma separated list of team IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "assigned_teams",
          "in" : "query",
          "description" : "A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Incident status",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "Filters for incidents that started on or after this date",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "Filters for incidents that started on or before this date",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "resolved_at_or_after",
          "in" : "query",
          "description" : "Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "resolved_at_or_before",
          "in" : "query",
          "description" : "Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "closed_at_or_after",
          "in" : "query",
          "description" : "Filters for incidents that were closed at or after this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "closed_at_or_before",
          "in" : "query",
          "description" : "Filters for incidents that were closed at or before this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "created_at_or_after",
          "in" : "query",
          "description" : "Filters for incidents that were created at or after this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "created_at_or_before",
          "in" : "query",
          "description" : "Filters for incidents that were created at or before this time",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A text query for an incident that searches on name, summary, and desciption",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "A query to search incidents by their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "saved_search_id",
          "in" : "query",
          "description" : "The id of a previously saved search.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "priorities",
          "in" : "query",
          "description" : "A text value of priority",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "priority_not_set",
          "in" : "query",
          "description" : "Flag for including incidents where priority has not been set",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "severities",
          "in" : "query",
          "description" : "A text value of severity",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "severity_not_set",
          "in" : "query",
          "description" : "Flag for including incidents where severity has not been set",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "current_milestones",
          "in" : "query",
          "description" : "A comma separated list of current milestones",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "A comma separated list of tags",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tag_match_strategy",
          "in" : "query",
          "description" : "A matching strategy for the tags provided",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "any", "match_all", "exclude" ]
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Return archived incidents",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "updated_after",
          "in" : "query",
          "description" : "Filters for incidents that were updated after this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updated_before",
          "in" : "query",
          "description" : "Filters for incidents that were updated before this date",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "incident_type_id",
          "in" : "query",
          "description" : "A comma separated list of incident type IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "retrospective_templates",
          "in" : "query",
          "description" : "A comma separated list of retrospective template IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "custom_field_id",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "count_asc", "mttr_asc", "mtta_asc", "mttd_asc", "mttm_asc", "healthiness_asc", "count_desc", "mttr_desc", "mtta_desc", "mttd_desc", "mttm_desc", "healthiness_desc" ]
          }
        }, {
          "name" : "measurements",
          "in" : "query",
          "description" : "Comma-separated list of measurements to include in the response",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "labels",
          "in" : "query",
          "description" : "Comma-separated list of label key / values in the format of 'key=value,key2=value2'",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "incident_openers",
          "in" : "query",
          "description" : "Comma-separated list of user IDs for the incident openers",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "ticket_status",
          "in" : "query",
          "description" : "Comma-separated list of ticket status states",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "group_by" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string",
                      "enum" : [ "services", "environments", "functionalities", "teams", "severities", "users", "incident_types", "started_day", "started_week", "started_month", "custom_fields" ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Fetch infrastructure metrics based on custom query",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Metrics_MttxDataEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metrics/{infra_type}" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "List metrics for a component type",
        "description" : "Returns metrics for all components of a given type",
        "operationId" : "list_infrastructure_type_metrics",
        "parameters" : [ {
          "name" : "infra_type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "environments", "functionalities", "services", "customers" ]
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "The start date to return metrics from; defaults to 30 days ago",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "The end date to return metrics from, defaults to today",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns metrics for all components of a given type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Metrics_InfrastructureListEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metrics/{infra_type}/{infra_id}" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "Get metrics for a component",
        "description" : "Return metrics for a specific component",
        "operationId" : "list_infrastructure_metrics",
        "parameters" : [ {
          "name" : "infra_type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "environments", "functionalities", "services", "customers" ]
          }
        }, {
          "name" : "infra_id",
          "in" : "path",
          "description" : "Component UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "The start date to return metrics from; defaults to 30 days ago",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "The end date to return metrics from, defaults to today",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return metrics for a specific component",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Metrics_InfrastructureMetricsEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/runbooks/actions" : {
      "get" : {
        "tags" : [ "Runbooks" ],
        "summary" : "List runbook actions",
        "description" : "List all runbook actions available through your connected integrations",
        "operationId" : "list_runbook_actions",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "List actions supporting this specific Runbook type",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "lite",
          "in" : "query",
          "description" : "Boolean to determine whether to return a slimified version of the action object's integration",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all runbook actions available through your connected integrations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Runbooks_ActionsEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/runbooks/executions" : {
      "get" : {
        "tags" : [ "Runbooks" ],
        "summary" : "List runbook executions",
        "description" : "List all runbook executions across all runbooks",
        "operationId" : "list_runbook_executions",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all runbook executions across all runbooks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Runbooks_ExecutionEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Runbooks" ],
        "summary" : "Create a runbook execution",
        "description" : "Attaches a runbook to an incident and executes it",
        "operationId" : "create_runbook_execution",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_runbook_execution"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Attaches a runbook to an incident and executes it",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Runbooks_ExecutionEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_runbook_execution"
      }
    },
    "/v1/runbooks/executions/{execution_id}" : {
      "get" : {
        "tags" : [ "Runbooks" ],
        "summary" : "Get a runbook execution",
        "description" : "Retrieve a runbook execution by ID",
        "operationId" : "get_runbook_execution",
        "parameters" : [ {
          "name" : "execution_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a runbook execution by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Runbooks_ExecutionEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Runbooks" ],
        "summary" : "Terminate a runbook execution",
        "description" : "Terminates a runbook execution, preventing any further steps from being executed",
        "operationId" : "delete_runbook_execution",
        "parameters" : [ {
          "name" : "execution_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reason",
          "in" : "query",
          "description" : "The reason for terminating the runbook execution",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Terminates a runbook execution, preventing any further steps from being executed",
            "content" : { }
          }
        }
      }
    },
    "/v1/runbooks/executions/{execution_id}/steps/{step_id}" : {
      "put" : {
        "tags" : [ "Runbooks" ],
        "summary" : "Update a runbook step execution",
        "description" : "Updates a runbook step execution, especially for changing the state of a step execution.",
        "operationId" : "update_runbook_execution_step",
        "parameters" : [ {
          "name" : "execution_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "step_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_runbook_execution_step"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updates a runbook step execution, especially for changing the state of a step execution.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Runbooks_ExecutionEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_runbook_execution_step"
      }
    },
    "/v1/runbooks/executions/{execution_id}/steps/{step_id}/script" : {
      "get" : {
        "tags" : [ "Runbooks" ],
        "summary" : "Get a step's bash script",
        "description" : "Retrieves the bash script from a \"script\" step.",
        "operationId" : "get_runbook_execution_step_script",
        "parameters" : [ {
          "name" : "execution_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "step_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves the bash script from a \"script\" step.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Runbooks_ExecutionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/runbooks/executions/{execution_id}/steps/{step_id}/script/{state}" : {
      "put" : {
        "tags" : [ "Runbooks" ],
        "summary" : "Update a script step's execution status",
        "description" : "Updates the execution's step.",
        "operationId" : "update_runbook_execution_step_script",
        "parameters" : [ {
          "name" : "execution_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "step_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updates the execution's step.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Runbooks_ExecutionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/runbooks/select_options/{integration_slug}/{action_slug}/{field}" : {
      "get" : {
        "tags" : [ "Runbooks" ],
        "summary" : "List select options for a runbook integration action field",
        "description" : "List select options for a runbook integration action field",
        "operationId" : "get_runbook_action_field_options",
        "parameters" : [ {
          "name" : "integration_slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "action_slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "field",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Text string of a query for filtering values.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "scope",
          "in" : "query",
          "description" : "Generic params used to add specificity (eg an id of some kind) to the select options request",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Maximum number of items to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List select options for a runbook integration action field",
            "content" : { }
          }
        }
      }
    },
    "/v1/runbooks" : {
      "get" : {
        "tags" : [ "Runbooks" ],
        "summary" : "List runbooks",
        "description" : "Lists all available runbooks.",
        "operationId" : "list_runbooks",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "A query to search runbooks by their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "owners",
          "in" : "query",
          "description" : "A query to search runbooks by their owners",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort runbooks by their updated date. Accepts 'asc', 'desc'. This parameter is deprecated in favor of 'order_by' and 'order_direction'.",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "asc", "desc" ]
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Sort runbooks by their updated date or name. Accepts 'updated_at', 'name', and 'created_at'.",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "updated_at", "name", "created_at" ]
          }
        }, {
          "name" : "order_direction",
          "in" : "query",
          "description" : "Allows assigning a direction to how the specified `order_by` parameter is sorted. This parameter must be paired with `order_by` and does nothing on its own.",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists all available runbooks.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RunbookEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Runbooks" ],
        "summary" : "Create a runbook",
        "description" : "Create a new runbook for use with incidents.",
        "operationId" : "create_runbook",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_runbook"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new runbook for use with incidents.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RunbookEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_runbook"
      }
    },
    "/v1/runbooks/{runbook_id}" : {
      "get" : {
        "tags" : [ "Runbooks" ],
        "summary" : "Get a runbook",
        "description" : "Get a runbook and all its configuration",
        "operationId" : "get_runbook",
        "parameters" : [ {
          "name" : "runbook_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a runbook and all its configuration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RunbookEntity"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Runbooks" ],
        "summary" : "Update a runbook",
        "description" : "Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything\nabout a runbook, including but not limited to the steps, environments, attachment rules, and severities.\n",
        "operationId" : "update_runbook",
        "parameters" : [ {
          "name" : "runbook_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_runbook"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything\nabout a runbook, including but not limited to the steps, environments, attachment rules, and severities.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RunbookEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_runbook"
      },
      "delete" : {
        "tags" : [ "Runbooks" ],
        "summary" : "Delete a runbook",
        "description" : "Delete a runbook and make it unavailable for any future incidents.",
        "operationId" : "delete_runbook",
        "parameters" : [ {
          "name" : "runbook_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a runbook and make it unavailable for any future incidents.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RunbookEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/runbook_audits" : {
      "get" : {
        "tags" : [ "Runbooks" ],
        "summary" : "List runbook audits",
        "description" : "Please contact support to enable audit logging for your account.",
        "operationId" : "list_runbook_audits",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "auditable_type",
          "in" : "query",
          "description" : "A query to filter audits by type",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "Runbooks::Step", "Runbooks::Runbook" ],
            "default" : "Runbooks::Step"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "A query to sort audits by their created_at timestamp. Options are 'asc' or 'desc'",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List runbook audits",
            "content" : { }
          }
        }
      }
    },
    "/v1/audit_events" : {
      "get" : {
        "tags" : [ "Audit Events" ],
        "summary" : "List audit events",
        "description" : "List audit events",
        "operationId" : "list_audit_events",
        "parameters" : [ {
          "name" : "cursor",
          "in" : "query",
          "description" : "Cursor for pagination.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Query string to filter audit events, concatenated with AND keyword.\nAvailable filters with example:\n  - event.occurred_at < 2023-01-01T00:00:00Z\n  - event.key = signals.on_call_rotation.generate\n  - event.actor.kind = user\n  - event.actor.id = 00000000-0000-0000-0000-000000000000\n  - resource.kind = incident\n  - resource.id = 00000000-0000-0000-0000-000000000000\n  - parent_id = 00000000-0000-0000-0000-000000000000\nValid query looks like (without quotes):\n  event.occurred_at < 2023-01-01T00:00:00Z AND event.key = signals.on_call_rotation.generate\n",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of records to display in a single page, maximum is 100 entries. Smaller number is recommended for better performance.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true,
            "default" : 20
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List audit events",
            "content" : { }
          }
        }
      }
    },
    "/v1/audit_events/{id}" : {
      "get" : {
        "tags" : [ "Audit Events" ],
        "summary" : "Get a single audit event",
        "description" : "Get a single audit event",
        "operationId" : "get_audit_event",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a single audit event",
            "content" : { }
          }
        }
      }
    },
    "/v1/nunc_connections" : {
      "get" : {
        "tags" : [ "Status Pages" ],
        "summary" : "List status pages",
        "description" : "Lists the information displayed as part of your FireHydrant hosted status pages.",
        "operationId" : "list_nunc_connections",
        "responses" : {
          "200" : {
            "description" : "Lists the information displayed as part of your FireHydrant hosted status pages.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NuncConnectionEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Create a status page",
        "description" : "Create a new FireHydrant hosted status page for customer facing statuses.",
        "operationId" : "create_nunc_connection",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "components[infrastructure_id]", "components[infrastructure_type]", "conditions[condition_id]", "conditions[nunc_condition]", "domain" ],
                "type" : "object",
                "properties" : {
                  "domain" : {
                    "type" : "string"
                  },
                  "company_name" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "company_website" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "company_tos_url" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "greeting_title" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "greeting_body" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "operational_message" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "title" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "conditions[nunc_condition]" : {
                    "type" : "array",
                    "description" : "Status page condition to map your severity matrix condition to",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "conditions[condition_id]" : {
                    "type" : "array",
                    "description" : "Severity matrix condition id",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "components[infrastructure_type]" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "components[infrastructure_id]" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "primary_color" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "secondary_color" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "exposed_fields" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "enable_histogram" : {
                    "type" : "boolean",
                    "nullable" : true
                  },
                  "ui_version" : {
                    "type" : "integer",
                    "format" : "int32",
                    "nullable" : true
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new FireHydrant hosted status page for customer facing statuses.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NuncConnectionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}/subscribers" : {
      "get" : {
        "tags" : [ "Status Pages" ],
        "summary" : "List status page subscribers",
        "description" : "Retrieves the list of subscribers for a status page.",
        "operationId" : "list_email_subscribers",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves the list of subscribers for a status page.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NuncEmailSubscribersEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Add subscribers to a status page",
        "description" : "Subscribes a comma-separated string of emails to status page updates",
        "operationId" : "create_email_subscriber",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "emails" ],
                "type" : "object",
                "properties" : {
                  "emails" : {
                    "type" : "string",
                    "description" : "A comma-separated list of emails to subscribe."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Subscribes a comma-separated string of emails to status page updates",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NuncEmailSubscribersEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Remove subscribers from a status page",
        "description" : "Unsubscribes one or more status page subscribers.",
        "operationId" : "delete_email_subscriber",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriber_ids",
          "in" : "query",
          "description" : "A list of subscriber IDs to unsubscribe.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Unsubscribes one or more status page subscribers.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NuncEmailSubscribersEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}" : {
      "get" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Get a status page",
        "description" : "Retrieve the information displayed as part of your FireHydrant hosted status page.",
        "operationId" : "get_nunc_connection",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve the information displayed as part of your FireHydrant hosted status page.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NuncConnectionEntity"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Update a status page",
        "description" : "Update your company's information and other components in the specified FireHydrant hosted status page.",
        "operationId" : "update_nunc_connection",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "components[infrastructure_id]", "components[infrastructure_type]", "conditions[condition_id]", "conditions[nunc_condition]" ],
                "type" : "object",
                "properties" : {
                  "company_name" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "company_website" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "company_tos_url" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "greeting_title" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "greeting_body" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "operational_message" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "title" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "conditions[nunc_condition]" : {
                    "type" : "array",
                    "description" : "Status page condition to map your severity matrix condition to",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "conditions[condition_id]" : {
                    "type" : "array",
                    "description" : "Severity matrix condition id",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "components[infrastructure_type]" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "components[infrastructure_id]" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "primary_color" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "secondary_color" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "exposed_fields" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "enable_histogram" : {
                    "type" : "boolean",
                    "nullable" : true
                  },
                  "ui_version" : {
                    "type" : "integer",
                    "format" : "int32",
                    "nullable" : true
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update your company's information and other components in the specified FireHydrant hosted status page.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NuncConnectionEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Delete a status page",
        "description" : "Delete a FireHydrant hosted status page, stopping updates of your incidents to it.",
        "operationId" : "delete_nunc_connection",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a FireHydrant hosted status page, stopping updates of your incidents to it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NuncConnectionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}/component_groups/{group_id}" : {
      "delete" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Delete a status page component group",
        "description" : "Delete a component group displayed on a FireHydrant status page",
        "operationId" : "delete_nunc_component_group",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete a component group displayed on a FireHydrant status page",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Update a status page component group",
        "description" : "Update a component group to be displayed on a FireHydrant status page",
        "operationId" : "update_nunc_component_group",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "component_group_id" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "position" : {
                    "type" : "integer",
                    "format" : "int32",
                    "nullable" : true
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update a component group to be displayed on a FireHydrant status page",
            "content" : { }
          }
        }
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}/component_groups" : {
      "post" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Create a component group for a status page",
        "description" : "Add a component group to be displayed on a FireHydrant status page",
        "operationId" : "create_nunc_component_group",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "name" ],
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string"
                  },
                  "component_group_id" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "position" : {
                    "type" : "integer",
                    "format" : "int32",
                    "nullable" : true
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Add a component group to be displayed on a FireHydrant status page",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NuncConnectionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}/links/{link_id}" : {
      "delete" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Delete a status page link",
        "description" : "Delete a link displayed on a FireHydrant status page",
        "operationId" : "delete_nunc_link",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "link_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete a link displayed on a FireHydrant status page",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Update a status page link",
        "description" : "Update a link to be displayed on a FireHydrant status page",
        "operationId" : "update_nunc_link",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "link_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_nunc_link"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a link to be displayed on a FireHydrant status page",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "update_nunc_link"
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}/links" : {
      "post" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Add link to a status page",
        "description" : "Add a link to be displayed on a FireHydrant status page",
        "operationId" : "create_nunc_link",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Add a link to be displayed on a FireHydrant status page",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NuncConnectionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/nunc_connections/{nunc_connection_id}/images/{type}" : {
      "put" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Upload an image for a status page",
        "description" : "Add or replace an image attached to a FireHydrant status page",
        "operationId" : "update_nunc_image",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "file" : {
                    "type" : "string",
                    "format" : "binary",
                    "nullable" : true
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Add or replace an image attached to a FireHydrant status page",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NuncConnectionEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Delete an image from a status page",
        "description" : "Delete an image attached to a FireHydrant status page",
        "operationId" : "delete_nunc_image",
        "parameters" : [ {
          "name" : "nunc_connection_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete an image attached to a FireHydrant status page",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NuncConnectionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/saved_searches/{resource_type}/{saved_search_id}" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "Get a saved search",
        "description" : "Retrieve a specific save search",
        "operationId" : "get_saved_search",
        "parameters" : [ {
          "name" : "resource_type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "change_events", "incidents", "services", "scheduled_maintenances", "ticket_tasks", "ticket_follow_ups", "analytics", "impact_analytics", "alerts", "incident_events" ]
          }
        }, {
          "name" : "saved_search_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a specific save search",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavedSearchEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "Delete a saved search",
        "description" : "Delete a specific saved search",
        "operationId" : "delete_saved_search",
        "parameters" : [ {
          "name" : "resource_type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "change_events", "incidents", "services", "scheduled_maintenances", "ticket_tasks", "ticket_follow_ups", "analytics", "impact_analytics", "alerts", "incident_events" ]
          }
        }, {
          "name" : "saved_search_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a specific saved search",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavedSearchEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "Update a saved search",
        "description" : "Update a specific saved search",
        "operationId" : "update_saved_search",
        "parameters" : [ {
          "name" : "resource_type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "change_events", "incidents", "services", "scheduled_maintenances", "ticket_tasks", "ticket_follow_ups", "analytics", "impact_analytics", "alerts", "incident_events" ]
          }
        }, {
          "name" : "saved_search_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_saved_search"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a specific saved search",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavedSearchEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_saved_search"
      }
    },
    "/v1/saved_searches/{resource_type}" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "List saved searches",
        "description" : "Lists saved searches",
        "operationId" : "list_saved_searches",
        "parameters" : [ {
          "name" : "resource_type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "change_events", "incidents", "services", "scheduled_maintenances", "ticket_tasks", "ticket_follow_ups", "analytics", "impact_analytics", "alerts", "incident_events" ]
          }
        }, {
          "name" : "user_id",
          "in" : "query",
          "description" : "The user ID used to filter saved searches.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Filter saved searches with a query on their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists saved searches",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavedSearchEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "Create a saved search",
        "description" : "Create a new saved search for a particular resource type",
        "operationId" : "create_saved_search",
        "parameters" : [ {
          "name" : "resource_type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "change_events", "incidents", "services", "scheduled_maintenances", "ticket_tasks", "ticket_follow_ups", "analytics", "impact_analytics", "alerts", "incident_events" ]
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_saved_search"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new saved search for a particular resource type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavedSearchEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_saved_search"
      }
    },
    "/v1/lifecycles/measurement_definitions" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "List measurement definitions",
        "description" : "List all of the measurement definitions in the organization",
        "operationId" : "list_lifecycle_measurement_definitions",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the measurement definitions in the organization",
            "content" : { }
          }
        }
      },
      "post" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Create a measurement definition",
        "description" : "Create a new measurement definition",
        "operationId" : "create_lifecycle_measurement_definition",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "ends_at_milestone_id", "name", "starts_at_milestone_id" ],
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string"
                  },
                  "slug" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "description" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "starts_at_milestone_id" : {
                    "type" : "string"
                  },
                  "ends_at_milestone_id" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new measurement definition",
            "content" : { }
          }
        }
      }
    },
    "/v1/lifecycles/measurement_definitions/{measurement_definition_id}" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Get a measurement definition",
        "description" : "Retrieve a single measurement definition from its ID",
        "operationId" : "get_lifecycle_measurement_definition",
        "parameters" : [ {
          "name" : "measurement_definition_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single measurement definition from its ID",
            "content" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Archive a measurement definition",
        "description" : "Archives a measurement definition which will hide it from lists and metrics",
        "operationId" : "delete_lifecycle_measurement_definition",
        "parameters" : [ {
          "name" : "measurement_definition_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Archives a measurement definition which will hide it from lists and metrics",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Update a measurement definition",
        "description" : "Update a single measurement definition from its ID",
        "operationId" : "update_lifecycle_measurement_definition",
        "parameters" : [ {
          "name" : "measurement_definition_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "slug" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "description" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "starts_at_milestone_id" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "ends_at_milestone_id" : {
                    "type" : "string",
                    "nullable" : true
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update a single measurement definition from its ID",
            "content" : { }
          }
        }
      }
    },
    "/v1/lifecycles/phases" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "List phases and milestones",
        "description" : "List all of the lifecycle phases and milestones in the organization",
        "operationId" : "list_lifecycle_phases",
        "responses" : {
          "200" : {
            "description" : "List all of the lifecycle phases and milestones in the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Lifecycles_PhaseEntityList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/lifecycles/milestones" : {
      "post" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Create a milestone",
        "description" : "Create a new milestone",
        "operationId" : "create_lifecycle_milestone",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "description", "name", "phase_id" ],
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the milestone"
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "A long-form description of the milestone's purpose"
                  },
                  "slug" : {
                    "type" : "string",
                    "description" : "A unique identifier for the milestone. If not provided, one will be generated from the name.",
                    "nullable" : true
                  },
                  "phase_id" : {
                    "type" : "string",
                    "description" : "The ID of the phase to which the milestone should belong"
                  },
                  "position" : {
                    "type" : "integer",
                    "description" : "The position of the milestone within the phase. If not provided, the milestone will be added as the last milestone in the phase.",
                    "format" : "int32",
                    "nullable" : true
                  },
                  "required_at_milestone_id" : {
                    "type" : "string",
                    "description" : "The ID of a later milestone that cannot be started until this milestone has a timestamp populated",
                    "nullable" : true
                  },
                  "auto_assign_timestamp_on_create" : {
                    "type" : "string",
                    "description" : "The setting for auto-assigning the milestone's timestamp during incident declaration",
                    "nullable" : true,
                    "enum" : [ "always_set_on_create", "only_set_on_manual_create", "never_set_on_create" ]
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new milestone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Lifecycles_PhaseEntityList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/lifecycles/milestones/{milestone_id}" : {
      "delete" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Delete a milestone",
        "description" : "Delete a milestone",
        "operationId" : "delete_lifecycle_milestone",
        "parameters" : [ {
          "name" : "milestone_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a milestone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Lifecycles_PhaseEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Update a milestone",
        "description" : "Update a milestone",
        "operationId" : "update_lifecycle_milestone",
        "parameters" : [ {
          "name" : "milestone_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the milestone",
                    "nullable" : true
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "A long-form description of the milestone's purpose",
                    "nullable" : true
                  },
                  "slug" : {
                    "type" : "string",
                    "description" : "A unique identifier for the milestone. If not provided, one will be generated from the name.",
                    "nullable" : true
                  },
                  "position" : {
                    "type" : "integer",
                    "description" : "The position of the milestone within the phase. If not provided, the milestone will be added as the last milestone in the phase.",
                    "format" : "int32",
                    "nullable" : true
                  },
                  "required_at_milestone_id" : {
                    "type" : "string",
                    "description" : "The ID of a later milestone that cannot be started until this milestone has a timestamp populated",
                    "nullable" : true
                  },
                  "auto_assign_timestamp_on_create" : {
                    "type" : "string",
                    "description" : "The setting for auto-assigning the milestone's timestamp during incident declaration",
                    "nullable" : true,
                    "enum" : [ "always_set_on_create", "only_set_on_manual_create", "never_set_on_create" ]
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update a milestone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Lifecycles_PhaseEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/priorities" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "List priorities",
        "description" : "Lists priorities",
        "operationId" : "list_priorities",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists priorities",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PriorityEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Create a priority",
        "description" : "Create a new priority",
        "operationId" : "create_priority",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_priority"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new priority",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PriorityEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_priority"
      }
    },
    "/v1/priorities/{priority_slug}" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Get a priority",
        "description" : "Retrieve a specific priority",
        "operationId" : "get_priority",
        "parameters" : [ {
          "name" : "priority_slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a specific priority",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PriorityEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Delete a priority",
        "description" : "Delete a specific priority",
        "operationId" : "delete_priority",
        "parameters" : [ {
          "name" : "priority_slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a specific priority",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PriorityEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Update a priority",
        "description" : "Update a specific priority",
        "operationId" : "update_priority",
        "parameters" : [ {
          "name" : "priority_slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_priority"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a specific priority",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PriorityEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_priority"
      }
    },
    "/v1/severities" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "List severities",
        "description" : "Lists severities",
        "operationId" : "list_severities",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists severities",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Create a severity",
        "description" : "Create a new severity",
        "operationId" : "create_severity",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_severity"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new severity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_severity"
      }
    },
    "/v1/severities/{severity_slug}" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Get a severity",
        "description" : "Retrieve a specific severity",
        "operationId" : "get_severity",
        "parameters" : [ {
          "name" : "severity_slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a specific severity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Delete a severity",
        "description" : "Delete a specific severity",
        "operationId" : "delete_severity",
        "parameters" : [ {
          "name" : "severity_slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a specific severity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Update a severity",
        "description" : "Update a specific severity",
        "operationId" : "update_severity",
        "parameters" : [ {
          "name" : "severity_slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_severity"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a specific severity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_severity"
      }
    },
    "/v1/severity_matrix" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Get severity matrix",
        "description" : "Retrieve the Severity matrix for your organization and its components and configured severities.",
        "operationId" : "get_severity_matrix",
        "responses" : {
          "200" : {
            "description" : "Retrieve the Severity matrix for your organization and its components and configured severities.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityMatrix_SeverityMatrixEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Update severity matrix",
        "description" : "Update available severities and impacts in your organization's severity matrix.",
        "operationId" : "update_severity_matrix",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_severity_matrix"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update available severities and impacts in your organization's severity matrix.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityMatrix_SeverityMatrixEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_severity_matrix"
      }
    },
    "/v1/severity_matrix/conditions" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "List severity matrix conditions",
        "description" : "Lists conditions",
        "operationId" : "list_severity_matrix_conditions",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists conditions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityMatrix_ConditionEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Create a severity matrix condition",
        "description" : "Create a new condition",
        "operationId" : "create_severity_matrix_condition",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_severity_matrix_condition"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new condition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityMatrix_ConditionEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_severity_matrix_condition"
      }
    },
    "/v1/severity_matrix/conditions/{condition_id}" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Get a severity matrix condition",
        "description" : "Retrieve a specific condition",
        "operationId" : "get_severity_matrix_condition",
        "parameters" : [ {
          "name" : "condition_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a specific condition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityMatrix_ConditionEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Delete a severity matrix condition",
        "description" : "Delete a specific condition",
        "operationId" : "delete_severity_matrix_condition",
        "parameters" : [ {
          "name" : "condition_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a specific condition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityMatrix_ConditionEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Update a severity matrix condition",
        "description" : "Update a severity matrix condition",
        "operationId" : "update_severity_matrix_condition",
        "parameters" : [ {
          "name" : "condition_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_severity_matrix_condition"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a severity matrix condition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityMatrix_ConditionEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_severity_matrix_condition"
      }
    },
    "/v1/severity_matrix/impacts" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "List severity matrix impacts",
        "description" : "Lists impacts",
        "operationId" : "list_severity_matrix_impacts",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists impacts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityMatrix_ImpactEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Create a severity matrix impact",
        "description" : "Create a new impact",
        "operationId" : "create_severity_matrix_impact",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_severity_matrix_impact"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new impact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityMatrix_ImpactEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_severity_matrix_impact"
      }
    },
    "/v1/severity_matrix/impacts/{impact_id}" : {
      "delete" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Delete a severity matrix impact",
        "description" : "Delete a specific impact",
        "operationId" : "delete_severity_matrix_impact",
        "parameters" : [ {
          "name" : "impact_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a specific impact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityMatrix_ImpactEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Update a severity matrix impact",
        "description" : "Update a severity matrix impact",
        "operationId" : "update_severity_matrix_impact",
        "parameters" : [ {
          "name" : "impact_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_severity_matrix_impact"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a severity matrix impact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeverityMatrix_ImpactEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_severity_matrix_impact"
      }
    },
    "/v1/scheduled_maintenances" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "List scheduled maintenance events",
        "description" : "Lists all scheduled maintenance events",
        "operationId" : "list_scheduled_maintenances",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter scheduled_maintenances with a query on their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists all scheduled maintenance events",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledMaintenanceEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "Create a scheduled maintenance event",
        "description" : "Create a new scheduled maintenance event",
        "operationId" : "create_scheduled_maintenance",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_scheduled_maintenance"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new scheduled maintenance event",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledMaintenanceEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_scheduled_maintenance"
      }
    },
    "/v1/scheduled_maintenances/{scheduled_maintenance_id}" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "Get a scheduled maintenance event",
        "description" : "Fetch the details of a scheduled maintenance event.",
        "operationId" : "get_scheduled_maintenance",
        "parameters" : [ {
          "name" : "scheduled_maintenance_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Fetch the details of a scheduled maintenance event.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledMaintenanceEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Incidents" ],
        "summary" : "Delete a scheduled maintenance event",
        "description" : "Delete a scheduled maintenance event, preventing it from taking place.",
        "operationId" : "delete_scheduled_maintenance",
        "parameters" : [ {
          "name" : "scheduled_maintenance_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete a scheduled maintenance event, preventing it from taking place.",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incidents" ],
        "summary" : "Update a scheduled maintenance event",
        "description" : "Change the conditions of a scheduled maintenance event, including updating any status page announcements of changes.",
        "operationId" : "update_scheduled_maintenance",
        "parameters" : [ {
          "name" : "scheduled_maintenance_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_scheduled_maintenance"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Change the conditions of a scheduled maintenance event, including updating any status page announcements of changes.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledMaintenanceEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_scheduled_maintenance"
      }
    },
    "/v1/schedules" : {
      "get" : {
        "tags" : [ "Teams" ],
        "summary" : "List schedules",
        "description" : "List all known schedules in FireHydrant as pulled from external sources",
        "operationId" : "list_schedules",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter schedules with a query on their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all known schedules in FireHydrant as pulled from external sources",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduleEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/infrastructures" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Lists functionality, service and environment objects",
        "description" : "Lists functionality, service and environment objects",
        "operationId" : "list_infrastructures",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "A query to search infrastructures by their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "omit_for",
          "in" : "query",
          "description" : "Omit for any infrastructure that is added to an incident using the format \"incident/{incident_id}\"",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Restrict infrastructure search to given type.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists functionality, service and environment objects",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InfrastructureSearchEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/nunc/subscriptions/{unsubscribe_token}" : {
      "delete" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Unsubscribe from status page notifications",
        "description" : "Unsubscribe from status page updates",
        "operationId" : "delete_nunc_subscription",
        "parameters" : [ {
          "name" : "unsubscribe_token",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Unsubscribe from status page updates",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Nunc_NuncSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/v1/nunc/subscriptions" : {
      "post" : {
        "tags" : [ "Status Pages" ],
        "summary" : "Create a status page subscription",
        "description" : "Subscribe to status page updates",
        "operationId" : "create_nunc_subscription",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_nunc_subscription"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Subscribe to status page updates",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Nunc_NuncSubscription"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_nunc_subscription"
      }
    },
    "/v1/status_update_templates" : {
      "get" : {
        "tags" : [ "Communication" ],
        "summary" : "List status update templates",
        "description" : "List all status update templates for your organization",
        "operationId" : "list_status_update_templates",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all status update templates for your organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusUpdateTemplateEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Communication" ],
        "summary" : "Create a status update template",
        "description" : "Create a status update template for your organization",
        "operationId" : "create_status_update_template",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_status_update_template"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a status update template for your organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusUpdateTemplateEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_status_update_template"
      }
    },
    "/v1/status_update_templates/{status_update_template_id}" : {
      "get" : {
        "tags" : [ "Communication" ],
        "summary" : "Get a status update template",
        "description" : "Get a single status update template by ID",
        "operationId" : "get_status_update_template",
        "parameters" : [ {
          "name" : "status_update_template_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a single status update template by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusUpdateTemplateEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Communication" ],
        "summary" : "Delete a status update template",
        "description" : "Delete a single status update template",
        "operationId" : "delete_status_update_template",
        "parameters" : [ {
          "name" : "status_update_template_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a single status update template",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusUpdateTemplateEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Communication" ],
        "summary" : "Update a status update template",
        "description" : "Update a single status update template",
        "operationId" : "update_status_update_template",
        "parameters" : [ {
          "name" : "status_update_template_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_status_update_template"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a single status update template",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusUpdateTemplateEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_status_update_template"
      }
    },
    "/v1/custom_fields/definitions/{field_id}" : {
      "delete" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Delete a custom field definition",
        "description" : "Delete a custom field definition",
        "operationId" : "delete_custom_field_definition",
        "parameters" : [ {
          "name" : "field_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a custom field definition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Organizations_CustomFieldDefinitionEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Update a custom field definition",
        "description" : "Update a single custom field definition",
        "operationId" : "update_custom_field_definition",
        "parameters" : [ {
          "name" : "field_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_custom_field_definition"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a single custom field definition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Organizations_CustomFieldDefinitionEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_custom_field_definition"
      }
    },
    "/v1/custom_fields/definitions" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "List custom field definitions",
        "description" : "List all custom field definitions",
        "operationId" : "list_custom_field_definitions",
        "responses" : {
          "200" : {
            "description" : "List all custom field definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Organizations_CustomFieldDefinitionEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Create a custom field definition",
        "description" : "Create a new custom field definition",
        "operationId" : "create_custom_field_definition",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_custom_field_definition"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new custom field definition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Organizations_CustomFieldDefinitionEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_custom_field_definition"
      }
    },
    "/v1/custom_fields/definitions/{field_id}/select_options" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Get available values for a custom field",
        "description" : "Get the permissible values for the a currently active custom select or multi-select field.",
        "operationId" : "list_custom_field_select_options",
        "parameters" : [ {
          "name" : "field_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Text string of a query for filtering values.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "all_versions",
          "in" : "query",
          "description" : "If true, return all versions of the custom field definition.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get the permissible values for the a currently active custom select or multi-select field.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Organizations_CustomFieldDefinitionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/post_mortems/reports" : {
      "get" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "List retrospective reports",
        "description" : "List all reports",
        "operationId" : "list_post_mortem_reports",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "incident_id",
          "in" : "query",
          "description" : "Filter the reports by an incident ID",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "updated_since",
          "in" : "query",
          "description" : "Filter for reports updated after the given ISO8601 timestamp",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all reports",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostMortems_PostMortemReportEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Create a retrospective report",
        "description" : "Create a report",
        "operationId" : "create_post_mortem_report",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_post_mortem_report"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostMortems_PostMortemReportEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_post_mortem_report"
      }
    },
    "/v1/post_mortems/reports/{report_id}" : {
      "get" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Get a retrospective report",
        "description" : "Get a report",
        "operationId" : "get_post_mortem_report",
        "parameters" : [ {
          "name" : "report_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostMortems_PostMortemReportEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Update a retrospective report",
        "description" : "Update a report",
        "operationId" : "update_post_mortem_report",
        "parameters" : [ {
          "name" : "report_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_post_mortem_report"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostMortems_PostMortemReportEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_post_mortem_report"
      }
    },
    "/v1/post_mortems/reports/{report_id}/reasons" : {
      "get" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "List contributing factors for a retrospective report",
        "description" : "List all contributing factors to an incident",
        "operationId" : "list_post_mortem_reasons",
        "parameters" : [ {
          "name" : "report_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all contributing factors to an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostMortems_ReasonEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Create a contributing factor for a retrospective report",
        "description" : "Add a new contributing factor to an incident",
        "operationId" : "create_post_mortem_reason",
        "parameters" : [ {
          "name" : "report_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_post_mortem_reason"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Add a new contributing factor to an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostMortems_ReasonEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_post_mortem_reason"
      }
    },
    "/v1/post_mortems/reports/{report_id}/reasons/{reason_id}" : {
      "delete" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Delete a contributing factor from a retrospective report",
        "description" : "Delete a contributing factor",
        "operationId" : "delete_post_mortem_reason",
        "parameters" : [ {
          "name" : "report_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reason_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a contributing factor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostMortems_ReasonEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Update a contributing factor in a retrospective report",
        "description" : "Update a contributing factor",
        "operationId" : "update_post_mortem_reason",
        "parameters" : [ {
          "name" : "report_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reason_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_post_mortem_reason"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a contributing factor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostMortems_ReasonEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_post_mortem_reason"
      }
    },
    "/v1/post_mortems/reports/{report_id}/reasons/order" : {
      "put" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Reorder a contributing factor for a retrospective report",
        "description" : "Update the order of contributing factors in a retrospective report",
        "operationId" : "reorder_post_mortem_reasons",
        "parameters" : [ {
          "name" : "report_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/reorder_post_mortem_reasons"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update the order of contributing factors in a retrospective report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostMortems_ReasonEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "reorder_post_mortem_reasons"
      }
    },
    "/v1/post_mortems/reports/{report_id}/publish" : {
      "post" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Publish a retrospective report",
        "description" : "Marks an incident retrospective as published and emails all of the participants in the report the summary",
        "operationId" : "publish_post_mortem_report",
        "parameters" : [ {
          "name" : "report_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/publish_post_mortem_report"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Marks an incident retrospective as published and emails all of the participants in the report the summary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostMortems_PostMortemReportEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "publish_post_mortem_report"
      }
    },
    "/v1/post_mortems/reports/{report_id}/fields/{field_id}" : {
      "patch" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Update a retrospective field",
        "description" : "Update a field value on a post mortem report",
        "operationId" : "update_post_mortem_field",
        "parameters" : [ {
          "name" : "field_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "report_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_post_mortem_field"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a field value on a post mortem report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostMortems_SectionFieldEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_post_mortem_field"
      }
    },
    "/v1/post_mortems/questions" : {
      "get" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "List retrospective questions",
        "description" : "List the questions configured to be provided and filled out on each retrospective report.",
        "operationId" : "list_post_mortem_questions",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List the questions configured to be provided and filled out on each retrospective report.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostMortems_QuestionTypeEntityPaginated"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Update retrospective questions",
        "description" : "Update the questions configured to be provided and filled out on future retrospective reports.",
        "operationId" : "update_post_mortem_questions",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_post_mortem_questions"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update the questions configured to be provided and filled out on future retrospective reports.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostMortems_QuestionTypeEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_post_mortem_questions"
      }
    },
    "/v1/post_mortems/questions/{question_id}" : {
      "get" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Get a retrospective question",
        "description" : "Get an incident retrospective question configured to be provided and filled out on each retrospective report.",
        "operationId" : "get_post_mortem_question",
        "parameters" : [ {
          "name" : "question_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get an incident retrospective question configured to be provided and filled out on each retrospective report.",
            "content" : { }
          }
        }
      }
    },
    "/v1/retrospective_templates" : {
      "get" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "List retrospective templates",
        "description" : "List all retrospective templates",
        "operationId" : "list_retrospective_templates",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "for_incident",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all retrospective templates",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Retrospectives_IndexTemplateEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Create a retrospective template",
        "description" : "Create a new retrospective template",
        "operationId" : "create_retrospective_template",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "description", "fields[label]", "fields[type]", "name", "sections[elements]", "sections[slug]" ],
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string"
                  },
                  "description" : {
                    "type" : "string"
                  },
                  "is_default" : {
                    "type" : "boolean",
                    "nullable" : true
                  },
                  "sections[slug]" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string",
                      "enum" : [ "timeline", "key_data", "details", "resources", "actions" ]
                    }
                  },
                  "sections[elements]" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "fields[label]" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "fields[type]" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string",
                      "enum" : [ "text", "single_select", "multi_select", "numeric", "datetime", "dynamic_input_group", "markdown", "markdown_text" ]
                    }
                  },
                  "fields[help_text]" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "fields[permissible_values]" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "fields[is_required]" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "boolean"
                    }
                  },
                  "fields[schema]" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new retrospective template",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Retrospectives_TemplateEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/retrospective_templates/{retrospective_template_id}" : {
      "get" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Get a retrospective template",
        "description" : "Retrieve a single retrospective template by ID",
        "operationId" : "get_retrospective_template",
        "parameters" : [ {
          "name" : "retrospective_template_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single retrospective template by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Retrospectives_TemplateEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Delete a retrospective template",
        "description" : "Delete a single retrospective template",
        "operationId" : "delete_retrospective_template",
        "parameters" : [ {
          "name" : "retrospective_template_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a single retrospective template",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Retrospectives_TemplateEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Retrospectives" ],
        "summary" : "Update a retrospective template",
        "description" : "Update a single retrospective template",
        "operationId" : "update_retrospective_template",
        "parameters" : [ {
          "name" : "retrospective_template_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "fields[label]", "fields[type]", "sections[elements]", "sections[slug]" ],
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "description" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "is_default" : {
                    "type" : "boolean",
                    "nullable" : true
                  },
                  "sections[slug]" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "sections[elements]" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "fields[id]" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "fields[label]" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "fields[type]" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string",
                      "enum" : [ "text", "single_select", "multi_select", "numeric", "datetime", "dynamic_input_group", "markdown", "markdown_text" ]
                    }
                  },
                  "fields[help_text]" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "fields[permissible_values]" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "fields[is_required]" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "boolean"
                    }
                  },
                  "fields[schema]" : {
                    "type" : "array",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a single retrospective template",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Retrospectives_TemplateEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/alerts" : {
      "get" : {
        "tags" : [ "Alerts" ],
        "summary" : "List alerts",
        "description" : "Retrieve all alerts from third parties",
        "operationId" : "list_alerts",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A text query for alerts",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "users",
          "in" : "query",
          "description" : "A comma separated list of user IDs. This currently only works for Signals alerts.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "teams",
          "in" : "query",
          "description" : "A comma separated list of team IDs. This currently only works for Signals alerts.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "signal_rules",
          "in" : "query",
          "description" : "A comma separated list of signals rule IDs. This currently only works for Signals alerts.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "environments",
          "in" : "query",
          "description" : "A comma separated list of environment IDs. This currently only works for Signals alerts.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "functionalities",
          "in" : "query",
          "description" : "A comma separated list of functionality IDs. This currently only works for Signals alerts.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "services",
          "in" : "query",
          "description" : "A comma separated list of service IDs. This currently only works for Signals alerts.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "A comma separated list of tags. This currently only works for Signals alerts.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tag_match_strategy",
          "in" : "query",
          "description" : "The strategy to match tags. `any` will return alerts that have at least one of the supplied tags, `match_all` will return only alerts that have all of the supplied tags, and `exclude` will only return alerts that have none of the supplied tags. This currently only works for Signals alerts.",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "any", "match_all", "exclude" ]
          }
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "A comma separated list of statuses to filter by. Valid statuses are: opened, acknowledged, resolved, ignored, expired, or linked",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve all alerts from third parties",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Alerts_AlertEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/alerts/{alert_id}" : {
      "get" : {
        "tags" : [ "Alerts" ],
        "summary" : "Get an alert",
        "description" : "Retrieve a single alert",
        "operationId" : "get_alert",
        "parameters" : [ {
          "name" : "alert_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single alert",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Alerts_AlertEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/processing_log_entries" : {
      "get" : {
        "tags" : [ "Alerts" ],
        "summary" : "List alert processing log entries",
        "description" : "Processing Log Entries for a specific alert",
        "operationId" : "list_processing_log_entries",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "integration_slug",
          "in" : "query",
          "description" : "Scopes returned log entries to a specific integration ID",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "connection_id",
          "in" : "query",
          "description" : "Scopes returned log entries to a specific connection ID",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "of_level",
          "in" : "query",
          "description" : "Returns logs of all levels equal to or above the provided level",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "unknown", "debug", "info", "warn", "error", "fatal" ]
          }
        }, {
          "name" : "exact_level",
          "in" : "query",
          "description" : "Returns log entries of all levels equal to the provided level",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "unknown", "debug", "info", "warn", "error", "fatal" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Processing Log Entries for a specific alert",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Alerts_ProcessingLogEntryEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ticketing/tickets" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "List tickets",
        "description" : "List all of the tickets that have been added to the organiation",
        "operationId" : "list_tickets",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "A comma separated list of tags",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tag_match_strategy",
          "in" : "query",
          "description" : "A matching strategy for the tags provided",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "any", "match_all", "exclude" ]
          }
        }, {
          "name" : "assigned_user",
          "in" : "query",
          "description" : "Filter tickets assigned to this user id",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Filter tickets by state",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "open", "in_progress", "cancelled", "done" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the tickets that have been added to the organiation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_TicketEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Create a ticket",
        "description" : "Creates a ticket for a project",
        "operationId" : "create_ticket",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_ticket"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Creates a ticket for a project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_TicketEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_ticket"
      }
    },
    "/v1/ticketing/tickets/{ticket_id}" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Get a ticket",
        "description" : "Retrieves a single ticket by ID",
        "operationId" : "get_ticket",
        "parameters" : [ {
          "name" : "ticket_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves a single ticket by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_TicketEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Archive a ticket",
        "description" : "Archive a ticket",
        "operationId" : "delete_ticket",
        "parameters" : [ {
          "name" : "ticket_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Archive a ticket",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Update a ticket",
        "description" : "Update a ticket's attributes",
        "operationId" : "update_ticket",
        "parameters" : [ {
          "name" : "ticket_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_ticket"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a ticket's attributes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_TicketEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_ticket"
      }
    },
    "/v1/ticketing/projects" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "List ticketing projects",
        "description" : "List all ticketing projects available to the organization",
        "operationId" : "list_ticketing_projects",
        "parameters" : [ {
          "name" : "supports_ticket_types",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "providers",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "connection_ids",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "configured_projects",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all ticketing projects available to the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_Projects_ProjectListItemEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Get a ticketing project",
        "description" : "Retrieve a single ticketing project by ID",
        "operationId" : "get_ticketing_project",
        "parameters" : [ {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single ticketing project by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_Projects_ProjectListItemEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/configuration_options" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "List configuration options for a ticketing project",
        "description" : "List all configuration options for a ticketing project",
        "operationId" : "get_configuration_options",
        "parameters" : [ {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all configuration options for a ticketing project",
            "content" : { }
          }
        }
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/configuration_options/options_for/{field_id}" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "List a field's configuration options for a ticketing project",
        "description" : "List a field's configuration options for a ticketing project",
        "operationId" : "get_options_for_field",
        "parameters" : [ {
          "name" : "field_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List a field's configuration options for a ticketing project",
            "content" : { }
          }
        }
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/field_maps/available_fields" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "List available fields for ticket field mapping",
        "description" : "Returns metadata for the fields that are available for field mapping.",
        "operationId" : "list_available_ticketing_field_maps",
        "parameters" : [ {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns metadata for the fields that are available for field mapping.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_FieldMaps_MappableFieldEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/field_maps" : {
      "post" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Create a field mapping for a ticketing project",
        "description" : "Creates field map for a ticketing project",
        "operationId" : "create_ticketing_field_map",
        "parameters" : [ {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Creates field map for a ticketing project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_ProjectFieldMapEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/field_maps/{map_id}" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Get a field map for a ticketing project",
        "description" : "Retrieve field map for a ticketing project",
        "operationId" : "get_ticketing_field_map",
        "parameters" : [ {
          "name" : "map_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve field map for a ticketing project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_ProjectFieldMapEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Archive a field map for a ticketing project",
        "description" : "Archive field map for a ticketing project",
        "operationId" : "delete_ticketing_field_map",
        "parameters" : [ {
          "name" : "map_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Archive field map for a ticketing project",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Update a field map for a ticketing project",
        "description" : "Update field map for a ticketing project",
        "operationId" : "update_ticketing_field_map",
        "parameters" : [ {
          "name" : "map_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Update field map for a ticketing project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_ProjectFieldMapEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/inbound_field_maps/available_fields" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "List available fields for ticket field mapping",
        "description" : "Returns metadata for the fields that are available for inbound field mapping.",
        "operationId" : "list_available_inbound_field_maps",
        "parameters" : [ {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns metadata for the fields that are available for inbound field mapping.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_ProjectInboundMappableFieldEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/inbound_field_maps" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "List inbound field maps for a ticketing project",
        "description" : "List all inbound field maps for a ticketing project",
        "operationId" : "list_inbound_field_maps",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "ticket_type",
          "in" : "query",
          "description" : "Filter by ticket type. Values: incident, follow_up",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "incident", "follow_up" ]
          }
        }, {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all inbound field maps for a ticketing project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_ProjectInboundFieldMapEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Create inbound field map for a ticketing project",
        "description" : "Creates inbound field map for a ticketing project",
        "operationId" : "create_inbound_field_map",
        "parameters" : [ {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Creates inbound field map for a ticketing project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_ProjectInboundFieldMapEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/inbound_field_maps/{map_id}" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Get inbound field map for a ticketing project",
        "description" : "Retrieve inbound field map for a ticketing project",
        "operationId" : "get_inbound_field_map",
        "parameters" : [ {
          "name" : "map_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve inbound field map for a ticketing project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_ProjectInboundFieldMapEntity"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Update inbound field map for a ticketing project",
        "description" : "Update inbound field map for a ticketing project",
        "operationId" : "update_inbound_field_map",
        "parameters" : [ {
          "name" : "map_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Update inbound field map for a ticketing project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_ProjectInboundFieldMapEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Archive inbound field map for a ticketing project",
        "description" : "Archive inbound field map for a ticketing project",
        "operationId" : "delete_inbound_field_map",
        "parameters" : [ {
          "name" : "map_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Archive inbound field map for a ticketing project",
            "content" : { }
          }
        }
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/provider_project_configurations" : {
      "post" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Create a ticketing project configuration",
        "description" : "Creates configuration for a ticketing project",
        "operationId" : "create_ticketing_project_config",
        "parameters" : [ {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Creates configuration for a ticketing project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_ProjectConfigEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ticketing/projects/{ticketing_project_id}/provider_project_configurations/{config_id}" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Get configuration for a ticketing project",
        "description" : "Retrieve configuration for a ticketing project",
        "operationId" : "get_ticketing_project_config",
        "parameters" : [ {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "config_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve configuration for a ticketing project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_ProjectConfigEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Archive a ticketing project configuration",
        "description" : "Archive configuration for a ticketing project",
        "operationId" : "delete_ticketing_project_config",
        "parameters" : [ {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "config_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Archive configuration for a ticketing project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_ProjectConfigEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Update configuration for a ticketing project",
        "description" : "Update configuration for a ticketing project",
        "operationId" : "update_ticketing_project_config",
        "parameters" : [ {
          "name" : "ticketing_project_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "config_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Update configuration for a ticketing project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_ProjectConfigEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ticketing/priorities" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "List ticketing priorities",
        "description" : "List all ticketing priorities available to the organization",
        "operationId" : "list_ticketing_priorities",
        "responses" : {
          "200" : {
            "description" : "List all ticketing priorities available to the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_PriorityEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Create a ticketing priority",
        "description" : "Create a single ticketing priority",
        "operationId" : "create_ticketing_priority",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_ticketing_priority"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a single ticketing priority",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_PriorityEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_ticketing_priority"
      }
    },
    "/v1/ticketing/priorities/{id}" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Get a ticketing priority",
        "description" : "Retrieve a single ticketing priority by ID",
        "operationId" : "get_ticketing_priority",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a single ticketing priority by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_PriorityEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Delete a ticketing priority",
        "description" : "Delete a single ticketing priority by ID",
        "operationId" : "delete_ticketing_priority",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a single ticketing priority by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_PriorityEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Ticketing" ],
        "summary" : "Update a ticketing priority",
        "description" : "Update a single ticketing priority's attributes",
        "operationId" : "update_ticketing_priority",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_ticketing_priority"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a single ticketing priority's attributes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticketing_PriorityEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_ticketing_priority"
      }
    },
    "/v1/ticketing/ticket_tags" : {
      "get" : {
        "tags" : [ "Ticketing" ],
        "summary" : "List ticket tags",
        "description" : "List all of the ticket tags in the organization",
        "operationId" : "list_ticket_tags",
        "parameters" : [ {
          "name" : "prefix",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the ticket tags in the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/task_lists" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "List task lists",
        "description" : "Lists all task lists for your organization",
        "operationId" : "list_task_lists",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists all task lists for your organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskListEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Tasks" ],
        "summary" : "Create a task list",
        "description" : "Creates a new task list",
        "operationId" : "create_task_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_task_list"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Creates a new task list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskListEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_task_list"
      }
    },
    "/v1/task_lists/{task_list_id}" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Get a task list",
        "description" : "Retrieves a single task list by ID",
        "operationId" : "get_task_list",
        "parameters" : [ {
          "name" : "task_list_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves a single task list by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskListEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Tasks" ],
        "summary" : "Delete a task list",
        "description" : "Delete a task list",
        "operationId" : "delete_task_list",
        "parameters" : [ {
          "name" : "task_list_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a task list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskListEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Tasks" ],
        "summary" : "Update a task list",
        "description" : "Updates a task list's attributes and task list items",
        "operationId" : "update_task_list",
        "parameters" : [ {
          "name" : "task_list_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_task_list"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updates a task list's attributes and task list items",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskListEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_task_list"
      }
    },
    "/v1/noauth/ping" : {
      "get" : {
        "tags" : [ "Account Settings" ],
        "summary" : "Check API connectivity",
        "description" : "Simple endpoint to verify your API connection is working",
        "operationId" : "ping_noauth",
        "responses" : {
          "200" : {
            "description" : "Simple endpoint to verify your API connection is working",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PongEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/scim/v2/Groups/{id}" : {
      "get" : {
        "tags" : [ "SCIM" ],
        "summary" : "Get a SCIM group",
        "description" : "SCIM endpoint that lists a Team (Colloquial for Group in the SCIM protocol)",
        "operationId" : "get_scim_group",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "SCIM endpoint that lists a Team (Colloquial for Group in the SCIM protocol)",
            "content" : { }
          }
        }
      },
      "put" : {
        "tags" : [ "SCIM" ],
        "summary" : "Update a SCIM group and assign members",
        "description" : "SCIM endpoint to update a Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role, any missing members will be removed from the team.",
        "operationId" : "update_scim_group",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/scim+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_scim_group"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "SCIM endpoint to update a Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role, any missing members will be removed from the team.",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "update_scim_group"
      },
      "delete" : {
        "tags" : [ "SCIM" ],
        "summary" : "Delete a SCIM group",
        "description" : "SCIM endpoint to delete a Team (Colloquial for Group in the SCIM protocol).",
        "operationId" : "delete_scim_group",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "SCIM endpoint to delete a Team (Colloquial for Group in the SCIM protocol).",
            "content" : { }
          }
        }
      }
    },
    "/v1/scim/v2/Groups" : {
      "get" : {
        "tags" : [ "SCIM" ],
        "summary" : "List SCIM groups",
        "description" : "SCIM endpoint that lists all Teams (Colloquial for Group in the SCIM protocol)",
        "operationId" : "list_scim_groups",
        "parameters" : [ {
          "name" : "startIndex",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "count",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "This is a string used to query groups by displayName.\n        Proper example syntax for this would be `?filter=displayName eq \"My Team Name\"`.\n        Currently we only support the `eq` operator",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "SCIM endpoint that lists all Teams (Colloquial for Group in the SCIM protocol)",
            "content" : { }
          }
        }
      },
      "post" : {
        "tags" : [ "SCIM" ],
        "summary" : "Create a SCIM group and assign members",
        "description" : "SCIM endpoint to create a new Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role.",
        "operationId" : "create_scim_group",
        "requestBody" : {
          "content" : {
            "application/scim+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_scim_group"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "SCIM endpoint to create a new Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role.",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "create_scim_group"
      }
    },
    "/v1/scim/v2/Users/{id}" : {
      "get" : {
        "tags" : [ "SCIM" ],
        "summary" : "Get a SCIM user",
        "description" : "SCIM endpoint that lists a User",
        "operationId" : "get_scim_user",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "SCIM endpoint that lists a User",
            "content" : { }
          }
        }
      },
      "put" : {
        "tags" : [ "SCIM" ],
        "summary" : "Update a User from SCIM data",
        "description" : "PUT SCIM endpoint to update a User. This endpoint is used to replace a resource's attributes.",
        "operationId" : "update_scim_user",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/scim+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_scim_user"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "PUT SCIM endpoint to update a User. This endpoint is used to replace a resource's attributes.",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "update_scim_user"
      },
      "delete" : {
        "tags" : [ "SCIM" ],
        "summary" : "Delete a User matching SCIM data",
        "description" : "SCIM endpoint to delete a User. This endpoint will deactivate a confirmed User record in our system.",
        "operationId" : "delete_scim_user",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "SCIM endpoint to delete a User. This endpoint will deactivate a confirmed User record in our system.",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "SCIM" ],
        "summary" : "Update a User from SCIM data",
        "description" : "PATCH SCIM endpoint to update a User. This endpoint is used to update a resource's attributes.",
        "operationId" : "patch_scim_user",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/scim+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/patch_scim_user"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "PATCH SCIM endpoint to update a User. This endpoint is used to update a resource's attributes.",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "patch_scim_user"
      }
    },
    "/v1/scim/v2/Users" : {
      "get" : {
        "tags" : [ "SCIM" ],
        "summary" : "List SCIM users",
        "description" : "SCIM endpoint that lists users. This endpoint will display a list of Users currently in the system.",
        "operationId" : "list_scim_users",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "This is a string used to query users by either userName or email.\n        Proper example syntax for this would be `?filter=userName eq john` or `?filter=userName eq \"john@firehydrant.com\"`.\n        Currently we only support the `eq` operator",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "startIndex",
          "in" : "query",
          "description" : "This is an integer which represents a pagination offset",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "This is an integer which represents the number of items per page in the response",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "SCIM endpoint that lists users. This endpoint will display a list of Users currently in the system.",
            "content" : { }
          }
        }
      },
      "post" : {
        "tags" : [ "SCIM" ],
        "summary" : "Create a User from SCIM data",
        "description" : "SCIM endpoint to create and provision a new User. This endpoint will provision the User, which allows them to accept their account throught their IDP or via the Forgot Password flow.",
        "operationId" : "create_scim_user",
        "requestBody" : {
          "content" : {
            "application/scim+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_scim_user"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "SCIM endpoint to create and provision a new User. This endpoint will provision the User, which allows them to accept their account throught their IDP or via the Forgot Password flow.",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "create_scim_user"
      }
    },
    "/v1/catalogs/{catalog_id}/refresh" : {
      "get" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Refresh a service catalog",
        "description" : "Schedules an async task to re-import catalog info and update catalog data accordingly.",
        "operationId" : "refresh_catalog",
        "parameters" : [ {
          "name" : "catalog_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Schedules an async task to re-import catalog info and update catalog data accordingly.",
            "content" : { }
          }
        }
      }
    },
    "/v1/catalogs/{catalog_id}/ingest" : {
      "post" : {
        "tags" : [ "Catalog Entries" ],
        "summary" : "Ingest service catalog data",
        "description" : "Accepts catalog data in the configured format and asyncronously processes the data to incorporate changes into service catalog.",
        "operationId" : "ingest_catalog_data",
        "parameters" : [ {
          "name" : "catalog_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ingest_catalog_data"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Accepts catalog data in the configured format and asyncronously processes the data to incorporate changes into service catalog.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Imports_ImportEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "ingest_catalog_data"
      }
    },
    "/v1/checklist_templates" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "List checklist templates",
        "description" : "List all of the checklist templates that have been added to the organization",
        "operationId" : "list_checklist_templates",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "A query to search checklist templates by their name",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the checklist templates that have been added to the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChecklistTemplateEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Tasks" ],
        "summary" : "Create a checklist template",
        "description" : "Creates a checklist template for the organization",
        "operationId" : "create_checklist_template",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_checklist_template"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Creates a checklist template for the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChecklistTemplateEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_checklist_template"
      }
    },
    "/v1/checklist_templates/{id}" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Get a checklist template",
        "description" : "Retrieves a single checklist template by ID",
        "operationId" : "get_checklist_template",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves a single checklist template by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChecklistTemplateEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Tasks" ],
        "summary" : "Archive a checklist template",
        "description" : "Archive a checklist template",
        "operationId" : "delete_checklist_template",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Checklist Template UUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Archive a checklist template",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChecklistTemplateEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Tasks" ],
        "summary" : "Update a checklist template",
        "description" : "Update a checklist templates attributes",
        "operationId" : "update_checklist_template",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_checklist_template"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a checklist templates attributes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChecklistTemplateEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_checklist_template"
      }
    },
    "/v1/bootstrap" : {
      "get" : {
        "tags" : [ "Account Settings" ],
        "summary" : "Get initial application configuration",
        "description" : "Get initial application configuration",
        "operationId" : "get_bootstrap",
        "responses" : {
          "200" : {
            "description" : "Get initial application configuration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PublicAPI_V1_BootstrapEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/form_configurations/{slug}/append_data_on_select/{field_id}/{selected_value}" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Get data for a form field on select",
        "description" : "Get data for a form field on select that should be appended to a form by using a template",
        "operationId" : "append_form_data_on_selected_value_get",
        "parameters" : [ {
          "name" : "slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "field_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "selected_value",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get data for a form field on select that should be appended to a form by using a template",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PublicAPI_V1_FormConfigurations_SelectedValueEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/form_configurations/{slug}" : {
      "get" : {
        "tags" : [ "Incident Settings" ],
        "summary" : "Get a form configuration",
        "description" : "Get a form configuration",
        "operationId" : "get_form_configuration",
        "parameters" : [ {
          "name" : "slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a form configuration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FormConfigurationEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/conversations/{conversation_id}/comments/{comment_id}/reactions/{reaction_id}" : {
      "delete" : {
        "tags" : [ "Conversations" ],
        "summary" : "Delete a reaction from a conversation comment",
        "description" : "Archive a reaction",
        "operationId" : "delete_comment_reaction",
        "parameters" : [ {
          "name" : "reaction_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "conversation_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "comment_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Archive a reaction",
            "content" : { }
          }
        }
      }
    },
    "/v1/conversations/{conversation_id}/comments/{comment_id}/reactions" : {
      "get" : {
        "tags" : [ "Conversations" ],
        "summary" : "List reactions for a conversation comment",
        "description" : "List all of the reactions that have been added to a comment",
        "operationId" : "list_comment_reactions",
        "parameters" : [ {
          "name" : "conversation_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "comment_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the reactions that have been added to a comment",
            "content" : { }
          }
        }
      },
      "post" : {
        "tags" : [ "Conversations" ],
        "summary" : "Create a reaction for a conversation comment",
        "description" : "Create a reaction on a comment",
        "operationId" : "create_comment_reaction",
        "parameters" : [ {
          "name" : "conversation_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "comment_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_comment_reaction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a reaction on a comment",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "create_comment_reaction"
      }
    },
    "/v1/conversations/{conversation_id}/comments/{comment_id}" : {
      "get" : {
        "tags" : [ "Conversations" ],
        "summary" : "Get a conversation comment",
        "description" : "Retrieves a single comment by ID",
        "operationId" : "get_comment",
        "parameters" : [ {
          "name" : "comment_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "conversation_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves a single comment by ID",
            "content" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "Conversations" ],
        "summary" : "Archive a conversation comment",
        "description" : "Archive a comment",
        "operationId" : "delete_comment",
        "parameters" : [ {
          "name" : "comment_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "conversation_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Archive a comment",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Conversations" ],
        "summary" : "Update a conversation comment",
        "description" : "Update a comment's attributes",
        "operationId" : "update_comment",
        "parameters" : [ {
          "name" : "comment_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "conversation_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_comment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a comment's attributes",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "update_comment"
      }
    },
    "/v1/conversations/{conversation_id}/comments" : {
      "get" : {
        "tags" : [ "Conversations" ],
        "summary" : "List comments for a conversation",
        "description" : "List all of the comments that have been added to the organization",
        "operationId" : "list_comments",
        "parameters" : [ {
          "name" : "before",
          "in" : "query",
          "description" : "An ISO8601 timestamp that allows filtering for comments posted before the provided time.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "An ISO8601 timestamp that allows filtering for comments posted after the provided time.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Allows sorting comments by the time they were posted, ascending or descending.",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "asc", "desc" ],
            "default" : "asc"
          }
        }, {
          "name" : "conversation_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all of the comments that have been added to the organization",
            "content" : { }
          }
        }
      },
      "post" : {
        "tags" : [ "Conversations" ],
        "summary" : "Create a conversation comment",
        "description" : "Creates a comment for a project",
        "operationId" : "create_comment",
        "parameters" : [ {
          "name" : "conversation_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_comment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Creates a comment for a project",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "create_comment"
      }
    },
    "/v1/signals/alerts/{id}" : {
      "patch" : {
        "tags" : [ "Alerts" ],
        "summary" : "Update a Signal alert",
        "description" : "Update a Signal alert",
        "operationId" : "update_signals_alert",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_signals_alert"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a Signal alert",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Alerts_SignalAlertEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_signals_alert"
      }
    },
    "/v1/signals/analytics/timeseries" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "Generate timeseries alert metrics",
        "description" : "Generate a timeseries-based report of metrics for Signals alerts",
        "operationId" : "get_signals_timeseries_analytics",
        "parameters" : [ {
          "name" : "bucket",
          "in" : "query",
          "description" : "String that determines how records are grouped",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "month", "week", "day" ]
          }
        }, {
          "name" : "signal_rules",
          "in" : "query",
          "description" : "A comma separated list of signal rule IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "teams",
          "in" : "query",
          "description" : "A comma separated list of team IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "environments",
          "in" : "query",
          "description" : "A comma separated list of environment IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "services",
          "in" : "query",
          "description" : "A comma separated list of service IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "A comma separated list of tags",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "users",
          "in" : "query",
          "description" : "A comma separated list of user IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "group_by",
          "in" : "query",
          "description" : "String that determines how records are grouped",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "signal_rules", "teams", "services", "environments", "tags" ]
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "String that determines how records are sorted",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "total_opened_alerts", "total_acked_alerts", "total_incidents", "acked_percentage", "incidents_percentage" ]
          }
        }, {
          "name" : "sort_direction",
          "in" : "query",
          "description" : "String that determines how records are sorted",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "asc", "desc" ]
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "The start date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "The end date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Generate a timeseries-based report of metrics for Signals alerts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_Analytics_TimeseriesPointEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/signals/analytics/grouped_metrics" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "Generate grouped alert metrics",
        "description" : "Generate a report of grouped metrics for Signals alerts",
        "operationId" : "get_signals_grouped_metrics",
        "parameters" : [ {
          "name" : "signal_rules",
          "in" : "query",
          "description" : "A comma separated list of signal rule IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "teams",
          "in" : "query",
          "description" : "A comma separated list of team IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "environments",
          "in" : "query",
          "description" : "A comma separated list of environment IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "services",
          "in" : "query",
          "description" : "A comma separated list of service IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "A comma separated list of tags",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "users",
          "in" : "query",
          "description" : "A comma separated list of user IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "group_by",
          "in" : "query",
          "description" : "String that determines how records are grouped",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "signal_rules", "teams", "services", "environments", "tags" ]
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "String that determines how records are sorted",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "total_opened_alerts", "total_acked_alerts", "total_incidents", "acked_percentage", "incidents_percentage" ]
          }
        }, {
          "name" : "sort_direction",
          "in" : "query",
          "description" : "String that determines how records are sorted",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "asc", "desc" ]
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "The start date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "The end date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Generate a report of grouped metrics for Signals alerts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_Analytics_GroupedMetricsEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/signals/analytics/mttx" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "Get MTTX analytics for signals",
        "description" : "Get mean-time-to-acknowledged (MTTA) and mean-time-to-resolved (MTTR) metrics for Signals alerts",
        "operationId" : "get_signals_mttx_analytics",
        "parameters" : [ {
          "name" : "signal_rules",
          "in" : "query",
          "description" : "A comma separated list of signal rule IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "teams",
          "in" : "query",
          "description" : "A comma separated list of team IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "environments",
          "in" : "query",
          "description" : "A comma separated list of environment IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "services",
          "in" : "query",
          "description" : "A comma separated list of service IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "A comma separated list of tags",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "users",
          "in" : "query",
          "description" : "A comma separated list of user IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "group_by",
          "in" : "query",
          "description" : "String that determines how records are grouped",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "signal_rules", "teams", "services", "environments", "tags" ]
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "String that determines how records are sorted",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "total_opened_alerts", "total_acked_alerts", "total_incidents", "acked_percentage", "incidents_percentage" ]
          }
        }, {
          "name" : "sort_direction",
          "in" : "query",
          "description" : "String that determines how records are sorted",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "asc", "desc" ]
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "The start date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "The end date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get mean-time-to-acknowledged (MTTA) and mean-time-to-resolved (MTTR) metrics for Signals alerts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_Analytics_MttxMetricsEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/signals/analytics/noise/metrics" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "Get noise analytics for signals",
        "description" : "Get noise metrics for Signals alerts",
        "operationId" : "get_signals_noise_analytics",
        "parameters" : [ {
          "name" : "bucket",
          "in" : "query",
          "description" : "String that determines how records are grouped",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "month", "week", "day" ]
          }
        }, {
          "name" : "signal_rules",
          "in" : "query",
          "description" : "A comma separated list of signal rule IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "teams",
          "in" : "query",
          "description" : "A comma separated list of team IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "environments",
          "in" : "query",
          "description" : "A comma separated list of environment IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "services",
          "in" : "query",
          "description" : "A comma separated list of service IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "A comma separated list of tags",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "users",
          "in" : "query",
          "description" : "A comma separated list of user IDs",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "group_by",
          "in" : "query",
          "description" : "String that determines how records are grouped",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "signal_rules", "teams", "services", "environments", "tags" ]
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "String that determines how records are sorted",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "total_opened_alerts", "total_acked_alerts", "total_incidents", "acked_percentage", "incidents_percentage" ]
          }
        }, {
          "name" : "sort_direction",
          "in" : "query",
          "description" : "String that determines how records are sorted",
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "asc", "desc" ]
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "The start date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "The end date to return metrics from",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get noise metrics for Signals alerts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_Analytics_NoiseMetricsEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/signals/analytics/shifts/export" : {
      "get" : {
        "tags" : [ "Metrics/Reporting" ],
        "summary" : "Export on-call hours report",
        "description" : "Export on-call hours report for users/teams during a time period",
        "operationId" : "export_signals_shift_analytics",
        "parameters" : [ {
          "name" : "period_start",
          "in" : "query",
          "description" : "Start of the period to fetch hours for (UTC)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "period_end",
          "in" : "query",
          "description" : "End of the period to fetch hours for (UTC)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "user_ids" : {
                    "type" : "array",
                    "description" : "Array of user IDs to fetch oncall hours for",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "team_ids" : {
                    "type" : "array",
                    "description" : "Array of team IDs to fetch oncall hours for",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Export on-call hours report for users/teams during a time period",
            "content" : { }
          }
        }
      }
    },
    "/v1/signals/call_routes" : {
      "get" : {
        "tags" : [ "Call Routes" ],
        "summary" : "List call routes",
        "description" : "List call routes for the organization",
        "operationId" : "list_call_routes",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List call routes for the organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_CallRouteEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/signals/call_routes/{id}" : {
      "get" : {
        "tags" : [ "Call Routes" ],
        "summary" : "Retrieve a call route",
        "description" : "Retrieve a call route by ID",
        "operationId" : "get_call_route",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a call route by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_CallRouteEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Call Routes" ],
        "summary" : "Delete a call route",
        "description" : "Delete a call route by ID",
        "operationId" : "delete_call_route",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a call route by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_CallRouteEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Call Routes" ],
        "summary" : "Update a call route",
        "description" : "Update a call route by ID",
        "operationId" : "update_call_route",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_call_route"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a call route by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_CallRouteEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_call_route"
      }
    },
    "/v1/signals/event_sources" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "List event sources for Signals",
        "description" : "List all Signals event sources for the authenticated user.",
        "operationId" : "list_signals_event_sources",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "query",
          "description" : "Team ID to send signals to directly",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "escalation_policy_id",
          "in" : "query",
          "description" : "Escalation policy ID to send signals to directly. `team_id` is required if this is provided.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "on_call_schedule_id",
          "in" : "query",
          "description" : "On-call schedule ID to send signals to directly. `team_id` is required if this is provided.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "user_id",
          "in" : "query",
          "description" : "User ID to send signals to directly",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all Signals event sources for the authenticated user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_TransposerListEntity"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Signals" ],
        "summary" : "Create an event source for Signals",
        "description" : "Create a Signals event source for the authenticated user.",
        "operationId" : "create_signals_event_source",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_signals_event_source"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Create a Signals event source for the authenticated user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_TransposerEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_signals_event_source"
      }
    },
    "/v1/signals/event_sources/{transposer_slug}" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "Get an event source for Signals",
        "description" : "Get a Signals event source by slug",
        "operationId" : "get_signals_event_source",
        "parameters" : [ {
          "name" : "transposer_slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a Signals event source by slug",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_TransposerEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Signals" ],
        "summary" : "Delete an event source for Signals",
        "description" : "Delete a Signals event source by slug",
        "operationId" : "delete_signals_event_source",
        "parameters" : [ {
          "name" : "transposer_slug",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a Signals event source by slug",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_TransposerEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/signals/hacker_mode" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "Get hacker mode status",
        "description" : "Get the status of the hacker mode for the current user",
        "operationId" : "get_signals_hacker_mode",
        "responses" : {
          "200" : {
            "description" : "Get the status of the hacker mode for the current user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_HackerModeEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/signals/grouping" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "List alert grouping configurations.",
        "description" : "List all Signals alert grouping rules for the organization.",
        "operationId" : "list_signals_alert_grouping_configurations",
        "responses" : {
          "200" : {
            "description" : "List all Signals alert grouping rules for the organization.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_GroupingEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Signals" ],
        "summary" : "Create an alert grouping configuration.",
        "description" : "Create a Signals alert grouping rule for the organization.",
        "operationId" : "create_signals_alert_grouping_configuration",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_signals_alert_grouping_configuration"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a Signals alert grouping rule for the organization.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_GroupingEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_signals_alert_grouping_configuration"
      }
    },
    "/v1/signals/grouping/{id}" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "Get an alert grouping configuration.",
        "description" : "Get a Signals alert grouping rule by ID.",
        "operationId" : "get_signals_alert_grouping_configuration",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a Signals alert grouping rule by ID.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_GroupingEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Signals" ],
        "summary" : "Delete an alert grouping configuration.",
        "description" : "Delete a Signals alert grouping rule by ID.",
        "operationId" : "delete_signals_alert_grouping_configuration",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete a Signals alert grouping rule by ID.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_GroupingEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Signals" ],
        "summary" : "Update an alert grouping configuration.",
        "description" : "Update a Signals alert grouping rule for the organization.",
        "operationId" : "update_signals_alert_grouping_configuration",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_signals_alert_grouping_configuration"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a Signals alert grouping rule for the organization.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_GroupingEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_signals_alert_grouping_configuration"
      }
    },
    "/v1/signals/email_targets" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "List email targets for signals",
        "description" : "List all Signals email targets for a team.",
        "operationId" : "list_signals_email_targets",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "A query string to search the list of targets by.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all Signals email targets for a team.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_EmailTargetEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Signals" ],
        "summary" : "Create an email target for signals",
        "description" : "Create a Signals email target for a team.",
        "operationId" : "create_signals_email_target",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_signals_email_target"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a Signals email target for a team.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_EmailTargetEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_signals_email_target"
      }
    },
    "/v1/signals/email_targets/{id}" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "Get a signal email target",
        "description" : "Get a Signals email target by ID",
        "operationId" : "get_signals_email_target",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a Signals email target by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_EmailTargetEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Signals" ],
        "summary" : "Delete a signal email target",
        "description" : "Delete a Signals email target by ID",
        "operationId" : "delete_signals_email_target",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete a Signals email target by ID",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Signals" ],
        "summary" : "Update an email target",
        "description" : "Update a Signals email target by ID",
        "operationId" : "update_signals_email_target",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_signals_email_target"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a Signals email target by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_EmailTargetEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_signals_email_target"
      }
    },
    "/v1/signals/webhook_targets" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "List webhook targets",
        "description" : "List all Signals webhook targets.",
        "operationId" : "list_signals_webhook_targets",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "A query string for searching through the list of webhook targets.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all Signals webhook targets.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_WebhookTargetEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Signals" ],
        "summary" : "Create a webhook target",
        "description" : "Create a Signals webhook target.",
        "operationId" : "create_signals_webhook_target",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_signals_webhook_target"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a Signals webhook target.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_WebhookTargetEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_signals_webhook_target"
      }
    },
    "/v1/signals/webhook_targets/{id}" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "Get a webhook target",
        "description" : "Get a Signals webhook target by ID",
        "operationId" : "get_signals_webhook_target",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a Signals webhook target by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_WebhookTargetEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Signals" ],
        "summary" : "Delete a webhook target",
        "description" : "Delete a Signals webhook target by ID",
        "operationId" : "delete_signals_webhook_target",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete a Signals webhook target by ID",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Signals" ],
        "summary" : "Update a webhook target",
        "description" : "Update a Signals webhook target by ID",
        "operationId" : "update_signals_webhook_target",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_signals_webhook_target"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a Signals webhook target by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_WebhookTargetEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_signals_webhook_target"
      }
    },
    "/v1/signals/notification_policy_items" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "List notification policies",
        "description" : "List all Signals notification policies.",
        "operationId" : "list_notification_policy_settings",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all Signals notification policies.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_NotificationPolicyItemEntityPaginated"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Signals" ],
        "summary" : "Create a notification policy",
        "description" : "Create a Signals notification policy.",
        "operationId" : "create_handoff_notification_setting",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "max_delay", "notification_group_method", "priority" ],
                "type" : "object",
                "properties" : {
                  "notification_group_method" : {
                    "type" : "string",
                    "description" : "The group method of notification that will be delivered.",
                    "enum" : [ "any", "push", "email", "voice", "mobile_text", "chat" ]
                  },
                  "max_delay" : {
                    "type" : "string",
                    "description" : "An ISO8601 duration string specifying the maximum delay of the notification."
                  },
                  "priority" : {
                    "type" : "string",
                    "description" : "The priority of the notification.",
                    "enum" : [ "HIGH", "MEDIUM", "LOW" ]
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a Signals notification policy.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_NotificationPolicyItemEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/signals/notification_policy_items/{id}" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "Get a notification policy",
        "description" : "Get a Signals notification policy by ID",
        "operationId" : "get_notification_policy",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a Signals notification policy by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_NotificationPolicyItemEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Signals" ],
        "summary" : "Delete a notification policy",
        "description" : "Delete a Signals notification policy by ID",
        "operationId" : "delete_notification_policy",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete a Signals notification policy by ID",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Signals" ],
        "summary" : "Update a notification policy",
        "description" : "Update a Signals notification policy by ID",
        "operationId" : "update_notification_policy",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "notification_group_method" : {
                    "type" : "string",
                    "description" : "The group method of notification that will be delivered.",
                    "nullable" : true,
                    "enum" : [ "any", "push", "email", "voice", "mobile_text", "chat" ]
                  },
                  "max_delay" : {
                    "type" : "string",
                    "description" : "An ISO8601 duration string specifying the maximum delay of the notification.",
                    "nullable" : true
                  },
                  "priority" : {
                    "type" : "string",
                    "description" : "The priority of the notification.",
                    "nullable" : true,
                    "enum" : [ "HIGH", "MEDIUM", "LOW" ]
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update a Signals notification policy by ID",
            "content" : { }
          }
        }
      }
    },
    "/v1/signals/transposers" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "List signal transposers",
        "description" : "List all transposers for your organization",
        "operationId" : "list_signals_transposers",
        "responses" : {
          "200" : {
            "description" : "List all transposers for your organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_TransposerListEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/signals/ingest_url" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "Get the signals ingestion URL",
        "description" : "Retrieve the url for ingesting signals for your organization",
        "operationId" : "get_signals_ingest_url",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "query",
          "description" : "Team ID to send signals to directly",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "escalation_policy_id",
          "in" : "query",
          "description" : "Escalation policy ID to send signals to directly. `team_id` is required if this is provided.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "on_call_schedule_id",
          "in" : "query",
          "description" : "On-call schedule ID to send signals to directly. `team_id` is required if this is provided.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "user_id",
          "in" : "query",
          "description" : "User ID to send signals to directly",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve the url for ingesting signals for your organization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_IngestKeyEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/signals/debugger" : {
      "post" : {
        "tags" : [ "Signals" ],
        "summary" : "Debug Signals expressions",
        "description" : "Debug Signals expressions",
        "operationId" : "debug_signals_expression",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/debug_signals_expression"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Debug Signals expressions",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "debug_signals_expression"
      }
    },
    "/v1/signals_on_call" : {
      "get" : {
        "tags" : [ "Signals" ],
        "summary" : "List who's on call for the organization",
        "description" : "List all users who are currently on-call across the entire organization.",
        "operationId" : "list_organization_on_call_schedules",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "query",
          "description" : "An optional comma separated list of team IDs to filter currently on-call users by",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all users who are currently on-call across the entire organization.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Signals_API_OrganizationOnCallScheduleEntityPaginated"
                }
              }
            }
          }
        }
      }
    },
    "/v1/webhooks" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "summary" : "List webhooks",
        "description" : "Lists webhooks",
        "operationId" : "list_webhooks",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lists webhooks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhooks_Entities_WebhookEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Create a webhook",
        "description" : "Create a new webhook",
        "operationId" : "create_webhook",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/create_webhook"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new webhook",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhooks_Entities_WebhookEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "create_webhook"
      }
    },
    "/v1/webhooks/{webhook_id}/deliveries" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "summary" : "List webhook deliveries",
        "description" : "Get webhook deliveries",
        "operationId" : "list_webhook_deliveries",
        "parameters" : [ {
          "name" : "webhook_id",
          "in" : "path",
          "description" : "ID of a webhook",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get webhook deliveries",
            "content" : { }
          }
        }
      }
    },
    "/v1/webhooks/{webhook_id}" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Get a webhook",
        "description" : "Retrieve a specific webhook",
        "operationId" : "get_webhook",
        "parameters" : [ {
          "name" : "webhook_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a specific webhook",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhooks_Entities_WebhookEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Delete a webhook",
        "description" : "Delete a specific webhook",
        "operationId" : "delete_webhook",
        "parameters" : [ {
          "name" : "webhook_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete a specific webhook",
            "content" : { }
          }
        }
      },
      "patch" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Update a webhook",
        "description" : "Update a specific webhook",
        "operationId" : "update_webhook",
        "parameters" : [ {
          "name" : "webhook_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_webhook"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update a specific webhook",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhooks_Entities_WebhookEntity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "update_webhook"
      }
    },
    "/v1/ai/summarize_incident/{incident_id}/{generated_summary_id}/voted" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "Get the current user's vote status for an AI-generated incident summary",
        "description" : "Get the current user's vote status for an AI-generated incident summary",
        "operationId" : "get_ai_incident_summary_vote_status",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "generated_summary_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get the current user's vote status for an AI-generated incident summary",
            "content" : { }
          }
        }
      }
    },
    "/v1/ai/summarize_incident/{incident_id}/{generated_summary_id}/vote" : {
      "put" : {
        "tags" : [ "Incidents" ],
        "summary" : "Vote on an AI-generated incident summary",
        "description" : "Vote on an AI-generated incident summary for the current user",
        "operationId" : "vote_ai_incident_summary",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "generated_summary_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "direction" ],
                "type" : "object",
                "properties" : {
                  "direction" : {
                    "type" : "string",
                    "enum" : [ "up", "down" ]
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Vote on an AI-generated incident summary for the current user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AI_Entities_IncidentSummaryEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ai/preferences" : {
      "get" : {
        "tags" : [ "Account Settings" ],
        "summary" : "Get AI preferences",
        "description" : "Retrieves the current AI preferences",
        "operationId" : "get_ai_preferences",
        "responses" : {
          "200" : {
            "description" : "Retrieves the current AI preferences",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AI_Entities_PreferencesEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Account Settings" ],
        "summary" : "Update AI preferences",
        "description" : "Updates the AI preferences",
        "operationId" : "update_ai_preferences",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "ai" : {
                    "type" : "boolean",
                    "description" : "Whether to enable AI features",
                    "nullable" : true
                  },
                  "summaries" : {
                    "type" : "boolean",
                    "description" : "Whether to enable incident summaries",
                    "nullable" : true
                  },
                  "description" : {
                    "type" : "boolean",
                    "description" : "Whether to enable incident descriptions",
                    "nullable" : true
                  },
                  "impact" : {
                    "type" : "boolean",
                    "description" : "Whether to enable incident impact",
                    "nullable" : true
                  },
                  "updates" : {
                    "type" : "boolean",
                    "description" : "Whether to enable incident updates",
                    "nullable" : true
                  },
                  "retros" : {
                    "type" : "boolean",
                    "description" : "Whether to enable incident retrospectives",
                    "nullable" : true
                  },
                  "followups" : {
                    "type" : "boolean",
                    "description" : "Whether to enable incident followups",
                    "nullable" : true
                  },
                  "similar_incidents" : {
                    "type" : "boolean",
                    "description" : "Whether to enable similar incidents",
                    "nullable" : true
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updates the AI preferences",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AI_Entities_PreferencesEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/audiences" : {
      "get" : {
        "tags" : [ "Audiences" ],
        "summary" : "List audiences",
        "description" : "List all audiences",
        "operationId" : "list_audiences",
        "parameters" : [ {
          "name" : "include_archived",
          "in" : "query",
          "description" : "Include archived (discarded) audiences",
          "schema" : {
            "type" : "boolean",
            "nullable" : true,
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all audiences",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Audiences" ],
        "summary" : "Create audience",
        "description" : "Create a new audience",
        "operationId" : "create_audience",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "description", "details[prompt]", "details[question]", "name" ],
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "Name of the audience (max 255 characters)"
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "Description of the audience (max 4000 characters)"
                  },
                  "default" : {
                    "type" : "boolean",
                    "description" : "Whether this is the default audience",
                    "nullable" : true,
                    "default" : false
                  },
                  "details[question]" : {
                    "type" : "array",
                    "description" : "The incident detail question (max 255 characters)",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "details[prompt]" : {
                    "type" : "array",
                    "description" : "The prompt to display when collecting this detail",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "details[slug]" : {
                    "type" : "array",
                    "description" : "Optional unique identifier for this detail",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Create a new audience",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/audiences/{audience_id}" : {
      "get" : {
        "tags" : [ "Audiences" ],
        "summary" : "Get audience",
        "description" : "Get audience details",
        "operationId" : "get_audience",
        "parameters" : [ {
          "name" : "audience_id",
          "in" : "path",
          "description" : "Unique identifier of the audience",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get audience details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Audiences" ],
        "summary" : "Archive audience",
        "description" : "Archive an audience",
        "operationId" : "archive_audience",
        "parameters" : [ {
          "name" : "audience_id",
          "in" : "path",
          "description" : "Unique identifier of the audience",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Archive an audience",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Audiences" ],
        "summary" : "Update audience",
        "description" : "Update an existing audience",
        "operationId" : "update_audience",
        "parameters" : [ {
          "name" : "audience_id",
          "in" : "path",
          "description" : "Unique identifier of the audience",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "Name of the audience (max 255 characters)",
                    "nullable" : true
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "Description of the audience (max 4000 characters)",
                    "nullable" : true
                  },
                  "default" : {
                    "type" : "boolean",
                    "description" : "Whether this is the default audience",
                    "nullable" : true
                  },
                  "active" : {
                    "type" : "boolean",
                    "description" : "Whether the audience is active or discarded",
                    "nullable" : true
                  },
                  "details[question]" : {
                    "type" : "array",
                    "description" : "The incident detail question (max 255 characters)",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "details[prompt]" : {
                    "type" : "array",
                    "description" : "The prompt to display when collecting this detail",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "details[slug]" : {
                    "type" : "array",
                    "description" : "Optional unique identifier for this detail",
                    "nullable" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "details[position]" : {
                    "type" : "array",
                    "description" : "Position of the question in the list (1-based indexing)",
                    "nullable" : true,
                    "items" : {
                      "type" : "integer",
                      "format" : "int32"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update an existing audience",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/audiences/{audience_id}/restore" : {
      "patch" : {
        "tags" : [ "Audiences" ],
        "summary" : "Restore audience",
        "description" : "Restore a previously archived audience",
        "operationId" : "restore_audience",
        "parameters" : [ {
          "name" : "audience_id",
          "in" : "path",
          "description" : "Unique identifier of the audience",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Restore a previously archived audience",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/audiences/member/{member_id}/default" : {
      "get" : {
        "tags" : [ "Audiences" ],
        "summary" : "Get default audience",
        "description" : "Get member's default audience",
        "operationId" : "get_member_default_audience",
        "parameters" : [ {
          "name" : "member_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get member's default audience",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Audiences" ],
        "summary" : "Set default audience",
        "description" : "Set member's default audience",
        "operationId" : "set_member_default_audience",
        "parameters" : [ {
          "name" : "member_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "audience_id" ],
                "type" : "object",
                "properties" : {
                  "audience_id" : {
                    "type" : "string",
                    "description" : "ID of the audience to set as default"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Set member's default audience",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audiences_Entities_AudienceEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/audiences/{audience_id}/summaries/{incident_id}" : {
      "get" : {
        "tags" : [ "Audiences" ],
        "summary" : "Get latest summary",
        "description" : "Get the latest audience-specific summary for an incident",
        "operationId" : "get_audience_summary",
        "parameters" : [ {
          "name" : "audience_id",
          "in" : "path",
          "description" : "Unique identifier of the audience",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "description" : "Unique identifier of the incident to summarize",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get the latest audience-specific summary for an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AI_Entities_IncidentSummaryEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Audiences" ],
        "summary" : "Generate summary",
        "description" : "Generate a new audience-specific summary for an incident",
        "operationId" : "generate_audience_summary",
        "parameters" : [ {
          "name" : "audience_id",
          "in" : "path",
          "description" : "Unique identifier of the audience",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "incident_id",
          "in" : "path",
          "description" : "Unique identifier of the incident to summarize",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "force_regenerate" : {
                    "type" : "boolean",
                    "description" : "Whether to force regeneration of the summary",
                    "nullable" : true,
                    "default" : true
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Generate a new audience-specific summary for an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AI_Entities_IncidentSummaryEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/audiences/summaries/{incident_id}" : {
      "get" : {
        "tags" : [ "Audiences" ],
        "summary" : "List audience summaries",
        "description" : "List all audience summaries for an incident",
        "operationId" : "list_audience_summaries",
        "parameters" : [ {
          "name" : "incident_id",
          "in" : "path",
          "description" : "Unique identifier of the incident to summarize",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List all audience summaries for an incident",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audiences_Entities_AudienceSummariesEntity"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ErrorEntity" : {
        "type" : "object",
        "properties" : {
          "detail" : {
            "type" : "string",
            "nullable" : true
          },
          "messages" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "meta" : {
            "type" : "object",
            "properties" : { },
            "description" : "An object with additional error metadata",
            "nullable" : true
          },
          "code" : {
            "type" : "string",
            "description" : "A stable code on which to match errors",
            "nullable" : true
          }
        },
        "description" : "ErrorEntity model"
      },
      "PongEntity" : {
        "type" : "object",
        "properties" : {
          "response" : {
            "type" : "string",
            "nullable" : true
          },
          "actor" : {
            "$ref" : "#/components/schemas/NullableActorEntity"
          },
          "organization" : {
            "$ref" : "#/components/schemas/NullableOrganizationEntity"
          }
        },
        "description" : "PongEntity model"
      },
      "ActorEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "email" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "firehydrant_user", "firehydrant_bot", "alertmanager", "asana", "aws", "bugsnag", "checkly", "custom_alerts", "datadog", "shortcut", "new_relic", "nunc", "github", "giphy", "google_meet", "google_calendar", "microsoft_teams", "microsoft_teams_v2", "webex", "jira_cloud", "jira_onprem", "opsgenie", "pager_duty", "honeycomb", "patchy", "service_now", "signals", "slack", "statuspage", "victorops", "zendesk", "zoom", "confluence_cloud", "google_docs", "zoom_v2", "linear", "cortex" ]
          }
        }
      },
      "OrganizationEntity" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "id" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "create_environment" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Creates an environment for the organization"
      },
      "EnvironmentEntryEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "UUID of the Environment",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the Environment",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "description" : "Slug of the Environment",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the Environment",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "description" : "The time the environment was updated",
            "format" : "date-time",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "description" : "The time the environment was created",
            "format" : "date-time",
            "nullable" : true
          },
          "active_incidents" : {
            "type" : "array",
            "description" : "List of active incident guids",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "external_resources" : {
            "type" : "array",
            "description" : "Information about known linkages to representations of services outside of FireHydrant.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ExternalResourceEntity"
            }
          }
        },
        "description" : "EnvironmentEntryEntity model"
      },
      "ExternalResourceEntity" : {
        "type" : "object",
        "properties" : {
          "connection_type" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_name" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_full_favicon_url" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_id" : {
            "type" : "string",
            "nullable" : true
          },
          "remote_id" : {
            "type" : "string",
            "nullable" : true
          },
          "remote_url" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "EnvironmentEntryEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EnvironmentEntryEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "EnvironmentEntryEntityPaginated model"
      },
      "PaginationEntity" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "page" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "items" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "pages" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "last" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "prev" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "next" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "update_environment" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Update a environments attributes"
      },
      "create_service" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A hash of label keys and values",
            "nullable" : true
          },
          "service_tier" : {
            "type" : "integer",
            "description" : "Integer representing service tier. Lower values represent higher criticality. If not specified the default value will be 5.",
            "format" : "int32",
            "nullable" : true,
            "enum" : [ 0, 1, 2, 3, 4, 5 ]
          },
          "functionalities" : {
            "type" : "array",
            "description" : "An array of functionalities",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "summary" : {
                  "type" : "string",
                  "description" : "If you are trying to create a new functionality and attach it to this service, set the summary key",
                  "nullable" : true
                },
                "id" : {
                  "type" : "string",
                  "description" : "If you are trying to reuse a functionality, you may set the ID to attach it to the service",
                  "nullable" : true
                }
              }
            }
          },
          "links" : {
            "type" : "array",
            "description" : "An array of links to associate with this service",
            "nullable" : true,
            "items" : {
              "required" : [ "href_url", "name" ],
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "Short name used to display and identify this link"
                },
                "href_url" : {
                  "type" : "string",
                  "description" : "URL"
                },
                "icon_url" : {
                  "type" : "string",
                  "description" : "An optional URL to an icon representing this link",
                  "nullable" : true
                }
              }
            }
          },
          "owner" : {
            "required" : [ "id" ],
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              }
            },
            "description" : "An object representing a Team that owns the service",
            "nullable" : true
          },
          "teams" : {
            "type" : "array",
            "description" : "An array of teams to attach to this service.",
            "nullable" : true,
            "items" : {
              "required" : [ "id" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                }
              }
            }
          },
          "alert_on_add" : {
            "type" : "boolean",
            "nullable" : true
          },
          "auto_add_responding_team" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_resources" : {
            "type" : "array",
            "description" : "An array of external resources to attach to this service.",
            "nullable" : true,
            "items" : {
              "required" : [ "remote_id" ],
              "type" : "object",
              "properties" : {
                "remote_id" : {
                  "type" : "string"
                },
                "connection_type" : {
                  "type" : "string",
                  "description" : "The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, victorops. Not required if the resource has already been imported.",
                  "nullable" : true
                }
              }
            }
          }
        },
        "description" : "Creates a service for the organization, you may also create or attach functionalities to the service on create."
      },
      "ServiceEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "service_tier" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "allowed_params" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "An object of label key and values",
            "nullable" : true
          },
          "alert_on_add" : {
            "type" : "boolean",
            "nullable" : true
          },
          "auto_add_responding_team" : {
            "type" : "boolean",
            "nullable" : true
          },
          "active_incidents" : {
            "type" : "array",
            "description" : "List of active incident guids",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "checklists" : {
            "type" : "array",
            "description" : "List of checklists associated with a service",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ChecklistTemplateEntity"
            }
          },
          "completed_checks" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "external_resources" : {
            "type" : "array",
            "description" : "Information about known linkages to representations of services outside of FireHydrant.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ExternalResourceEntity"
            }
          },
          "functionalities" : {
            "type" : "array",
            "description" : "List of functionalities attached to the service",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/FunctionalityEntity"
            }
          },
          "last_import" : {
            "$ref" : "#/components/schemas/NullableImports_ImportableResourceEntity"
          },
          "links" : {
            "type" : "array",
            "description" : "List of links attached to this service.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/LinksEntity"
            }
          },
          "managed_by" : {
            "type" : "string",
            "description" : "If set, this field indicates that the service is managed by an integration and thus cannot be set manually",
            "nullable" : true
          },
          "managed_by_settings" : {
            "type" : "object",
            "properties" : { },
            "description" : "Indicates the settings of the catalog that manages this service",
            "nullable" : true
          },
          "owner" : {
            "$ref" : "#/components/schemas/NullableTeamEntityLite"
          },
          "service_checklist_updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "teams" : {
            "type" : "array",
            "description" : "List of teams attached to the service",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TeamEntityLite"
            }
          },
          "updated_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          }
        },
        "description" : "ServiceEntity model"
      },
      "ChecklistTemplateEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "checks" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ChecklistCheckEntity"
            }
          },
          "owner" : {
            "$ref" : "#/components/schemas/NullableTeamEntityLite"
          },
          "connected_services" : {
            "type" : "array",
            "description" : "List of services that use this checklist",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ServiceEntityChecklist"
            }
          }
        },
        "description" : "ChecklistTemplateEntity model"
      },
      "ChecklistCheckEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "status" : {
            "type" : "boolean",
            "nullable" : true
          }
        }
      },
      "TeamEntityLite" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "signals_ical_url" : {
            "type" : "string",
            "nullable" : true
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "in_support_hours" : {
            "type" : "boolean",
            "nullable" : true
          }
        }
      },
      "AuthorEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "source" : {
            "type" : "string",
            "nullable" : true
          },
          "email" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "ServiceEntityChecklist" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "service_tier" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "allowed_params" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "An object of label key and values",
            "nullable" : true
          },
          "alert_on_add" : {
            "type" : "boolean",
            "nullable" : true
          },
          "auto_add_responding_team" : {
            "type" : "boolean",
            "nullable" : true
          },
          "completed_checks" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "owner" : {
            "$ref" : "#/components/schemas/NullableTeamEntityLite"
          },
          "service_checklist_updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }
      },
      "FunctionalityEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "An object of label key and values",
            "nullable" : true
          },
          "active_incidents" : {
            "type" : "array",
            "description" : "List of active incident guids",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "links" : {
            "type" : "array",
            "description" : "List of links attached to this functionality.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/LinksEntity"
            }
          },
          "owner" : {
            "$ref" : "#/components/schemas/NullableTeamEntityLite"
          },
          "alert_on_add" : {
            "type" : "boolean",
            "nullable" : true
          },
          "auto_add_responding_team" : {
            "type" : "boolean",
            "nullable" : true
          },
          "updated_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "services" : {
            "type" : "array",
            "description" : "Services this functionality provides",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ServiceEntityLite"
            }
          },
          "external_resources" : {
            "type" : "array",
            "description" : "Information about known linkages to representations of services outside of FireHydrant.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ExternalResourceEntity"
            }
          },
          "teams" : {
            "type" : "array",
            "description" : "List of teams attached to the functionality",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TeamEntityLite"
            }
          }
        },
        "description" : "FunctionalityEntity model"
      },
      "LinksEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "href_url" : {
            "type" : "string",
            "nullable" : true
          },
          "icon_url" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "ServiceEntityLite" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "service_tier" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "allowed_params" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "An object of label key and values",
            "nullable" : true
          },
          "alert_on_add" : {
            "type" : "boolean",
            "nullable" : true
          },
          "auto_add_responding_team" : {
            "type" : "boolean",
            "nullable" : true
          }
        },
        "description" : "ServiceEntityLite model"
      },
      "Imports_ImportableResourceEntity" : {
        "type" : "object",
        "properties" : {
          "import_errors" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Imports_ImportErrorEntity"
            }
          },
          "imported_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "remote_id" : {
            "type" : "string",
            "nullable" : true
          },
          "state" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "selected", "skipped", "imported", "errored" ]
          }
        }
      },
      "Imports_ImportErrorEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "message" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "data" : {
            "type" : "object",
            "properties" : { },
            "description" : "Additional error data",
            "nullable" : true
          },
          "resource" : {
            "$ref" : "#/components/schemas/NullableImports_ImportErrorEntity_ResourceEntity"
          }
        }
      },
      "Imports_ImportErrorEntity_ResourceEntity" : {
        "type" : "object",
        "properties" : {
          "resource_id" : {
            "type" : "string",
            "nullable" : true
          },
          "resource_type" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "ServiceEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ServiceEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "ServiceEntityPaginated model"
      },
      "create_service_links" : {
        "required" : [ "connection_id", "external_service_ids", "integration" ],
        "type" : "object",
        "properties" : {
          "external_service_ids" : {
            "type" : "string",
            "description" : "ID of the service"
          },
          "connection_id" : {
            "type" : "string",
            "description" : "ID for the integration. This can be found by going to the edit page for the integration"
          },
          "integration" : {
            "type" : "string",
            "description" : "The name of the service",
            "enum" : [ "pager_duty", "opsgenie", "victorops" ]
          }
        },
        "description" : "Creates a service with the appropriate integration for each external service ID passed"
      },
      "ServiceLinkEntity" : {
        "type" : "object",
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "service" : {
            "$ref" : "#/components/schemas/NullableServiceEntity"
          }
        },
        "description" : "ServiceLinkEntity model"
      },
      "update_service" : {
        "type" : "object",
        "properties" : {
          "alert_on_add" : {
            "type" : "boolean",
            "nullable" : true
          },
          "auto_add_responding_team" : {
            "type" : "boolean",
            "nullable" : true
          },
          "checklists" : {
            "type" : "array",
            "description" : "Array of checklist IDs to attach to the service",
            "nullable" : true,
            "items" : {
              "required" : [ "id" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "remove" : {
                  "type" : "boolean",
                  "description" : "Set to `true` to remove checklist from service",
                  "nullable" : true
                }
              }
            }
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "external_resources" : {
            "type" : "array",
            "description" : "An array of external resources to attach to this service.",
            "nullable" : true,
            "items" : {
              "required" : [ "remote_id" ],
              "type" : "object",
              "properties" : {
                "remote_id" : {
                  "type" : "string"
                },
                "connection_type" : {
                  "type" : "string",
                  "description" : "The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, victorops. Not required if the resource has already been imported.",
                  "nullable" : true
                },
                "remove" : {
                  "type" : "boolean",
                  "description" : "If you are trying to remove an external resource from a service, set this to 'true'.",
                  "nullable" : true
                }
              }
            }
          },
          "functionalities" : {
            "type" : "array",
            "description" : "An array of functionalities",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "description" : "If you are trying to reuse a functionality, you may set the ID to attach it to the service",
                  "nullable" : true
                },
                "remove" : {
                  "type" : "boolean",
                  "description" : "If you are trying to remove a functionality from a service, set this to 'true'",
                  "nullable" : true
                },
                "summary" : {
                  "type" : "string",
                  "description" : "If you are trying to create a new functionality and attach it to this service, set the summary key",
                  "nullable" : true
                }
              }
            }
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A hash of label keys and values",
            "nullable" : true
          },
          "links" : {
            "type" : "array",
            "description" : "An array of links to associate with this service. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.",
            "nullable" : true,
            "items" : {
              "required" : [ "href_url", "name" ],
              "type" : "object",
              "properties" : {
                "href_url" : {
                  "type" : "string",
                  "description" : "URL"
                },
                "name" : {
                  "type" : "string",
                  "description" : "Short name used to display and identify this link"
                },
                "icon_url" : {
                  "type" : "string",
                  "description" : "An optional URL to an icon representing this link",
                  "nullable" : true
                },
                "remove" : {
                  "type" : "boolean",
                  "description" : "If you are trying to remove a link, set this to 'true'",
                  "nullable" : true
                },
                "id" : {
                  "type" : "string",
                  "description" : "If updating an existing link, specify it's id.",
                  "nullable" : true
                }
              }
            }
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "owner" : {
            "required" : [ "id" ],
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              }
            },
            "description" : "An object representing a Team that owns the service",
            "nullable" : true
          },
          "remove_owner" : {
            "type" : "boolean",
            "description" : "If you are trying to remove a team as an owner from a service, set this to 'true'",
            "nullable" : true
          },
          "remove_remaining_checklists" : {
            "type" : "boolean",
            "description" : "If set to true, any checklists tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the checklists",
            "nullable" : true
          },
          "remove_remaining_external_resources" : {
            "type" : "boolean",
            "description" : "If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources",
            "nullable" : true
          },
          "remove_remaining_functionalities" : {
            "type" : "boolean",
            "description" : "If set to true, any functionalities tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the functionalities",
            "nullable" : true
          },
          "remove_remaining_teams" : {
            "type" : "boolean",
            "description" : "If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams",
            "nullable" : true
          },
          "service_tier" : {
            "type" : "integer",
            "description" : "Integer representing service tier",
            "format" : "int32",
            "nullable" : true,
            "enum" : [ 0, 1, 2, 3, 4, 5 ]
          },
          "teams" : {
            "type" : "array",
            "description" : "An array of teams to attach to this service.",
            "nullable" : true,
            "items" : {
              "required" : [ "id" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "remove" : {
                  "type" : "boolean",
                  "description" : "If you are trying to remove a team from a service, set this to 'true'",
                  "nullable" : true
                }
              }
            }
          }
        },
        "description" : "Update a services attributes, you may also add or remove functionalities from the service as well.\nNote: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.\n"
      },
      "ServiceWithAllDependenciesEntity" : {
        "type" : "object",
        "properties" : {
          "child_service_dependencies" : {
            "type" : "array",
            "description" : "Services that depend on this service",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ServiceChildDependencyEntity"
            }
          },
          "parent_service_dependencies" : {
            "type" : "array",
            "description" : "Services that this service is dependent on",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ServiceParentDependencyEntity"
            }
          },
          "service_dependencies" : {
            "type" : "array",
            "description" : "All dependencies. Can be one of: ServiceChildDependencyEntity, ServiceParentDependencyEntity",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : { }
            }
          }
        },
        "description" : "ServiceWithAllDependenciesEntity model"
      },
      "ServiceChildDependencyEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "notes" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "service" : {
            "$ref" : "#/components/schemas/NullableServiceEntity"
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "ServiceParentDependencyEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "notes" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "service" : {
            "$ref" : "#/components/schemas/NullableServiceEntity"
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "create_service_checklist_response" : {
        "required" : [ "check_id", "status" ],
        "type" : "object",
        "properties" : {
          "check_id" : {
            "type" : "string"
          },
          "status" : {
            "type" : "boolean",
            "description" : "Status of the check. 'true' if it's complete, 'false' if incomplete, or blank if not yet interacted with"
          }
        },
        "description" : "Creates a response for a checklist item"
      },
      "create_service_dependency" : {
        "required" : [ "connected_service_id", "service_id" ],
        "type" : "object",
        "properties" : {
          "service_id" : {
            "type" : "string"
          },
          "connected_service_id" : {
            "type" : "string"
          },
          "notes" : {
            "type" : "string",
            "description" : "A note to describe the service dependency relationship",
            "nullable" : true
          }
        },
        "description" : "Creates a service dependency relationship between two services"
      },
      "ServiceDependencyEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "notes" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "service" : {
            "$ref" : "#/components/schemas/NullableServiceEntity"
          },
          "connected_service" : {
            "$ref" : "#/components/schemas/NullableServiceEntity"
          }
        },
        "description" : "ServiceDependencyEntity model"
      },
      "update_service_dependency" : {
        "type" : "object",
        "properties" : {
          "notes" : {
            "type" : "string",
            "description" : "A note to describe the service dependency relationship",
            "nullable" : true
          }
        },
        "description" : "Update the notes of the service dependency"
      },
      "create_functionality" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "services" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "required" : [ "id" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "description" : "ID of a service"
                }
              }
            }
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A hash of label keys and values",
            "nullable" : true
          },
          "alert_on_add" : {
            "type" : "boolean",
            "nullable" : true
          },
          "auto_add_responding_team" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_resources" : {
            "type" : "array",
            "description" : "An array of external resources to attach to this service.",
            "nullable" : true,
            "items" : {
              "required" : [ "remote_id" ],
              "type" : "object",
              "properties" : {
                "remote_id" : {
                  "type" : "string"
                },
                "connection_type" : {
                  "type" : "string",
                  "description" : "The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, statuspage, victorops. Not required if the resource has already been imported.",
                  "nullable" : true
                }
              }
            }
          },
          "links" : {
            "type" : "array",
            "description" : "An array of links to associate with this service",
            "nullable" : true,
            "items" : {
              "required" : [ "href_url", "name" ],
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "Short name used to display and identify this link"
                },
                "href_url" : {
                  "type" : "string",
                  "description" : "URL"
                },
                "icon_url" : {
                  "type" : "string",
                  "description" : "An optional URL to an icon representing this link",
                  "nullable" : true
                }
              }
            }
          },
          "owner" : {
            "required" : [ "id" ],
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              }
            },
            "description" : "An object representing a Team that owns the service",
            "nullable" : true
          },
          "teams" : {
            "type" : "array",
            "description" : "An array of teams to attach to this service.",
            "nullable" : true,
            "items" : {
              "required" : [ "id" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "description" : "Creates a functionality for the organization"
      },
      "FunctionalityEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/FunctionalityEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "FunctionalityEntityPaginated model"
      },
      "update_functionality" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "services" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "required" : [ "id" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "description" : "ID of a service"
                },
                "remove" : {
                  "type" : "boolean",
                  "description" : "Set to true if you want to remove the given service from the functionality",
                  "nullable" : true
                }
              }
            }
          },
          "links" : {
            "type" : "array",
            "description" : "An array of links to associate with this functionality. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.",
            "nullable" : true,
            "items" : {
              "required" : [ "href_url", "name" ],
              "type" : "object",
              "properties" : {
                "href_url" : {
                  "type" : "string",
                  "description" : "URL"
                },
                "name" : {
                  "type" : "string",
                  "description" : "Short name used to display and identify this link"
                },
                "icon_url" : {
                  "type" : "string",
                  "description" : "An optional URL to an icon representing this link",
                  "nullable" : true
                },
                "remove" : {
                  "type" : "boolean",
                  "description" : "If you are trying to remove a link, set this to 'true'",
                  "nullable" : true
                },
                "id" : {
                  "type" : "string",
                  "description" : "If updating an existing link, specify it's id.",
                  "nullable" : true
                }
              }
            }
          },
          "owner" : {
            "required" : [ "id" ],
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              }
            },
            "description" : "An object representing a Team that owns the functionality",
            "nullable" : true
          },
          "remove_owner" : {
            "type" : "boolean",
            "description" : "If you are trying to remove a team as an owner from a functionality, set this to 'true'",
            "nullable" : true
          },
          "teams" : {
            "type" : "array",
            "description" : "An array of teams to attach to this functionality.",
            "nullable" : true,
            "items" : {
              "required" : [ "id" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "remove" : {
                  "type" : "boolean",
                  "description" : "If you are trying to remove a team from a functionality, set this to 'true'",
                  "nullable" : true
                }
              }
            }
          },
          "remove_remaining_teams" : {
            "type" : "boolean",
            "description" : "If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams",
            "nullable" : true
          },
          "external_resources" : {
            "type" : "array",
            "description" : "An array of external resources to attach to this service.",
            "nullable" : true,
            "items" : {
              "required" : [ "remote_id" ],
              "type" : "object",
              "properties" : {
                "remote_id" : {
                  "type" : "string"
                },
                "connection_type" : {
                  "type" : "string",
                  "description" : "The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, statuspage, victorops. Not required if the resource has already been imported.",
                  "nullable" : true
                },
                "remove" : {
                  "type" : "boolean",
                  "description" : "If you are trying to remove an external resource from a service, set this to 'true'.",
                  "nullable" : true
                }
              }
            }
          },
          "remove_remaining_external_resources" : {
            "type" : "boolean",
            "description" : "If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A hash of label keys and values",
            "nullable" : true
          },
          "alert_on_add" : {
            "type" : "boolean",
            "nullable" : true
          },
          "auto_add_responding_team" : {
            "type" : "boolean",
            "nullable" : true
          },
          "remove_remaining_services" : {
            "type" : "boolean",
            "description" : "Set this to true if you want to remove all of the services that are not included in the services array from the functionality",
            "nullable" : true,
            "default" : false
          }
        },
        "description" : "Update a functionalities attributes"
      },
      "FunctionalityWithAllServicesEntity" : {
        "type" : "object",
        "properties" : {
          "services" : {
            "type" : "array",
            "description" : "Services this functionality provides",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ServiceEntity"
            }
          }
        },
        "description" : "FunctionalityWithAllServicesEntity model"
      },
      "create_team" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "slack_channel_id" : {
            "type" : "string",
            "description" : "The Slack channel ID associated with this team. This may be the reference in FireHydrant's system (i.e. UUID) or the ID value from Slack (e.g. C1234567890).\n",
            "nullable" : true
          },
          "ms_teams_channel" : {
            "required" : [ "channel_id", "ms_team_id" ],
            "type" : "object",
            "properties" : {
              "channel_id" : {
                "type" : "string"
              },
              "ms_team_id" : {
                "type" : "string"
              }
            },
            "description" : "MS Teams channel identity for channel associated with this team",
            "nullable" : true
          },
          "memberships" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "user_id" : {
                  "type" : "string",
                  "nullable" : true
                },
                "schedule_id" : {
                  "type" : "string",
                  "nullable" : true
                },
                "incident_role_id" : {
                  "type" : "string",
                  "description" : "An incident role ID that this user will automatically assigned if this team is assigned to an incident",
                  "nullable" : true
                }
              }
            }
          },
          "invite_emails" : {
            "type" : "array",
            "description" : "A list of email addresses to invite to join the organization and automatically add to this team. If an email already has a pending invitation, the team will be added to their existing invitation.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Create a new team"
      },
      "TeamEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "signals_ical_url" : {
            "type" : "string",
            "nullable" : true
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "in_support_hours" : {
            "type" : "boolean",
            "nullable" : true
          },
          "slack_channel" : {
            "$ref" : "#/components/schemas/NullableIntegrations_Slack_SlackChannelEntity"
          },
          "ms_teams_channel" : {
            "$ref" : "#/components/schemas/NullableIntegrations_MicrosoftTeamsV2_ChannelEntity"
          },
          "memberships" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/MembershipEntity"
            }
          },
          "owned_checklist_templates" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ChecklistTemplateEntity"
            }
          },
          "owned_functionalities" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/FunctionalityEntityLite"
            }
          },
          "owned_services" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ServiceEntityLite"
            }
          },
          "owned_runbooks" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SlimRunbookEntity"
            }
          },
          "responding_services" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ServiceEntityLite"
            }
          },
          "services" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ServiceEntityLite"
            }
          },
          "functionalities" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/FunctionalityEntityLite"
            }
          },
          "default_signals_escalation_policy" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          }
        },
        "description" : "TeamEntity model"
      },
      "Integrations_Slack_SlackChannelEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "slack_channel_id" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Integrations_MicrosoftTeamsV2_ChannelEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "channel_id" : {
            "type" : "string",
            "nullable" : true
          },
          "channel_name" : {
            "type" : "string",
            "nullable" : true
          },
          "ms_team_id" : {
            "type" : "string",
            "nullable" : true
          },
          "team_name" : {
            "type" : "string",
            "nullable" : true
          },
          "channel_url" : {
            "type" : "string",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "nullable" : true
          },
          "incident" : {
            "$ref" : "#/components/schemas/NullableIncidentEntity"
          }
        }
      },
      "IncidentEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "UUID of the Incident",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the incident",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "description" : "The time the incident was opened",
            "format" : "date-time",
            "nullable" : true
          },
          "started_at" : {
            "type" : "string",
            "description" : "The time the incident started",
            "format" : "date-time",
            "nullable" : true
          },
          "discarded_at" : {
            "type" : "string",
            "description" : "The time the incident was archived",
            "format" : "date-time",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "customer_impact_summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "current_milestone" : {
            "type" : "string",
            "description" : "The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.",
            "nullable" : true
          },
          "number" : {
            "type" : "integer",
            "description" : "Incident number",
            "format" : "int32",
            "nullable" : true
          },
          "priority" : {
            "type" : "string",
            "nullable" : true
          },
          "severity" : {
            "type" : "string",
            "nullable" : true
          },
          "severity_color" : {
            "type" : "string",
            "nullable" : true
          },
          "severity_impact" : {
            "type" : "string",
            "nullable" : true
          },
          "severity_condition" : {
            "type" : "string",
            "nullable" : true
          },
          "tag_list" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "incident_type" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          },
          "severity_impact_object" : {
            "$ref" : "#/components/schemas/NullableSeverityMatrix_ImpactEntity"
          },
          "severity_condition_object" : {
            "$ref" : "#/components/schemas/NullableSeverityMatrix_ConditionEntity"
          },
          "private_id" : {
            "type" : "string",
            "nullable" : true
          },
          "organization_id" : {
            "type" : "string",
            "nullable" : true
          },
          "milestones" : {
            "type" : "array",
            "description" : "DEPRECATED: Please use lifecycle phases instead",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_MilestoneEntity"
            }
          },
          "lifecycle_phases" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_LifecyclePhaseEntity"
            }
          },
          "lifecycle_measurements" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_LifecycleMeasurementEntity"
            }
          },
          "active" : {
            "type" : "boolean",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "A key/value of labels",
            "nullable" : true
          },
          "role_assignments" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_RoleAssignmentEntity"
            }
          },
          "status_pages" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_StatusPageEntity"
            }
          },
          "incident_url" : {
            "type" : "string",
            "nullable" : true
          },
          "private_status_page_url" : {
            "type" : "string",
            "nullable" : true
          },
          "organization" : {
            "$ref" : "#/components/schemas/NullableOrganizationEntity"
          },
          "customers_impacted" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "monetary_impact" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "monetary_impact_cents" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "last_update" : {
            "type" : "string",
            "nullable" : true
          },
          "last_note" : {
            "$ref" : "#/components/schemas/NullableEvent_NoteEntity"
          },
          "report_id" : {
            "type" : "string",
            "nullable" : true
          },
          "ai_incident_summary" : {
            "type" : "string",
            "nullable" : true
          },
          "services" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SuccinctEntity"
            }
          },
          "environments" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SuccinctEntity"
            }
          },
          "functionalities" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SuccinctEntity"
            }
          },
          "channel_name" : {
            "type" : "string",
            "nullable" : true
          },
          "channel_reference" : {
            "type" : "string",
            "nullable" : true
          },
          "channel_id" : {
            "type" : "string",
            "nullable" : true
          },
          "channel_status" : {
            "type" : "string",
            "description" : "inoperative: 0, operational: 1, archived: 2",
            "nullable" : true
          },
          "incident_tickets" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Ticketing_TicketEntity"
            }
          },
          "ticket" : {
            "$ref" : "#/components/schemas/NullableTicketing_TicketEntity"
          },
          "impacts" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_ImpactEntity"
            }
          },
          "conference_bridges" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_ConferenceBridgeEntity"
            }
          },
          "incident_channels" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_ChannelEntity"
            }
          },
          "retro_exports" : {
            "type" : "array",
            "description" : "A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : { }
            }
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "context_object" : {
            "$ref" : "#/components/schemas/NullableIncidents_ContextObjectEntity"
          },
          "team_assignments" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_TeamAssignmentEntityLite"
            }
          },
          "conversations" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Conversations_API_Entities_Reference"
            }
          },
          "custom_fields" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/CustomFields_FieldValue"
            }
          },
          "field_requirements" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/IncidentEntity_FieldRequirementEntity"
            }
          }
        },
        "description" : "IncidentEntity model"
      },
      "SuccinctEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "SeverityMatrix_ImpactEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "affects_id" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        },
        "description" : "SeverityMatrix_ImpactEntity model"
      },
      "SeverityMatrix_ConditionEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "description" : "Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition",
            "format" : "int32",
            "nullable" : true
          }
        },
        "description" : "SeverityMatrix_ConditionEntity model"
      },
      "Incidents_MilestoneEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "description" : "The milestone's type. This will be one of the currently configured milestones for the given incident.",
            "nullable" : true
          },
          "duration" : {
            "type" : "string",
            "description" : "How long the incident spent in this milestones, in ISO 8601 Duration Format. This will be null if the milestone is the incident's current milestone.",
            "nullable" : true
          },
          "occurred_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }
      },
      "Incidents_LifecyclePhaseEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "milestones" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_LifecycleMilestoneEntity"
            }
          }
        }
      },
      "Incidents_LifecycleMilestoneEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "occurred_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "duration" : {
            "type" : "string",
            "nullable" : true
          },
          "updated_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }
      },
      "Incidents_LifecycleMeasurementEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "starts_at_milestone" : {
            "type" : "string",
            "nullable" : true
          },
          "ends_at_milestone" : {
            "type" : "string",
            "nullable" : true
          },
          "value" : {
            "type" : "string",
            "nullable" : true
          },
          "calculated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }
      },
      "Incidents_RoleAssignmentEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "active", "inactive" ]
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "incident_role" : {
            "$ref" : "#/components/schemas/NullableIncidentRoleEntity"
          },
          "user" : {
            "$ref" : "#/components/schemas/NullableUserEntity"
          }
        },
        "description" : "Incidents_RoleAssignmentEntity model"
      },
      "IncidentRoleEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "IncidentRoleEntity model"
      },
      "UserEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "email" : {
            "type" : "string",
            "nullable" : true
          },
          "slack_user_id" : {
            "type" : "string",
            "nullable" : true
          },
          "slack_linked?" : {
            "type" : "boolean",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "signals_enabled_notification_types" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "signals_notification_policy_compliance" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_NotificationPolicyItemComplianceEntity"
            }
          }
        },
        "description" : "UserEntity model"
      },
      "Signals_API_NotificationPolicyItemComplianceEntity" : {
        "type" : "object",
        "properties" : {
          "notification_policy_item_id" : {
            "type" : "string",
            "nullable" : true
          },
          "is_compliant" : {
            "type" : "boolean",
            "nullable" : true
          }
        }
      },
      "Incidents_StatusPageEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "url" : {
            "type" : "string",
            "nullable" : true
          },
          "external_id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "display_name" : {
            "type" : "string",
            "nullable" : true
          },
          "integration" : {
            "$ref" : "#/components/schemas/NullableIntegrationEntity"
          }
        },
        "description" : "Incidents_StatusPageEntity model"
      },
      "IntegrationEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "integration_name" : {
            "type" : "string",
            "nullable" : true
          },
          "integration_slug" : {
            "type" : "string",
            "nullable" : true
          },
          "display_name" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }
      },
      "Event_NoteEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "body" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "status_pages" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_StatusPageEntity"
            }
          },
          "conversations" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Conversations_API_Entities_Reference"
            }
          }
        },
        "description" : "Event_NoteEntity model"
      },
      "Conversations_API_Entities_Reference" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "resource_class" : {
            "type" : "string",
            "nullable" : true
          },
          "resource_id" : {
            "type" : "string",
            "nullable" : true
          },
          "field" : {
            "type" : "string",
            "nullable" : true
          },
          "comments_url" : {
            "type" : "string",
            "nullable" : true
          },
          "channel" : {
            "$ref" : "#/components/schemas/NullableConversations_API_Entities_Channel"
          }
        }
      },
      "Conversations_API_Entities_Channel" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Ticketing_TicketEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "state" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "open", "in_progress", "cancelled", "done" ]
          },
          "type" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "incident", "task", "follow_up" ]
          },
          "assignees" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AuthorEntity"
            }
          },
          "priority" : {
            "$ref" : "#/components/schemas/NullableTicketing_PriorityEntity"
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "attachments" : {
            "type" : "array",
            "description" : "A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : { }
            }
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "tag_list" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "incident_id" : {
            "type" : "string",
            "description" : "ID of incident that this ticket is related to",
            "nullable" : true
          },
          "incident_name" : {
            "type" : "string",
            "description" : "Name of incident that this ticket is related to",
            "nullable" : true
          },
          "incident_current_milestone" : {
            "type" : "string",
            "description" : "Milestone of incident that this ticket is related to",
            "nullable" : true
          },
          "task_id" : {
            "type" : "string",
            "description" : "ID of task that this ticket is related to",
            "nullable" : true
          },
          "due_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "sync_error_message" : {
            "type" : "string",
            "description" : "Error message from syncing this ticket to integrations",
            "nullable" : true
          },
          "link" : {
            "$ref" : "#/components/schemas/NullableAttachments_LinkEntity"
          }
        },
        "description" : "Ticketing_TicketEntity model"
      },
      "Ticketing_PriorityEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "Ticketing_PriorityEntity model"
      },
      "Attachments_LinkEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "display_text" : {
            "type" : "string",
            "nullable" : true
          },
          "href_url" : {
            "type" : "string",
            "nullable" : true
          },
          "icon_url" : {
            "type" : "string",
            "nullable" : true
          },
          "editable" : {
            "type" : "boolean",
            "description" : "Link can be edited",
            "nullable" : true
          },
          "deletable" : {
            "type" : "boolean",
            "description" : "Link can be deleted",
            "nullable" : true
          }
        },
        "description" : "Attachments_LinkEntity model"
      },
      "Incidents_ImpactEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "customer", "environment", "functionality", "service" ]
          },
          "impact" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          },
          "condition" : {
            "$ref" : "#/components/schemas/NullableSeverityMatrix_ConditionEntity"
          },
          "conversations" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Conversations_API_Entities_Reference"
            }
          }
        }
      },
      "Incidents_ConferenceBridgeEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "attachments" : {
            "type" : "array",
            "description" : "A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : { }
            }
          },
          "has_translated_transcripts" : {
            "type" : "boolean",
            "nullable" : true
          },
          "language_codes" : {
            "type" : "array",
            "description" : "A list of language codes that have translated transcripts for this conference bridge",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "transcription_status" : {
            "type" : "string",
            "nullable" : true
          },
          "transcription_sub_code" : {
            "type" : "string",
            "nullable" : true
          },
          "previous_host_assignment" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Incidents_ConferenceBridgeEntity model"
      },
      "Incidents_ChannelEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "source" : {
            "type" : "string",
            "nullable" : true
          },
          "source_name" : {
            "type" : "string",
            "nullable" : true
          },
          "source_id" : {
            "type" : "string",
            "nullable" : true
          },
          "url" : {
            "type" : "string",
            "nullable" : true
          },
          "icon_url" : {
            "type" : "string",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Incidents_ChannelEntity model"
      },
      "Incidents_ContextObjectEntity" : {
        "type" : "object",
        "properties" : {
          "object_type" : {
            "type" : "string",
            "nullable" : true
          },
          "object_id" : {
            "type" : "string",
            "nullable" : true
          },
          "context_tag" : {
            "type" : "string",
            "nullable" : true
          },
          "context_description" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Incidents_TeamAssignmentEntityLite" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "team" : {
            "$ref" : "#/components/schemas/NullableTeamEntityLite"
          }
        }
      },
      "CustomFields_FieldValue" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "value_type" : {
            "type" : "string",
            "nullable" : true
          },
          "display_name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "field_id" : {
            "type" : "string",
            "nullable" : true
          },
          "value_array" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "value_string" : {
            "type" : "string",
            "nullable" : true
          },
          "value" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "IncidentEntity_FieldRequirementEntity" : {
        "type" : "object",
        "properties" : {
          "field_id" : {
            "type" : "string",
            "description" : "A unique identifier for the field.",
            "nullable" : true
          },
          "required_at_milestone_id" : {
            "type" : "string",
            "description" : "The milestone at which this field is required. If null, this field is always required.",
            "nullable" : true
          }
        }
      },
      "MembershipEntity" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "$ref" : "#/components/schemas/NullableUserEntity"
          },
          "schedule" : {
            "$ref" : "#/components/schemas/NullableScheduleEntity"
          },
          "signals_on_call_schedule" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          },
          "default_incident_role" : {
            "$ref" : "#/components/schemas/NullableIncidentRoleEntity"
          }
        }
      },
      "ScheduleEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "integration" : {
            "type" : "string",
            "nullable" : true
          },
          "discarded" : {
            "type" : "boolean",
            "nullable" : true
          }
        }
      },
      "FunctionalityEntityLite" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "An object of label key and values",
            "nullable" : true
          },
          "active_incidents" : {
            "type" : "array",
            "description" : "List of active incident guids",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "links" : {
            "type" : "array",
            "description" : "List of links attached to this functionality.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/LinksEntity"
            }
          },
          "owner" : {
            "$ref" : "#/components/schemas/NullableTeamEntityLite"
          },
          "alert_on_add" : {
            "type" : "boolean",
            "nullable" : true
          },
          "auto_add_responding_team" : {
            "type" : "boolean",
            "nullable" : true
          },
          "updated_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          }
        }
      },
      "SlimRunbookEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "attachment_rule" : {
            "$ref" : "#/components/schemas/NullableRules_RuleEntity"
          },
          "owner" : {
            "$ref" : "#/components/schemas/NullableTeamEntityLite"
          },
          "categories" : {
            "type" : "array",
            "description" : "categories the runbook applies to",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Rules_RuleEntity" : {
        "type" : "object",
        "properties" : {
          "logic" : {
            "type" : "object",
            "properties" : { },
            "description" : "An unstructured object of key/value pairs describing the logic for applying the rule.",
            "nullable" : true
          },
          "user_data" : {
            "$ref" : "#/components/schemas/NullableFHTypes_GenericEntity"
          }
        }
      },
      "FHTypes_GenericEntity" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "value" : {
            "type" : "string",
            "nullable" : true
          },
          "label" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "TeamEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TeamEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "TeamEntityPaginated model"
      },
      "update_team" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "slack_channel_id" : {
            "type" : "string",
            "description" : "The Slack channel ID associated with this team. This may be the reference in FireHydrant's system (i.e. UUID) or the ID value from Slack (e.g. C1234567890).\n",
            "nullable" : true
          },
          "ms_teams_channel" : {
            "required" : [ "channel_id", "ms_team_id" ],
            "type" : "object",
            "properties" : {
              "channel_id" : {
                "type" : "string"
              },
              "ms_team_id" : {
                "type" : "string"
              }
            },
            "description" : "MS Teams channel identity for channel associated with this team",
            "nullable" : true
          },
          "memberships" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "user_id" : {
                  "type" : "string",
                  "nullable" : true
                },
                "schedule_id" : {
                  "type" : "string",
                  "nullable" : true
                },
                "incident_role_id" : {
                  "type" : "string",
                  "description" : "An incident role ID that this user will automatically assigned if this team is assigned to an incident",
                  "nullable" : true
                }
              }
            }
          },
          "invite_emails" : {
            "type" : "array",
            "description" : "A list of email addresses to invite to join the organization and automatically add to this team. If an email already has a pending invitation, the team will be added to their existing invitation.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Update a single team from its ID"
      },
      "create_team_call_route" : {
        "required" : [ "name", "phone_number", "routing_mode" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the call route"
          },
          "phone_number" : {
            "type" : "string",
            "description" : "Phone number to route calls to"
          },
          "routing_mode" : {
            "type" : "string",
            "description" : "Routing mode for the call route",
            "enum" : [ "ROUTING_MODE_TAKE_MESSAGE", "ROUTING_MODE_DIRECT_CONNECT" ]
          },
          "connect_mode" : {
            "type" : "string",
            "description" : "Connect mode for the call route",
            "nullable" : true,
            "enum" : [ "CONNECT_MODE_CONFERENCE", "CONNECT_MODE_DIRECT_DIAL" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the call route",
            "nullable" : true
          },
          "greeting_message" : {
            "type" : "string",
            "description" : "Greeting message for the call route",
            "nullable" : true
          },
          "steps" : {
            "type" : "array",
            "description" : "Steps for the call route",
            "nullable" : true,
            "items" : {
              "required" : [ "target_id", "target_type", "timeout" ],
              "type" : "object",
              "properties" : {
                "target_type" : {
                  "type" : "string",
                  "description" : "Type of target",
                  "enum" : [ "User", "OnCallSchedule" ]
                },
                "target_id" : {
                  "type" : "string",
                  "description" : "ID of the target"
                },
                "timeout" : {
                  "type" : "string",
                  "description" : "Timeout in seconds for the step"
                }
              }
            }
          },
          "target" : {
            "required" : [ "id", "type" ],
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "description" : "Type of target"
              },
              "id" : {
                "type" : "string",
                "description" : "ID of the target"
              }
            },
            "description" : "Target for the call route (required unless connect_mode is direct_dial)",
            "nullable" : true
          }
        },
        "description" : "Create a call route for a team"
      },
      "Signals_API_CallRouteEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "phone_number" : {
            "type" : "string",
            "nullable" : true
          },
          "greeting_message" : {
            "type" : "string",
            "nullable" : true
          },
          "routing_mode" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "ROUTING_MODE_TAKE_MESSAGE", "ROUTING_MODE_DIRECT_CONNECT" ]
          },
          "connect_mode" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "CONNECT_MODE_CONFERENCE", "CONNECT_MODE_DIRECT_DIAL" ]
          },
          "steps" : {
            "$ref" : "#/components/schemas/NullableSignals_API_CallRouteStepEntity"
          },
          "target" : {
            "$ref" : "#/components/schemas/NullableSignals_API_TargetEntity"
          }
        },
        "description" : "Signals_API_CallRouteEntity model"
      },
      "Signals_API_CallRouteStepEntity" : {
        "type" : "object",
        "properties" : {
          "target" : {
            "$ref" : "#/components/schemas/NullableSignals_API_TargetEntity"
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "timeout" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Signals_API_TargetEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "is_pageable" : {
            "type" : "boolean",
            "nullable" : true
          }
        }
      },
      "Signals_API_CallRouteEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_CallRouteEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Signals_API_CallRouteEntityPaginated model"
      },
      "create_team_escalation_policy" : {
        "required" : [ "name", "steps" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The escalation policy's name."
          },
          "description" : {
            "type" : "string",
            "description" : "A detailed description of the escalation policy.",
            "nullable" : true
          },
          "repetitions" : {
            "type" : "integer",
            "description" : "The number of times that the escalation policy should repeat before an alert is dropped.",
            "format" : "int32",
            "nullable" : true,
            "default" : 0
          },
          "default" : {
            "type" : "boolean",
            "description" : "Whether this escalation policy should be the default for the team.",
            "nullable" : true,
            "default" : false
          },
          "step_strategy" : {
            "type" : "string",
            "description" : "The strategy for handling steps in the escalation policy. Can be \"static\" or \"dynamic_by_priority\".",
            "nullable" : true
          },
          "steps" : {
            "type" : "array",
            "description" : "A list of steps that define how an alert should escalate through the policy.",
            "items" : {
              "required" : [ "targets", "timeout" ],
              "type" : "object",
              "properties" : {
                "targets" : {
                  "type" : "array",
                  "description" : "A list of targets that the step will notify. You can specify up to 15 targets per step.",
                  "items" : {
                    "required" : [ "id", "type" ],
                    "type" : "object",
                    "properties" : {
                      "type" : {
                        "type" : "string",
                        "description" : "The type of target that the step will notify.",
                        "enum" : [ "OnCallSchedule", "User", "SlackChannel", "MicrosoftTeamsChannel", "EntireTeam", "Webhook" ]
                      },
                      "id" : {
                        "type" : "string",
                        "description" : "The ID of the target that the step will notify."
                      }
                    }
                  }
                },
                "timeout" : {
                  "type" : "string",
                  "description" : "An ISO8601 duration string specifying how long to wait before moving on to the next step. For the last step, this value specifies how long to wait before the escalation policy should repeat, if it repeats."
                },
                "distribution_type" : {
                  "type" : "string",
                  "description" : "The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.",
                  "nullable" : true,
                  "enum" : [ "unspecified", "round_robin_by_alert", "round_robin_by_escalation_policy" ]
                },
                "priorities" : {
                  "type" : "array",
                  "description" : "A list of priorities (HIGH, MEDIUM, LOW) to which the step applies when using a dynamic escalation policy.",
                  "nullable" : true,
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "handoff_step" : {
            "required" : [ "target_id", "target_type" ],
            "type" : "object",
            "properties" : {
              "target_type" : {
                "type" : "string",
                "description" : "The type of target to which the policy will hand off.",
                "enum" : [ "EscalationPolicy", "Team" ]
              },
              "target_id" : {
                "type" : "string",
                "description" : "The ID of the target to which the policy will hand off."
              }
            },
            "description" : "A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.",
            "nullable" : true
          },
          "prioritized_settings" : {
            "type" : "object",
            "properties" : {
              "high" : {
                "type" : "object",
                "properties" : {
                  "repetitions" : {
                    "type" : "integer",
                    "description" : "Number of repetitions for HIGH priority alerts",
                    "format" : "int32",
                    "nullable" : true
                  },
                  "handoff_step" : {
                    "required" : [ "target_id", "target_type" ],
                    "type" : "object",
                    "properties" : {
                      "target_type" : {
                        "type" : "string",
                        "enum" : [ "EscalationPolicy", "Team" ]
                      },
                      "target_id" : {
                        "type" : "string"
                      }
                    },
                    "description" : "Handoff step for HIGH priority alerts",
                    "nullable" : true
                  }
                },
                "description" : "Settings for HIGH priority alerts",
                "nullable" : true
              },
              "medium" : {
                "type" : "object",
                "properties" : {
                  "repetitions" : {
                    "type" : "integer",
                    "description" : "Number of repetitions for MEDIUM priority alerts",
                    "format" : "int32",
                    "nullable" : true
                  },
                  "handoff_step" : {
                    "required" : [ "target_id", "target_type" ],
                    "type" : "object",
                    "properties" : {
                      "target_type" : {
                        "type" : "string",
                        "enum" : [ "EscalationPolicy", "Team" ]
                      },
                      "target_id" : {
                        "type" : "string"
                      }
                    },
                    "description" : "Handoff step for MEDIUM priority alerts",
                    "nullable" : true
                  }
                },
                "description" : "Settings for MEDIUM priority alerts",
                "nullable" : true
              },
              "low" : {
                "type" : "object",
                "properties" : {
                  "repetitions" : {
                    "type" : "integer",
                    "description" : "Number of repetitions for LOW priority alerts",
                    "format" : "int32",
                    "nullable" : true
                  },
                  "handoff_step" : {
                    "required" : [ "target_id", "target_type" ],
                    "type" : "object",
                    "properties" : {
                      "target_type" : {
                        "type" : "string",
                        "enum" : [ "EscalationPolicy", "Team" ]
                      },
                      "target_id" : {
                        "type" : "string"
                      }
                    },
                    "description" : "Handoff step for LOW priority alerts",
                    "nullable" : true
                  }
                },
                "description" : "Settings for LOW priority alerts",
                "nullable" : true
              }
            },
            "description" : "Priority-specific settings for dynamic escalation policies",
            "nullable" : true
          }
        },
        "description" : "Create a Signals escalation policy for a team."
      },
      "Signals_API_EscalationPolicyEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "default" : {
            "type" : "boolean",
            "nullable" : true
          },
          "repetitions" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "steps" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_EscalationPolicyStepEntity"
            }
          },
          "handoff_step" : {
            "$ref" : "#/components/schemas/NullableSignals_API_EscalationPolicyHandoffStepEntity"
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "step_strategy" : {
            "type" : "string",
            "nullable" : true
          },
          "notification_priority_policies" : {
            "type" : "array",
            "description" : "Priority-specific policies for dynamic escalation policies",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_NotificationPriorityPolicyEntity"
            }
          }
        },
        "description" : "Signals_API_EscalationPolicyEntity model"
      },
      "Signals_API_EscalationPolicyStepEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "parent_position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "targets" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_TargetEntity"
            }
          },
          "timeout" : {
            "type" : "string",
            "nullable" : true
          },
          "distribution_type" : {
            "type" : "string",
            "description" : "The distribution type for the step",
            "nullable" : true,
            "enum" : [ "unspecified", "round_robin_by_alert", "round_robin_by_escalation_policy" ]
          },
          "next_target_for_round_robin" : {
            "$ref" : "#/components/schemas/NullableSignals_API_TargetEntity"
          },
          "priorities" : {
            "type" : "array",
            "description" : "The notification priorities that this step is assigned to. Valid values are HIGH, MEDIUM, and LOW.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Signals_API_EscalationPolicyHandoffStepEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "target" : {
            "$ref" : "#/components/schemas/NullableSignals_API_TargetEntity"
          }
        }
      },
      "Signals_API_NotificationPriorityPolicyEntity" : {
        "type" : "object",
        "properties" : {
          "notification_priority" : {
            "type" : "string",
            "description" : "The notification priority this policy handles (HIGH, MEDIUM, or LOW)",
            "nullable" : true
          },
          "repetitions" : {
            "type" : "integer",
            "description" : "Number of repetitions for this priority",
            "format" : "int32",
            "nullable" : true
          },
          "handoff_step" : {
            "$ref" : "#/components/schemas/NullableSignals_API_EscalationPolicyHandoffStepEntity"
          },
          "steps" : {
            "type" : "array",
            "description" : "Steps for this priority",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_EscalationPolicyStepEntity"
            }
          }
        }
      },
      "Signals_API_EscalationPolicyEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_EscalationPolicyEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Signals_API_EscalationPolicyEntityPaginated model"
      },
      "update_team_escalation_policy" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The escalation policy's name.",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "A detailed description of the escalation policy.",
            "nullable" : true
          },
          "repetitions" : {
            "type" : "integer",
            "description" : "The number of times that the escalation policy should repeat before an alert is dropped.",
            "format" : "int32",
            "nullable" : true,
            "default" : 0
          },
          "default" : {
            "type" : "boolean",
            "description" : "Whether this escalation policy should be the default for the team.",
            "nullable" : true,
            "default" : false
          },
          "step_strategy" : {
            "type" : "string",
            "description" : "The strategy for handling steps in the escalation policy. Can be \"static\" or \"dynamic_by_priority\".",
            "nullable" : true
          },
          "steps" : {
            "type" : "array",
            "description" : "A list of steps that define how an alert should escalate through the policy.",
            "nullable" : true,
            "items" : {
              "required" : [ "timeout" ],
              "type" : "object",
              "properties" : {
                "targets" : {
                  "type" : "array",
                  "description" : "A list of targets that the step will notify. You can specify up to 15 targets per step.",
                  "nullable" : true,
                  "items" : {
                    "required" : [ "id", "type" ],
                    "type" : "object",
                    "properties" : {
                      "type" : {
                        "type" : "string",
                        "description" : "The type of target that the step will notify.",
                        "enum" : [ "OnCallSchedule", "User", "SlackChannel", "MicrosoftTeamsChannel", "EntireTeam", "Webhook" ]
                      },
                      "id" : {
                        "type" : "string",
                        "description" : "The ID of the target that the step will notify."
                      }
                    }
                  }
                },
                "timeout" : {
                  "type" : "string",
                  "description" : "An ISO8601 duration string specifying how long to wait before moving on to the next step. For the last step, this value specifies how long to wait before the escalation policy should repeat, if it repeats."
                },
                "distribution_type" : {
                  "type" : "string",
                  "description" : "The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.",
                  "nullable" : true,
                  "enum" : [ "unspecified", "round_robin_by_alert", "round_robin_by_escalation_policy" ]
                },
                "priorities" : {
                  "type" : "array",
                  "description" : "A list of priorities (HIGH, MEDIUM, LOW) to which the step applies when using a dynamic escalation policy.",
                  "nullable" : true,
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "handoff_step" : {
            "required" : [ "target_id", "target_type" ],
            "type" : "object",
            "properties" : {
              "target_type" : {
                "type" : "string",
                "description" : "The type of target to which the policy will hand off.",
                "enum" : [ "EscalationPolicy", "Team" ]
              },
              "target_id" : {
                "type" : "string",
                "description" : "The ID of the target to which the policy will hand off."
              }
            },
            "description" : "A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.",
            "nullable" : true
          },
          "prioritized_settings" : {
            "type" : "object",
            "properties" : {
              "high" : {
                "type" : "object",
                "properties" : {
                  "repetitions" : {
                    "type" : "integer",
                    "description" : "Number of repetitions for HIGH priority alerts",
                    "format" : "int32",
                    "nullable" : true
                  },
                  "handoff_step" : {
                    "required" : [ "target_id", "target_type" ],
                    "type" : "object",
                    "properties" : {
                      "target_type" : {
                        "type" : "string",
                        "enum" : [ "EscalationPolicy", "Team" ]
                      },
                      "target_id" : {
                        "type" : "string"
                      }
                    },
                    "description" : "Handoff step for HIGH priority alerts",
                    "nullable" : true
                  }
                },
                "description" : "Settings for HIGH priority alerts",
                "nullable" : true
              },
              "medium" : {
                "type" : "object",
                "properties" : {
                  "repetitions" : {
                    "type" : "integer",
                    "description" : "Number of repetitions for MEDIUM priority alerts",
                    "format" : "int32",
                    "nullable" : true
                  },
                  "handoff_step" : {
                    "required" : [ "target_id", "target_type" ],
                    "type" : "object",
                    "properties" : {
                      "target_type" : {
                        "type" : "string",
                        "enum" : [ "EscalationPolicy", "Team" ]
                      },
                      "target_id" : {
                        "type" : "string"
                      }
                    },
                    "description" : "Handoff step for MEDIUM priority alerts",
                    "nullable" : true
                  }
                },
                "description" : "Settings for MEDIUM priority alerts",
                "nullable" : true
              },
              "low" : {
                "type" : "object",
                "properties" : {
                  "repetitions" : {
                    "type" : "integer",
                    "description" : "Number of repetitions for LOW priority alerts",
                    "format" : "int32",
                    "nullable" : true
                  },
                  "handoff_step" : {
                    "required" : [ "target_id", "target_type" ],
                    "type" : "object",
                    "properties" : {
                      "target_type" : {
                        "type" : "string",
                        "enum" : [ "EscalationPolicy", "Team" ]
                      },
                      "target_id" : {
                        "type" : "string"
                      }
                    },
                    "description" : "Handoff step for LOW priority alerts",
                    "nullable" : true
                  }
                },
                "description" : "Settings for LOW priority alerts",
                "nullable" : true
              }
            },
            "description" : "Priority-specific settings for dynamic escalation policies",
            "nullable" : true
          }
        },
        "description" : "Update a Signals escalation policy by ID"
      },
      "create_team_on_call_schedule" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The on-call schedule's name."
          },
          "description" : {
            "type" : "string",
            "description" : "A detailed description of the on-call schedule.",
            "nullable" : true
          },
          "rotation_name" : {
            "type" : "string",
            "description" : "An optional name for the initial rotation. If not provided, the schedule's name will be used.",
            "nullable" : true
          },
          "rotation_description" : {
            "type" : "string",
            "description" : "An optional description for the initial rotation. If not provided, the schedule's description will be used.",
            "nullable" : true
          },
          "color" : {
            "type" : "string",
            "description" : "A hex color code that will be used to represent the initial rotation in FireHydrant's UI.",
            "nullable" : true
          },
          "time_zone" : {
            "type" : "string",
            "description" : "The time zone in which the on-call schedule's rotation will operate. This value must be a valid IANA time zone name and must be provided if `rotations` is not.",
            "nullable" : true
          },
          "slack_user_group_id" : {
            "type" : "string",
            "description" : "The ID of a Slack user group to sync the initial rotation's on-call members to.",
            "nullable" : true
          },
          "members" : {
            "type" : "array",
            "description" : "An ordered list of objects that specify members of the initial rotation.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "user_id" : {
                  "type" : "string",
                  "description" : "The ID of a user who should be added to the schedule's initial rotation. You can add a user to the\nschedule multiple times to construct more complex rotations, and you can specify a `null` user ID\nto create unassigned slots in the rotation.\n",
                  "nullable" : true
                }
              }
            }
          },
          "strategy" : {
            "required" : [ "type" ],
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "description" : "The type of strategy. Must be one of \"daily\", \"weekly\", or \"custom\".",
                "enum" : [ "daily", "weekly", "custom" ]
              },
              "handoff_time" : {
                "type" : "string",
                "description" : "An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is \"daily\" or \"weekly\".",
                "nullable" : true
              },
              "handoff_day" : {
                "type" : "string",
                "description" : "The day of the week on which on-call shifts should hand off, as its long-form name (e.g. \"monday\", \"tuesday\", etc). This value is only used if the strategy type is \"weekly\".",
                "nullable" : true,
                "enum" : [ "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" ]
              },
              "shift_duration" : {
                "type" : "string",
                "description" : "An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is \"custom\".",
                "nullable" : true
              }
            },
            "description" : "An object that specifies how the initial rotation's on-call shifts should be generated. This value must be provided if `rotations` is not.",
            "nullable" : true
          },
          "restrictions" : {
            "type" : "array",
            "description" : "A list of objects that restrict the initial rotation to specific on-call periods.",
            "nullable" : true,
            "items" : {
              "required" : [ "end_day", "end_time", "start_day", "start_time" ],
              "type" : "object",
              "properties" : {
                "start_day" : {
                  "type" : "string",
                  "description" : "The day of the week on which the restriction should start, as its long-form name (e.g. \"monday\", \"tuesday\", etc).",
                  "enum" : [ "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" ]
                },
                "start_time" : {
                  "type" : "string",
                  "description" : "An ISO8601 time string specifying when the restriction should start."
                },
                "end_day" : {
                  "type" : "string",
                  "description" : "The day of the week on which the restriction should end, as its long-form name (e.g. \"monday\", \"tuesday\", etc).",
                  "enum" : [ "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" ]
                },
                "end_time" : {
                  "type" : "string",
                  "description" : "An ISO8601 time string specifying when the restriction should end."
                }
              }
            }
          },
          "start_time" : {
            "type" : "string",
            "description" : "An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is \"custom\".",
            "nullable" : true
          },
          "member_ids" : {
            "type" : "array",
            "description" : "This parameter is deprecated; use `members` instead.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Create a Signals on-call schedule for a team with a single rotation. More rotations can be created later."
      },
      "Signals_API_OnCallScheduleEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "rotations" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_OnCallRotationEntity"
            }
          },
          "team" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "signals_ical_url" : {
            "type" : "string",
            "nullable" : true
          },
          "time_zone" : {
            "type" : "string",
            "nullable" : true
          },
          "color" : {
            "type" : "string",
            "nullable" : true
          },
          "slack_user_group_id" : {
            "type" : "string",
            "nullable" : true
          },
          "members" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SuccinctEntity"
            }
          },
          "shifts" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_OnCallShiftEntity"
            }
          },
          "strategy" : {
            "$ref" : "#/components/schemas/NullableSignals_API_OnCallStrategyEntity"
          },
          "restrictions" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_OnCallRestrictionEntity"
            }
          }
        },
        "description" : "Signals_API_OnCallScheduleEntity model"
      },
      "Signals_API_OnCallRotationEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "time_zone" : {
            "type" : "string",
            "nullable" : true
          },
          "color" : {
            "type" : "string",
            "nullable" : true
          },
          "slack_user_group_id" : {
            "type" : "string",
            "nullable" : true
          },
          "members" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SuccinctEntity"
            }
          },
          "shifts" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_OnCallShiftEntity"
            }
          },
          "team" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          },
          "strategy" : {
            "$ref" : "#/components/schemas/NullableSignals_API_OnCallStrategyEntity"
          },
          "restrictions" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_OnCallRestrictionEntity"
            }
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }
      },
      "Signals_API_OnCallShiftEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "user" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          },
          "coverage_request" : {
            "type" : "string",
            "nullable" : true
          },
          "color" : {
            "type" : "string",
            "nullable" : true
          },
          "time_zone" : {
            "type" : "string",
            "nullable" : true
          },
          "on_call_schedule" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          },
          "on_call_rotation" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          },
          "team" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          },
          "start_time" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "end_time" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "Signals_API_OnCallShiftEntity model"
      },
      "Signals_API_OnCallStrategyEntity" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "handoff_time" : {
            "type" : "string",
            "nullable" : true
          },
          "handoff_day" : {
            "type" : "string",
            "nullable" : true
          },
          "shift_duration" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Signals_API_OnCallRestrictionEntity" : {
        "type" : "object",
        "properties" : {
          "start_day" : {
            "type" : "string",
            "nullable" : true
          },
          "start_time" : {
            "type" : "string",
            "nullable" : true
          },
          "end_day" : {
            "type" : "string",
            "nullable" : true
          },
          "end_time" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Signals_API_OnCallScheduleEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_OnCallScheduleEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Signals_API_OnCallScheduleEntityPaginated model"
      },
      "update_team_on_call_schedule" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "A new name for the on-call schedule.",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "A new, detailed description for the on-call schedule.",
            "nullable" : true
          },
          "rotation_name" : {
            "type" : "string",
            "description" : "A new name for the schedule's rotation.",
            "nullable" : true
          },
          "rotation_description" : {
            "type" : "string",
            "description" : "A new, detailed description for the schedule's rotation.",
            "nullable" : true
          },
          "color" : {
            "type" : "string",
            "description" : "A hex color code that will be used to represent the schedule's rotation in FireHydrant's UI.",
            "nullable" : true
          },
          "time_zone" : {
            "type" : "string",
            "description" : "The time zone in which the on-call schedule's rotation will operate. This value must be a valid IANA time zone name.",
            "nullable" : true
          },
          "slack_user_group_id" : {
            "type" : "string",
            "description" : "The ID of a Slack user group to sync the rotation's on-call members to.",
            "nullable" : true
          },
          "members" : {
            "type" : "array",
            "description" : "An ordered list of objects that specify members of the schedule's rotation.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "user_id" : {
                  "type" : "string",
                  "description" : "The ID of a user who should be added to the schedule's rotation. You can add a user to the rotation\nmultiple times to construct more complex rotations, and you can specify a `null` user ID to create\nunassigned slots in the rotation.\n",
                  "nullable" : true
                }
              }
            }
          },
          "strategy" : {
            "required" : [ "type" ],
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "description" : "The type of strategy. Must be one of \"daily\", \"weekly\", or \"custom\".",
                "enum" : [ "daily", "weekly", "custom" ]
              },
              "handoff_time" : {
                "type" : "string",
                "description" : "An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is \"daily\" or \"weekly\".",
                "nullable" : true
              },
              "handoff_day" : {
                "type" : "string",
                "description" : "The day of the week on which on-call shifts should hand off, as its long-form name (e.g. \"monday\", \"tuesday\", etc). This value is only used if the strategy type is \"weekly\".",
                "nullable" : true,
                "enum" : [ "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" ]
              },
              "shift_duration" : {
                "type" : "string",
                "description" : "An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is \"custom\".",
                "nullable" : true
              }
            },
            "description" : "An object that specifies how the rotation's on-call shifts should be generated.",
            "nullable" : true
          },
          "restrictions" : {
            "type" : "array",
            "description" : "A list of objects that restrict the schedule's rotation to specific on-call periods.",
            "nullable" : true,
            "items" : {
              "required" : [ "end_day", "end_time", "start_day", "start_time" ],
              "type" : "object",
              "properties" : {
                "start_day" : {
                  "type" : "string",
                  "description" : "The day of the week on which the restriction should start, as its long-form name (e.g. \"monday\", \"tuesday\", etc).",
                  "enum" : [ "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" ]
                },
                "start_time" : {
                  "type" : "string",
                  "description" : "An ISO8601 time string specifying when the restriction should start."
                },
                "end_day" : {
                  "type" : "string",
                  "description" : "The day of the week on which the restriction should end, as its long-form name (e.g. \"monday\", \"tuesday\", etc).",
                  "enum" : [ "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" ]
                },
                "end_time" : {
                  "type" : "string",
                  "description" : "An ISO8601 time string specifying when the restriction should end."
                }
              }
            }
          },
          "effective_at" : {
            "type" : "string",
            "description" : "An ISO8601 time string specifying when the updated schedule should take effect. This\nvalue must be provided if editing an attribute that would affect how the schedule's\nshifts are generated, such as the time zone, members, strategy, or restrictions.\n",
            "nullable" : true
          },
          "member_ids" : {
            "type" : "array",
            "description" : "This parameter is deprecated; use `members` instead.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Update a Signals on-call schedule by ID. For backwards compatibility, all parameters except for\n`name` and `description` will be ignored if the schedule has more than one rotation. If the schedule\nhas only one rotation, you can continue to update that rotation using the rotation-specific parameters.\n"
      },
      "create_on_call_shift" : {
        "required" : [ "end_time", "start_time" ],
        "type" : "object",
        "properties" : {
          "start_time" : {
            "type" : "string",
            "description" : "The start time of the shift in ISO8601 format."
          },
          "end_time" : {
            "type" : "string",
            "description" : "The end time of the shift in ISO8601 format."
          },
          "user_id" : {
            "type" : "string",
            "description" : "The ID of the user who is on-call for the shift. If not provided, the shift will be unassigned.",
            "nullable" : true
          },
          "rotation_id" : {
            "type" : "string",
            "description" : "The ID of the on-call rotation you want to create the shift in. This parameter is optional for backwards compatibility but must be provided if the schedule has multiple rotations.",
            "nullable" : true
          }
        },
        "description" : "Create a Signals on-call shift in a schedule."
      },
      "update_on_call_shift" : {
        "type" : "object",
        "properties" : {
          "start_time" : {
            "type" : "string",
            "description" : "The start time of the shift in ISO8601 format.",
            "nullable" : true
          },
          "end_time" : {
            "type" : "string",
            "description" : "The end time of the shift in ISO8601 format.",
            "nullable" : true
          },
          "user_id" : {
            "type" : "string",
            "description" : "The ID of the user who is on-call for the shift. If not provided, the shift will be unassigned.",
            "nullable" : true
          },
          "coverage_request" : {
            "type" : "string",
            "description" : "A description of why coverage is needed for this shift. If the shift is re-assigned, this will automatically be cleared unless provided again.",
            "nullable" : true
          }
        },
        "description" : "Update a Signals on-call shift by ID"
      },
      "create_team_signal_rule" : {
        "required" : [ "expression", "name", "target_id", "target_type" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The rule's name."
          },
          "expression" : {
            "type" : "string",
            "description" : "The CEL expression that defines the rule."
          },
          "target_type" : {
            "type" : "string",
            "description" : "The type of target that the rule will notify when matched.",
            "enum" : [ "EscalationPolicy", "OnCallSchedule", "User", "Webhook", "SlackChannel", "MicrosoftTeamsChannel" ]
          },
          "target_id" : {
            "type" : "string",
            "description" : "The ID of the target that the rule will notify when matched."
          },
          "incident_type_id" : {
            "type" : "string",
            "description" : "The ID of an incident type that should be used when an alert is promoted to an incident",
            "nullable" : true
          },
          "notification_priority_override" : {
            "type" : "string",
            "description" : "A notification priority that will be set on the resulting alert (default: HIGH)",
            "nullable" : true,
            "enum" : [ "HIGH", "MEDIUM", "LOW", "" ]
          },
          "create_incident_condition_when" : {
            "type" : "string",
            "description" : "Determines when an incident should be created when this rule is matched",
            "nullable" : true,
            "enum" : [ "WHEN_UNSPECIFIED", "WHEN_ALWAYS" ]
          },
          "deduplication_expiry" : {
            "type" : "string",
            "description" : "The amount of time alerts created from this rule will be deduplicated",
            "nullable" : true
          }
        },
        "description" : "Create a Signals rule for a team."
      },
      "Signals_API_RuleEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "expression" : {
            "type" : "string",
            "nullable" : true
          },
          "team_id" : {
            "type" : "string",
            "nullable" : true
          },
          "target" : {
            "$ref" : "#/components/schemas/NullableSignals_API_TargetEntity"
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "incident_type" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          },
          "notification_priority_override" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "HIGH", "MEDIUM", "LOW" ]
          },
          "create_incident_condition_when" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "WHEN_UNSPECIFIED", "WHEN_ALWAYS" ]
          },
          "deduplication_expiry" : {
            "type" : "string",
            "description" : "Duration for deduplicating similar alerts (ISO8601 duration format e.g., 'PT30M', 'PT2H', 'P1D')",
            "nullable" : true,
            "example" : "PT1H"
          }
        },
        "description" : "Signals_API_RuleEntity model"
      },
      "Signals_API_RuleEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_RuleEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Signals_API_RuleEntityPaginated model"
      },
      "update_team_signal_rule" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The rule's name.",
            "nullable" : true
          },
          "expression" : {
            "type" : "string",
            "description" : "The CEL expression that defines the rule.",
            "nullable" : true
          },
          "target_type" : {
            "type" : "string",
            "description" : "The type of target that the rule will notify when matched.",
            "nullable" : true,
            "enum" : [ "EscalationPolicy", "OnCallSchedule", "User", "Webhook", "SlackChannel", "MicrosoftTeamsChannel" ]
          },
          "target_id" : {
            "type" : "string",
            "description" : "The ID of the target that the rule will notify when matched.",
            "nullable" : true
          },
          "incident_type_id" : {
            "type" : "string",
            "description" : "The ID of an incident type that should be used when an alert is promoted to an incident",
            "nullable" : true
          },
          "notification_priority_override" : {
            "type" : "string",
            "description" : "A notification priority that will be set on the resulting alert (default: HIGH)",
            "nullable" : true,
            "enum" : [ "HIGH", "MEDIUM", "LOW", "" ]
          },
          "create_incident_condition_when" : {
            "type" : "string",
            "description" : "Determines when an incident should be created when this rule is matched",
            "nullable" : true,
            "enum" : [ "WHEN_UNSPECIFIED", "WHEN_ALWAYS" ]
          },
          "deduplication_expiry" : {
            "type" : "string",
            "description" : "The amount of time alerts created from this rule will be deduplicated",
            "nullable" : true
          }
        },
        "description" : "Update a Signals rule by ID"
      },
      "create_change" : {
        "type" : "object",
        "properties" : {
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A labels hash of keys and values",
            "nullable" : true
          }
        },
        "description" : "Create a new change entry"
      },
      "ChangeEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "UUID of the Change",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "description" : "Description of the Change",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "description" : "The time the change entry was created",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "Arbitrary key/value pairs of labels.",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the Change",
            "nullable" : true
          }
        },
        "description" : "ChangeEntity model"
      },
      "update_change" : {
        "type" : "object",
        "properties" : {
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "nullable" : true
          }
        },
        "description" : "Update a change entry"
      },
      "create_change_identity" : {
        "required" : [ "type", "value" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        },
        "description" : "Create an identity for the change entry"
      },
      "ChangeIdentityEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "value" : {
            "type" : "string",
            "nullable" : true
          },
          "change_id" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "ChangeIdentityEntity model"
      },
      "ChangeIdentityEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ChangeIdentityEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "ChangeIdentityEntityPaginated model"
      },
      "update_change_identity" : {
        "required" : [ "type", "value" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        },
        "description" : "Update an identity for the change entry"
      },
      "create_change_event" : {
        "required" : [ "summary" ],
        "type" : "object",
        "properties" : {
          "summary" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "nullable" : true
          },
          "starts_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ends_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "environments" : {
            "type" : "array",
            "description" : "An array of environment IDs",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "services" : {
            "type" : "array",
            "description" : "An array of service IDs",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "changes" : {
            "type" : "array",
            "description" : "An array of change IDs",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "external_id" : {
            "type" : "string",
            "description" : "The ID of a change event as assigned by an external provider",
            "nullable" : true
          },
          "change_identities" : {
            "type" : "array",
            "description" : "If provided and valid, the event will be linked to all changes that have the same identities. Identity *values* must be unique.",
            "nullable" : true,
            "items" : {
              "required" : [ "type", "value" ],
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "string"
                }
              }
            }
          },
          "attachments" : {
            "type" : "array",
            "description" : "JSON objects representing attachments, see attachments documentation for the schema",
            "nullable" : true,
            "items" : {
              "required" : [ "type" ],
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "link" ]
                }
              }
            }
          },
          "authors" : {
            "type" : "array",
            "description" : "Array of additional authors to add to the change event, the creating actor will automatically be added as an author",
            "nullable" : true,
            "items" : {
              "required" : [ "name", "source", "source_id" ],
              "type" : "object",
              "properties" : {
                "source" : {
                  "type" : "string"
                },
                "source_id" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "description" : "Create a change event"
      },
      "ChangeEventEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "external_id" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "starts_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ends_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "duration_ms" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "duration_iso8601" : {
            "type" : "string",
            "nullable" : true
          },
          "environments" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EnvironmentEntryEntity"
            }
          },
          "related_changes" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ChangeEntity"
            }
          },
          "identities" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ChangeIdentityEntity"
            }
          },
          "authors" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AuthorEntity"
            }
          },
          "attachments" : {
            "type" : "array",
            "description" : "A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : { }
            }
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "An object of label key and values",
            "nullable" : true
          },
          "services" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ServiceEntityLite"
            }
          }
        },
        "description" : "ChangeEventEntity model"
      },
      "ChangeEventSlimEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ChangeEventSlimEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "ChangeEventSlimEntityPaginated model"
      },
      "ChangeEventSlimEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "external_id" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "starts_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ends_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "duration_ms" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "duration_iso8601" : {
            "type" : "string",
            "nullable" : true
          },
          "environments" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EnvironmentEntryEntity"
            }
          },
          "authors" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AuthorEntity"
            }
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "An object of label key and values",
            "nullable" : true
          },
          "services" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ServiceEntityLite"
            }
          }
        }
      },
      "update_change_event" : {
        "type" : "object",
        "properties" : {
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "nullable" : true
          },
          "starts_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ends_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "environments" : {
            "type" : "array",
            "description" : "An array of environment IDs (setting this will overwrite the current environments)",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "services" : {
            "type" : "array",
            "description" : "An array of service IDs (setting this will overwrite the current services)",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "attachments" : {
            "type" : "array",
            "description" : "JSON objects representing attachments, see attachments documentation for the schema",
            "nullable" : true,
            "items" : {
              "required" : [ "type" ],
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "link" ]
                }
              }
            }
          }
        },
        "description" : "Update a change event"
      },
      "ChangeTypeEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ChangeTypeEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "ChangeTypeEntityPaginated model"
      },
      "ChangeTypeEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "EntitlementEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EntitlementEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "EntitlementEntityPaginated model"
      },
      "EntitlementEntity" : {
        "type" : "object",
        "properties" : {
          "current_count" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "errors" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "exists" : {
            "type" : "boolean",
            "nullable" : true
          },
          "available" : {
            "type" : "boolean",
            "nullable" : true
          },
          "maximum" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "tier" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "free", "essentials", "enterprise", "signals_only" ]
          }
        }
      },
      "create_incident" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "customer_impact_summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "priority" : {
            "type" : "string",
            "nullable" : true
          },
          "severity" : {
            "type" : "string",
            "nullable" : true
          },
          "severity_condition_id" : {
            "type" : "string",
            "nullable" : true
          },
          "severity_impact_id" : {
            "type" : "string",
            "nullable" : true
          },
          "alert_ids" : {
            "type" : "array",
            "description" : "List of alert IDs that this incident should be associated to",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "Key:value pairs to track custom data for the incident",
            "nullable" : true
          },
          "runbook_ids" : {
            "type" : "array",
            "description" : "List of ids of Runbooks to attach to this incident. Foregoes any conditions these Runbooks may have guarding automatic attachment.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "tag_list" : {
            "type" : "array",
            "description" : "List of tags for the incident",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "impacts" : {
            "type" : "array",
            "description" : "An array of impacted infrastructure",
            "nullable" : true,
            "items" : {
              "required" : [ "condition_id", "id", "type" ],
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "description" : "The type of impacted infrastructure. One of: environment, functionality, or service"
                },
                "id" : {
                  "type" : "string",
                  "description" : "The ID of the impacted infrastructure"
                },
                "condition_id" : {
                  "type" : "string",
                  "description" : "The ID of the impact condition. Find these at /v1/severity_matrix/conditions"
                }
              }
            }
          },
          "milestones" : {
            "type" : "array",
            "description" : "An array of milestones to set on an incident. This can be used to create an already-resolved incident.",
            "nullable" : true,
            "items" : {
              "required" : [ "occurred_at", "type" ],
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "description" : "The type/slug of the milestone. Must be one of the currently configured milestones."
                },
                "occurred_at" : {
                  "type" : "string",
                  "description" : "An ISO8601 formatted string for when this milestone occurred. If you are removing a milestone, this field still needs to be set to some value",
                  "format" : "date-time"
                }
              }
            }
          },
          "restricted" : {
            "type" : "boolean",
            "nullable" : true
          },
          "team_ids" : {
            "type" : "array",
            "description" : "IDs of teams you wish to assign to this incident.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "custom_fields" : {
            "type" : "array",
            "description" : "An array of custom fields to set on the incident.",
            "nullable" : true,
            "items" : {
              "required" : [ "field_id" ],
              "type" : "object",
              "properties" : {
                "field_id" : {
                  "type" : "string",
                  "description" : "The ID of the custom field you wish to set."
                },
                "value_string" : {
                  "type" : "string",
                  "description" : "The value you wish to set on the custom field if the type of the field accepts string values",
                  "nullable" : true
                },
                "value_array" : {
                  "type" : "array",
                  "description" : "The value you wish to set on the custom field if the type of the field accepts array values",
                  "nullable" : true,
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "external_links" : {
            "type" : "string",
            "nullable" : true
          },
          "incident_type_id" : {
            "type" : "string",
            "description" : "The ID of the incident type. This will copy values from the incident type (if any) unless they are being overridden via parameters in this request.",
            "nullable" : true
          },
          "skip_incident_type_values" : {
            "type" : "boolean",
            "description" : "If true, the incident type values will not be copied to the incident. This is useful when creating an incident from an incident type, but you want to set the values manually.",
            "nullable" : true,
            "default" : false
          }
        },
        "description" : "Create a new incident"
      },
      "IncidentEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/IncidentEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "IncidentEntityPaginated model"
      },
      "update_incident" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "customer_impact_summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "Key:value pairs to track custom data for the incident",
            "nullable" : true
          },
          "priority" : {
            "type" : "string",
            "nullable" : true
          },
          "severity" : {
            "type" : "string",
            "nullable" : true
          },
          "severity_condition_id" : {
            "type" : "string",
            "nullable" : true
          },
          "severity_impact_id" : {
            "type" : "string",
            "nullable" : true
          },
          "tag_list" : {
            "type" : "array",
            "description" : "List of tags for the incident",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "incident_type_id" : {
            "type" : "string",
            "description" : "The ID of the incident type. This will copy values from the incident type (if any) unless they are being overridden via parameters in this request.",
            "nullable" : true
          }
        },
        "description" : "Updates an incident with provided parameters"
      },
      "Incidents_AlertEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_AlertEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Incidents_AlertEntityPaginated model"
      },
      "Incidents_AlertEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "alert" : {
            "$ref" : "#/components/schemas/NullableAlerts_AlertEntity"
          },
          "primary" : {
            "type" : "boolean",
            "description" : "whether or not this is the primary alert for this incident",
            "nullable" : true
          }
        },
        "description" : "Incidents_AlertEntity model"
      },
      "Alerts_AlertEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "priority" : {
            "type" : "string",
            "nullable" : true
          },
          "integration_name" : {
            "type" : "string",
            "nullable" : true
          },
          "starts_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ends_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "duration_ms" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "duration_iso8601" : {
            "type" : "string",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "nullable" : true
          },
          "remote_id" : {
            "type" : "string",
            "nullable" : true
          },
          "remote_url" : {
            "type" : "string",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "Arbitrary key:value pairs of labels.",
            "nullable" : true
          },
          "environments" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SuccinctEntity"
            }
          },
          "services" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SuccinctEntity"
            }
          },
          "tags" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "source_icon" : {
            "type" : "string",
            "nullable" : true
          },
          "signal_id" : {
            "type" : "string",
            "nullable" : true
          },
          "signal_rule" : {
            "$ref" : "#/components/schemas/NullableSignals_API_RuleEntity"
          },
          "signal_target" : {
            "$ref" : "#/components/schemas/NullableSignals_API_TargetEntity"
          },
          "team_name" : {
            "type" : "string",
            "nullable" : true
          },
          "team_id" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "incidents" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PublicAPI_V1_Incidents_SuccinctEntity"
            }
          },
          "events" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Alerts_SirenEventEntity"
            }
          },
          "is_expired" : {
            "type" : "boolean",
            "nullable" : true
          },
          "is_noise" : {
            "type" : "boolean",
            "nullable" : true
          },
          "parent_alerts" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Alerts_SirenAlertEntity"
            }
          },
          "child_alerts" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Alerts_SirenAlertEntity"
            }
          },
          "conversations" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Conversations_API_Entities_Reference"
            }
          }
        },
        "description" : "Alerts_AlertEntity model"
      },
      "PublicAPI_V1_Incidents_SuccinctEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "number" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Alerts_SirenEventEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "data" : {
            "type" : "object",
            "properties" : { },
            "description" : "The event's payload",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }
      },
      "Alerts_SirenAlertEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "starts_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ends_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "nullable" : true
          },
          "remote_id" : {
            "type" : "string",
            "nullable" : true
          },
          "remote_url" : {
            "type" : "string",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "Arbitrary key:value pairs of labels.",
            "nullable" : true
          },
          "tags" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "signal_id" : {
            "type" : "string",
            "nullable" : true
          },
          "signal_rule" : {
            "$ref" : "#/components/schemas/NullableSignals_API_RuleEntity"
          }
        }
      },
      "update_incident_alert_primary" : {
        "required" : [ "primary" ],
        "type" : "object",
        "properties" : {
          "primary" : {
            "type" : "boolean"
          }
        },
        "description" : "Setting an alert as primary will overwrite milestone times in the FireHydrant incident with times included in the primary alert. Services attached to the primary alert will also be automatically added to the incident."
      },
      "bulk_update_incident_milestones" : {
        "required" : [ "milestones" ],
        "type" : "object",
        "properties" : {
          "bulk" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "true" ]
          },
          "milestones" : {
            "type" : "array",
            "items" : {
              "required" : [ "occurred_at", "type" ],
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "description" : "The type/slug of the milestone. Must be one of the currently configured milestones for the given incident."
                },
                "occurred_at" : {
                  "type" : "string",
                  "description" : "An ISO8601 formatted string for when this milestone occurred. If you are removing a milestone, this field still needs to be set to some value",
                  "format" : "date-time"
                },
                "remove" : {
                  "type" : "boolean",
                  "description" : "If set to true, the milestone will be removed from the incident",
                  "nullable" : true
                }
              }
            }
          }
        },
        "description" : "Update milestone times in bulk for a given incident. All milestone\ntimes for an incident must occur in chronological order\ncorresponding to the configured order of milestones. If the result\nof this request would cause any milestone(s) to appear out of place,\na 422 response will instead be returned. This includes milestones\nnot explicitly submitted or updated in this request.\n"
      },
      "Incidents_MilestoneEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_MilestoneEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Incidents_MilestoneEntityPaginated model"
      },
      "create_incident_change_event" : {
        "required" : [ "change_event_id", "type" ],
        "type" : "object",
        "properties" : {
          "change_event_id" : {
            "type" : "string",
            "description" : "The ID of the change event to associate"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "caused", "fixed", "suspect", "dismissed" ]
          },
          "why" : {
            "type" : "string",
            "description" : "A short description about why this change event is related",
            "nullable" : true
          }
        },
        "description" : "Add a related change to an incident. Changes added to an incident can be causes, fixes, or suspects. To remove a change from an incident, the type field should be set to dismissed."
      },
      "Incidents_RelatedChangeEventEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "why" : {
            "type" : "string",
            "description" : "The reason why this change event is related to this incident",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "caused", "fixed", "suspect", "dismissed" ]
          },
          "change_event" : {
            "$ref" : "#/components/schemas/NullableChangeEventEntity"
          },
          "incident_id" : {
            "type" : "string",
            "nullable" : true
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          }
        },
        "description" : "Incidents_RelatedChangeEventEntity model"
      },
      "Incidents_RelatedChangeEventEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_RelatedChangeEventEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Incidents_RelatedChangeEventEntityPaginated model"
      },
      "update_incident_change_event" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "caused", "fixed", "suspect", "dismissed" ]
          },
          "why" : {
            "type" : "string",
            "description" : "A short description about why this change event is related",
            "nullable" : true
          }
        },
        "description" : "Update a change attached to an incident"
      },
      "create_incident_status_page" : {
        "required" : [ "integration_id", "integration_slug" ],
        "type" : "object",
        "properties" : {
          "integration_slug" : {
            "type" : "string"
          },
          "integration_id" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Add a status page to an incident."
      },
      "Incidents_StatusPageEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_StatusPageEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Incidents_StatusPageEntityPaginated model"
      },
      "create_incident_task_list" : {
        "required" : [ "task_list_id" ],
        "type" : "object",
        "properties" : {
          "task_list_id" : {
            "type" : "string",
            "description" : "The id of the task list."
          },
          "assignee_id" : {
            "type" : "string",
            "description" : "The ID of the user assigned to the tasks in this list.",
            "nullable" : true
          }
        },
        "description" : "Add all tasks from list to incident"
      },
      "TaskEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "title" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "state" : {
            "type" : "string",
            "nullable" : true
          },
          "assignee" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "due_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "TaskEntity model"
      },
      "create_incident_task" : {
        "required" : [ "title" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "The title of the task."
          },
          "state" : {
            "type" : "string",
            "description" : "The state of the task. One of: open, in_progress, cancelled, done",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "A description of what the task is for.",
            "nullable" : true
          },
          "assignee_id" : {
            "type" : "string",
            "description" : "The ID of the user assigned to the task.",
            "nullable" : true
          },
          "due_at" : {
            "type" : "string",
            "description" : "The due date of the task. Relative values are supported such as '5m'",
            "nullable" : true
          }
        },
        "description" : "Create a task"
      },
      "TaskEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "TaskEntityPaginated model"
      },
      "update_incident_task" : {
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "The title of the task.",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "A description of what the task is for.",
            "nullable" : true
          },
          "state" : {
            "type" : "string",
            "description" : "The state of the task. One of: open, in_progress, cancelled, done",
            "nullable" : true
          },
          "assignee_id" : {
            "type" : "string",
            "description" : "The ID of the user assigned to the task.",
            "nullable" : true
          },
          "due_at" : {
            "type" : "string",
            "description" : "The due date of the task. Relative values are supported such as '5m'",
            "nullable" : true
          }
        },
        "description" : "Update a task's attributes"
      },
      "convert_incident_task" : {
        "type" : "object",
        "properties" : {
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "project_id" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "state" : {
            "type" : "string",
            "nullable" : true
          },
          "tag_list" : {
            "type" : "array",
            "description" : "List of tags for the ticket",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Convert a task to a follow-up"
      },
      "Attachments_LinkEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Attachments_LinkEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Attachments_LinkEntityPaginated model"
      },
      "create_incident_link" : {
        "required" : [ "href" ],
        "type" : "object",
        "properties" : {
          "display_text" : {
            "type" : "string",
            "nullable" : true
          },
          "icon_url" : {
            "type" : "string",
            "nullable" : true
          },
          "href" : {
            "type" : "string"
          }
        },
        "description" : "Allows adding adhoc links to an incident as an attachment"
      },
      "update_incident_link" : {
        "type" : "object",
        "properties" : {
          "display_text" : {
            "type" : "string",
            "nullable" : true
          },
          "icon_url" : {
            "type" : "string",
            "nullable" : true
          },
          "href_url" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Update the external incident link attributes"
      },
      "PublicAPI_V1_Incidents_TranscriptEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the transcript entry",
            "nullable" : true
          },
          "speaker" : {
            "type" : "string",
            "description" : "The speaker for the transcript entry",
            "nullable" : true
          },
          "start" : {
            "type" : "integer",
            "description" : "The start time for the transcript entry",
            "format" : "int32",
            "nullable" : true
          },
          "until" : {
            "type" : "integer",
            "description" : "The end time for the transcript entry",
            "format" : "int32",
            "nullable" : true
          },
          "words" : {
            "type" : "string",
            "description" : "The words spoken for the transcript entry",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "description" : "The time the transcript entry was created",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "description" : "The time the transcript entry was last updated",
            "format" : "date-time",
            "nullable" : true
          },
          "author" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          }
        },
        "description" : "PublicAPI_V1_Incidents_TranscriptEntity model"
      },
      "SimilarIncidentEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PublicAPI_V1_SimilarIncidentEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "SimilarIncidentEntityPaginated model"
      },
      "PublicAPI_V1_SimilarIncidentEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "distance" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          }
        }
      },
      "Attachments_TypedAttachmentEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Attachments_TypedAttachmentEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Attachments_TypedAttachmentEntityPaginated model"
      },
      "Attachments_TypedAttachmentEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "attached_to_id" : {
            "type" : "string",
            "nullable" : true
          },
          "attached_to_type" : {
            "type" : "string",
            "nullable" : true
          },
          "secondary_attached_to_id" : {
            "type" : "string",
            "nullable" : true
          },
          "secondary_attached_to_type" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "attributes" : {
            "type" : "object",
            "properties" : { },
            "description" : "Can be one of: Attachments::LinkEntity, Integrations::CustomerSupportIssueEntity, Attachments::GenericAttachmentEntity",
            "nullable" : true
          }
        }
      },
      "IncidentAttachmentEntity" : {
        "type" : "object",
        "properties" : {
          "file_name" : {
            "type" : "string",
            "nullable" : true
          },
          "file_content_type" : {
            "type" : "string",
            "nullable" : true
          },
          "signed_url" : {
            "type" : "string",
            "nullable" : true
          },
          "media_type" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "external_id" : {
            "type" : "string",
            "nullable" : true
          },
          "file_size" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "pending_upload", "uploaded" ]
          },
          "versions" : {
            "type" : "object",
            "properties" : { },
            "description" : "An object with keys that designate a specific version or size of the attachment",
            "nullable" : true
          }
        },
        "description" : "IncidentAttachmentEntity model"
      },
      "IncidentEventEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/IncidentEventEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "IncidentEventEntityPaginated model"
      },
      "IncidentEventEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "incident_id" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "context" : {
            "type" : "string",
            "nullable" : true
          },
          "data" : {
            "type" : "object",
            "properties" : { },
            "description" : "Can be one of: NoteEntity, TourStepEntity, RootCauseEntity, ChangeTypeEntity, RoleUpdateEntity, TaskUpdateEntity, AlertLinkedEntity, ChatMessageEntity, AddTaskListEntity, ImpactUpdateEntity, TicketUpdateEntity, GeneralUpdateEntity, ChangelogEntryEntity, IncidentStatusEntity, TeamAssignmentEntity, BulkUpdateEntity",
            "nullable" : true
          },
          "occurred_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "visibility" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "private_to_org", "open_to_public", "internal_status_page" ]
          },
          "author" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "votes" : {
            "$ref" : "#/components/schemas/NullableVotesEntity"
          },
          "conversations" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Conversations_API_Entities_Reference"
            }
          }
        },
        "description" : "IncidentEventEntity model"
      },
      "VotesEntity" : {
        "type" : "object",
        "properties" : {
          "voted" : {
            "type" : "boolean",
            "description" : "Whether or not the current actor has voted",
            "nullable" : true
          },
          "liked" : {
            "type" : "boolean",
            "description" : "Whether or not the current actor has voted positively",
            "nullable" : true
          },
          "disliked" : {
            "type" : "boolean",
            "description" : "Whether or not the current actor has voted negatively",
            "nullable" : true
          },
          "likes" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "dislikes" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        },
        "description" : "VotesEntity model"
      },
      "update_vote" : {
        "required" : [ "direction" ],
        "type" : "object",
        "properties" : {
          "direction" : {
            "type" : "string",
            "description" : "The direction you would like to vote, or if you dig it",
            "enum" : [ "up", "down", "dig" ]
          }
        },
        "description" : "Upvote or downvote an object"
      },
      "update_incident_impact_patch" : {
        "type" : "object",
        "properties" : {
          "note" : {
            "type" : "string",
            "nullable" : true
          },
          "milestone" : {
            "type" : "string",
            "nullable" : true
          },
          "impact" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "required" : [ "condition_id", "id" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "condition_id" : {
                  "type" : "string"
                }
              }
            }
          },
          "status_pages" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "required" : [ "id", "integration_slug" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "integration_slug" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "description" : "Allows updating an incident's impacted infrastructure, with the option to\nmove the incident into a different milestone and provide a note to update\nthe incident timeline and any attached status pages. If this method is\nrequested with the PUT verb, impacts will be completely replaced with the\ninformation in the request body, even if not provided (effectively clearing\nall impacts). If this method is requested with the PATCH verb, the provided\nimpacts will be added or updated, but no impacts will be removed.\n"
      },
      "update_incident_impact_put" : {
        "type" : "object",
        "properties" : {
          "note" : {
            "type" : "string",
            "nullable" : true
          },
          "milestone" : {
            "type" : "string",
            "nullable" : true
          },
          "impact" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "required" : [ "condition_id", "id" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "condition_id" : {
                  "type" : "string"
                }
              }
            }
          },
          "status_pages" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "required" : [ "id", "integration_slug" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "integration_slug" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "description" : "Allows updating an incident's impacted infrastructure, with the option to\nmove the incident into a different milestone and provide a note to update\nthe incident timeline and any attached status pages. If this method is\nrequested with the PUT verb, impacts will be completely replaced with the\ninformation in the request body, even if not provided (effectively clearing\nall impacts). If this method is requested with the PATCH verb, the provided\nimpacts will be added or updated, but no impacts will be removed.\n"
      },
      "create_incident_impact" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "condition_id" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Add impacted infrastructure to an incident"
      },
      "IncidentImpactEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "infrastructure" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          }
        },
        "description" : "IncidentImpactEntity model"
      },
      "IncidentImpactEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/IncidentImpactEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "IncidentImpactEntityPaginated model"
      },
      "create_incident_note" : {
        "required" : [ "body" ],
        "type" : "object",
        "properties" : {
          "body" : {
            "type" : "string"
          },
          "occurred_at" : {
            "type" : "string",
            "description" : "ISO8601 timestamp for when the note occurred",
            "format" : "date-time",
            "nullable" : true
          },
          "visibility" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "private_to_org", "open_to_public", "internal_status_page" ],
            "default" : "private_to_org"
          },
          "status_pages" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "required" : [ "id", "integration_slug" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "integration_slug" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "description" : "Create a new note on for an incident. The visibility field on a note determines where it gets posted."
      },
      "update_incident_note" : {
        "required" : [ "body" ],
        "type" : "object",
        "properties" : {
          "body" : {
            "type" : "string"
          }
        },
        "description" : "Updates the body of a note"
      },
      "create_incident_chat_message" : {
        "required" : [ "body" ],
        "type" : "object",
        "properties" : {
          "body" : {
            "type" : "string"
          },
          "occurred_at" : {
            "type" : "string",
            "description" : "ISO8601 timestamp for when the chat message occurred",
            "format" : "date-time",
            "nullable" : true
          },
          "vote_direction" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "up", "down" ]
          }
        },
        "description" : "Create a new generic chat message on an incident timeline. These are independent of any specific chat provider."
      },
      "Event_GenericChatMessageEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "body" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "Event_GenericChatMessageEntity model"
      },
      "update_incident_chat_message" : {
        "required" : [ "body" ],
        "type" : "object",
        "properties" : {
          "body" : {
            "type" : "string"
          }
        },
        "description" : "Update an existing generic chat message on an incident."
      },
      "Incidents_RoleAssignmentEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_RoleAssignmentEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Incidents_RoleAssignmentEntityPaginated model"
      },
      "create_incident_role_assignment" : {
        "required" : [ "incident_role_id", "user_id" ],
        "type" : "object",
        "properties" : {
          "user_id" : {
            "type" : "string",
            "description" : "The user ID to assign the role to"
          },
          "incident_role_id" : {
            "type" : "string",
            "description" : "The Incident Role ID to assign the role to"
          }
        },
        "description" : "Assign a role to a user for this incident"
      },
      "create_incident_team_assignment" : {
        "required" : [ "team_id" ],
        "type" : "object",
        "properties" : {
          "team_id" : {
            "type" : "string",
            "description" : "The team ID to associate to the incident"
          }
        },
        "description" : "Assign a team for this incident"
      },
      "Incidents_RelationshipsEntity" : {
        "type" : "object",
        "properties" : {
          "parent" : {
            "$ref" : "#/components/schemas/NullablePublicAPI_V1_Incidents_SuccinctEntity"
          },
          "children" : {
            "type" : "array",
            "description" : "The root incident's child incidents.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PublicAPI_V1_Incidents_SuccinctEntity"
            }
          },
          "siblings" : {
            "type" : "array",
            "description" : "A list of incidents that share the root incident's parent.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PublicAPI_V1_Incidents_SuccinctEntity"
            }
          }
        },
        "description" : "Incidents_RelationshipsEntity model"
      },
      "Incidents_ShareRetrospectivesResultEntity" : {
        "type" : "object",
        "properties" : {
          "retrospective_ids" : {
            "type" : "array",
            "description" : "The IDs of the retrospectives that were shared.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "user_ids" : {
            "type" : "array",
            "description" : "The IDs of the users with whom the retrospectives were shared.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Incidents_ShareRetrospectivesResultEntity model"
      },
      "Incidents_ExportRetrospectivesResultEntity" : {
        "type" : "object",
        "properties" : {
          "external_resource" : {
            "$ref" : "#/components/schemas/NullableExternalResourceEntity"
          }
        },
        "description" : "Incidents_ExportRetrospectivesResultEntity model"
      },
      "Incidents_RetrospectiveEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "sections" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_RetrospectiveEntity_SectionEntity"
            }
          },
          "is_hidden" : {
            "type" : "boolean",
            "nullable" : true
          },
          "fields" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_RetrospectiveFieldEntity"
            }
          },
          "exports" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Incidents_RetrospectiveEntity model"
      },
      "Incidents_RetrospectiveEntity_SectionEntity" : {
        "type" : "object",
        "properties" : {
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "elements" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Incidents_RetrospectiveFieldEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "label" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "text", "single_select", "multi_select", "numeric", "datetime", "dynamic_input_group", "markdown", "markdown_text" ]
          },
          "help_text" : {
            "type" : "string",
            "nullable" : true
          },
          "permissible_values" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "is_required" : {
            "type" : "boolean",
            "nullable" : true
          },
          "value" : {
            "type" : "string",
            "nullable" : true
          },
          "schema" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Incidents_RetrospectiveFieldEntity model"
      },
      "Incidents_RetrospectiveEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Incidents_RetrospectiveEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Incidents_RetrospectiveEntityPaginated model"
      },
      "update_incident_retrospective" : {
        "type" : "object",
        "properties" : {
          "is_hidden" : {
            "type" : "boolean",
            "description" : "To hide or unhide the retrospective.",
            "nullable" : true
          }
        },
        "description" : "Update a retrospective attached to an incident"
      },
      "update_incident_retrospective_field" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "dynamic_input_field_id" : {
            "type" : "string",
            "description" : "The ID of the dynamic input field to update.",
            "nullable" : true
          },
          "value" : {
            "type" : "integer",
            "description" : "The value to set for the field.",
            "format" : "int64"
          }
        },
        "description" : "Update retrospective field value"
      },
      "IncidentRoleEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/IncidentRoleEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "IncidentRoleEntityPaginated model"
      },
      "create_incident_role" : {
        "required" : [ "name", "summary" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "summary" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Create a new incident role"
      },
      "update_incident_role" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Update a single incident role from its ID"
      },
      "TagEntity" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "TagEntity model"
      },
      "TagEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TagEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "TagEntityPaginated model"
      },
      "create_incident_type" : {
        "required" : [ "name", "template" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the incident type",
            "nullable" : true
          },
          "template" : {
            "type" : "object",
            "properties" : {
              "description" : {
                "type" : "string",
                "nullable" : true
              },
              "customer_impact_summary" : {
                "type" : "string",
                "nullable" : true
              },
              "labels" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A labels hash of keys and values",
                "nullable" : true
              },
              "severity" : {
                "type" : "string",
                "nullable" : true
              },
              "priority" : {
                "type" : "string",
                "nullable" : true
              },
              "tag_list" : {
                "type" : "array",
                "description" : "List of tags for the incident",
                "nullable" : true,
                "items" : {
                  "type" : "string"
                }
              },
              "runbook_ids" : {
                "type" : "array",
                "description" : "List of ids of Runbooks to attach to incidents created from this type",
                "nullable" : true,
                "items" : {
                  "type" : "string"
                }
              },
              "private_incident" : {
                "type" : "boolean",
                "nullable" : true
              },
              "team_ids" : {
                "type" : "array",
                "description" : "List of ids of teams to be assigned to incidents",
                "nullable" : true,
                "items" : {
                  "type" : "string"
                }
              },
              "impacts" : {
                "type" : "array",
                "description" : "An array of impact/condition combinations",
                "nullable" : true,
                "items" : {
                  "required" : [ "condition_id", "id" ],
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "type" : "string",
                      "description" : "The id of impact"
                    },
                    "condition_id" : {
                      "type" : "string",
                      "description" : "The id of the condition"
                    }
                  }
                }
              }
            }
          }
        },
        "description" : "Create a new incident type"
      },
      "IncidentTypeEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "template" : {
            "$ref" : "#/components/schemas/NullableIncidentTypeEntity_TemplateEntity"
          },
          "template_values" : {
            "$ref" : "#/components/schemas/NullableIncidentTypeEntity_TemplateValuesEntity"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "IncidentTypeEntity model"
      },
      "IncidentTypeEntity_TemplateEntity" : {
        "type" : "object",
        "properties" : {
          "incident_name" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "customer_impact_summary" : {
            "type" : "string",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "Arbitrary key:value pairs of labels for your incidents.",
            "nullable" : true
          },
          "severity" : {
            "type" : "string",
            "nullable" : true
          },
          "priority" : {
            "type" : "string",
            "nullable" : true
          },
          "tag_list" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "runbook_ids" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "team_ids" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "private_incident" : {
            "type" : "boolean",
            "nullable" : true
          },
          "custom_fields" : {
            "type" : "string",
            "nullable" : true
          },
          "impacts" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/IncidentTypeEntity_TemplateImpactEntity"
            }
          }
        }
      },
      "IncidentTypeEntity_TemplateImpactEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "condition_id" : {
            "type" : "string",
            "nullable" : true
          },
          "condition_name" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "customer", "environment", "functionality", "service" ]
          }
        }
      },
      "IncidentTypeEntity_TemplateValuesEntity" : {
        "type" : "object",
        "properties" : {
          "services" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/IncidentTypeEntity_TemplateImpactEntity"
            }
          },
          "functionalities" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/IncidentTypeEntity_TemplateImpactEntity"
            }
          },
          "environments" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/IncidentTypeEntity_TemplateImpactEntity"
            }
          },
          "runbooks" : {
            "type" : "object",
            "properties" : { },
            "description" : "A hash mapping runbook IDs to runbook names.",
            "nullable" : true
          },
          "teams" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TeamEntity"
            }
          }
        }
      },
      "IncidentTypeEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/IncidentTypeEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "IncidentTypeEntityPaginated model"
      },
      "update_incident_type" : {
        "required" : [ "name", "template" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the incident type",
            "nullable" : true
          },
          "template" : {
            "type" : "object",
            "properties" : {
              "description" : {
                "type" : "string",
                "nullable" : true
              },
              "customer_impact_summary" : {
                "type" : "string",
                "nullable" : true
              },
              "labels" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A labels hash of keys and values",
                "nullable" : true
              },
              "severity" : {
                "type" : "string",
                "nullable" : true
              },
              "priority" : {
                "type" : "string",
                "nullable" : true
              },
              "tag_list" : {
                "type" : "array",
                "description" : "List of tags for the incident",
                "nullable" : true,
                "items" : {
                  "type" : "string"
                }
              },
              "runbook_ids" : {
                "type" : "array",
                "description" : "List of ids of Runbooks to attach to incidents created from this type",
                "nullable" : true,
                "items" : {
                  "type" : "string"
                }
              },
              "private_incident" : {
                "type" : "boolean",
                "nullable" : true
              },
              "team_ids" : {
                "type" : "array",
                "description" : "List of ids of teams to be assigned to incidents",
                "nullable" : true,
                "items" : {
                  "type" : "string"
                }
              },
              "impacts" : {
                "type" : "array",
                "description" : "An array of impact/condition combinations",
                "nullable" : true,
                "items" : {
                  "required" : [ "condition_id", "id" ],
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "type" : "string",
                      "description" : "The id of impact"
                    },
                    "condition_id" : {
                      "type" : "string",
                      "description" : "The id of the condition"
                    }
                  }
                }
              }
            }
          }
        },
        "description" : "Update a single incident type from its ID"
      },
      "Integrations_IntegrationEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Integrations_IntegrationEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Integrations_IntegrationEntityPaginated model"
      },
      "Integrations_IntegrationEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "setup_url" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "connections" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Integrations_ConnectionEntity"
            }
          },
          "enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "installed" : {
            "type" : "boolean",
            "nullable" : true
          },
          "deprecated" : {
            "type" : "boolean",
            "nullable" : true
          },
          "logo" : {
            "$ref" : "#/components/schemas/NullableIntegrations_IntegrationEntity_LogoEntity"
          },
          "nat_ip" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Integrations_IntegrationEntity model"
      },
      "Integrations_ConnectionEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "integration_slug" : {
            "type" : "string",
            "nullable" : true
          },
          "integration_id" : {
            "type" : "string",
            "nullable" : true
          },
          "display_name" : {
            "type" : "string",
            "nullable" : true
          },
          "configuration_url" : {
            "type" : "string",
            "nullable" : true
          },
          "authorized_by" : {
            "type" : "string",
            "nullable" : true
          },
          "authorized_by_id" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "details" : {
            "type" : "object",
            "properties" : { },
            "description" : "Integration-specific details of this connection. As identified by the integration_slug, this object will be represented by that integration's ConnectionEntity.",
            "nullable" : true
          },
          "default_authorized_actor" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          }
        },
        "description" : "Integrations_ConnectionEntity model"
      },
      "Integrations_IntegrationEntity_LogoEntity" : {
        "type" : "object",
        "properties" : {
          "logo_url" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "FieldMapping_FieldMapEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_id" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_type" : {
            "type" : "string",
            "nullable" : true
          },
          "entity_id" : {
            "type" : "string",
            "nullable" : true
          },
          "entity_type" : {
            "type" : "string",
            "nullable" : true
          },
          "body" : {
            "type" : "object",
            "properties" : { },
            "nullable" : true
          },
          "available_fields_url" : {
            "type" : "string",
            "nullable" : true
          },
          "data_bag_url" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "FieldMapping_FieldMapEntity model"
      },
      "FieldMapping_MappableFieldEntity" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The ID of the field",
            "nullable" : true
          },
          "label" : {
            "type" : "string",
            "description" : "The human-readable name of the field",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "description" : "The allowed type of the field",
            "nullable" : true
          },
          "allowed_values" : {
            "type" : "array",
            "description" : "The allowed values of the field",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "required" : {
            "type" : "string",
            "description" : "If the field is required to be mapped",
            "nullable" : true
          },
          "help_text" : {
            "type" : "string",
            "description" : "Short, inline documentation for the present field",
            "nullable" : true
          }
        },
        "description" : "FieldMapping_MappableFieldEntity model"
      },
      "Integrations_AuthedProviderEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PublicAPI_V1_Integrations_AuthedProviderEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Integrations_AuthedProviderEntityPaginated model"
      },
      "PublicAPI_V1_Integrations_AuthedProviderEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "user" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          },
          "integration_default" : {
            "type" : "boolean",
            "nullable" : true
          },
          "authorized_email" : {
            "type" : "string",
            "description" : "The email of the user who authorized the integration",
            "nullable" : true
          },
          "is_expired" : {
            "type" : "boolean",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "PublicAPI_V1_Integrations_AuthedProviderEntity model"
      },
      "Integrations_ConnectionEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Integrations_ConnectionEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Integrations_ConnectionEntityPaginated model"
      },
      "Integrations_ConnectionStatusEntity" : {
        "type" : "object",
        "properties" : {
          "checked_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "ok", "info", "warning", "error" ]
          },
          "message" : {
            "type" : "string",
            "nullable" : true
          },
          "check_type" : {
            "type" : "string",
            "nullable" : true
          },
          "error_type" : {
            "type" : "string",
            "nullable" : true
          },
          "integration_slug" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_id" : {
            "type" : "string",
            "nullable" : true
          },
          "data" : {
            "type" : "object",
            "properties" : { },
            "description" : "Additional unstructured data about the status check.",
            "nullable" : true
          },
          "performed_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          }
        },
        "description" : "Integrations_ConnectionStatusEntity model"
      },
      "Integrations_Aws_ConnectionEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Integrations_Aws_ConnectionEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Integrations_Aws_ConnectionEntityPaginated model"
      },
      "Integrations_Aws_ConnectionEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "aws_account_id" : {
            "type" : "string",
            "nullable" : true
          },
          "target_arn" : {
            "type" : "string",
            "nullable" : true
          },
          "external_id" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_status" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "pending_setup", "role_assumed", "cant_assume_role", "invalid_permissions", "validated" ]
          },
          "status_text" : {
            "type" : "string",
            "nullable" : true
          },
          "status_description" : {
            "type" : "string",
            "nullable" : true
          },
          "environment_id" : {
            "type" : "string",
            "nullable" : true
          },
          "environment_name" : {
            "type" : "string",
            "nullable" : true
          },
          "regions" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Integrations_Aws_ConnectionEntity model"
      },
      "update_aws_connection" : {
        "type" : "object",
        "properties" : {
          "aws_account_id" : {
            "type" : "string",
            "nullable" : true
          },
          "target_arn" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_status" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Update the AWS connection with the provided data."
      },
      "Integrations_Aws_CloudtrailBatchEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Integrations_Aws_CloudtrailBatchEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Integrations_Aws_CloudtrailBatchEntityPaginated model"
      },
      "Integrations_Aws_CloudtrailBatchEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "events_created" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "in_progress", "failed", "successful", "pending", "retried" ]
          },
          "starts_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ends_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "connection" : {
            "$ref" : "#/components/schemas/NullableIntegrations_Aws_ConnectionEntity"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "Integrations_Aws_CloudtrailBatchEntity model"
      },
      "update_aws_cloudtrail_batch" : {
        "type" : "object",
        "properties" : {
          "events_created" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "nullable" : true
          },
          "error" : {
            "type" : "string",
            "nullable" : true
          },
          "ends_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "Update a CloudTrail batch with new information."
      },
      "Integrations_ConfluenceCloud_SpaceKeyEntity" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Integrations_ConfluenceCloud_SpaceKeyEntity model"
      },
      "Integrations_Slack_WorkspaceEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "team_id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Integrations_Slack_WorkspaceEntity model"
      },
      "Integrations_Slack_UsergroupEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "handle" : {
            "type" : "string",
            "nullable" : true
          },
          "is_disabled" : {
            "type" : "boolean",
            "nullable" : true
          }
        },
        "description" : "Integrations_Slack_UsergroupEntity model"
      },
      "Integrations_Statuspage_ConnectionEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Integrations_Statuspage_ConnectionEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Integrations_Statuspage_ConnectionEntityPaginated model"
      },
      "Integrations_Statuspage_ConnectionEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "page_name" : {
            "type" : "string",
            "nullable" : true
          },
          "page_id" : {
            "type" : "string",
            "nullable" : true
          },
          "conditions" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Integrations_Statuspage_ConditionEntity"
            }
          },
          "severities" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Integrations_Statuspage_SeverityEntity"
            }
          },
          "milestone_mappings" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Integrations_Statuspage_MilestoneMappingEntity"
            }
          }
        },
        "description" : "Integrations_Statuspage_ConnectionEntity model"
      },
      "Integrations_Statuspage_ConditionEntity" : {
        "type" : "object",
        "properties" : {
          "condition_id" : {
            "type" : "string",
            "nullable" : true
          },
          "condition_name" : {
            "type" : "string",
            "nullable" : true
          },
          "statuspageio_condition" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "operational", "major_outage", "minor_outage", "degraded_performance" ]
          }
        }
      },
      "Integrations_Statuspage_SeverityEntity" : {
        "type" : "object",
        "properties" : {
          "severity_slug" : {
            "type" : "string",
            "nullable" : true
          },
          "remote_status" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Integrations_Statuspage_MilestoneMappingEntity" : {
        "type" : "object",
        "properties" : {
          "milestone_id" : {
            "type" : "string",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "update_statuspage_connection" : {
        "type" : "object",
        "properties" : {
          "page_id" : {
            "type" : "string",
            "nullable" : true
          },
          "severities" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "required" : [ "remote_status", "severity_slug" ],
              "type" : "object",
              "properties" : {
                "severity_slug" : {
                  "type" : "string",
                  "description" : "FireHydrant severity slug"
                },
                "remote_status" : {
                  "type" : "string",
                  "description" : "Statuspage.io severity name"
                }
              }
            }
          },
          "conditions" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "required" : [ "condition_id", "statuspageio_condition" ],
              "type" : "object",
              "properties" : {
                "condition_id" : {
                  "type" : "string",
                  "description" : "FireHydrant condition id"
                },
                "statuspageio_condition" : {
                  "type" : "string",
                  "description" : "Statuspage.io condition name"
                }
              }
            }
          },
          "milestone_mappings" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "required" : [ "milestone_id", "status" ],
              "type" : "object",
              "properties" : {
                "milestone_id" : {
                  "type" : "string",
                  "description" : "FireHydrant milestone id"
                },
                "status" : {
                  "type" : "string",
                  "description" : "Statuspage.io status",
                  "enum" : [ "investigating", "identified", "monitoring", "resolved" ]
                }
              }
            }
          }
        },
        "description" : "Update the given Statuspage integration connection."
      },
      "Integrations_Statuspage_PageEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Integrations_Statuspage_PageEntity model"
      },
      "Integrations_Zendesk_SearchTickets_PaginatedEntity" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Integrations_Zendesk_SupportIssueEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Integrations_Zendesk_SearchTickets_PaginatedEntity model"
      },
      "Integrations_Zendesk_SupportIssueEntity" : {
        "type" : "object",
        "properties" : {
          "remote_id" : {
            "type" : "string",
            "description" : "The ID of this support issue in the system that originated this issue, eg Zendesk.",
            "nullable" : true
          },
          "title" : {
            "type" : "string",
            "description" : "Title or name of this issue.",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "Longer description of the issue.",
            "nullable" : true
          },
          "remote_url" : {
            "type" : "string",
            "description" : "Browser-accessible url for this issue in the originating system, eg Zendesk.",
            "nullable" : true
          },
          "data" : {
            "type" : "object",
            "properties" : { },
            "description" : "Raw data associated with this issue from originating system.",
            "nullable" : true
          },
          "attachments" : {
            "type" : "string",
            "description" : "Attachment information for this issue.",
            "nullable" : true
          },
          "customers" : {
            "$ref" : "#/components/schemas/NullableIntegrations_Zendesk_SupportIssueEntity_CustomerEntity"
          },
          "priority" : {
            "type" : "string",
            "nullable" : true
          },
          "attached_incidents" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/IncidentEntity"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "Type designator for this entity",
            "nullable" : true
          }
        }
      },
      "Integrations_Zendesk_SupportIssueEntity_CustomerEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "UUID of the Customer",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the Customer",
            "nullable" : true
          }
        }
      },
      "UserEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/UserEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "UserEntityPaginated model"
      },
      "CurrentUserEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "source" : {
            "type" : "string",
            "nullable" : true
          },
          "email" : {
            "type" : "string",
            "nullable" : true
          },
          "role" : {
            "type" : "string",
            "nullable" : true
          },
          "teams" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SuccinctEntity"
            }
          },
          "organization_id" : {
            "type" : "string",
            "nullable" : true
          },
          "organization_name" : {
            "type" : "string",
            "nullable" : true
          },
          "account_id" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        },
        "description" : "CurrentUserEntity model"
      },
      "ReportEntity" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Reports_BucketEntity"
            }
          },
          "start_date" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          },
          "end_date" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          },
          "bucket_period" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "ReportEntity model"
      },
      "Reports_BucketEntity" : {
        "type" : "object",
        "properties" : {
          "bucket" : {
            "type" : "string",
            "nullable" : true
          },
          "points" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Reports_DataPointEntity"
            }
          }
        }
      },
      "Reports_DataPointEntity" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "nullable" : true
          },
          "value" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Metrics_TicketFunnelMetricsEntity" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Metrics_TicketFunnelMetricsEntity_DataBucketEntity"
            }
          },
          "groupings" : {
            "$ref" : "#/components/schemas/NullableMetrics_TicketFunnelMetricsEntity_GroupingsEntity"
          }
        },
        "description" : "Metrics_TicketFunnelMetricsEntity model"
      },
      "Metrics_TicketFunnelMetricsEntity_DataBucketEntity" : {
        "type" : "object",
        "properties" : {
          "time_bucket" : {
            "type" : "string",
            "description" : "The start datetime for the period",
            "format" : "date-time",
            "nullable" : true
          },
          "filter_params" : {
            "$ref" : "#/components/schemas/NullableMetrics_TicketFunnelMetricsEntity_DataBucketFilterParamsEntity"
          },
          "tasks_created" : {
            "type" : "integer",
            "description" : "The number of tasks created",
            "format" : "int32",
            "nullable" : true
          },
          "tasks_done" : {
            "type" : "integer",
            "description" : "The number of tasks completed",
            "format" : "int32",
            "nullable" : true
          },
          "follow_ups_created" : {
            "type" : "integer",
            "description" : "The number of follow ups created",
            "format" : "int32",
            "nullable" : true
          },
          "follow_ups_done" : {
            "type" : "integer",
            "description" : "The number of follow ups completed",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Metrics_TicketFunnelMetricsEntity_DataBucketFilterParamsEntity" : {
        "type" : "object",
        "properties" : {
          "start_date" : {
            "type" : "string",
            "description" : "The start datetime for the period",
            "format" : "date-time",
            "nullable" : true
          },
          "end_date" : {
            "type" : "string",
            "description" : "The end datetime for the period not inclusive",
            "format" : "date",
            "nullable" : true
          }
        }
      },
      "Metrics_TicketFunnelMetricsEntity_GroupingsEntity" : {
        "type" : "object",
        "properties" : {
          "bucket_size" : {
            "type" : "string",
            "description" : "The bucket size for the data",
            "nullable" : true
          }
        }
      },
      "Metrics_RetrospectiveEntity" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Metrics_RetrospectiveEntity_DataEntity"
            }
          },
          "summary" : {
            "$ref" : "#/components/schemas/NullableMetrics_RetrospectiveEntity_SummaryEntity"
          }
        },
        "description" : "Metrics_RetrospectiveEntity model"
      },
      "Metrics_RetrospectiveEntity_DataEntity" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "string",
            "nullable" : true
          },
          "y" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          }
        }
      },
      "Metrics_RetrospectiveEntity_SummaryEntity" : {
        "type" : "object",
        "properties" : {
          "completed" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "total" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "incomplete" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "mean" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "shortest" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "longest" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "completion_percentage" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          }
        }
      },
      "Metrics_MilestonesFunnelEntity" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Metrics_MilestonesFunnelEntity_DataBucketEntity"
            }
          },
          "columns" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Metrics_MilestonesFunnelEntity_ColumnEntity"
            }
          },
          "groupings" : {
            "$ref" : "#/components/schemas/NullableMetrics_MilestonesFunnelEntity_GroupingsEntity"
          },
          "meta" : {
            "$ref" : "#/components/schemas/NullableMetrics_MilestonesFunnelEntity_MetaEntity"
          }
        },
        "description" : "Metrics_MilestonesFunnelEntity model"
      },
      "Metrics_MilestonesFunnelEntity_DataBucketEntity" : {
        "type" : "object",
        "properties" : {
          "time_bucket" : {
            "type" : "string",
            "description" : "The start datetime for the period",
            "format" : "date-time",
            "nullable" : true
          },
          "filter_params" : {
            "$ref" : "#/components/schemas/NullableMetrics_MilestonesFunnelEntity_DataBucketFilterParamsEntity"
          },
          "milestone_counts" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Metrics_MilestonesFunnelEntity_DataBucketMilestoneCountEntity"
            }
          }
        }
      },
      "Metrics_MilestonesFunnelEntity_DataBucketFilterParamsEntity" : {
        "type" : "object",
        "properties" : {
          "start_date" : {
            "type" : "string",
            "description" : "The start datetime for the period",
            "format" : "date-time",
            "nullable" : true
          },
          "end_date" : {
            "type" : "string",
            "description" : "The end datetime for the period not inclusive",
            "format" : "date",
            "nullable" : true
          }
        }
      },
      "Metrics_MilestonesFunnelEntity_DataBucketMilestoneCountEntity" : {
        "type" : "object",
        "properties" : {
          "milestone_id" : {
            "type" : "string",
            "description" : "The UUID of the milestone",
            "nullable" : true
          },
          "count" : {
            "type" : "integer",
            "description" : "The frequency count of that milestone for the period",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Metrics_MilestonesFunnelEntity_ColumnEntity" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The slug of the milestone",
            "nullable" : true
          },
          "label" : {
            "type" : "string",
            "description" : "The name of the milestone",
            "nullable" : true
          },
          "tooltip" : {
            "type" : "string",
            "description" : "The description of the milestone",
            "nullable" : true
          },
          "id" : {
            "type" : "string",
            "description" : "The UUID of the milestone",
            "nullable" : true
          }
        }
      },
      "Metrics_MilestonesFunnelEntity_GroupingsEntity" : {
        "type" : "object",
        "properties" : {
          "bucket_size" : {
            "type" : "string",
            "description" : "The bucket size for the data",
            "nullable" : true
          }
        }
      },
      "Metrics_MilestonesFunnelEntity_MetaEntity" : {
        "type" : "object",
        "properties" : {
          "deleted_milestones" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "added_milestones" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Metrics_MetricsEntity" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "by" : {
            "type" : "string",
            "description" : "The field by which the metrics are grouped. Can be one of: total, severity, priority, functionality, service, environment, or user.",
            "nullable" : true
          },
          "bucket_size" : {
            "type" : "integer",
            "description" : "The size of returned buckets. Can be one of: day, week, month, or all_time.",
            "format" : "int32",
            "nullable" : true
          },
          "display_information" : {
            "type" : "object",
            "properties" : { },
            "nullable" : true
          },
          "keys" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "buckets" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : { }
            }
          },
          "sort" : {
            "$ref" : "#/components/schemas/NullableMetrics_MetricsEntity_SortEntity"
          }
        },
        "description" : "Metrics_MetricsEntity model"
      },
      "Metrics_MetricsEntity_SortEntity" : {
        "type" : "object",
        "properties" : {
          "field" : {
            "type" : "string",
            "nullable" : true
          },
          "direction" : {
            "type" : "string",
            "nullable" : true
          },
          "limit" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Metrics_MttxDataEntity" : {
        "type" : "object",
        "properties" : {
          "groupings" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Metrics_MttxDataEntity_GroupingEntity"
            }
          },
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Metrics_MttxGroupEntity"
            }
          }
        },
        "description" : "Metrics_MttxDataEntity model"
      },
      "Metrics_MttxDataEntity_GroupingEntity" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "id_attribute" : {
            "type" : "string",
            "nullable" : true
          },
          "name_attribute" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Metrics_MttxGroupEntity" : {
        "type" : "object",
        "properties" : {
          "group_attributes" : {
            "type" : "string",
            "nullable" : true
          },
          "filter_params" : {
            "type" : "object",
            "properties" : { },
            "nullable" : true
          },
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "mttd" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "mtta" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "mttm" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "mttr" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "count_diff" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "count_percent_diff" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "mttd_diff" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "mtta_diff" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "mttm_diff" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "mttr_diff" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "mttd_percent_diff" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "mtta_percent_diff" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "mttm_percent_diff" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "mttr_percent_diff" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          },
          "healthiness" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          }
        }
      },
      "Metrics_InfrastructureListEntity" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "List of infrastructure metrics",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Metrics_InfrastructureMetricsEntity"
            }
          }
        },
        "description" : "Metrics_InfrastructureListEntity model"
      },
      "Metrics_InfrastructureMetricsEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The UUID of the component",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the component",
            "nullable" : true
          },
          "mttd" : {
            "type" : "integer",
            "description" : "Mean Time To Detection (seconds) for all incidents for this component in this time period",
            "format" : "int32",
            "nullable" : true
          },
          "mtta" : {
            "type" : "integer",
            "description" : "Mean Time To Acknowledgement (seconds) for all incidents for this component in this time period",
            "format" : "int32",
            "nullable" : true
          },
          "mttm" : {
            "type" : "integer",
            "description" : "Mean Time To Mitigation (seconds) for all incidents for this component in this time period",
            "format" : "int32",
            "nullable" : true
          },
          "mttr" : {
            "type" : "integer",
            "description" : "Mean Time To Resolution (seconds) for all incidents for this component in this time period",
            "format" : "int32",
            "nullable" : true
          },
          "count" : {
            "type" : "integer",
            "description" : "Number of incidents in this time period for this component",
            "format" : "int32",
            "nullable" : true
          },
          "total_time" : {
            "type" : "integer",
            "description" : "Total time (seconds) the component was impacted (MTTR x Incident Count)",
            "format" : "int32",
            "nullable" : true
          }
        },
        "description" : "Metrics_InfrastructureMetricsEntity model"
      },
      "Runbooks_ActionsEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Runbooks_ActionsEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Runbooks_ActionsEntityPaginated model"
      },
      "Runbooks_ActionsEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "config" : {
            "$ref" : "#/components/schemas/NullableRunbooks_ActionConfigEntity"
          },
          "category" : {
            "type" : "string",
            "nullable" : true
          },
          "prerequisites" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : { }
            }
          },
          "integration" : {
            "$ref" : "#/components/schemas/NullableIntegrations_IntegrationEntity"
          },
          "supported_runbook_types" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "automatable" : {
            "type" : "boolean",
            "nullable" : true
          },
          "rerunnable" : {
            "type" : "boolean",
            "nullable" : true
          },
          "repeatable" : {
            "type" : "boolean",
            "nullable" : true
          },
          "default_logic" : {
            "type" : "object",
            "properties" : { },
            "nullable" : true
          },
          "default_rule_data" : {
            "type" : "object",
            "properties" : { },
            "nullable" : true
          }
        }
      },
      "Runbooks_ActionConfigEntity" : {
        "type" : "object",
        "properties" : {
          "elements" : {
            "type" : "array",
            "description" : "A list of elements that can be used in this action configuration",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Runbooks_ElementEntity"
            }
          },
          "documentation_url" : {
            "type" : "string",
            "description" : "Location of documentation for this action",
            "nullable" : true
          }
        }
      },
      "Runbooks_ElementEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "markdown" : {
            "$ref" : "#/components/schemas/NullableRunbooks_ElementMarkdownEntity"
          },
          "textarea" : {
            "$ref" : "#/components/schemas/NullableRunbooks_ElementTextareaEntity"
          },
          "input" : {
            "$ref" : "#/components/schemas/NullableRunbooks_ElementInputEntity"
          },
          "plain_text" : {
            "$ref" : "#/components/schemas/NullableRunbooks_ElementMarkdownEntity"
          },
          "dynamic_select" : {
            "$ref" : "#/components/schemas/NullableRunbooks_ElementDynamicSelectEntity"
          }
        }
      },
      "Runbooks_ElementMarkdownEntity" : {
        "type" : "object",
        "properties" : {
          "text" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Runbooks_ElementTextareaEntity" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "nullable" : true
          },
          "placeholder" : {
            "type" : "string",
            "nullable" : true
          },
          "default_value" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Runbooks_ElementInputEntity" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "nullable" : true
          },
          "placeholder" : {
            "type" : "string",
            "nullable" : true
          },
          "default_value" : {
            "type" : "string",
            "nullable" : true
          },
          "required" : {
            "type" : "boolean",
            "nullable" : true
          }
        }
      },
      "Runbooks_ElementDynamicSelectEntity" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "nullable" : true
          },
          "placeholder" : {
            "type" : "string",
            "nullable" : true
          },
          "async_url" : {
            "type" : "string",
            "nullable" : true
          },
          "required" : {
            "type" : "boolean",
            "nullable" : true
          },
          "clearable" : {
            "type" : "boolean",
            "nullable" : true
          },
          "is_multi" : {
            "type" : "boolean",
            "nullable" : true
          },
          "default_value" : {
            "$ref" : "#/components/schemas/NullableRunbooks_ElementDynamicSelectEntity_SelectOptionEntity"
          },
          "options" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Runbooks_ElementDynamicSelectEntity_SelectOptionEntity"
            }
          }
        }
      },
      "Runbooks_ElementDynamicSelectEntity_SelectOptionEntity" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "nullable" : true
          },
          "value" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "create_runbook_execution" : {
        "required" : [ "execute_for", "runbook_id" ],
        "type" : "object",
        "properties" : {
          "execute_for" : {
            "type" : "string",
            "description" : "The incident to attach the runbook to. Format must be: `incident/${incidentId}`"
          },
          "runbook_id" : {
            "type" : "string",
            "description" : "ID of runbook to attach"
          }
        },
        "description" : "Attaches a runbook to an incident and executes it"
      },
      "Runbooks_ExecutionEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "nullable" : true
          },
          "status_reason" : {
            "type" : "string",
            "nullable" : true
          },
          "status_reason_message" : {
            "type" : "string",
            "nullable" : true
          },
          "has_been_rerun" : {
            "type" : "boolean",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "created_by" : {
            "type" : "string",
            "nullable" : true
          },
          "runbook" : {
            "$ref" : "#/components/schemas/NullableSlimRunbookEntity"
          },
          "steps" : {
            "$ref" : "#/components/schemas/NullableRunbooks_ExecutionStepEntity"
          },
          "executed_for" : {
            "$ref" : "#/components/schemas/NullableRunbooks_ExecutionEntity_ExecutedForEntity"
          }
        },
        "description" : "Runbooks_ExecutionEntity model"
      },
      "Runbooks_ExecutionStepEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "action_slug" : {
            "type" : "string",
            "nullable" : true
          },
          "action_type" : {
            "type" : "string",
            "nullable" : true
          },
          "integration_name" : {
            "type" : "string",
            "nullable" : true
          },
          "integration_slug" : {
            "type" : "string",
            "nullable" : true
          },
          "automatic" : {
            "type" : "boolean",
            "nullable" : true
          },
          "config" : {
            "type" : "object",
            "properties" : { },
            "nullable" : true
          },
          "step_elements" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : { }
            }
          },
          "executable" : {
            "type" : "boolean",
            "nullable" : true
          },
          "repeats" : {
            "type" : "boolean",
            "nullable" : true
          },
          "repeats_duration" : {
            "type" : "string",
            "description" : "ISO8601 formatted duration string",
            "nullable" : true
          },
          "repeats_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "has_been_rerun" : {
            "type" : "boolean",
            "nullable" : true
          },
          "has_been_retried" : {
            "type" : "boolean",
            "nullable" : true
          },
          "execution" : {
            "$ref" : "#/components/schemas/NullableRunbooks_ExecutionStepExecutionEntity"
          },
          "repeatable" : {
            "type" : "boolean",
            "nullable" : true
          },
          "conference_bridge" : {
            "$ref" : "#/components/schemas/NullableIncidents_ConferenceBridgeEntity"
          },
          "rule" : {
            "$ref" : "#/components/schemas/NullableRules_RuleEntity"
          }
        }
      },
      "Runbooks_ExecutionStepExecutionEntity" : {
        "type" : "object",
        "properties" : {
          "state" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "initial", "pending", "scheduled", "started", "dismissed", "completed", "errored" ]
          },
          "data" : {
            "type" : "object",
            "properties" : { },
            "nullable" : true
          },
          "performed_by" : {
            "$ref" : "#/components/schemas/NullableActorEntity"
          },
          "performed_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "scheduled_for" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "error" : {
            "type" : "string",
            "nullable" : true
          },
          "webhook_delivery" : {
            "$ref" : "#/components/schemas/NullableRunbooks_WebhookDeliveryEntity"
          }
        }
      },
      "Runbooks_WebhookDeliveryEntity" : {
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "string",
            "nullable" : true
          },
          "status_code" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Runbooks_ExecutionEntity_ExecutedForEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Runbooks_ExecutionEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Runbooks_ExecutionEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Runbooks_ExecutionEntityPaginated model"
      },
      "update_runbook_execution_step" : {
        "required" : [ "state" ],
        "type" : "object",
        "properties" : {
          "state" : {
            "type" : "string"
          },
          "schedule_for" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "data" : {
            "type" : "object",
            "additionalProperties" : true,
            "description" : "Data for execution of this step",
            "nullable" : true
          },
          "repeats_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "Updates a runbook step execution, especially for changing the state of a step execution."
      },
      "create_runbook" : {
        "required" : [ "name", "type" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "description" : "Deprecated, but still required. Please just use 'incident'",
            "enum" : [ "incident", "general", "infrastructure", "incident_role" ]
          },
          "summary" : {
            "type" : "string",
            "description" : "Deprecated. Use description",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "A longer description about the Runbook. Supports markdown format",
            "nullable" : true
          },
          "auto_attach_to_restricted_incidents" : {
            "type" : "boolean",
            "description" : "Whether or not this runbook should be automatically attached to restricted incidents. Note that setting this to `true` will prevent it from being attached to public incidents, even manually. Defaults to `false`.",
            "nullable" : true
          },
          "tutorial" : {
            "type" : "boolean",
            "description" : "Whether or not this runbook is a tutorial runbook",
            "nullable" : true
          },
          "owner" : {
            "required" : [ "id" ],
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              }
            },
            "description" : "An object representing a Team that owns the runbook",
            "nullable" : true
          },
          "attachment_rule" : {
            "required" : [ "logic" ],
            "type" : "object",
            "properties" : {
              "logic" : {
                "type" : "string",
                "description" : "The JSON logic for the attaching the runbook"
              },
              "user_data" : {
                "type" : "string",
                "description" : "The user data for the rule",
                "nullable" : true
              }
            },
            "nullable" : true
          },
          "steps" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "required" : [ "action_id", "name" ],
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "Name for step"
                },
                "action_id" : {
                  "type" : "string",
                  "description" : "ID of action to use for this step."
                },
                "rule" : {
                  "required" : [ "logic" ],
                  "type" : "object",
                  "properties" : {
                    "logic" : {
                      "type" : "string",
                      "description" : "The JSON logic for the rule"
                    },
                    "user_data" : {
                      "type" : "string",
                      "description" : "The user data for the rule",
                      "nullable" : true
                    }
                  },
                  "nullable" : true
                }
              }
            }
          }
        },
        "description" : "Create a new runbook for use with incidents."
      },
      "RunbookEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "runbook_template_id" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "updated_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "steps" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/RunbookStepEntity"
            }
          },
          "attachment_rule" : {
            "$ref" : "#/components/schemas/NullableRules_RuleEntity"
          },
          "votes" : {
            "$ref" : "#/components/schemas/NullableVotesEntity"
          },
          "is_editable" : {
            "type" : "boolean",
            "nullable" : true
          },
          "owner" : {
            "$ref" : "#/components/schemas/NullableTeamEntityLite"
          },
          "categories" : {
            "type" : "array",
            "description" : "categories the runbook applies to",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "auto_attach_to_restricted_incidents" : {
            "type" : "boolean",
            "nullable" : true
          },
          "tutorial" : {
            "type" : "boolean",
            "nullable" : true
          }
        },
        "description" : "RunbookEntity model"
      },
      "RunbookStepEntity" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "action_id" : {
            "type" : "string",
            "nullable" : true
          },
          "step_id" : {
            "type" : "string",
            "nullable" : true
          },
          "config" : {
            "type" : "object",
            "properties" : { },
            "description" : "An unstructured object of key/value pairs describing the config settings for the step.",
            "nullable" : true
          },
          "action_elements" : {
            "type" : "array",
            "description" : "A list of action elements",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : { }
            }
          },
          "step_elements" : {
            "type" : "array",
            "description" : "A list of step elements",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : { }
            }
          },
          "automatic" : {
            "type" : "boolean",
            "nullable" : true
          },
          "delay_duration" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "action" : {
            "$ref" : "#/components/schemas/NullableRunbooks_ActionsEntity"
          },
          "reruns" : {
            "type" : "boolean",
            "nullable" : true
          },
          "repeats" : {
            "type" : "boolean",
            "nullable" : true
          },
          "repeats_duration" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "votes" : {
            "$ref" : "#/components/schemas/NullableVotesEntity"
          },
          "rule" : {
            "$ref" : "#/components/schemas/NullableRules_RuleEntity"
          }
        }
      },
      "update_runbook" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "tutorial" : {
            "type" : "boolean",
            "description" : "Whether or not this runbook is a tutorial runbook",
            "nullable" : true
          },
          "owner" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string",
                "nullable" : true
              }
            },
            "description" : "An object representing a Team that owns the runbook",
            "nullable" : true
          },
          "severities" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "nullable" : true
                }
              }
            }
          },
          "services" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "nullable" : true
                }
              }
            }
          },
          "environments" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "nullable" : true
                }
              }
            }
          },
          "attachment_rule" : {
            "required" : [ "logic" ],
            "type" : "object",
            "properties" : {
              "logic" : {
                "type" : "string",
                "description" : "The JSON logic for the attaching the runbook"
              },
              "user_data" : {
                "type" : "string",
                "description" : "The user data for the rule",
                "nullable" : true
              }
            },
            "nullable" : true
          },
          "steps" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "required" : [ "action_id", "name" ],
              "type" : "object",
              "properties" : {
                "step_id" : {
                  "type" : "string",
                  "description" : "ID of step to be updated",
                  "nullable" : true
                },
                "name" : {
                  "type" : "string",
                  "description" : "Name for step"
                },
                "action_id" : {
                  "type" : "string",
                  "description" : "ID of action to use for this step."
                },
                "rule" : {
                  "required" : [ "logic" ],
                  "type" : "object",
                  "properties" : {
                    "logic" : {
                      "type" : "string",
                      "description" : "The JSON logic for the rule"
                    },
                    "user_data" : {
                      "type" : "string",
                      "description" : "The user data for the rule",
                      "nullable" : true
                    }
                  },
                  "nullable" : true
                }
              }
            }
          },
          "auto_attach_to_restricted_incidents" : {
            "type" : "boolean",
            "description" : "Whether or not this runbook should be automatically attached to restricted incidents. Note that setting this to `true` will prevent it from being attached to public incidents, even manually. Defaults to `false`.",
            "nullable" : true
          }
        },
        "description" : "Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything\nabout a runbook, including but not limited to the steps, environments, attachment rules, and severities.\n"
      },
      "NuncConnectionEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/NuncConnectionEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "NuncConnectionEntityPaginated model"
      },
      "NuncConnectionEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "domain" : {
            "type" : "string",
            "nullable" : true
          },
          "company_name" : {
            "type" : "string",
            "nullable" : true
          },
          "company_website" : {
            "type" : "string",
            "nullable" : true
          },
          "cname" : {
            "type" : "string",
            "nullable" : true
          },
          "greeting_title" : {
            "type" : "string",
            "nullable" : true
          },
          "greeting_body" : {
            "type" : "string",
            "nullable" : true
          },
          "operational_message" : {
            "type" : "string",
            "nullable" : true
          },
          "company_tos_url" : {
            "type" : "string",
            "nullable" : true
          },
          "primary_color" : {
            "type" : "string",
            "nullable" : true
          },
          "secondary_color" : {
            "type" : "string",
            "nullable" : true
          },
          "button_background_color" : {
            "type" : "string",
            "nullable" : true
          },
          "button_text_color" : {
            "type" : "string",
            "nullable" : true
          },
          "link_color" : {
            "type" : "string",
            "nullable" : true
          },
          "title" : {
            "type" : "string",
            "nullable" : true
          },
          "exposed_fields" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "conditions" : {
            "$ref" : "#/components/schemas/NullableNuncConditionEntity"
          },
          "components" : {
            "$ref" : "#/components/schemas/NullableNuncComponentEntity"
          },
          "component_groups" : {
            "$ref" : "#/components/schemas/NullableNuncComponentGroupEntity"
          },
          "logo" : {
            "$ref" : "#/components/schemas/NullableMediaImageEntity"
          },
          "cover_image" : {
            "$ref" : "#/components/schemas/NullableMediaImageEntity"
          },
          "favicon" : {
            "$ref" : "#/components/schemas/NullableMediaImageEntity"
          },
          "open_graph_image" : {
            "$ref" : "#/components/schemas/NullableMediaImageEntity"
          },
          "dark_logo" : {
            "$ref" : "#/components/schemas/NullableMediaImageEntity"
          },
          "enable_histogram" : {
            "type" : "boolean",
            "nullable" : true
          },
          "ui_version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "links" : {
            "type" : "array",
            "description" : "List of links attached to this status page.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/LinksEntity"
            }
          }
        },
        "description" : "NuncConnectionEntity model"
      },
      "NuncConditionEntity" : {
        "type" : "object",
        "properties" : {
          "nunc_condition" : {
            "type" : "string",
            "nullable" : true
          },
          "condition_name" : {
            "type" : "string",
            "nullable" : true
          },
          "condition_id" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "NuncComponentEntity" : {
        "type" : "object",
        "properties" : {
          "infrastructure_type" : {
            "type" : "string",
            "nullable" : true
          },
          "infrastructure_id" : {
            "type" : "string",
            "nullable" : true
          },
          "label" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "component_group_id" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "NuncComponentGroupEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "component_group_id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "MediaImageEntity" : {
        "type" : "object",
        "properties" : {
          "original_url" : {
            "type" : "string",
            "nullable" : true
          },
          "versions_urls" : {
            "type" : "object",
            "properties" : { },
            "description" : "An object with keys that can have different versions of an image",
            "nullable" : true
          }
        }
      },
      "NuncEmailSubscribersEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "UUID of the subscriber",
            "nullable" : true
          },
          "email" : {
            "type" : "string",
            "description" : "Email of the subscriber",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "description" : "The time the subscriber was created",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "NuncEmailSubscribersEntity model"
      },
      "update_nunc_link" : {
        "type" : "object",
        "properties" : {
          "display_text" : {
            "type" : "string",
            "nullable" : true
          },
          "icon_url" : {
            "type" : "string",
            "nullable" : true
          },
          "href_url" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Update a link to be displayed on a FireHydrant status page"
      },
      "SavedSearchEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "resource_type" : {
            "type" : "string",
            "nullable" : true
          },
          "user_id" : {
            "type" : "string",
            "nullable" : true
          },
          "is_private" : {
            "type" : "boolean",
            "description" : "Whether or not this saved search is private",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "filter_values" : {
            "type" : "object",
            "properties" : { },
            "description" : "An unstructured key/value pair of saved values for searching",
            "nullable" : true
          }
        },
        "description" : "SavedSearchEntity model"
      },
      "update_saved_search" : {
        "type" : "object",
        "properties" : {
          "is_private" : {
            "type" : "boolean",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "filter_values" : {
            "type" : "object",
            "additionalProperties" : true,
            "nullable" : true
          }
        },
        "description" : "Update a specific saved search"
      },
      "create_saved_search" : {
        "required" : [ "filter_values", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "is_private" : {
            "type" : "boolean",
            "nullable" : true
          },
          "filter_values" : {
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "description" : "Create a new saved search for a particular resource type"
      },
      "Lifecycles_PhaseEntityList" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Lifecycles_PhaseEntity"
            }
          }
        },
        "description" : "Lifecycles_PhaseEntityList model"
      },
      "Lifecycles_PhaseEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "milestones" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Lifecycles_MilestoneEntity"
            }
          }
        },
        "description" : "Lifecycles_PhaseEntity model"
      },
      "Lifecycles_MilestoneEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "auto_assign_timestamp_on_create" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "updated_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }
      },
      "create_priority" : {
        "required" : [ "slug" ],
        "type" : "object",
        "properties" : {
          "slug" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "default" : {
            "type" : "boolean",
            "nullable" : true
          }
        },
        "description" : "Create a new priority"
      },
      "PriorityEntity" : {
        "type" : "object",
        "properties" : {
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "default" : {
            "type" : "boolean",
            "nullable" : true
          }
        },
        "description" : "PriorityEntity model"
      },
      "update_priority" : {
        "type" : "object",
        "properties" : {
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "default" : {
            "type" : "boolean",
            "nullable" : true
          }
        },
        "description" : "Update a specific priority"
      },
      "create_severity" : {
        "required" : [ "slug" ],
        "type" : "object",
        "properties" : {
          "slug" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "color" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "red", "orange", "yellow", "blue", "teal", "grey", "green" ]
          }
        },
        "description" : "Create a new severity"
      },
      "SeverityEntity" : {
        "type" : "object",
        "properties" : {
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "system_record" : {
            "type" : "boolean",
            "nullable" : true
          },
          "color" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "SeverityEntity model"
      },
      "SeverityEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SeverityEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "SeverityEntityPaginated model"
      },
      "update_severity" : {
        "type" : "object",
        "properties" : {
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "color" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "red", "orange", "yellow", "blue", "teal", "grey", "green" ]
          }
        },
        "description" : "Update a specific severity"
      },
      "update_severity_matrix" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "data" : {
            "type" : "array",
            "items" : {
              "required" : [ "condition_id", "impact_id", "severity" ],
              "type" : "object",
              "properties" : {
                "severity" : {
                  "type" : "string",
                  "description" : "Slug of a severity"
                },
                "impact_id" : {
                  "type" : "string",
                  "description" : "Impact id"
                },
                "condition_id" : {
                  "type" : "string",
                  "description" : "Condition id"
                }
              }
            }
          }
        },
        "description" : "Update available severities and impacts in your organization's severity matrix."
      },
      "SeverityMatrix_SeverityMatrixEntity" : {
        "type" : "object",
        "properties" : {
          "matrix" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SeverityMatrix_ItemEntity"
            }
          },
          "impacts" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SeverityMatrix_ImpactEntity"
            }
          },
          "conditions" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SeverityMatrix_ConditionEntity"
            }
          }
        },
        "description" : "SeverityMatrix_SeverityMatrixEntity model"
      },
      "SeverityMatrix_ItemEntity" : {
        "type" : "object",
        "properties" : {
          "severity" : {
            "type" : "string",
            "nullable" : true
          },
          "condition_id" : {
            "type" : "string",
            "nullable" : true
          },
          "impact_id" : {
            "type" : "string",
            "nullable" : true
          },
          "impact_type" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "create_severity_matrix_condition" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "position" : {
            "type" : "integer",
            "description" : "Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition",
            "format" : "int32",
            "nullable" : true
          }
        },
        "description" : "Create a new condition"
      },
      "update_severity_matrix_condition" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "description" : "Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition",
            "format" : "int32",
            "nullable" : true
          }
        },
        "description" : "Update a severity matrix condition"
      },
      "create_severity_matrix_impact" : {
        "required" : [ "affects_id", "affects_type" ],
        "type" : "object",
        "properties" : {
          "affects_type" : {
            "type" : "string"
          },
          "affects_id" : {
            "type" : "string"
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        },
        "description" : "Create a new impact"
      },
      "update_severity_matrix_impact" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        },
        "description" : "Update a severity matrix impact"
      },
      "create_scheduled_maintenance" : {
        "required" : [ "ends_at", "name", "starts_at" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "starts_at" : {
            "type" : "string",
            "description" : "ISO8601 timestamp for the start time of the scheduled maintenance",
            "format" : "date-time"
          },
          "ends_at" : {
            "type" : "string",
            "description" : "ISO8601 timestamp for the end time of the scheduled maintenance",
            "format" : "date-time"
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A json object of label keys and values",
            "nullable" : true
          },
          "status_pages" : {
            "type" : "array",
            "description" : "An array of status pages to display this maintenance on",
            "nullable" : true,
            "items" : {
              "required" : [ "connection_id" ],
              "type" : "object",
              "properties" : {
                "integration_slug" : {
                  "type" : "string",
                  "description" : "The slug identifying the type of status page",
                  "nullable" : true
                },
                "connection_id" : {
                  "type" : "string",
                  "description" : "The UUID of the status page to display this maintenance on"
                }
              }
            }
          },
          "impacts" : {
            "type" : "array",
            "description" : "An array of impact/condition combinations",
            "nullable" : true,
            "items" : {
              "required" : [ "condition_id", "id", "type" ],
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "description" : "The type of impact"
                },
                "id" : {
                  "type" : "string",
                  "description" : "The id of impact"
                },
                "condition_id" : {
                  "type" : "string",
                  "description" : "The id of the condition"
                }
              }
            }
          }
        },
        "description" : "Create a new scheduled maintenance event"
      },
      "ScheduledMaintenanceEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "starts_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ends_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "incident" : {
            "$ref" : "#/components/schemas/NullableIncidentEntity"
          },
          "status_pages" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ScheduledMaintenancesStatusPageEntity"
            }
          },
          "impacts" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ScheduledMaintenancesImpactEntity"
            }
          },
          "labels" : {
            "type" : "object",
            "properties" : { },
            "description" : "An object of label key and values",
            "nullable" : true
          }
        },
        "description" : "ScheduledMaintenanceEntity model"
      },
      "ScheduledMaintenancesStatusPageEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "integration_id" : {
            "type" : "string",
            "nullable" : true
          },
          "integration_slug" : {
            "type" : "string",
            "nullable" : true
          },
          "integration_name" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "ScheduledMaintenancesImpactEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "impact" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          },
          "condition" : {
            "$ref" : "#/components/schemas/NullableSeverityMatrix_ConditionEntity"
          }
        }
      },
      "update_scheduled_maintenance" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "starts_at" : {
            "type" : "string",
            "description" : "ISO8601 timestamp for the start time of the scheduled maintenance",
            "format" : "date-time",
            "nullable" : true
          },
          "ends_at" : {
            "type" : "string",
            "description" : "ISO8601 timestamp for the end time of the scheduled maintenance",
            "format" : "date-time",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A json object of label keys and values",
            "nullable" : true
          },
          "status_pages" : {
            "type" : "array",
            "description" : "An array of status pages to display this maintenance on",
            "nullable" : true,
            "items" : {
              "required" : [ "connection_id" ],
              "type" : "object",
              "properties" : {
                "integration_slug" : {
                  "type" : "string",
                  "description" : "The slug identifying the type of status page",
                  "nullable" : true
                },
                "connection_id" : {
                  "type" : "string",
                  "description" : "The UUID of the status page to display this maintenance on"
                }
              }
            }
          },
          "impacts" : {
            "type" : "array",
            "description" : "An array of impact/condition combinations",
            "nullable" : true,
            "items" : {
              "required" : [ "condition_id", "id", "type" ],
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "description" : "The type of impact"
                },
                "id" : {
                  "type" : "string",
                  "description" : "The id of impact"
                },
                "condition_id" : {
                  "type" : "string",
                  "description" : "The id of the condition"
                }
              }
            }
          }
        },
        "description" : "Change the conditions of a scheduled maintenance event, including updating any status page announcements of changes."
      },
      "ScheduleEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ScheduleEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "ScheduleEntityPaginated model"
      },
      "InfrastructureSearchEntity" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "infrastructure" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "InfrastructureSearchEntity model"
      },
      "Nunc_NuncSubscription" : {
        "type" : "object",
        "properties" : {
          "response" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Nunc_NuncSubscription model"
      },
      "create_nunc_subscription" : {
        "required" : [ "email" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string"
          }
        },
        "description" : "Subscribe to status page updates"
      },
      "create_status_update_template" : {
        "required" : [ "body", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "body" : {
            "type" : "string"
          }
        },
        "description" : "Create a status update template for your organization"
      },
      "StatusUpdateTemplateEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "body" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "StatusUpdateTemplateEntity model"
      },
      "update_status_update_template" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "body" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Update a single status update template"
      },
      "Organizations_CustomFieldDefinitionEntity" : {
        "type" : "object",
        "properties" : {
          "display_name" : {
            "type" : "string",
            "nullable" : true
          },
          "field_id" : {
            "type" : "string",
            "nullable" : true
          },
          "field_type" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "required" : {
            "type" : "boolean",
            "nullable" : true
          },
          "required_at_milestone_id" : {
            "type" : "string",
            "description" : "The milestone at which this field is required, if `required` is set to `true`. When null, a required field is always required.",
            "nullable" : true
          },
          "permissible_values" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Organizations_CustomFieldDefinitionEntity model"
      },
      "update_custom_field_definition" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "display_name" : {
            "type" : "string",
            "nullable" : true
          },
          "permissible_values" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "required" : {
            "type" : "boolean",
            "nullable" : true
          },
          "required_at_milestone_id" : {
            "type" : "string",
            "description" : "An optional milestone ID to specify when the field should become required, if `required` is set to `true`. If not provided, required fields are always required.",
            "nullable" : true
          }
        },
        "description" : "Update a single custom field definition"
      },
      "create_custom_field_definition" : {
        "required" : [ "display_name", "field_type", "required" ],
        "type" : "object",
        "properties" : {
          "display_name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "field_type" : {
            "type" : "string"
          },
          "permissible_values" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "required" : {
            "type" : "boolean"
          },
          "required_at_milestone_id" : {
            "type" : "string",
            "description" : "An optional milestone ID to specify when the field should become required, if `required` is set to `true`. If not provided, required fields are always required.",
            "nullable" : true
          }
        },
        "description" : "Create a new custom field definition"
      },
      "create_post_mortem_report" : {
        "required" : [ "incident_id" ],
        "type" : "object",
        "properties" : {
          "incident_id" : {
            "type" : "string"
          }
        },
        "description" : "Create a report"
      },
      "PostMortems_PostMortemReportEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "incident_id" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "tag_list" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "additional_details" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "incident" : {
            "$ref" : "#/components/schemas/NullableIncidentEntity"
          },
          "questions" : {
            "$ref" : "#/components/schemas/NullablePostMortems_QuestionEntity"
          },
          "calendar_events" : {
            "$ref" : "#/components/schemas/NullableCalendars_EventEntity"
          },
          "retrospective_shim" : {
            "type" : "boolean",
            "nullable" : true
          },
          "retrospective_id" : {
            "type" : "string",
            "nullable" : true
          },
          "retrospective_note" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "PostMortems_PostMortemReportEntity model"
      },
      "PostMortems_QuestionEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "title" : {
            "type" : "string",
            "nullable" : true
          },
          "body" : {
            "type" : "string",
            "nullable" : true
          },
          "tooltip" : {
            "type" : "string",
            "nullable" : true
          },
          "kind" : {
            "type" : "string",
            "nullable" : true
          },
          "question_type_id" : {
            "type" : "string",
            "nullable" : true
          },
          "is_required" : {
            "type" : "boolean",
            "nullable" : true
          },
          "available_options" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "conversations" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Conversations_API_Entities_Reference"
            }
          }
        }
      },
      "Calendars_EventEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "starts_at" : {
            "type" : "string",
            "nullable" : true
          },
          "ends_at" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "nullable" : true
          },
          "provider_url" : {
            "type" : "string",
            "nullable" : true
          },
          "provider_icon_url" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "PostMortems_PostMortemReportEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PostMortems_PostMortemReportEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "PostMortems_PostMortemReportEntityPaginated model"
      },
      "update_post_mortem_report" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "additional_details" : {
            "type" : "string",
            "nullable" : true
          },
          "questions" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "description" : "ID of a question",
                  "nullable" : true
                },
                "body" : {
                  "type" : "string",
                  "description" : "Answer to question",
                  "nullable" : true
                }
              }
            }
          }
        },
        "description" : "Update a report"
      },
      "create_post_mortem_reason" : {
        "required" : [ "summary" ],
        "type" : "object",
        "properties" : {
          "summary" : {
            "type" : "string"
          }
        },
        "description" : "Add a new contributing factor to an incident"
      },
      "PostMortems_ReasonEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "conversations" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Conversations_API_Entities_Reference"
            }
          }
        },
        "description" : "PostMortems_ReasonEntity model"
      },
      "PostMortems_ReasonEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PostMortems_ReasonEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "PostMortems_ReasonEntityPaginated model"
      },
      "update_post_mortem_reason" : {
        "type" : "object",
        "properties" : {
          "summary" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Update a contributing factor"
      },
      "reorder_post_mortem_reasons" : {
        "required" : [ "new_position", "old_position" ],
        "type" : "object",
        "properties" : {
          "old_position" : {
            "type" : "integer",
            "format" : "int32"
          },
          "new_position" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "description" : "Update the order of contributing factors in a retrospective report"
      },
      "publish_post_mortem_report" : {
        "type" : "object",
        "properties" : {
          "publish" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "true" ]
          },
          "user_ids" : {
            "type" : "array",
            "description" : "An array of user IDs with whom to share the report",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "team_ids" : {
            "type" : "array",
            "description" : "An array of team IDs with whom to share the report",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Marks an incident retrospective as published and emails all of the participants in the report the summary"
      },
      "update_post_mortem_field" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        },
        "description" : "Update a field value on a post mortem report"
      },
      "PostMortems_SectionFieldEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "value" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "PostMortems_SectionFieldEntity model"
      },
      "update_post_mortem_questions" : {
        "type" : "object",
        "properties" : {
          "_make_swagger_work_" : {
            "type" : "string",
            "nullable" : true
          },
          "questions" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "description" : "ID of a question",
                  "nullable" : true
                },
                "title" : {
                  "type" : "string",
                  "description" : "title of a question",
                  "nullable" : true
                },
                "tooltip" : {
                  "type" : "string",
                  "description" : "tooltip of a question",
                  "nullable" : true
                }
              }
            }
          }
        },
        "description" : "Update the questions configured to be provided and filled out on future retrospective reports."
      },
      "PostMortems_QuestionTypeEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "title" : {
            "type" : "string",
            "nullable" : true
          },
          "tooltip" : {
            "type" : "string",
            "nullable" : true
          },
          "kind" : {
            "type" : "string",
            "nullable" : true
          },
          "is_required" : {
            "type" : "boolean",
            "nullable" : true
          },
          "available_options" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "PostMortems_QuestionTypeEntity model"
      },
      "PostMortems_QuestionTypeEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PostMortems_QuestionTypeEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "PostMortems_QuestionTypeEntityPaginated model"
      },
      "Retrospectives_TemplateEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "is_default" : {
            "type" : "boolean",
            "nullable" : true
          },
          "sections" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Retrospectives_TemplateEntity_IncidentSectionEntity"
            }
          },
          "fields" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Retrospectives_FieldEntity"
            }
          }
        },
        "description" : "Retrospectives_TemplateEntity model"
      },
      "Retrospectives_TemplateEntity_IncidentSectionEntity" : {
        "type" : "object",
        "properties" : {
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "elements" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Retrospectives_FieldEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "label" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "text", "single_select", "multi_select", "numeric", "datetime", "dynamic_input_group", "markdown", "markdown_text" ]
          },
          "help_text" : {
            "type" : "string",
            "nullable" : true
          },
          "permissible_values" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "is_required" : {
            "type" : "boolean",
            "nullable" : true
          },
          "schema" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Retrospectives_IndexTemplateEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Retrospectives_IndexTemplateEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Retrospectives_IndexTemplateEntityPaginated model"
      },
      "Retrospectives_IndexTemplateEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "is_default" : {
            "type" : "boolean",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }
      },
      "Alerts_AlertEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Alerts_AlertEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Alerts_AlertEntityPaginated model"
      },
      "Alerts_ProcessingLogEntryEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Alerts_ProcessingLogEntryEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Alerts_ProcessingLogEntryEntityPaginated model"
      },
      "Alerts_ProcessingLogEntryEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "context" : {
            "type" : "object",
            "properties" : { },
            "description" : "An unstructured representation of this log entry's context.",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "level" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "unknown", "debug", "info", "warn", "error", "fatal" ]
          },
          "message" : {
            "type" : "string",
            "nullable" : true
          },
          "message_type" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "i18n_key", "custom" ]
          }
        }
      },
      "create_ticket" : {
        "required" : [ "summary" ],
        "type" : "object",
        "properties" : {
          "summary" : {
            "type" : "string"
          },
          "related_to" : {
            "type" : "string",
            "description" : "Which incident this ticket is related to, in the format of 'incident/UUID'",
            "nullable" : true
          },
          "project_id" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "state" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "priority_id" : {
            "type" : "string",
            "nullable" : true
          },
          "tag_list" : {
            "type" : "array",
            "description" : "List of tags for the ticket",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "remote_url" : {
            "type" : "string",
            "description" : "The remote URL for an existing ticket in a supported and configured ticketing integration",
            "nullable" : true
          }
        },
        "description" : "Creates a ticket for a project"
      },
      "update_ticket" : {
        "type" : "object",
        "properties" : {
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "state" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "priority_id" : {
            "type" : "string",
            "nullable" : true
          },
          "tag_list" : {
            "type" : "array",
            "description" : "List of tags for the ticket",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Update a ticket's attributes"
      },
      "Ticketing_Projects_ProjectListItemEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "config" : {
            "$ref" : "#/components/schemas/NullableTicketing_ProjectConfigEntity"
          },
          "field_map" : {
            "$ref" : "#/components/schemas/NullableTicketing_ProjectFieldMapEntity"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "connection_slug" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Ticketing_Projects_ProjectListItemEntity model"
      },
      "Ticketing_ProjectConfigEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_id" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_type" : {
            "type" : "string",
            "nullable" : true
          },
          "ticketing_project_id" : {
            "type" : "string",
            "nullable" : true
          },
          "ticketing_project_name" : {
            "type" : "string",
            "nullable" : true
          },
          "details" : {
            "type" : "object",
            "properties" : { },
            "description" : "A config object containing details about the project config. Can be one of: Ticketing::JiraCloud::ProjectConfigEntity, Ticketing::JiraOnprem::ProjectConfigEntity, or Ticketing::Shortcut::ProjectConfigEntity",
            "nullable" : true
          }
        },
        "description" : "Ticketing_ProjectConfigEntity model"
      },
      "Ticketing_ProjectFieldMapEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_id" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_type" : {
            "type" : "string",
            "nullable" : true
          },
          "ticketing_project_id" : {
            "type" : "string",
            "nullable" : true
          },
          "body" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Ticketing_ProjectFieldMapBodyEntity"
            }
          }
        },
        "description" : "Ticketing_ProjectFieldMapEntity model"
      },
      "Ticketing_ProjectFieldMapBodyEntity" : {
        "type" : "object",
        "properties" : {
          "strategy" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "basic", "logic" ]
          },
          "external_field" : {
            "type" : "string",
            "nullable" : true
          },
          "external_value" : {
            "$ref" : "#/components/schemas/NullableTicketing_ProjectFieldMapExternalValueEntity"
          },
          "user_data" : {
            "type" : "object",
            "properties" : { },
            "nullable" : true
          },
          "cases" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Ticketing_ProjectFieldMapCasesEntity"
            }
          },
          "else" : {
            "$ref" : "#/components/schemas/NullableTicketing_ProjectFieldMapCasesElseEntity"
          }
        }
      },
      "Ticketing_ProjectFieldMapExternalValueEntity" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "literal", "fh-attribute", "fh-type" ]
          },
          "value" : {
            "type" : "string",
            "nullable" : true
          },
          "attribute" : {
            "type" : "string",
            "nullable" : true
          },
          "presentation" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Ticketing_ProjectFieldMapCasesEntity" : {
        "type" : "object",
        "properties" : {
          "logic" : {
            "type" : "object",
            "properties" : { },
            "description" : "An unstructured object of key/value pairs describing the logic for applying the rule.",
            "nullable" : true
          },
          "external_value" : {
            "$ref" : "#/components/schemas/NullableTicketing_ProjectFieldMapExternalValueEntity"
          }
        }
      },
      "Ticketing_ProjectFieldMapCasesElseEntity" : {
        "type" : "object",
        "properties" : {
          "external_value" : {
            "$ref" : "#/components/schemas/NullableTicketing_ProjectFieldMapExternalValueEntity"
          }
        }
      },
      "Ticketing_FieldMaps_MappableFieldEntity" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The ID of the field",
            "nullable" : true
          },
          "label" : {
            "type" : "string",
            "description" : "The human-readable name of the field",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "description" : "The allowed type of the field",
            "nullable" : true
          },
          "allowed_values" : {
            "type" : "array",
            "description" : "The allowed values of the field",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "required" : {
            "type" : "string",
            "description" : "If the field is required to be mapped",
            "nullable" : true
          }
        },
        "description" : "Ticketing_FieldMaps_MappableFieldEntity model"
      },
      "Ticketing_ProjectInboundMappableFieldEntity" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The ID of the field",
            "nullable" : true
          },
          "label" : {
            "type" : "string",
            "description" : "The human-readable name of the field",
            "nullable" : true
          }
        },
        "description" : "Ticketing_ProjectInboundMappableFieldEntity model"
      },
      "Ticketing_ProjectInboundFieldMapEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_id" : {
            "type" : "string",
            "nullable" : true
          },
          "connection_type" : {
            "type" : "string",
            "nullable" : true
          },
          "ticketing_project_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_field_name" : {
            "type" : "string",
            "nullable" : true
          },
          "internal_field_name" : {
            "type" : "string",
            "nullable" : true
          },
          "ticket_type" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "incident", "task", "follow_up" ]
          }
        },
        "description" : "Ticketing_ProjectInboundFieldMapEntity model"
      },
      "create_ticketing_priority" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "position" : {
            "type" : "integer",
            "description" : "The position that this priority should take in your list of priorities. Priorities should be ordered from highest to lowest, with the highest priority at 0. If a position isn't specified, the new priority will be added to the end of the list; if another priority already exists at the specified position, that priority and all priorities following it will automatically be moved down the list to make room for the new priority.",
            "format" : "int32",
            "nullable" : true
          }
        },
        "description" : "Create a single ticketing priority"
      },
      "update_ticketing_priority" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "description" : "The position that this priority should take in your list of priorities. Priorities should be ordered from highest to lowest, with the highest priority at 0. If a position isn't specified, the new priority will be added to the end of the list; if another priority already exists at the specified position, this priority will shift that priority and all priorities down the list.",
            "format" : "int32",
            "nullable" : true
          }
        },
        "description" : "Update a single ticketing priority's attributes"
      },
      "create_task_list" : {
        "required" : [ "name", "task_list_items" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "task_list_items" : {
            "type" : "array",
            "items" : {
              "required" : [ "summary" ],
              "type" : "object",
              "properties" : {
                "summary" : {
                  "type" : "string",
                  "description" : "A summary of the task"
                },
                "description" : {
                  "type" : "string",
                  "description" : "A long-form description for the task if additional context is helpful",
                  "nullable" : true
                }
              }
            }
          }
        },
        "description" : "Creates a new task list"
      },
      "TaskListEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "task_list_items" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskListItemEntity"
            }
          }
        },
        "description" : "TaskListEntity model"
      },
      "TaskListItemEntity" : {
        "type" : "object",
        "properties" : {
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "update_task_list" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "task_list_items" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "required" : [ "summary" ],
              "type" : "object",
              "properties" : {
                "summary" : {
                  "type" : "string",
                  "description" : "A summary of the task"
                },
                "description" : {
                  "type" : "string",
                  "description" : "A long-form description for the task if additional context is helpful",
                  "nullable" : true
                }
              }
            }
          }
        },
        "description" : "Updates a task list's attributes and task list items"
      },
      "update_scim_group" : {
        "required" : [ "displayName", "members" ],
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "The name of the team being updated"
          },
          "members" : {
            "type" : "array",
            "items" : {
              "required" : [ "value" ],
              "type" : "object",
              "properties" : {
                "value" : {
                  "type" : "string",
                  "description" : "String that represents the user's UUID to assign to the team"
                }
              }
            }
          }
        },
        "description" : "SCIM endpoint to update a Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role, any missing members will be removed from the team."
      },
      "create_scim_group" : {
        "required" : [ "displayName", "members" ],
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "The name of the team being created"
          },
          "members" : {
            "type" : "array",
            "items" : {
              "required" : [ "value" ],
              "type" : "object",
              "properties" : {
                "value" : {
                  "type" : "string",
                  "description" : "String that represents the user's UUID to assign to the team"
                }
              }
            }
          }
        },
        "description" : "SCIM endpoint to create a new Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role."
      },
      "patch_scim_user" : {
        "required" : [ "Operations" ],
        "type" : "object",
        "properties" : {
          "trail" : {
            "type" : "string",
            "description" : "An optional trail to log the request",
            "nullable" : true
          },
          "Operations" : {
            "type" : "array",
            "description" : "An array of operations to perform on the user",
            "items" : {
              "required" : [ "op", "path" ],
              "type" : "object",
              "properties" : {
                "op" : {
                  "type" : "string",
                  "description" : "The operation to perform on the user. Options are add, remove, replace"
                },
                "path" : {
                  "type" : "string",
                  "description" : "The path to the attribute to be modified"
                }
              }
            }
          }
        },
        "description" : "PATCH SCIM endpoint to update a User. This endpoint is used to update a resource's attributes."
      },
      "update_scim_user" : {
        "type" : "object",
        "properties" : {
          "userName" : {
            "type" : "string",
            "description" : "A service provider's unique identifier for the user",
            "nullable" : true
          },
          "name" : {
            "required" : [ "familyName", "givenName" ],
            "type" : "object",
            "properties" : {
              "givenName" : {
                "type" : "string",
                "description" : "The family name of the User, or last name in most Western languages"
              },
              "familyName" : {
                "type" : "string",
                "description" : "The given name of the User, or first name in most Western languages"
              }
            },
            "description" : "The components of the user's name",
            "nullable" : true
          },
          "emails" : {
            "type" : "array",
            "description" : "Email addresses for the User",
            "nullable" : true,
            "items" : {
              "required" : [ "value" ],
              "type" : "object",
              "properties" : {
                "value" : {
                  "type" : "string",
                  "description" : "String that represents an email address for the User"
                },
                "primary" : {
                  "type" : "boolean",
                  "description" : "Boolean which signifies if an email is intended as the primary email for the User",
                  "nullable" : true
                }
              }
            }
          },
          "roles" : {
            "type" : "object",
            "properties" : { },
            "description" : "Roles for the User. Options are owner, member, collaborator, or viewer. Roles may be specified as strings or SCIM role objects.",
            "nullable" : true
          },
          "active" : {
            "type" : "boolean",
            "description" : "Boolean that represents whether user is active",
            "nullable" : true
          }
        },
        "description" : "PUT SCIM endpoint to update a User. This endpoint is used to replace a resource's attributes."
      },
      "create_scim_user" : {
        "required" : [ "emails", "name", "userName" ],
        "type" : "object",
        "properties" : {
          "userName" : {
            "type" : "string",
            "description" : "A service provider's unique identifier for the user"
          },
          "name" : {
            "required" : [ "familyName", "givenName" ],
            "type" : "object",
            "properties" : {
              "familyName" : {
                "type" : "string",
                "description" : "The family name of the User, or last name in most Western languages"
              },
              "givenName" : {
                "type" : "string",
                "description" : "The given name of the User, or first name in most Western languages"
              }
            },
            "description" : "The components of the user's name"
          },
          "emails" : {
            "type" : "array",
            "description" : "Email addresses for the User",
            "items" : {
              "required" : [ "primary", "value" ],
              "type" : "object",
              "properties" : {
                "value" : {
                  "type" : "string",
                  "description" : "String that represents an email address for the User"
                },
                "primary" : {
                  "type" : "boolean",
                  "description" : "Boolean which signifies if an email is intended as the primary email for the User"
                }
              }
            }
          },
          "roles" : {
            "type" : "object",
            "properties" : { },
            "description" : "Roles for the User. Options are owner, member, collaborator, or viewer. Roles may be specified as strings or SCIM role objects.",
            "nullable" : true
          },
          "password" : {
            "type" : "string",
            "description" : "This attribute is intended to be used as a means to set, replace, or compare (i.e., filter for equality) a password",
            "nullable" : true
          }
        },
        "description" : "SCIM endpoint to create and provision a new User. This endpoint will provision the User, which allows them to accept their account throught their IDP or via the Forgot Password flow."
      },
      "ingest_catalog_data" : {
        "required" : [ "data", "encoding" ],
        "type" : "object",
        "properties" : {
          "encoding" : {
            "type" : "string",
            "description" : "Encoding for submitted data",
            "enum" : [ "text/yaml", "application/x-yaml", "application/json" ]
          },
          "data" : {
            "type" : "string",
            "description" : "Service data"
          }
        },
        "description" : "Accepts catalog data in the configured format and asyncronously processes the data to incorporate changes into service catalog."
      },
      "Imports_ImportEntity" : {
        "type" : "object",
        "properties" : {
          "state" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "preprocessing", "ready_for_import", "importing", "completed", "failed" ]
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "Imports_ImportEntity model"
      },
      "create_checklist_template" : {
        "required" : [ "checks", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "checks" : {
            "type" : "array",
            "description" : "An array of checks for the checklist template",
            "items" : {
              "required" : [ "name" ],
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "The name of the check"
                },
                "description" : {
                  "type" : "string",
                  "description" : "The description of the check",
                  "nullable" : true
                }
              }
            }
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "team_id" : {
            "type" : "string",
            "description" : "The ID of the Team that owns the checklist template",
            "nullable" : true
          },
          "connected_services" : {
            "type" : "array",
            "description" : "Array of service IDs to attach checklist template to",
            "nullable" : true,
            "items" : {
              "required" : [ "id" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "description" : "Creates a checklist template for the organization"
      },
      "ChecklistTemplateEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ChecklistTemplateEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "ChecklistTemplateEntityPaginated model"
      },
      "update_checklist_template" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "checks" : {
            "type" : "array",
            "description" : "An array of checks for the checklist template",
            "nullable" : true,
            "items" : {
              "required" : [ "name" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "description" : "Specify the check ID when updating an already existing check",
                  "nullable" : true
                },
                "description" : {
                  "type" : "string",
                  "description" : "The description of the check",
                  "nullable" : true
                },
                "name" : {
                  "type" : "string",
                  "description" : "The name of the check"
                }
              }
            }
          },
          "team_id" : {
            "type" : "string",
            "description" : "The ID of the Team that owns the checklist template",
            "nullable" : true
          },
          "connected_services" : {
            "type" : "array",
            "description" : "Array of service IDs to attach checklist template to",
            "nullable" : true,
            "items" : {
              "required" : [ "id" ],
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "remove" : {
                  "type" : "boolean",
                  "description" : "Set to `true` to remove checklist from service",
                  "nullable" : true
                }
              }
            }
          },
          "remove_remaining_connected_services" : {
            "type" : "boolean",
            "description" : "If set to true, any services tagged on the checklist that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the services",
            "nullable" : true
          }
        },
        "description" : "Update a checklist templates attributes"
      },
      "PublicAPI_V1_BootstrapEntity" : {
        "type" : "object",
        "properties" : {
          "posthog_write_key" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "PublicAPI_V1_BootstrapEntity model"
      },
      "PublicAPI_V1_FormConfigurations_SelectedValueEntity" : {
        "type" : "object",
        "properties" : {
          "template" : {
            "type" : "object",
            "properties" : { },
            "description" : "The template for the selected value",
            "nullable" : true
          }
        },
        "description" : "PublicAPI_V1_FormConfigurations_SelectedValueEntity model"
      },
      "FormConfigurationEntity" : {
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "string",
            "nullable" : true
          },
          "show_incident_types" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "FormConfigurationEntity model"
      },
      "create_comment_reaction" : {
        "required" : [ "reaction" ],
        "type" : "object",
        "properties" : {
          "reaction" : {
            "type" : "string",
            "description" : "CLDR short name of Unicode emojis"
          }
        },
        "description" : "Create a reaction on a comment"
      },
      "update_comment" : {
        "type" : "object",
        "properties" : {
          "body" : {
            "type" : "string",
            "description" : "Text body of comment",
            "nullable" : true
          }
        },
        "description" : "Update a comment's attributes"
      },
      "create_comment" : {
        "required" : [ "body" ],
        "type" : "object",
        "properties" : {
          "body" : {
            "type" : "string",
            "description" : "Text body of comment"
          }
        },
        "description" : "Creates a comment for a project"
      },
      "update_signals_alert" : {
        "required" : [ "noise" ],
        "type" : "object",
        "properties" : {
          "noise" : {
            "type" : "boolean",
            "description" : "Whether the alert is noisy"
          }
        },
        "description" : "Update a Signal alert"
      },
      "Alerts_SignalAlertEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "summary" : {
            "type" : "string",
            "nullable" : true
          },
          "is_noise" : {
            "type" : "boolean",
            "nullable" : true
          }
        },
        "description" : "Alerts_SignalAlertEntity model"
      },
      "Signals_API_Analytics_TimeseriesPointEntity" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/NullableSignals_API_Analytics_TimeseriesPointEntity_MetricEntity"
          }
        },
        "description" : "Signals_API_Analytics_TimeseriesPointEntity model"
      },
      "Signals_API_Analytics_TimeseriesPointEntity_MetricEntity" : {
        "type" : "object",
        "properties" : {
          "bucket" : {
            "type" : "string",
            "description" : "The time bucket",
            "nullable" : true
          },
          "total_opened_alerts" : {
            "type" : "integer",
            "description" : "The total number of opened alerts",
            "format" : "int32",
            "nullable" : true
          },
          "total_acked_alerts" : {
            "type" : "integer",
            "description" : "The total number of acknowledged alerts",
            "format" : "int32",
            "nullable" : true
          },
          "total_incidents" : {
            "type" : "integer",
            "description" : "The total number of incidents",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Signals_API_Analytics_GroupedMetricsEntity" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/NullableSignals_API_Analytics_GroupedMetricsEntity_MetricEntity"
          }
        },
        "description" : "Signals_API_Analytics_GroupedMetricsEntity model"
      },
      "Signals_API_Analytics_GroupedMetricsEntity_MetricEntity" : {
        "type" : "object",
        "properties" : {
          "grouped_id" : {
            "type" : "integer",
            "description" : "The ID of the group",
            "format" : "int32",
            "nullable" : true
          },
          "grouped_name" : {
            "type" : "string",
            "description" : "The name of the group",
            "nullable" : true
          },
          "total_opened_alerts" : {
            "type" : "integer",
            "description" : "The total number of opened alerts",
            "format" : "int32",
            "nullable" : true
          },
          "total_acked_alerts" : {
            "type" : "integer",
            "description" : "The total number of acknowledged alerts",
            "format" : "int32",
            "nullable" : true
          },
          "total_incidents" : {
            "type" : "integer",
            "description" : "The total number of incidents",
            "format" : "int32",
            "nullable" : true
          },
          "acked_percentage" : {
            "type" : "number",
            "description" : "The percentage of acknowledged alerts",
            "format" : "float",
            "nullable" : true
          },
          "incidents_percentage" : {
            "type" : "number",
            "description" : "The percentage of alerts that have incidents",
            "format" : "float",
            "nullable" : true
          }
        }
      },
      "Signals_API_Analytics_MttxMetricsEntity" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/NullableSignals_API_Analytics_MttxMetricsEntity_MetricEntity"
          }
        },
        "description" : "Signals_API_Analytics_MttxMetricsEntity model"
      },
      "Signals_API_Analytics_MttxMetricsEntity_MetricEntity" : {
        "type" : "object",
        "properties" : {
          "mtta" : {
            "type" : "number",
            "description" : "The mean time to acknowledge (MTTA) alerts in seconds",
            "format" : "float",
            "nullable" : true
          },
          "mttr" : {
            "type" : "number",
            "description" : "The mean time to resolve (MTTR) alerts in seconds",
            "format" : "float",
            "nullable" : true
          }
        }
      },
      "Signals_API_Analytics_NoiseMetricsEntity" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/NullableSignals_API_Analytics_NoiseMetricsEntity_MetricEntity"
          }
        },
        "description" : "Signals_API_Analytics_NoiseMetricsEntity model"
      },
      "Signals_API_Analytics_NoiseMetricsEntity_MetricEntity" : {
        "type" : "object",
        "properties" : {
          "bucket" : {
            "type" : "string",
            "description" : "The time bucket",
            "nullable" : true
          },
          "total_alerts" : {
            "type" : "integer",
            "description" : "The total number of alerts",
            "format" : "int32",
            "nullable" : true
          },
          "noisy_alerts" : {
            "type" : "integer",
            "description" : "The number of alerts marked as noise",
            "format" : "int32",
            "nullable" : true
          },
          "percentage" : {
            "type" : "number",
            "description" : "The percentage of alerts that are noise",
            "format" : "float",
            "nullable" : true
          }
        }
      },
      "update_call_route" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the call route",
            "nullable" : true
          },
          "routing_mode" : {
            "type" : "string",
            "description" : "Routing mode for the call route",
            "nullable" : true,
            "enum" : [ "ROUTING_MODE_TAKE_MESSAGE", "ROUTING_MODE_DIRECT_CONNECT" ]
          },
          "connect_mode" : {
            "type" : "string",
            "description" : "Connect mode for the call route",
            "nullable" : true,
            "enum" : [ "CONNECT_MODE_CONFERENCE", "CONNECT_MODE_DIRECT_DIAL" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the call route",
            "nullable" : true
          },
          "greeting_message" : {
            "type" : "string",
            "description" : "Greeting message for the call route",
            "nullable" : true
          },
          "steps" : {
            "type" : "array",
            "description" : "Steps for the call route",
            "nullable" : true,
            "items" : {
              "required" : [ "target_id", "target_type", "timeout" ],
              "type" : "object",
              "properties" : {
                "target_type" : {
                  "type" : "string",
                  "description" : "Type of target",
                  "enum" : [ "User", "OnCallSchedule" ]
                },
                "target_id" : {
                  "type" : "string",
                  "description" : "ID of the target"
                },
                "timeout" : {
                  "type" : "string",
                  "description" : "Timeout in seconds for the step"
                }
              }
            }
          },
          "target" : {
            "required" : [ "id", "type" ],
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "description" : "Type of target",
                "enum" : [ "EscalationPolicy", "OnCallSchedule", "User", "Webhook", "SlackChannel", "MicrosoftTeamsChannel" ]
              },
              "id" : {
                "type" : "string",
                "description" : "ID of the target"
              }
            },
            "description" : "Target for the call route (required unless connect_mode is direct_dial)",
            "nullable" : true
          }
        },
        "description" : "Update a call route by ID"
      },
      "create_signals_event_source" : {
        "required" : [ "example_payload", "javascript", "name", "slug" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the transposer"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the transposer",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "description" : "Slug of the transposer"
          },
          "example_payload" : {
            "type" : "object",
            "properties" : {
              "headers" : {
                "type" : "object",
                "properties" : { },
                "description" : "Hash of HTTP headers with values as Array, e.g. { 'Content-Type' => ['application/json'] }",
                "nullable" : true
              },
              "data" : {
                "type" : "object",
                "properties" : { },
                "description" : "JSON body of request.",
                "nullable" : true
              }
            },
            "description" : "Example payload as input to transpose function"
          },
          "javascript" : {
            "type" : "string",
            "description" : "Javascript code to convert payload into Signal object"
          }
        },
        "description" : "Create a Signals event source for the authenticated user."
      },
      "Signals_API_TransposerEntity" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "example_payload" : {
            "type" : "object",
            "properties" : { },
            "nullable" : true
          },
          "expression" : {
            "type" : "string",
            "nullable" : true
          },
          "expected" : {
            "type" : "string",
            "nullable" : true
          },
          "website" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "tags" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ingest_url" : {
            "type" : "string",
            "nullable" : true
          },
          "editable" : {
            "type" : "boolean",
            "nullable" : true
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "updated_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          }
        },
        "description" : "Signals_API_TransposerEntity model"
      },
      "Signals_API_TransposerListEntity" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/NullableSignals_API_TransposerEntity"
          }
        },
        "description" : "Signals_API_TransposerListEntity model"
      },
      "Signals_API_HackerModeEntity" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "url_key" : {
            "type" : "string",
            "nullable" : true
          },
          "url" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Signals_API_HackerModeEntity model"
      },
      "create_signals_alert_grouping_configuration" : {
        "required" : [ "reference_alert_time_period", "strategy" ],
        "type" : "object",
        "properties" : {
          "strategy" : {
            "type" : "object",
            "properties" : {
              "substring" : {
                "required" : [ "field_name", "value" ],
                "type" : "object",
                "properties" : {
                  "field_name" : {
                    "type" : "string",
                    "description" : "The field to use for grouping alerts",
                    "enum" : [ "summary", "body", "tags" ]
                  },
                  "value" : {
                    "type" : "string",
                    "description" : "The value to use for grouping alerts"
                  }
                },
                "description" : "The type of strategy to use for grouping alerts",
                "nullable" : true
              }
            },
            "description" : "The strategy to use for grouping alerts"
          },
          "action" : {
            "type" : "object",
            "properties" : {
              "link" : {
                "type" : "boolean",
                "description" : "Link the alerts and do not notify anyone",
                "nullable" : true
              },
              "fyi" : {
                "required" : [ "slack_channel_ids" ],
                "type" : "object",
                "properties" : {
                  "slack_channel_ids" : {
                    "type" : "array",
                    "description" : "The slack channel ids to send the notification to",
                    "items" : {
                      "type" : "string"
                    }
                  }
                },
                "description" : "Send FYI notification",
                "nullable" : true
              }
            },
            "description" : "The action to take when grouping alerts",
            "nullable" : true
          },
          "reference_alert_time_period" : {
            "type" : "string",
            "description" : "How long to group alerts for"
          }
        },
        "description" : "Create a Signals alert grouping rule for the organization."
      },
      "Signals_API_GroupingEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "strategy" : {
            "$ref" : "#/components/schemas/NullableSignals_API_GroupingEntity_StrategyEntity"
          },
          "action" : {
            "$ref" : "#/components/schemas/NullableSignals_API_GroupingEntity_ActionEntity"
          },
          "reference_alert_time_period" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Signals_API_GroupingEntity model"
      },
      "Signals_API_GroupingEntity_StrategyEntity" : {
        "type" : "object",
        "properties" : {
          "substring" : {
            "$ref" : "#/components/schemas/NullableSignals_API_GroupingEntity_StrategyEntity_SubstringEntity"
          }
        }
      },
      "Signals_API_GroupingEntity_StrategyEntity_SubstringEntity" : {
        "type" : "object",
        "properties" : {
          "field_name" : {
            "type" : "string",
            "nullable" : true
          },
          "value" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Signals_API_GroupingEntity_ActionEntity" : {
        "type" : "object",
        "properties" : {
          "link" : {
            "type" : "boolean",
            "nullable" : true
          },
          "fyi" : {
            "$ref" : "#/components/schemas/NullableSignals_API_GroupingEntity_ActionEntity_FyiEntity"
          }
        }
      },
      "Signals_API_GroupingEntity_ActionEntity_FyiEntity" : {
        "type" : "object",
        "properties" : {
          "slack_channels" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Integrations_Slack_SlackChannelEntity"
            }
          }
        }
      },
      "Signals_API_GroupingEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_GroupingEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Signals_API_GroupingEntityPaginated model"
      },
      "update_signals_alert_grouping_configuration" : {
        "type" : "object",
        "properties" : {
          "strategy" : {
            "type" : "object",
            "properties" : {
              "substring" : {
                "required" : [ "field_name", "value" ],
                "type" : "object",
                "properties" : {
                  "field_name" : {
                    "type" : "string",
                    "description" : "The field to use for grouping alerts",
                    "enum" : [ "summary", "body", "tags" ]
                  },
                  "value" : {
                    "type" : "string",
                    "description" : "The value to use for grouping alerts"
                  }
                },
                "description" : "The type of strategy to use for grouping alerts",
                "nullable" : true
              }
            },
            "description" : "The strategy to use for grouping alerts",
            "nullable" : true
          },
          "action" : {
            "type" : "object",
            "properties" : {
              "link" : {
                "type" : "boolean",
                "description" : "Link the alerts and do not notify anyone",
                "nullable" : true
              },
              "fyi" : {
                "required" : [ "slack_channel_ids" ],
                "type" : "object",
                "properties" : {
                  "slack_channel_ids" : {
                    "type" : "array",
                    "description" : "The slack channel ids to send the notification to",
                    "items" : {
                      "type" : "string"
                    }
                  }
                },
                "description" : "Send FYI notification",
                "nullable" : true
              }
            },
            "description" : "The action to take when grouping alerts",
            "nullable" : true
          },
          "reference_alert_time_period" : {
            "type" : "string",
            "description" : "How long to group alerts for",
            "nullable" : true
          }
        },
        "description" : "Update a Signals alert grouping rule for the organization."
      },
      "create_signals_email_target" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The email target's name."
          },
          "slug" : {
            "type" : "string",
            "description" : "The email address that will be listening to events.",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "A detailed description of the email target.",
            "nullable" : true
          },
          "target" : {
            "required" : [ "id", "type" ],
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "description" : "The type of target that the inbound email will notify when matched.",
                "enum" : [ "Team", "EntireTeam", "EscalationPolicy", "OnCallSchedule", "User", "SlackChannel", "MicrosoftTeamsChannel", "Webhook" ]
              },
              "id" : {
                "type" : "string",
                "description" : "The ID of the target that the inbound email will notify when matched."
              }
            },
            "description" : "The target that the email target will notify. This object must contain a `type`\nfield that specifies the type of target and an `id` field that specifies the ID of\nthe target. The `type` field must be one of \"escalation_policy\", \"on_call_schedule\",\n\"team\", \"user\", or \"slack_channel\".\n",
            "nullable" : true
          },
          "allowed_senders" : {
            "type" : "array",
            "description" : "A list of email addresses that are allowed to send events to the target. Must be exact match.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "rules" : {
            "type" : "array",
            "description" : "A list of CEL expressions that should be evaluated and matched to determine if the target should be notified.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "rule_matching_strategy" : {
            "type" : "string",
            "description" : "Whether or not all rules must match, or if only one rule must match.",
            "nullable" : true,
            "enum" : [ "all", "any" ]
          },
          "status_cel" : {
            "type" : "string",
            "description" : "The CEL expression that defines the status of an incoming email that is sent to the target.",
            "nullable" : true
          },
          "level_cel" : {
            "type" : "string",
            "description" : "The CEL expression that defines the level of an incoming email that is sent to the target.",
            "nullable" : true
          }
        },
        "description" : "Create a Signals email target for a team."
      },
      "Signals_API_EmailTargetEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "email" : {
            "type" : "string",
            "nullable" : true
          },
          "status_cel" : {
            "type" : "string",
            "nullable" : true
          },
          "level_cel" : {
            "type" : "string",
            "nullable" : true
          },
          "target" : {
            "$ref" : "#/components/schemas/NullableSignals_API_TargetEntity"
          },
          "allowed_senders" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "rules" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "rule_matching_strategy" : {
            "type" : "string",
            "nullable" : true
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "team_id" : {
            "type" : "string",
            "description" : "The team ID that the email target belongs to, if applicable",
            "nullable" : true
          }
        },
        "description" : "Signals_API_EmailTargetEntity model"
      },
      "Signals_API_EmailTargetEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_EmailTargetEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Signals_API_EmailTargetEntityPaginated model"
      },
      "update_signals_email_target" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The email target's name.",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "description" : "The email address that will be listening to events.",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "A detailed description of the email target.",
            "nullable" : true
          },
          "target" : {
            "required" : [ "id", "type" ],
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "description" : "The type of target that the inbound email will notify when matched.",
                "enum" : [ "Team", "EntireTeam", "EscalationPolicy", "OnCallSchedule", "User", "SlackChannel", "MicrosoftTeamsChannel", "Webhook" ]
              },
              "id" : {
                "type" : "string",
                "description" : "The ID of the target that the inbound email will notify when matched."
              }
            },
            "description" : "The target that the email target will notify. This object must contain a `type`\nfield that specifies the type of target and an `id` field that specifies the ID of\nthe target. The `type` field must be one of \"escalation_policy\", \"on_call_schedule\",\n\"team\", \"user\", or \"slack_channel\".\n",
            "nullable" : true
          },
          "allowed_senders" : {
            "type" : "array",
            "description" : "A list of email addresses that are allowed to send events to the target. Must be exact match.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "status_cel" : {
            "type" : "string",
            "description" : "The CEL expression that defines the status of an incoming email that is sent to the target.",
            "nullable" : true
          },
          "level_cel" : {
            "type" : "string",
            "description" : "The CEL expression that defines the level of an incoming email that is sent to the target.",
            "nullable" : true
          },
          "rules" : {
            "type" : "array",
            "description" : "A list of CEL expressions that should be evaluated and matched to determine if the target should be notified.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "rule_matching_strategy" : {
            "type" : "string",
            "description" : "Whether or not all rules must match, or if only one rule must match.",
            "nullable" : true,
            "enum" : [ "all", "any" ]
          }
        },
        "description" : "Update a Signals email target by ID"
      },
      "create_signals_webhook_target" : {
        "required" : [ "name", "url" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The webhook target's name."
          },
          "description" : {
            "type" : "string",
            "description" : "An optional detailed description of the webhook target.",
            "nullable" : true
          },
          "url" : {
            "type" : "string",
            "description" : "The URL that the webhook target will notify."
          },
          "signing_key" : {
            "type" : "string",
            "description" : "An optional secret we will provide in the `FH-Signature` header\nwhen sending a payload to the webhook target. This key will not be\nshown in any response once configured.\n",
            "nullable" : true
          }
        },
        "description" : "Create a Signals webhook target."
      },
      "Signals_API_WebhookTargetEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "url" : {
            "type" : "string",
            "nullable" : true
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "Signals_API_WebhookTargetEntity model"
      },
      "Signals_API_WebhookTargetEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_WebhookTargetEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Signals_API_WebhookTargetEntityPaginated model"
      },
      "update_signals_webhook_target" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The webhook target's name.",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "An optional detailed description of the webhook target.",
            "nullable" : true
          },
          "url" : {
            "type" : "string",
            "description" : "The URL that the webhook target will notify.",
            "nullable" : true
          },
          "signing_key" : {
            "type" : "string",
            "description" : "An optional secret we will provide in the `FH-Signature` header\nwhen sending a payload to the webhook target. This key will not be\nshown in any response once configured.\n",
            "nullable" : true
          }
        },
        "description" : "Update a Signals webhook target by ID"
      },
      "Signals_API_NotificationPolicyItemEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "notification_group_method" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "any", "push", "email", "voice", "mobile_text", "chat" ]
          },
          "max_delay" : {
            "type" : "string",
            "description" : "The maximum delay for notifications",
            "nullable" : true
          },
          "priority" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "HIGH", "MEDIUM", "LOW" ]
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "Signals_API_NotificationPolicyItemEntity model"
      },
      "Signals_API_NotificationPolicyItemEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_NotificationPolicyItemEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Signals_API_NotificationPolicyItemEntityPaginated model"
      },
      "Signals_API_IngestKeyEntity" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Signals_API_IngestKeyEntity model"
      },
      "debug_signals_expression" : {
        "required" : [ "expression", "signals" ],
        "type" : "object",
        "properties" : {
          "expression" : {
            "type" : "string",
            "description" : "CEL expression"
          },
          "signals" : {
            "type" : "array",
            "description" : "List of signals to evaluate rule expression against",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "nullable" : true
                },
                "organization_id" : {
                  "type" : "string",
                  "nullable" : true
                },
                "summary" : {
                  "type" : "string",
                  "nullable" : true
                },
                "body" : {
                  "type" : "string",
                  "nullable" : true
                },
                "level" : {
                  "type" : "string",
                  "nullable" : true
                },
                "annotations" : {
                  "type" : "object",
                  "properties" : { },
                  "nullable" : true
                },
                "tags" : {
                  "type" : "array",
                  "nullable" : true,
                  "items" : {
                    "type" : "string"
                  }
                },
                "images" : {
                  "type" : "array",
                  "nullable" : true,
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "src" : {
                        "type" : "string",
                        "nullable" : true
                      },
                      "alt" : {
                        "type" : "string",
                        "nullable" : true
                      }
                    }
                  }
                },
                "links" : {
                  "type" : "array",
                  "nullable" : true,
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "href" : {
                        "type" : "string",
                        "nullable" : true
                      },
                      "text" : {
                        "type" : "string",
                        "nullable" : true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description" : "Debug Signals expressions"
      },
      "Signals_API_OrganizationOnCallScheduleEntityPaginated" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_OrganizationOnCallScheduleEntity"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/NullablePaginationEntity"
          }
        },
        "description" : "Signals_API_OrganizationOnCallScheduleEntityPaginated model"
      },
      "Signals_API_OrganizationOnCallScheduleEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "rotations" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Signals_API_OrganizationOnCallRotationEntity"
            }
          },
          "team" : {
            "$ref" : "#/components/schemas/NullableSuccinctEntity"
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "time_zone" : {
            "type" : "string",
            "nullable" : true
          },
          "current_shift" : {
            "$ref" : "#/components/schemas/NullableSignals_API_OnCallShiftEntity"
          },
          "next_shift" : {
            "$ref" : "#/components/schemas/NullableSignals_API_OnCallShiftEntity"
          }
        }
      },
      "Signals_API_OrganizationOnCallRotationEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "time_zone" : {
            "type" : "string",
            "nullable" : true
          },
          "current_shift" : {
            "$ref" : "#/components/schemas/NullableSignals_API_OnCallShiftEntity"
          },
          "next_shift" : {
            "$ref" : "#/components/schemas/NullableSignals_API_OnCallShiftEntity"
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }
      },
      "create_webhook" : {
        "required" : [ "url" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          }
        },
        "description" : "Create a new webhook"
      },
      "Webhooks_Entities_WebhookEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "url" : {
            "type" : "string",
            "nullable" : true
          },
          "state" : {
            "type" : "string",
            "nullable" : true
          },
          "created_by" : {
            "$ref" : "#/components/schemas/NullableAuthorEntity"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "subscriptions" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "description" : "Webhooks_Entities_WebhookEntity model"
      },
      "update_webhook" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "nullable" : true
          },
          "state" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "active", "inactive" ]
          }
        },
        "description" : "Update a specific webhook"
      },
      "AI_Entities_IncidentSummaryEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "content" : {
            "type" : "string",
            "nullable" : true
          },
          "source_hash" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "nullable" : true
          },
          "incident_updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "AI_Entities_IncidentSummaryEntity model"
      },
      "AI_Entities_PreferencesEntity" : {
        "type" : "object",
        "properties" : {
          "ai" : {
            "type" : "boolean",
            "nullable" : true
          },
          "description" : {
            "type" : "boolean",
            "nullable" : true
          },
          "followups" : {
            "type" : "boolean",
            "nullable" : true
          },
          "impact" : {
            "type" : "boolean",
            "nullable" : true
          },
          "retros" : {
            "type" : "boolean",
            "nullable" : true
          },
          "similar_incidents" : {
            "type" : "boolean",
            "nullable" : true
          },
          "summaries" : {
            "type" : "boolean",
            "nullable" : true
          },
          "updates" : {
            "type" : "boolean",
            "nullable" : true
          }
        },
        "description" : "AI_Entities_PreferencesEntity model"
      },
      "Audiences_Entities_AudienceEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier for the audience",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the audience (maximum 255 characters)",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "description" : "Slug of the audience, unique and autogenerated",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the audience and its purpose (maximum 4000 characters)",
            "nullable" : true
          },
          "default" : {
            "type" : "boolean",
            "description" : "Whether this is the organization's default audience",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "description" : "When the audience was created",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "description" : "When the audience was last updated",
            "format" : "date-time",
            "nullable" : true
          },
          "discarded_at" : {
            "type" : "string",
            "description" : "When the audience was discarded (soft deleted)",
            "format" : "date-time",
            "nullable" : true
          },
          "details" : {
            "type" : "array",
            "description" : "List of incident details for this audience",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Audiences_Entities_DetailEntity"
            }
          }
        },
        "description" : "Audiences_Entities_AudienceEntity model"
      },
      "Audiences_Entities_DetailEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier for the detail item",
            "nullable" : true
          },
          "question" : {
            "type" : "string",
            "description" : "The need-to-know question (maximum 255 characters)",
            "nullable" : true
          },
          "prompt" : {
            "type" : "string",
            "description" : "AI prompt used to gather this information",
            "nullable" : true
          },
          "position" : {
            "type" : "integer",
            "description" : "Order position of this item in the list",
            "format" : "int32",
            "nullable" : true
          },
          "slug" : {
            "type" : "string",
            "description" : "Slug of the detail, unique and autogenerated",
            "nullable" : true
          }
        }
      },
      "Audiences_Entities_AudienceSummariesEntity" : {
        "type" : "object",
        "properties" : {
          "incident_id" : {
            "type" : "string",
            "nullable" : true
          },
          "audiences" : {
            "type" : "string",
            "description" : "JSON-encoded map of audience summaries",
            "nullable" : true
          }
        },
        "description" : "Audiences_Entities_AudienceSummariesEntity model"
      },
      "NullableErrorEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ErrorEntity"
        } ]
      },
      "NullablePongEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PongEntity"
        } ]
      },
      "NullableActorEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ActorEntity"
        } ]
      },
      "NullableOrganizationEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/OrganizationEntity"
        } ]
      },
      "Nullablecreate_environment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_environment"
        } ]
      },
      "NullableEnvironmentEntryEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EnvironmentEntryEntity"
        } ]
      },
      "NullableExternalResourceEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ExternalResourceEntity"
        } ]
      },
      "NullableEnvironmentEntryEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EnvironmentEntryEntityPaginated"
        } ]
      },
      "NullablePaginationEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaginationEntity"
        } ]
      },
      "Nullableupdate_environment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_environment"
        } ]
      },
      "Nullablecreate_service" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_service"
        } ]
      },
      "NullableServiceEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServiceEntity"
        } ]
      },
      "NullableChecklistTemplateEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ChecklistTemplateEntity"
        } ]
      },
      "NullableChecklistCheckEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ChecklistCheckEntity"
        } ]
      },
      "NullableTeamEntityLite" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/TeamEntityLite"
        } ]
      },
      "NullableAuthorEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/AuthorEntity"
        } ]
      },
      "NullableServiceEntityChecklist" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServiceEntityChecklist"
        } ]
      },
      "NullableFunctionalityEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/FunctionalityEntity"
        } ]
      },
      "NullableLinksEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/LinksEntity"
        } ]
      },
      "NullableServiceEntityLite" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServiceEntityLite"
        } ]
      },
      "NullableImports_ImportableResourceEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Imports_ImportableResourceEntity"
        } ]
      },
      "NullableImports_ImportErrorEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Imports_ImportErrorEntity"
        } ]
      },
      "NullableImports_ImportErrorEntity_ResourceEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Imports_ImportErrorEntity_ResourceEntity"
        } ]
      },
      "NullableServiceEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServiceEntityPaginated"
        } ]
      },
      "Nullablecreate_service_links" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_service_links"
        } ]
      },
      "NullableServiceLinkEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServiceLinkEntity"
        } ]
      },
      "Nullableupdate_service" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_service"
        } ]
      },
      "NullableServiceWithAllDependenciesEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServiceWithAllDependenciesEntity"
        } ]
      },
      "NullableServiceChildDependencyEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServiceChildDependencyEntity"
        } ]
      },
      "NullableServiceParentDependencyEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServiceParentDependencyEntity"
        } ]
      },
      "Nullablecreate_service_checklist_response" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_service_checklist_response"
        } ]
      },
      "Nullablecreate_service_dependency" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_service_dependency"
        } ]
      },
      "NullableServiceDependencyEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServiceDependencyEntity"
        } ]
      },
      "Nullableupdate_service_dependency" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_service_dependency"
        } ]
      },
      "Nullablecreate_functionality" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_functionality"
        } ]
      },
      "NullableFunctionalityEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/FunctionalityEntityPaginated"
        } ]
      },
      "Nullableupdate_functionality" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_functionality"
        } ]
      },
      "NullableFunctionalityWithAllServicesEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/FunctionalityWithAllServicesEntity"
        } ]
      },
      "Nullablecreate_team" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_team"
        } ]
      },
      "NullableTeamEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/TeamEntity"
        } ]
      },
      "NullableIntegrations_Slack_SlackChannelEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Slack_SlackChannelEntity"
        } ]
      },
      "NullableIntegrations_MicrosoftTeamsV2_ChannelEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_MicrosoftTeamsV2_ChannelEntity"
        } ]
      },
      "NullableIncidentEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentEntity"
        } ]
      },
      "NullableSuccinctEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SuccinctEntity"
        } ]
      },
      "NullableSeverityMatrix_ImpactEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SeverityMatrix_ImpactEntity"
        } ]
      },
      "NullableSeverityMatrix_ConditionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SeverityMatrix_ConditionEntity"
        } ]
      },
      "NullableIncidents_MilestoneEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_MilestoneEntity"
        } ]
      },
      "NullableIncidents_LifecyclePhaseEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_LifecyclePhaseEntity"
        } ]
      },
      "NullableIncidents_LifecycleMilestoneEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_LifecycleMilestoneEntity"
        } ]
      },
      "NullableIncidents_LifecycleMeasurementEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_LifecycleMeasurementEntity"
        } ]
      },
      "NullableIncidents_RoleAssignmentEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_RoleAssignmentEntity"
        } ]
      },
      "NullableIncidentRoleEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentRoleEntity"
        } ]
      },
      "NullableUserEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/UserEntity"
        } ]
      },
      "NullableSignals_API_NotificationPolicyItemComplianceEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_NotificationPolicyItemComplianceEntity"
        } ]
      },
      "NullableIncidents_StatusPageEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_StatusPageEntity"
        } ]
      },
      "NullableIntegrationEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IntegrationEntity"
        } ]
      },
      "NullableEvent_NoteEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Event_NoteEntity"
        } ]
      },
      "NullableConversations_API_Entities_Reference" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Conversations_API_Entities_Reference"
        } ]
      },
      "NullableConversations_API_Entities_Channel" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Conversations_API_Entities_Channel"
        } ]
      },
      "NullableTicketing_TicketEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Ticketing_TicketEntity"
        } ]
      },
      "NullableTicketing_PriorityEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Ticketing_PriorityEntity"
        } ]
      },
      "NullableAttachments_LinkEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Attachments_LinkEntity"
        } ]
      },
      "NullableIncidents_ImpactEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_ImpactEntity"
        } ]
      },
      "NullableIncidents_ConferenceBridgeEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_ConferenceBridgeEntity"
        } ]
      },
      "NullableIncidents_ChannelEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_ChannelEntity"
        } ]
      },
      "NullableIncidents_ContextObjectEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_ContextObjectEntity"
        } ]
      },
      "NullableIncidents_TeamAssignmentEntityLite" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_TeamAssignmentEntityLite"
        } ]
      },
      "NullableCustomFields_FieldValue" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CustomFields_FieldValue"
        } ]
      },
      "NullableIncidentEntity_FieldRequirementEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentEntity_FieldRequirementEntity"
        } ]
      },
      "NullableMembershipEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/MembershipEntity"
        } ]
      },
      "NullableScheduleEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ScheduleEntity"
        } ]
      },
      "NullableFunctionalityEntityLite" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/FunctionalityEntityLite"
        } ]
      },
      "NullableSlimRunbookEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SlimRunbookEntity"
        } ]
      },
      "NullableRules_RuleEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Rules_RuleEntity"
        } ]
      },
      "NullableFHTypes_GenericEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/FHTypes_GenericEntity"
        } ]
      },
      "NullableTeamEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/TeamEntityPaginated"
        } ]
      },
      "Nullableupdate_team" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_team"
        } ]
      },
      "Nullablecreate_team_call_route" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_team_call_route"
        } ]
      },
      "NullableSignals_API_CallRouteEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_CallRouteEntity"
        } ]
      },
      "NullableSignals_API_CallRouteStepEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_CallRouteStepEntity"
        } ]
      },
      "NullableSignals_API_TargetEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_TargetEntity"
        } ]
      },
      "NullableSignals_API_CallRouteEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_CallRouteEntityPaginated"
        } ]
      },
      "Nullablecreate_team_escalation_policy" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_team_escalation_policy"
        } ]
      },
      "NullableSignals_API_EscalationPolicyEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_EscalationPolicyEntity"
        } ]
      },
      "NullableSignals_API_EscalationPolicyStepEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_EscalationPolicyStepEntity"
        } ]
      },
      "NullableSignals_API_EscalationPolicyHandoffStepEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_EscalationPolicyHandoffStepEntity"
        } ]
      },
      "NullableSignals_API_NotificationPriorityPolicyEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_NotificationPriorityPolicyEntity"
        } ]
      },
      "NullableSignals_API_EscalationPolicyEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_EscalationPolicyEntityPaginated"
        } ]
      },
      "Nullableupdate_team_escalation_policy" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_team_escalation_policy"
        } ]
      },
      "Nullablecreate_team_on_call_schedule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_team_on_call_schedule"
        } ]
      },
      "NullableSignals_API_OnCallScheduleEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_OnCallScheduleEntity"
        } ]
      },
      "NullableSignals_API_OnCallRotationEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_OnCallRotationEntity"
        } ]
      },
      "NullableSignals_API_OnCallShiftEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_OnCallShiftEntity"
        } ]
      },
      "NullableSignals_API_OnCallStrategyEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_OnCallStrategyEntity"
        } ]
      },
      "NullableSignals_API_OnCallRestrictionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_OnCallRestrictionEntity"
        } ]
      },
      "NullableSignals_API_OnCallScheduleEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_OnCallScheduleEntityPaginated"
        } ]
      },
      "Nullableupdate_team_on_call_schedule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_team_on_call_schedule"
        } ]
      },
      "Nullablecreate_on_call_shift" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_on_call_shift"
        } ]
      },
      "Nullableupdate_on_call_shift" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_on_call_shift"
        } ]
      },
      "Nullablecreate_team_signal_rule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_team_signal_rule"
        } ]
      },
      "NullableSignals_API_RuleEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_RuleEntity"
        } ]
      },
      "NullableSignals_API_RuleEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_RuleEntityPaginated"
        } ]
      },
      "Nullableupdate_team_signal_rule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_team_signal_rule"
        } ]
      },
      "Nullablecreate_change" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_change"
        } ]
      },
      "NullableChangeEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ChangeEntity"
        } ]
      },
      "Nullableupdate_change" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_change"
        } ]
      },
      "Nullablecreate_change_identity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_change_identity"
        } ]
      },
      "NullableChangeIdentityEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ChangeIdentityEntity"
        } ]
      },
      "NullableChangeIdentityEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ChangeIdentityEntityPaginated"
        } ]
      },
      "Nullableupdate_change_identity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_change_identity"
        } ]
      },
      "Nullablecreate_change_event" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_change_event"
        } ]
      },
      "NullableChangeEventEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ChangeEventEntity"
        } ]
      },
      "NullableChangeEventSlimEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ChangeEventSlimEntityPaginated"
        } ]
      },
      "NullableChangeEventSlimEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ChangeEventSlimEntity"
        } ]
      },
      "Nullableupdate_change_event" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_change_event"
        } ]
      },
      "NullableChangeTypeEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ChangeTypeEntityPaginated"
        } ]
      },
      "NullableChangeTypeEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ChangeTypeEntity"
        } ]
      },
      "NullableEntitlementEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EntitlementEntityPaginated"
        } ]
      },
      "NullableEntitlementEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EntitlementEntity"
        } ]
      },
      "Nullablecreate_incident" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_incident"
        } ]
      },
      "NullableIncidentEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentEntityPaginated"
        } ]
      },
      "Nullableupdate_incident" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_incident"
        } ]
      },
      "NullableIncidents_AlertEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_AlertEntityPaginated"
        } ]
      },
      "NullableIncidents_AlertEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_AlertEntity"
        } ]
      },
      "NullableAlerts_AlertEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Alerts_AlertEntity"
        } ]
      },
      "NullablePublicAPI_V1_Incidents_SuccinctEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PublicAPI_V1_Incidents_SuccinctEntity"
        } ]
      },
      "NullableAlerts_SirenEventEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Alerts_SirenEventEntity"
        } ]
      },
      "NullableAlerts_SirenAlertEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Alerts_SirenAlertEntity"
        } ]
      },
      "Nullableupdate_incident_alert_primary" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_incident_alert_primary"
        } ]
      },
      "Nullablebulk_update_incident_milestones" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/bulk_update_incident_milestones"
        } ]
      },
      "NullableIncidents_MilestoneEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_MilestoneEntityPaginated"
        } ]
      },
      "Nullablecreate_incident_change_event" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_incident_change_event"
        } ]
      },
      "NullableIncidents_RelatedChangeEventEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_RelatedChangeEventEntity"
        } ]
      },
      "NullableIncidents_RelatedChangeEventEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_RelatedChangeEventEntityPaginated"
        } ]
      },
      "Nullableupdate_incident_change_event" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_incident_change_event"
        } ]
      },
      "Nullablecreate_incident_status_page" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_incident_status_page"
        } ]
      },
      "NullableIncidents_StatusPageEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_StatusPageEntityPaginated"
        } ]
      },
      "Nullablecreate_incident_task_list" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_incident_task_list"
        } ]
      },
      "NullableTaskEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/TaskEntity"
        } ]
      },
      "Nullablecreate_incident_task" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_incident_task"
        } ]
      },
      "NullableTaskEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/TaskEntityPaginated"
        } ]
      },
      "Nullableupdate_incident_task" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_incident_task"
        } ]
      },
      "Nullableconvert_incident_task" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/convert_incident_task"
        } ]
      },
      "NullableAttachments_LinkEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Attachments_LinkEntityPaginated"
        } ]
      },
      "Nullablecreate_incident_link" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_incident_link"
        } ]
      },
      "Nullableupdate_incident_link" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_incident_link"
        } ]
      },
      "NullablePublicAPI_V1_Incidents_TranscriptEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PublicAPI_V1_Incidents_TranscriptEntity"
        } ]
      },
      "NullableSimilarIncidentEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SimilarIncidentEntityPaginated"
        } ]
      },
      "NullablePublicAPI_V1_SimilarIncidentEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PublicAPI_V1_SimilarIncidentEntity"
        } ]
      },
      "NullableAttachments_TypedAttachmentEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Attachments_TypedAttachmentEntityPaginated"
        } ]
      },
      "NullableAttachments_TypedAttachmentEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Attachments_TypedAttachmentEntity"
        } ]
      },
      "NullableIncidentAttachmentEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentAttachmentEntity"
        } ]
      },
      "NullableIncidentEventEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentEventEntityPaginated"
        } ]
      },
      "NullableIncidentEventEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentEventEntity"
        } ]
      },
      "NullableVotesEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/VotesEntity"
        } ]
      },
      "Nullableupdate_vote" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_vote"
        } ]
      },
      "Nullableupdate_incident_impact_patch" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_incident_impact_patch"
        } ]
      },
      "Nullableupdate_incident_impact_put" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_incident_impact_put"
        } ]
      },
      "Nullablecreate_incident_impact" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_incident_impact"
        } ]
      },
      "NullableIncidentImpactEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentImpactEntity"
        } ]
      },
      "NullableIncidentImpactEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentImpactEntityPaginated"
        } ]
      },
      "Nullablecreate_incident_note" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_incident_note"
        } ]
      },
      "Nullableupdate_incident_note" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_incident_note"
        } ]
      },
      "Nullablecreate_incident_chat_message" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_incident_chat_message"
        } ]
      },
      "NullableEvent_GenericChatMessageEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Event_GenericChatMessageEntity"
        } ]
      },
      "Nullableupdate_incident_chat_message" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_incident_chat_message"
        } ]
      },
      "NullableIncidents_RoleAssignmentEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_RoleAssignmentEntityPaginated"
        } ]
      },
      "Nullablecreate_incident_role_assignment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_incident_role_assignment"
        } ]
      },
      "Nullablecreate_incident_team_assignment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_incident_team_assignment"
        } ]
      },
      "NullableIncidents_RelationshipsEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_RelationshipsEntity"
        } ]
      },
      "NullableIncidents_ShareRetrospectivesResultEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_ShareRetrospectivesResultEntity"
        } ]
      },
      "NullableIncidents_ExportRetrospectivesResultEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_ExportRetrospectivesResultEntity"
        } ]
      },
      "NullableIncidents_RetrospectiveEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_RetrospectiveEntity"
        } ]
      },
      "NullableIncidents_RetrospectiveEntity_SectionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_RetrospectiveEntity_SectionEntity"
        } ]
      },
      "NullableIncidents_RetrospectiveFieldEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_RetrospectiveFieldEntity"
        } ]
      },
      "NullableIncidents_RetrospectiveEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Incidents_RetrospectiveEntityPaginated"
        } ]
      },
      "Nullableupdate_incident_retrospective" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_incident_retrospective"
        } ]
      },
      "Nullableupdate_incident_retrospective_field" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_incident_retrospective_field"
        } ]
      },
      "NullableIncidentRoleEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentRoleEntityPaginated"
        } ]
      },
      "Nullablecreate_incident_role" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_incident_role"
        } ]
      },
      "Nullableupdate_incident_role" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_incident_role"
        } ]
      },
      "NullableTagEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/TagEntity"
        } ]
      },
      "NullableTagEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/TagEntityPaginated"
        } ]
      },
      "Nullablecreate_incident_type" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_incident_type"
        } ]
      },
      "NullableIncidentTypeEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentTypeEntity"
        } ]
      },
      "NullableIncidentTypeEntity_TemplateEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentTypeEntity_TemplateEntity"
        } ]
      },
      "NullableIncidentTypeEntity_TemplateImpactEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentTypeEntity_TemplateImpactEntity"
        } ]
      },
      "NullableIncidentTypeEntity_TemplateValuesEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentTypeEntity_TemplateValuesEntity"
        } ]
      },
      "NullableIncidentTypeEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IncidentTypeEntityPaginated"
        } ]
      },
      "Nullableupdate_incident_type" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_incident_type"
        } ]
      },
      "NullableIntegrations_IntegrationEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_IntegrationEntityPaginated"
        } ]
      },
      "NullableIntegrations_IntegrationEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_IntegrationEntity"
        } ]
      },
      "NullableIntegrations_ConnectionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_ConnectionEntity"
        } ]
      },
      "NullableIntegrations_IntegrationEntity_LogoEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_IntegrationEntity_LogoEntity"
        } ]
      },
      "NullableFieldMapping_FieldMapEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/FieldMapping_FieldMapEntity"
        } ]
      },
      "NullableFieldMapping_MappableFieldEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/FieldMapping_MappableFieldEntity"
        } ]
      },
      "NullableIntegrations_AuthedProviderEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_AuthedProviderEntityPaginated"
        } ]
      },
      "NullablePublicAPI_V1_Integrations_AuthedProviderEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PublicAPI_V1_Integrations_AuthedProviderEntity"
        } ]
      },
      "NullableIntegrations_ConnectionEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_ConnectionEntityPaginated"
        } ]
      },
      "NullableIntegrations_ConnectionStatusEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_ConnectionStatusEntity"
        } ]
      },
      "NullableIntegrations_Aws_ConnectionEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Aws_ConnectionEntityPaginated"
        } ]
      },
      "NullableIntegrations_Aws_ConnectionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Aws_ConnectionEntity"
        } ]
      },
      "Nullableupdate_aws_connection" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_aws_connection"
        } ]
      },
      "NullableIntegrations_Aws_CloudtrailBatchEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Aws_CloudtrailBatchEntityPaginated"
        } ]
      },
      "NullableIntegrations_Aws_CloudtrailBatchEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Aws_CloudtrailBatchEntity"
        } ]
      },
      "Nullableupdate_aws_cloudtrail_batch" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_aws_cloudtrail_batch"
        } ]
      },
      "NullableIntegrations_ConfluenceCloud_SpaceKeyEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_ConfluenceCloud_SpaceKeyEntity"
        } ]
      },
      "NullableIntegrations_Slack_WorkspaceEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Slack_WorkspaceEntity"
        } ]
      },
      "NullableIntegrations_Slack_UsergroupEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Slack_UsergroupEntity"
        } ]
      },
      "NullableIntegrations_Statuspage_ConnectionEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Statuspage_ConnectionEntityPaginated"
        } ]
      },
      "NullableIntegrations_Statuspage_ConnectionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Statuspage_ConnectionEntity"
        } ]
      },
      "NullableIntegrations_Statuspage_ConditionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Statuspage_ConditionEntity"
        } ]
      },
      "NullableIntegrations_Statuspage_SeverityEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Statuspage_SeverityEntity"
        } ]
      },
      "NullableIntegrations_Statuspage_MilestoneMappingEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Statuspage_MilestoneMappingEntity"
        } ]
      },
      "Nullableupdate_statuspage_connection" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_statuspage_connection"
        } ]
      },
      "NullableIntegrations_Statuspage_PageEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Statuspage_PageEntity"
        } ]
      },
      "NullableIntegrations_Zendesk_SearchTickets_PaginatedEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Zendesk_SearchTickets_PaginatedEntity"
        } ]
      },
      "NullableIntegrations_Zendesk_SupportIssueEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Zendesk_SupportIssueEntity"
        } ]
      },
      "NullableIntegrations_Zendesk_SupportIssueEntity_CustomerEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Integrations_Zendesk_SupportIssueEntity_CustomerEntity"
        } ]
      },
      "NullableUserEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/UserEntityPaginated"
        } ]
      },
      "NullableCurrentUserEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CurrentUserEntity"
        } ]
      },
      "NullableReportEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ReportEntity"
        } ]
      },
      "NullableReports_BucketEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Reports_BucketEntity"
        } ]
      },
      "NullableReports_DataPointEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Reports_DataPointEntity"
        } ]
      },
      "NullableMetrics_TicketFunnelMetricsEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_TicketFunnelMetricsEntity"
        } ]
      },
      "NullableMetrics_TicketFunnelMetricsEntity_DataBucketEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_TicketFunnelMetricsEntity_DataBucketEntity"
        } ]
      },
      "NullableMetrics_TicketFunnelMetricsEntity_DataBucketFilterParamsEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_TicketFunnelMetricsEntity_DataBucketFilterParamsEntity"
        } ]
      },
      "NullableMetrics_TicketFunnelMetricsEntity_GroupingsEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_TicketFunnelMetricsEntity_GroupingsEntity"
        } ]
      },
      "NullableMetrics_RetrospectiveEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_RetrospectiveEntity"
        } ]
      },
      "NullableMetrics_RetrospectiveEntity_DataEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_RetrospectiveEntity_DataEntity"
        } ]
      },
      "NullableMetrics_RetrospectiveEntity_SummaryEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_RetrospectiveEntity_SummaryEntity"
        } ]
      },
      "NullableMetrics_MilestonesFunnelEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_MilestonesFunnelEntity"
        } ]
      },
      "NullableMetrics_MilestonesFunnelEntity_DataBucketEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_MilestonesFunnelEntity_DataBucketEntity"
        } ]
      },
      "NullableMetrics_MilestonesFunnelEntity_DataBucketFilterParamsEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_MilestonesFunnelEntity_DataBucketFilterParamsEntity"
        } ]
      },
      "NullableMetrics_MilestonesFunnelEntity_DataBucketMilestoneCountEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_MilestonesFunnelEntity_DataBucketMilestoneCountEntity"
        } ]
      },
      "NullableMetrics_MilestonesFunnelEntity_ColumnEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_MilestonesFunnelEntity_ColumnEntity"
        } ]
      },
      "NullableMetrics_MilestonesFunnelEntity_GroupingsEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_MilestonesFunnelEntity_GroupingsEntity"
        } ]
      },
      "NullableMetrics_MilestonesFunnelEntity_MetaEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_MilestonesFunnelEntity_MetaEntity"
        } ]
      },
      "NullableMetrics_MetricsEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_MetricsEntity"
        } ]
      },
      "NullableMetrics_MetricsEntity_SortEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_MetricsEntity_SortEntity"
        } ]
      },
      "NullableMetrics_MttxDataEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_MttxDataEntity"
        } ]
      },
      "NullableMetrics_MttxDataEntity_GroupingEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_MttxDataEntity_GroupingEntity"
        } ]
      },
      "NullableMetrics_MttxGroupEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_MttxGroupEntity"
        } ]
      },
      "NullableMetrics_InfrastructureListEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_InfrastructureListEntity"
        } ]
      },
      "NullableMetrics_InfrastructureMetricsEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Metrics_InfrastructureMetricsEntity"
        } ]
      },
      "NullableRunbooks_ActionsEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ActionsEntityPaginated"
        } ]
      },
      "NullableRunbooks_ActionsEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ActionsEntity"
        } ]
      },
      "NullableRunbooks_ActionConfigEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ActionConfigEntity"
        } ]
      },
      "NullableRunbooks_ElementEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ElementEntity"
        } ]
      },
      "NullableRunbooks_ElementMarkdownEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ElementMarkdownEntity"
        } ]
      },
      "NullableRunbooks_ElementTextareaEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ElementTextareaEntity"
        } ]
      },
      "NullableRunbooks_ElementInputEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ElementInputEntity"
        } ]
      },
      "NullableRunbooks_ElementDynamicSelectEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ElementDynamicSelectEntity"
        } ]
      },
      "NullableRunbooks_ElementDynamicSelectEntity_SelectOptionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ElementDynamicSelectEntity_SelectOptionEntity"
        } ]
      },
      "Nullablecreate_runbook_execution" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_runbook_execution"
        } ]
      },
      "NullableRunbooks_ExecutionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ExecutionEntity"
        } ]
      },
      "NullableRunbooks_ExecutionStepEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ExecutionStepEntity"
        } ]
      },
      "NullableRunbooks_ExecutionStepExecutionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ExecutionStepExecutionEntity"
        } ]
      },
      "NullableRunbooks_WebhookDeliveryEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_WebhookDeliveryEntity"
        } ]
      },
      "NullableRunbooks_ExecutionEntity_ExecutedForEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ExecutionEntity_ExecutedForEntity"
        } ]
      },
      "NullableRunbooks_ExecutionEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Runbooks_ExecutionEntityPaginated"
        } ]
      },
      "Nullableupdate_runbook_execution_step" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_runbook_execution_step"
        } ]
      },
      "Nullablecreate_runbook" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_runbook"
        } ]
      },
      "NullableRunbookEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/RunbookEntity"
        } ]
      },
      "NullableRunbookStepEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/RunbookStepEntity"
        } ]
      },
      "Nullableupdate_runbook" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_runbook"
        } ]
      },
      "NullableNuncConnectionEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NuncConnectionEntityPaginated"
        } ]
      },
      "NullableNuncConnectionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NuncConnectionEntity"
        } ]
      },
      "NullableNuncConditionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NuncConditionEntity"
        } ]
      },
      "NullableNuncComponentEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NuncComponentEntity"
        } ]
      },
      "NullableNuncComponentGroupEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NuncComponentGroupEntity"
        } ]
      },
      "NullableMediaImageEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/MediaImageEntity"
        } ]
      },
      "NullableNuncEmailSubscribersEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NuncEmailSubscribersEntity"
        } ]
      },
      "Nullableupdate_nunc_link" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_nunc_link"
        } ]
      },
      "NullableSavedSearchEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SavedSearchEntity"
        } ]
      },
      "Nullableupdate_saved_search" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_saved_search"
        } ]
      },
      "Nullablecreate_saved_search" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_saved_search"
        } ]
      },
      "NullableLifecycles_PhaseEntityList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Lifecycles_PhaseEntityList"
        } ]
      },
      "NullableLifecycles_PhaseEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Lifecycles_PhaseEntity"
        } ]
      },
      "NullableLifecycles_MilestoneEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Lifecycles_MilestoneEntity"
        } ]
      },
      "Nullablecreate_priority" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_priority"
        } ]
      },
      "NullablePriorityEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PriorityEntity"
        } ]
      },
      "Nullableupdate_priority" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_priority"
        } ]
      },
      "Nullablecreate_severity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_severity"
        } ]
      },
      "NullableSeverityEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SeverityEntity"
        } ]
      },
      "NullableSeverityEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SeverityEntityPaginated"
        } ]
      },
      "Nullableupdate_severity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_severity"
        } ]
      },
      "Nullableupdate_severity_matrix" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_severity_matrix"
        } ]
      },
      "NullableSeverityMatrix_SeverityMatrixEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SeverityMatrix_SeverityMatrixEntity"
        } ]
      },
      "NullableSeverityMatrix_ItemEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SeverityMatrix_ItemEntity"
        } ]
      },
      "Nullablecreate_severity_matrix_condition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_severity_matrix_condition"
        } ]
      },
      "Nullableupdate_severity_matrix_condition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_severity_matrix_condition"
        } ]
      },
      "Nullablecreate_severity_matrix_impact" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_severity_matrix_impact"
        } ]
      },
      "Nullableupdate_severity_matrix_impact" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_severity_matrix_impact"
        } ]
      },
      "Nullablecreate_scheduled_maintenance" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_scheduled_maintenance"
        } ]
      },
      "NullableScheduledMaintenanceEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ScheduledMaintenanceEntity"
        } ]
      },
      "NullableScheduledMaintenancesStatusPageEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ScheduledMaintenancesStatusPageEntity"
        } ]
      },
      "NullableScheduledMaintenancesImpactEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ScheduledMaintenancesImpactEntity"
        } ]
      },
      "Nullableupdate_scheduled_maintenance" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_scheduled_maintenance"
        } ]
      },
      "NullableScheduleEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ScheduleEntityPaginated"
        } ]
      },
      "NullableInfrastructureSearchEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/InfrastructureSearchEntity"
        } ]
      },
      "NullableNunc_NuncSubscription" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Nunc_NuncSubscription"
        } ]
      },
      "Nullablecreate_nunc_subscription" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_nunc_subscription"
        } ]
      },
      "Nullablecreate_status_update_template" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_status_update_template"
        } ]
      },
      "NullableStatusUpdateTemplateEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/StatusUpdateTemplateEntity"
        } ]
      },
      "Nullableupdate_status_update_template" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_status_update_template"
        } ]
      },
      "NullableOrganizations_CustomFieldDefinitionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Organizations_CustomFieldDefinitionEntity"
        } ]
      },
      "Nullableupdate_custom_field_definition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_custom_field_definition"
        } ]
      },
      "Nullablecreate_custom_field_definition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_custom_field_definition"
        } ]
      },
      "Nullablecreate_post_mortem_report" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_post_mortem_report"
        } ]
      },
      "NullablePostMortems_PostMortemReportEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PostMortems_PostMortemReportEntity"
        } ]
      },
      "NullablePostMortems_QuestionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PostMortems_QuestionEntity"
        } ]
      },
      "NullableCalendars_EventEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Calendars_EventEntity"
        } ]
      },
      "NullablePostMortems_PostMortemReportEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PostMortems_PostMortemReportEntityPaginated"
        } ]
      },
      "Nullableupdate_post_mortem_report" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_post_mortem_report"
        } ]
      },
      "Nullablecreate_post_mortem_reason" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_post_mortem_reason"
        } ]
      },
      "NullablePostMortems_ReasonEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PostMortems_ReasonEntity"
        } ]
      },
      "NullablePostMortems_ReasonEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PostMortems_ReasonEntityPaginated"
        } ]
      },
      "Nullableupdate_post_mortem_reason" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_post_mortem_reason"
        } ]
      },
      "Nullablereorder_post_mortem_reasons" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/reorder_post_mortem_reasons"
        } ]
      },
      "Nullablepublish_post_mortem_report" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/publish_post_mortem_report"
        } ]
      },
      "Nullableupdate_post_mortem_field" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_post_mortem_field"
        } ]
      },
      "NullablePostMortems_SectionFieldEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PostMortems_SectionFieldEntity"
        } ]
      },
      "Nullableupdate_post_mortem_questions" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_post_mortem_questions"
        } ]
      },
      "NullablePostMortems_QuestionTypeEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PostMortems_QuestionTypeEntity"
        } ]
      },
      "NullablePostMortems_QuestionTypeEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PostMortems_QuestionTypeEntityPaginated"
        } ]
      },
      "NullableRetrospectives_TemplateEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Retrospectives_TemplateEntity"
        } ]
      },
      "NullableRetrospectives_TemplateEntity_IncidentSectionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Retrospectives_TemplateEntity_IncidentSectionEntity"
        } ]
      },
      "NullableRetrospectives_FieldEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Retrospectives_FieldEntity"
        } ]
      },
      "NullableRetrospectives_IndexTemplateEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Retrospectives_IndexTemplateEntityPaginated"
        } ]
      },
      "NullableRetrospectives_IndexTemplateEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Retrospectives_IndexTemplateEntity"
        } ]
      },
      "NullableAlerts_AlertEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Alerts_AlertEntityPaginated"
        } ]
      },
      "NullableAlerts_ProcessingLogEntryEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Alerts_ProcessingLogEntryEntityPaginated"
        } ]
      },
      "NullableAlerts_ProcessingLogEntryEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Alerts_ProcessingLogEntryEntity"
        } ]
      },
      "Nullablecreate_ticket" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_ticket"
        } ]
      },
      "Nullableupdate_ticket" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_ticket"
        } ]
      },
      "NullableTicketing_Projects_ProjectListItemEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Ticketing_Projects_ProjectListItemEntity"
        } ]
      },
      "NullableTicketing_ProjectConfigEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Ticketing_ProjectConfigEntity"
        } ]
      },
      "NullableTicketing_ProjectFieldMapEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Ticketing_ProjectFieldMapEntity"
        } ]
      },
      "NullableTicketing_ProjectFieldMapBodyEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Ticketing_ProjectFieldMapBodyEntity"
        } ]
      },
      "NullableTicketing_ProjectFieldMapExternalValueEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Ticketing_ProjectFieldMapExternalValueEntity"
        } ]
      },
      "NullableTicketing_ProjectFieldMapCasesEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Ticketing_ProjectFieldMapCasesEntity"
        } ]
      },
      "NullableTicketing_ProjectFieldMapCasesElseEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Ticketing_ProjectFieldMapCasesElseEntity"
        } ]
      },
      "NullableTicketing_FieldMaps_MappableFieldEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Ticketing_FieldMaps_MappableFieldEntity"
        } ]
      },
      "NullableTicketing_ProjectInboundMappableFieldEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Ticketing_ProjectInboundMappableFieldEntity"
        } ]
      },
      "NullableTicketing_ProjectInboundFieldMapEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Ticketing_ProjectInboundFieldMapEntity"
        } ]
      },
      "Nullablecreate_ticketing_priority" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_ticketing_priority"
        } ]
      },
      "Nullableupdate_ticketing_priority" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_ticketing_priority"
        } ]
      },
      "Nullablecreate_task_list" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_task_list"
        } ]
      },
      "NullableTaskListEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/TaskListEntity"
        } ]
      },
      "NullableTaskListItemEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/TaskListItemEntity"
        } ]
      },
      "Nullableupdate_task_list" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_task_list"
        } ]
      },
      "Nullableupdate_scim_group" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_scim_group"
        } ]
      },
      "Nullablecreate_scim_group" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_scim_group"
        } ]
      },
      "Nullablepatch_scim_user" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/patch_scim_user"
        } ]
      },
      "Nullableupdate_scim_user" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_scim_user"
        } ]
      },
      "Nullablecreate_scim_user" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_scim_user"
        } ]
      },
      "Nullableingest_catalog_data" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ingest_catalog_data"
        } ]
      },
      "NullableImports_ImportEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Imports_ImportEntity"
        } ]
      },
      "Nullablecreate_checklist_template" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_checklist_template"
        } ]
      },
      "NullableChecklistTemplateEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ChecklistTemplateEntityPaginated"
        } ]
      },
      "Nullableupdate_checklist_template" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_checklist_template"
        } ]
      },
      "NullablePublicAPI_V1_BootstrapEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PublicAPI_V1_BootstrapEntity"
        } ]
      },
      "NullablePublicAPI_V1_FormConfigurations_SelectedValueEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PublicAPI_V1_FormConfigurations_SelectedValueEntity"
        } ]
      },
      "NullableFormConfigurationEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/FormConfigurationEntity"
        } ]
      },
      "Nullablecreate_comment_reaction" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_comment_reaction"
        } ]
      },
      "Nullableupdate_comment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_comment"
        } ]
      },
      "Nullablecreate_comment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_comment"
        } ]
      },
      "Nullableupdate_signals_alert" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_signals_alert"
        } ]
      },
      "NullableAlerts_SignalAlertEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Alerts_SignalAlertEntity"
        } ]
      },
      "NullableSignals_API_Analytics_TimeseriesPointEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_Analytics_TimeseriesPointEntity"
        } ]
      },
      "NullableSignals_API_Analytics_TimeseriesPointEntity_MetricEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_Analytics_TimeseriesPointEntity_MetricEntity"
        } ]
      },
      "NullableSignals_API_Analytics_GroupedMetricsEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_Analytics_GroupedMetricsEntity"
        } ]
      },
      "NullableSignals_API_Analytics_GroupedMetricsEntity_MetricEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_Analytics_GroupedMetricsEntity_MetricEntity"
        } ]
      },
      "NullableSignals_API_Analytics_MttxMetricsEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_Analytics_MttxMetricsEntity"
        } ]
      },
      "NullableSignals_API_Analytics_MttxMetricsEntity_MetricEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_Analytics_MttxMetricsEntity_MetricEntity"
        } ]
      },
      "NullableSignals_API_Analytics_NoiseMetricsEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_Analytics_NoiseMetricsEntity"
        } ]
      },
      "NullableSignals_API_Analytics_NoiseMetricsEntity_MetricEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_Analytics_NoiseMetricsEntity_MetricEntity"
        } ]
      },
      "Nullableupdate_call_route" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_call_route"
        } ]
      },
      "Nullablecreate_signals_event_source" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_signals_event_source"
        } ]
      },
      "NullableSignals_API_TransposerEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_TransposerEntity"
        } ]
      },
      "NullableSignals_API_TransposerListEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_TransposerListEntity"
        } ]
      },
      "NullableSignals_API_HackerModeEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_HackerModeEntity"
        } ]
      },
      "Nullablecreate_signals_alert_grouping_configuration" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_signals_alert_grouping_configuration"
        } ]
      },
      "NullableSignals_API_GroupingEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_GroupingEntity"
        } ]
      },
      "NullableSignals_API_GroupingEntity_StrategyEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_GroupingEntity_StrategyEntity"
        } ]
      },
      "NullableSignals_API_GroupingEntity_StrategyEntity_SubstringEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_GroupingEntity_StrategyEntity_SubstringEntity"
        } ]
      },
      "NullableSignals_API_GroupingEntity_ActionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_GroupingEntity_ActionEntity"
        } ]
      },
      "NullableSignals_API_GroupingEntity_ActionEntity_FyiEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_GroupingEntity_ActionEntity_FyiEntity"
        } ]
      },
      "NullableSignals_API_GroupingEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_GroupingEntityPaginated"
        } ]
      },
      "Nullableupdate_signals_alert_grouping_configuration" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_signals_alert_grouping_configuration"
        } ]
      },
      "Nullablecreate_signals_email_target" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_signals_email_target"
        } ]
      },
      "NullableSignals_API_EmailTargetEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_EmailTargetEntity"
        } ]
      },
      "NullableSignals_API_EmailTargetEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_EmailTargetEntityPaginated"
        } ]
      },
      "Nullableupdate_signals_email_target" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_signals_email_target"
        } ]
      },
      "Nullablecreate_signals_webhook_target" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_signals_webhook_target"
        } ]
      },
      "NullableSignals_API_WebhookTargetEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_WebhookTargetEntity"
        } ]
      },
      "NullableSignals_API_WebhookTargetEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_WebhookTargetEntityPaginated"
        } ]
      },
      "Nullableupdate_signals_webhook_target" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_signals_webhook_target"
        } ]
      },
      "NullableSignals_API_NotificationPolicyItemEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_NotificationPolicyItemEntity"
        } ]
      },
      "NullableSignals_API_NotificationPolicyItemEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_NotificationPolicyItemEntityPaginated"
        } ]
      },
      "NullableSignals_API_IngestKeyEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_IngestKeyEntity"
        } ]
      },
      "Nullabledebug_signals_expression" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/debug_signals_expression"
        } ]
      },
      "NullableSignals_API_OrganizationOnCallScheduleEntityPaginated" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_OrganizationOnCallScheduleEntityPaginated"
        } ]
      },
      "NullableSignals_API_OrganizationOnCallScheduleEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_OrganizationOnCallScheduleEntity"
        } ]
      },
      "NullableSignals_API_OrganizationOnCallRotationEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Signals_API_OrganizationOnCallRotationEntity"
        } ]
      },
      "Nullablecreate_webhook" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/create_webhook"
        } ]
      },
      "NullableWebhooks_Entities_WebhookEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Webhooks_Entities_WebhookEntity"
        } ]
      },
      "Nullableupdate_webhook" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/update_webhook"
        } ]
      },
      "NullableAI_Entities_IncidentSummaryEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/AI_Entities_IncidentSummaryEntity"
        } ]
      },
      "NullableAI_Entities_PreferencesEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/AI_Entities_PreferencesEntity"
        } ]
      },
      "NullableAudiences_Entities_AudienceEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Audiences_Entities_AudienceEntity"
        } ]
      },
      "NullableAudiences_Entities_DetailEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Audiences_Entities_DetailEntity"
        } ]
      },
      "NullableAudiences_Entities_AudienceSummariesEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Audiences_Entities_AudienceSummariesEntity"
        } ]
      }
    },
    "securitySchemes" : {
      "api_key" : {
        "type" : "apiKey",
        "name" : "Authorization",
        "in" : "header"
      }
    }
  },
  "x-original-swagger-version" : "2.0"
}
