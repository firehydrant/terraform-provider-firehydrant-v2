// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *IncidentEventDataSourceModel) RefreshFromSharedIncidentEvent(ctx context.Context, resp *shared.IncidentEvent) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Author == nil {
			r.Author = nil
		} else {
			r.Author = &tfTypes.NullableAuthor{}
			r.Author.Email = types.StringPointerValue(resp.Author.Email)
			r.Author.ID = types.StringPointerValue(resp.Author.ID)
			r.Author.Name = types.StringPointerValue(resp.Author.Name)
			r.Author.Source = types.StringPointerValue(resp.Author.Source)
		}
		r.Context = types.StringPointerValue(resp.Context)
		if resp.Conversations != nil {
			r.Conversations = []tfTypes.ConversationsAPIReference{}
			if len(r.Conversations) > len(resp.Conversations) {
				r.Conversations = r.Conversations[:len(resp.Conversations)]
			}
			for conversationsCount, conversationsItem := range resp.Conversations {
				var conversations tfTypes.ConversationsAPIReference
				if conversationsItem.Channel == nil {
					conversations.Channel = nil
				} else {
					conversations.Channel = &tfTypes.NullableConversationsAPIChannel{}
					conversations.Channel.Name = types.StringPointerValue(conversationsItem.Channel.Name)
				}
				conversations.CommentsURL = types.StringPointerValue(conversationsItem.CommentsURL)
				conversations.Field = types.StringPointerValue(conversationsItem.Field)
				conversations.ID = types.StringPointerValue(conversationsItem.ID)
				conversations.ResourceClass = types.StringPointerValue(conversationsItem.ResourceClass)
				conversations.ResourceID = types.StringPointerValue(conversationsItem.ResourceID)
				if conversationsCount+1 > len(r.Conversations) {
					r.Conversations = append(r.Conversations, conversations)
				} else {
					r.Conversations[conversationsCount].Channel = conversations.Channel
					r.Conversations[conversationsCount].CommentsURL = conversations.CommentsURL
					r.Conversations[conversationsCount].Field = conversations.Field
					r.Conversations[conversationsCount].ID = conversations.ID
					r.Conversations[conversationsCount].ResourceClass = conversations.ResourceClass
					r.Conversations[conversationsCount].ResourceID = conversations.ResourceID
				}
			}
		}
		if resp.Data == nil {
			r.Data = nil
		} else {
			r.Data = &tfTypes.IncidentEventData{}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.IncidentID = types.StringPointerValue(resp.IncidentID)
		r.OccurredAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.OccurredAt))
		r.Type = types.StringPointerValue(resp.Type)
		r.Visibility = types.StringPointerValue(resp.Visibility)
		if resp.Votes == nil {
			r.Votes = nil
		} else {
			r.Votes = &tfTypes.NullableVotes{}
			r.Votes.Disliked = types.BoolPointerValue(resp.Votes.Disliked)
			r.Votes.Dislikes = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Votes.Dislikes))
			r.Votes.Liked = types.BoolPointerValue(resp.Votes.Liked)
			r.Votes.Likes = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Votes.Likes))
			r.Votes.Voted = types.BoolPointerValue(resp.Votes.Voted)
		}
	}

	return diags
}

func (r *IncidentEventDataSourceModel) ToOperationsGetIncidentEventRequest(ctx context.Context) (*operations.GetIncidentEventRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var incidentID string
	incidentID = r.IncidentID.ValueString()

	var eventID string
	eventID = r.EventID.ValueString()

	out := operations.GetIncidentEventRequest{
		IncidentID: incidentID,
		EventID:    eventID,
	}

	return &out, diags
}
