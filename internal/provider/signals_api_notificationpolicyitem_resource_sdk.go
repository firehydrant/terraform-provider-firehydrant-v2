// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SignalsAPINotificationPolicyItemResourceModel) RefreshFromSharedSignalsAPINotificationPolicyItem(ctx context.Context, resp *shared.SignalsAPINotificationPolicyItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.ID = types.StringPointerValue(resp.ID)
		r.MaxDelay = types.StringPointerValue(resp.MaxDelay)
		r.NotificationGroupMethod = types.StringPointerValue(resp.NotificationGroupMethod)
		r.Priority = types.StringPointerValue(resp.Priority)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *SignalsAPINotificationPolicyItemResourceModel) ToOperationsDeleteNotificationPolicyRequest(ctx context.Context) (*operations.DeleteNotificationPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteNotificationPolicyRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SignalsAPINotificationPolicyItemResourceModel) ToOperationsGetNotificationPolicyRequest(ctx context.Context) (*operations.GetNotificationPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetNotificationPolicyRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SignalsAPINotificationPolicyItemResourceModel) ToOperationsUpdateNotificationPolicyRequest(ctx context.Context) (*operations.UpdateNotificationPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	updateNotificationPolicy, updateNotificationPolicyDiags := r.ToSharedUpdateNotificationPolicy(ctx)
	diags.Append(updateNotificationPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateNotificationPolicyRequest{
		ID:                       id,
		UpdateNotificationPolicy: updateNotificationPolicy,
	}

	return &out, diags
}

func (r *SignalsAPINotificationPolicyItemResourceModel) ToSharedCreateHandoffNotificationSetting(ctx context.Context) (*shared.CreateHandoffNotificationSetting, diag.Diagnostics) {
	var diags diag.Diagnostics

	var maxDelay string
	maxDelay = r.MaxDelay.ValueString()

	var notificationGroupMethod string
	notificationGroupMethod = r.NotificationGroupMethod.ValueString()

	var priority string
	priority = r.Priority.ValueString()

	out := shared.CreateHandoffNotificationSetting{
		MaxDelay:                maxDelay,
		NotificationGroupMethod: notificationGroupMethod,
		Priority:                priority,
	}

	return &out, diags
}

func (r *SignalsAPINotificationPolicyItemResourceModel) ToSharedUpdateNotificationPolicy(ctx context.Context) (*shared.UpdateNotificationPolicy, diag.Diagnostics) {
	var diags diag.Diagnostics

	maxDelay := new(string)
	if !r.MaxDelay.IsUnknown() && !r.MaxDelay.IsNull() {
		*maxDelay = r.MaxDelay.ValueString()
	} else {
		maxDelay = nil
	}
	notificationGroupMethod := new(string)
	if !r.NotificationGroupMethod.IsUnknown() && !r.NotificationGroupMethod.IsNull() {
		*notificationGroupMethod = r.NotificationGroupMethod.ValueString()
	} else {
		notificationGroupMethod = nil
	}
	priority := new(string)
	if !r.Priority.IsUnknown() && !r.Priority.IsNull() {
		*priority = r.Priority.ValueString()
	} else {
		priority = nil
	}
	out := shared.UpdateNotificationPolicy{
		MaxDelay:                maxDelay,
		NotificationGroupMethod: notificationGroupMethod,
		Priority:                priority,
	}

	return &out, diags
}
