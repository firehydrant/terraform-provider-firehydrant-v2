// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *IntegrationsDataSourceModel) RefreshFromSharedIntegrations(ctx context.Context, resp *shared.Integrations) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Connections != nil {
			r.Connections = []tfTypes.IntegrationsConnection{}
			if len(r.Connections) > len(resp.Connections) {
				r.Connections = r.Connections[:len(resp.Connections)]
			}
			for connectionsCount, connectionsItem := range resp.Connections {
				var connections tfTypes.IntegrationsConnection
				connections.AuthorizedBy = types.StringPointerValue(connectionsItem.AuthorizedBy)
				connections.AuthorizedByID = types.StringPointerValue(connectionsItem.AuthorizedByID)
				connections.ConfigurationURL = types.StringPointerValue(connectionsItem.ConfigurationURL)
				connections.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectionsItem.CreatedAt))
				if connectionsItem.DefaultAuthorizedActor == nil {
					connections.DefaultAuthorizedActor = nil
				} else {
					connections.DefaultAuthorizedActor = &tfTypes.NullableAuthor{}
					connections.DefaultAuthorizedActor.Email = types.StringPointerValue(connectionsItem.DefaultAuthorizedActor.Email)
					connections.DefaultAuthorizedActor.ID = types.StringPointerValue(connectionsItem.DefaultAuthorizedActor.ID)
					connections.DefaultAuthorizedActor.Name = types.StringPointerValue(connectionsItem.DefaultAuthorizedActor.Name)
					connections.DefaultAuthorizedActor.Source = types.StringPointerValue(connectionsItem.DefaultAuthorizedActor.Source)
				}
				if connectionsItem.Details == nil {
					connections.Details = nil
				} else {
					connections.Details = &tfTypes.IntegrationsConnectionDetails{}
				}
				connections.DisplayName = types.StringPointerValue(connectionsItem.DisplayName)
				connections.ID = types.StringPointerValue(connectionsItem.ID)
				connections.IntegrationID = types.StringPointerValue(connectionsItem.IntegrationID)
				connections.IntegrationSlug = types.StringPointerValue(connectionsItem.IntegrationSlug)
				connections.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectionsItem.UpdatedAt))
				if connectionsCount+1 > len(r.Connections) {
					r.Connections = append(r.Connections, connections)
				} else {
					r.Connections[connectionsCount].AuthorizedBy = connections.AuthorizedBy
					r.Connections[connectionsCount].AuthorizedByID = connections.AuthorizedByID
					r.Connections[connectionsCount].ConfigurationURL = connections.ConfigurationURL
					r.Connections[connectionsCount].CreatedAt = connections.CreatedAt
					r.Connections[connectionsCount].DefaultAuthorizedActor = connections.DefaultAuthorizedActor
					r.Connections[connectionsCount].Details = connections.Details
					r.Connections[connectionsCount].DisplayName = connections.DisplayName
					r.Connections[connectionsCount].ID = connections.ID
					r.Connections[connectionsCount].IntegrationID = connections.IntegrationID
					r.Connections[connectionsCount].IntegrationSlug = connections.IntegrationSlug
					r.Connections[connectionsCount].UpdatedAt = connections.UpdatedAt
				}
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.Deprecated = types.BoolPointerValue(resp.Deprecated)
		r.Description = types.StringPointerValue(resp.Description)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.Installed = types.BoolPointerValue(resp.Installed)
		if resp.Logo == nil {
			r.Logo = nil
		} else {
			r.Logo = &tfTypes.NullableIntegrationsIntegrationLogo{}
			r.Logo.LogoURL = types.StringPointerValue(resp.Logo.LogoURL)
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.NatIP = types.StringPointerValue(resp.NatIP)
		r.SetupURL = types.StringPointerValue(resp.SetupURL)
		r.Slug = types.StringPointerValue(resp.Slug)
	}

	return diags
}

func (r *IntegrationsDataSourceModel) ToOperationsGetIntegrationRequest(ctx context.Context) (*operations.GetIntegrationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var integrationID string
	integrationID = r.IntegrationID.ValueString()

	out := operations.GetIntegrationRequest{
		IntegrationID: integrationID,
	}

	return &out, diags
}
