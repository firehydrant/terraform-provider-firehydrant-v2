// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	speakeasy_stringplanmodifier "github.com/firehydrant/terraform-provider-firehydrant/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &RunbookResource{}
var _ resource.ResourceWithImportState = &RunbookResource{}

func NewRunbookResource() resource.Resource {
	return &RunbookResource{}
}

// RunbookResource defines the resource implementation.
type RunbookResource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// RunbookResourceModel describes the resource data model.
type RunbookResourceModel struct {
	AttachmentRule                  *tfTypes.NullableRules                    `tfsdk:"attachment_rule"`
	AttachmentRuleInput             *tfTypes.CreateRunbookAttachmentRuleInput `tfsdk:"attachment_rule_input"`
	AutoAttachToRestrictedIncidents types.Bool                                `tfsdk:"auto_attach_to_restricted_incidents"`
	Categories                      []types.String                            `tfsdk:"categories"`
	CreatedAt                       types.String                              `tfsdk:"created_at"`
	CreatedBy                       *tfTypes.NullableAuthor                   `tfsdk:"created_by"`
	Description                     types.String                              `tfsdk:"description"`
	ID                              types.String                              `tfsdk:"id"`
	IsEditable                      types.Bool                                `tfsdk:"is_editable"`
	Name                            types.String                              `tfsdk:"name"`
	Owner                           *tfTypes.NullableTeamLite                 `tfsdk:"owner"`
	OwnerInput                      *tfTypes.CreateRunbookOwnerInput          `tfsdk:"owner_input"`
	RunbookTemplateID               types.String                              `tfsdk:"runbook_template_id"`
	Steps                           []tfTypes.RunbookStep                     `tfsdk:"steps"`
	StepsInput                      []tfTypes.CreateRunbookStepsInput         `tfsdk:"steps_input"`
	Summary                         types.String                              `tfsdk:"summary"`
	Tutorial                        types.Bool                                `tfsdk:"tutorial"`
	Type                            types.String                              `tfsdk:"type"`
	UpdatedAt                       types.String                              `tfsdk:"updated_at"`
	UpdatedBy                       *tfTypes.NullableAuthor                   `tfsdk:"updated_by"`
	Votes                           *tfTypes.NullableVotes                    `tfsdk:"votes"`
}

func (r *RunbookResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_runbook"
}

func (r *RunbookResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Runbook Resource",
		Attributes: map[string]schema.Attribute{
			"attachment_rule": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"logic": schema.StringAttribute{
						Computed:    true,
						Description: `JSON stringified object of key/value pairs describing the logic for applying the rule.`,
					},
					"user_data": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"label": schema.StringAttribute{
								Computed: true,
							},
							"type": schema.StringAttribute{
								Computed: true,
							},
							"value": schema.StringAttribute{
								Computed: true,
							},
						},
					},
				},
			},
			"attachment_rule_input": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"logic": schema.StringAttribute{
						Required:    true,
						Description: `The JSON logic for the attaching the runbook`,
					},
					"user_data": schema.StringAttribute{
						Optional:    true,
						Description: `The user data for the rule`,
					},
				},
			},
			"auto_attach_to_restricted_incidents": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Whether or not this runbook should be automatically attached to restricted incidents. Note that setting this to ` + "`" + `true` + "`" + ` will prevent it from being attached to public incidents, even manually. Defaults to ` + "`" + `false` + "`" + `.`,
			},
			"categories": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `categories the runbook applies to`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"created_by": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"email": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"source": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A longer description about the Runbook. Supports markdown format`,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"is_editable": schema.BoolAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"owner": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"created_by": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"source": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"in_support_hours": schema.BoolAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"signals_ical_url": schema.StringAttribute{
						Computed: true,
					},
					"slug": schema.StringAttribute{
						Computed: true,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
				},
			},
			"owner_input": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required: true,
					},
				},
				Description: `An object representing a Team that owns the runbook`,
			},
			"runbook_template_id": schema.StringAttribute{
				Computed: true,
			},
			"steps": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"action": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"automatable": schema.BoolAttribute{
									Computed: true,
								},
								"category": schema.StringAttribute{
									Computed: true,
								},
								"config": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"documentation_url": schema.StringAttribute{
											Computed:    true,
											Description: `Location of documentation for this action`,
										},
										"elements": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"dynamic_select": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"async_url": schema.StringAttribute{
																Computed: true,
															},
															"clearable": schema.BoolAttribute{
																Computed: true,
															},
															"default_value": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"label": schema.StringAttribute{
																		Computed: true,
																	},
																	"value": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
															"is_multi": schema.BoolAttribute{
																Computed: true,
															},
															"label": schema.StringAttribute{
																Computed: true,
															},
															"options": schema.ListNestedAttribute{
																Computed: true,
																NestedObject: schema.NestedAttributeObject{
																	Attributes: map[string]schema.Attribute{
																		"label": schema.StringAttribute{
																			Computed: true,
																		},
																		"value": schema.StringAttribute{
																			Computed: true,
																		},
																	},
																},
															},
															"placeholder": schema.StringAttribute{
																Computed: true,
															},
															"required": schema.BoolAttribute{
																Computed: true,
															},
														},
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"input": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_value": schema.StringAttribute{
																Computed: true,
															},
															"label": schema.StringAttribute{
																Computed: true,
															},
															"placeholder": schema.StringAttribute{
																Computed: true,
															},
															"required": schema.BoolAttribute{
																Computed: true,
															},
														},
													},
													"markdown": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"text": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"plain_text": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"text": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"textarea": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_value": schema.StringAttribute{
																Computed: true,
															},
															"label": schema.StringAttribute{
																Computed: true,
															},
															"placeholder": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"type": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											Description: `A list of elements that can be used in this action configuration`,
										},
									},
								},
								"created_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"default_logic": schema.MapAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_rule_data": schema.SingleNestedAttribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"integration": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"connections": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"authorized_by": schema.StringAttribute{
														Computed: true,
													},
													"authorized_by_id": schema.StringAttribute{
														Computed: true,
													},
													"configuration_url": schema.StringAttribute{
														Computed: true,
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"default_authorized_actor": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"email": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"source": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"details": schema.SingleNestedAttribute{
														Computed:    true,
														Description: `Integration-specific details of this connection. As identified by the integration_slug, this object will be represented by that integration's Connection.`,
													},
													"display_name": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"integration_id": schema.StringAttribute{
														Computed: true,
													},
													"integration_slug": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
												},
											},
										},
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"deprecated": schema.BoolAttribute{
											Computed: true,
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"enabled": schema.BoolAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"installed": schema.BoolAttribute{
											Computed: true,
										},
										"logo": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"logo_url": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"nat_ip": schema.StringAttribute{
											Computed: true,
										},
										"setup_url": schema.StringAttribute{
											Computed: true,
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
									},
									Description: `Integrations model`,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"prerequisites": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{},
									},
								},
								"repeatable": schema.BoolAttribute{
									Computed: true,
								},
								"rerunnable": schema.BoolAttribute{
									Computed: true,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"supported_runbook_types": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
						},
						"action_id": schema.StringAttribute{
							Computed: true,
						},
						"automatic": schema.BoolAttribute{
							Computed: true,
						},
						"config": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `An unstructured object of key/value pairs describing the config settings for the step.`,
						},
						"delay_duration": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"repeats": schema.BoolAttribute{
							Computed: true,
						},
						"repeats_duration": schema.StringAttribute{
							Computed: true,
						},
						"reruns": schema.BoolAttribute{
							Computed: true,
						},
						"rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"logic": schema.StringAttribute{
									Computed:    true,
									Description: `JSON stringified object of key/value pairs describing the logic for applying the rule.`,
								},
								"user_data": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"label": schema.StringAttribute{
											Computed: true,
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
										"value": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
						"step_id": schema.StringAttribute{
							Computed: true,
						},
						"votes": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"disliked": schema.BoolAttribute{
									Computed:    true,
									Description: `Whether or not the current actor has voted negatively`,
								},
								"dislikes": schema.Int32Attribute{
									Computed: true,
								},
								"liked": schema.BoolAttribute{
									Computed:    true,
									Description: `Whether or not the current actor has voted positively`,
								},
								"likes": schema.Int32Attribute{
									Computed: true,
								},
								"voted": schema.BoolAttribute{
									Computed:    true,
									Description: `Whether or not the current actor has voted`,
								},
							},
							Description: `Votes model`,
						},
					},
				},
			},
			"steps_input": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"action_id": schema.StringAttribute{
							Required:    true,
							Description: `ID of action to use for this step.`,
						},
						"name": schema.StringAttribute{
							Required:    true,
							Description: `Name for step`,
						},
						"rule": schema.SingleNestedAttribute{
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"logic": schema.StringAttribute{
									Required:    true,
									Description: `The JSON logic for the rule`,
								},
								"user_data": schema.StringAttribute{
									Optional:    true,
									Description: `The user data for the rule`,
								},
							},
						},
					},
				},
			},
			"summary": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Deprecated. Use description`,
			},
			"tutorial": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Whether or not this runbook is a tutorial runbook`,
			},
			"type": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Deprecated, but still required. Please just use 'incident'. Requires replacement if changed.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"updated_by": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"email": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"source": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"votes": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"disliked": schema.BoolAttribute{
						Computed:    true,
						Description: `Whether or not the current actor has voted negatively`,
					},
					"dislikes": schema.Int32Attribute{
						Computed: true,
					},
					"liked": schema.BoolAttribute{
						Computed:    true,
						Description: `Whether or not the current actor has voted positively`,
					},
					"likes": schema.Int32Attribute{
						Computed: true,
					},
					"voted": schema.BoolAttribute{
						Computed:    true,
						Description: `Whether or not the current actor has voted`,
					},
				},
				Description: `Votes model`,
			},
		},
	}
}

func (r *RunbookResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RunbookResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *RunbookResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedCreateRunbook(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Runbooks.CreateRunbook(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetRunbookRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Runbooks.GetRunbook(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RunbookResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *RunbookResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetRunbookRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Runbooks.GetRunbook(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RunbookResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *RunbookResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateRunbookRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Runbooks.UpdateRunbook(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetRunbookRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Runbooks.GetRunbook(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RunbookResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *RunbookResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteRunbookRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Runbooks.DeleteRunbook(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *RunbookResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
