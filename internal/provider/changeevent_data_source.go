// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ChangeEventDataSource{}
var _ datasource.DataSourceWithConfigure = &ChangeEventDataSource{}

func NewChangeEventDataSource() datasource.DataSource {
	return &ChangeEventDataSource{}
}

// ChangeEventDataSource is the data source implementation.
type ChangeEventDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// ChangeEventDataSourceModel describes the data model.
type ChangeEventDataSourceModel struct {
	Attachments     []tfTypes.ChangeEventAttachment `tfsdk:"attachments"`
	Authors         []tfTypes.Author                `tfsdk:"authors"`
	Description     types.String                    `tfsdk:"description"`
	DurationIso8601 types.String                    `tfsdk:"duration_iso8601"`
	DurationMs      types.Int32                     `tfsdk:"duration_ms"`
	EndsAt          types.String                    `tfsdk:"ends_at"`
	Environments    []tfTypes.EnvironmentEntry      `tfsdk:"environments"`
	ExternalID      types.String                    `tfsdk:"external_id"`
	ID              types.String                    `tfsdk:"id"`
	Identities      []tfTypes.ChangeIdentity        `tfsdk:"identities"`
	Labels          map[string]types.String         `tfsdk:"labels"`
	RelatedChanges  []tfTypes.Change                `tfsdk:"related_changes"`
	Services        []tfTypes.ServiceLite           `tfsdk:"services"`
	StartsAt        types.String                    `tfsdk:"starts_at"`
	Summary         types.String                    `tfsdk:"summary"`
	UpdatedAt       types.String                    `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *ChangeEventDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_change_event"
}

// Schema defines the schema for the data source.
func (r *ChangeEventDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "ChangeEvent DataSource",

		Attributes: map[string]schema.Attribute{
			"attachments": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
				},
				Description: `A list of objects attached to this item. Can be one of: Link, CustomerSupportIssue, or GenericAttachment`,
			},
			"authors": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"email": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"source": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"duration_iso8601": schema.StringAttribute{
				Computed: true,
			},
			"duration_ms": schema.Int32Attribute{
				Computed: true,
			},
			"ends_at": schema.StringAttribute{
				Computed: true,
			},
			"environments": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"active_incidents": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `List of active incident guids`,
						},
						"created_at": schema.StringAttribute{
							Computed:    true,
							Description: `The time the environment was created`,
						},
						"description": schema.StringAttribute{
							Computed:    true,
							Description: `Description of the Environment`,
						},
						"external_resources": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"connection_full_favicon_url": schema.StringAttribute{
										Computed: true,
									},
									"connection_id": schema.StringAttribute{
										Computed: true,
									},
									"connection_name": schema.StringAttribute{
										Computed: true,
									},
									"connection_type": schema.StringAttribute{
										Computed: true,
									},
									"created_at": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"remote_id": schema.StringAttribute{
										Computed: true,
									},
									"remote_url": schema.StringAttribute{
										Computed: true,
									},
									"updated_at": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							Description: `Information about known linkages to representations of services outside of FireHydrant.`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `UUID of the Environment`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Name of the Environment`,
						},
						"slug": schema.StringAttribute{
							Computed:    true,
							Description: `Slug of the Environment`,
						},
						"updated_at": schema.StringAttribute{
							Computed:    true,
							Description: `The time the environment was updated`,
						},
					},
				},
			},
			"external_id": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"identities": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"change_id": schema.StringAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"type": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
						},
						"value": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"labels": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `An object of label key and values`,
			},
			"related_changes": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.StringAttribute{
							Computed:    true,
							Description: `The time the change entry was created`,
						},
						"description": schema.StringAttribute{
							Computed:    true,
							Description: `Description of the Change`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `UUID of the Change`,
						},
						"labels": schema.MapAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `Arbitrary key/value pairs of labels.`,
						},
						"summary": schema.StringAttribute{
							Computed:    true,
							Description: `Description of the Change`,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"services": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"alert_on_add": schema.BoolAttribute{
							Computed: true,
						},
						"allowed_params": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"auto_add_responding_team": schema.BoolAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"labels": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `An object of label key and values`,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"service_tier": schema.Int32Attribute{
							Computed: true,
						},
						"slug": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"starts_at": schema.StringAttribute{
				Computed: true,
			},
			"summary": schema.StringAttribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *ChangeEventDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ChangeEventDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ChangeEventDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetChangeEventRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Changes.GetChangeEvent(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ChangeEvent != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedChangeEvent(ctx, res.ChangeEvent)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
