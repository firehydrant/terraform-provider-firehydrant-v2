// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *FunctionalityDataSourceModel) RefreshFromSharedFunctionality(ctx context.Context, resp *shared.Functionality) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.ActiveIncidents != nil {
			r.ActiveIncidents = make([]types.String, 0, len(resp.ActiveIncidents))
			for _, v := range resp.ActiveIncidents {
				r.ActiveIncidents = append(r.ActiveIncidents, types.StringValue(v))
			}
		}
		r.AlertOnAdd = types.BoolPointerValue(resp.AlertOnAdd)
		r.AutoAddRespondingTeam = types.BoolPointerValue(resp.AutoAddRespondingTeam)
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		if resp.ExternalResources != nil {
			r.ExternalResources = []tfTypes.ExternalResource{}

			for _, externalResourcesItem := range resp.ExternalResources {
				var externalResources tfTypes.ExternalResource

				externalResources.ConnectionFullFaviconURL = types.StringPointerValue(externalResourcesItem.ConnectionFullFaviconURL)
				externalResources.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
				externalResources.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
				externalResources.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
				externalResources.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem.CreatedAt))
				externalResources.Name = types.StringPointerValue(externalResourcesItem.Name)
				externalResources.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
				externalResources.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
				externalResources.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem.UpdatedAt))

				r.ExternalResources = append(r.ExternalResources, externalResources)
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Labels != nil {
			r.Labels = make(map[string]jsontypes.Normalized, len(resp.Labels))
			for key, value := range resp.Labels {
				result, _ := json.Marshal(value)
				r.Labels[key] = jsontypes.NewNormalizedValue(string(result))
			}
		}
		if resp.Links != nil {
			r.Links = []tfTypes.Links{}

			for _, linksItem := range resp.Links {
				var links tfTypes.Links

				links.HrefURL = types.StringPointerValue(linksItem.HrefURL)
				links.IconURL = types.StringPointerValue(linksItem.IconURL)
				links.ID = types.StringPointerValue(linksItem.ID)
				links.Name = types.StringPointerValue(linksItem.Name)

				r.Links = append(r.Links, links)
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Owner == nil {
			r.Owner = nil
		} else {
			r.Owner = &tfTypes.NullableTeamLite{}
			r.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Owner.CreatedAt))
			if resp.Owner.CreatedBy == nil {
				r.Owner.CreatedBy = nil
			} else {
				r.Owner.CreatedBy = &tfTypes.NullableAuthor{}
				r.Owner.CreatedBy.Email = types.StringPointerValue(resp.Owner.CreatedBy.Email)
				r.Owner.CreatedBy.ID = types.StringPointerValue(resp.Owner.CreatedBy.ID)
				r.Owner.CreatedBy.Name = types.StringPointerValue(resp.Owner.CreatedBy.Name)
				r.Owner.CreatedBy.Source = types.StringPointerValue(resp.Owner.CreatedBy.Source)
			}
			r.Owner.Description = types.StringPointerValue(resp.Owner.Description)
			r.Owner.ID = types.StringPointerValue(resp.Owner.ID)
			r.Owner.InSupportHours = types.BoolPointerValue(resp.Owner.InSupportHours)
			r.Owner.Name = types.StringPointerValue(resp.Owner.Name)
			r.Owner.RestrictSignalsResourceManagement = types.BoolPointerValue(resp.Owner.RestrictSignalsResourceManagement)
			r.Owner.SignalsIcalURL = types.StringPointerValue(resp.Owner.SignalsIcalURL)
			r.Owner.Slug = types.StringPointerValue(resp.Owner.Slug)
			r.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Owner.UpdatedAt))
		}
		if resp.Services != nil {
			r.Services = []tfTypes.ServiceLite{}

			for _, servicesItem := range resp.Services {
				var services tfTypes.ServiceLite

				services.AlertOnAdd = types.BoolPointerValue(servicesItem.AlertOnAdd)
				if servicesItem.AllowedParams != nil {
					services.AllowedParams = make([]types.String, 0, len(servicesItem.AllowedParams))
					for _, v := range servicesItem.AllowedParams {
						services.AllowedParams = append(services.AllowedParams, types.StringValue(v))
					}
				}
				services.AutoAddRespondingTeam = types.BoolPointerValue(servicesItem.AutoAddRespondingTeam)
				services.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem.CreatedAt))
				services.Description = types.StringPointerValue(servicesItem.Description)
				services.ID = types.StringPointerValue(servicesItem.ID)
				if servicesItem.Labels == nil {
					services.Labels = nil
				} else {
					services.Labels = &tfTypes.ServiceLiteLabels{}
				}
				services.Name = types.StringPointerValue(servicesItem.Name)
				services.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(servicesItem.ServiceTier))
				services.Slug = types.StringPointerValue(servicesItem.Slug)
				services.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem.UpdatedAt))

				r.Services = append(r.Services, services)
			}
		}
		r.Slug = types.StringPointerValue(resp.Slug)
		if resp.Teams != nil {
			r.Teams = []tfTypes.TeamLite{}

			for _, teamsItem := range resp.Teams {
				var teams tfTypes.TeamLite

				teams.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.CreatedAt))
				if teamsItem.CreatedBy == nil {
					teams.CreatedBy = nil
				} else {
					teams.CreatedBy = &tfTypes.NullableAuthor{}
					teams.CreatedBy.Email = types.StringPointerValue(teamsItem.CreatedBy.Email)
					teams.CreatedBy.ID = types.StringPointerValue(teamsItem.CreatedBy.ID)
					teams.CreatedBy.Name = types.StringPointerValue(teamsItem.CreatedBy.Name)
					teams.CreatedBy.Source = types.StringPointerValue(teamsItem.CreatedBy.Source)
				}
				teams.Description = types.StringPointerValue(teamsItem.Description)
				teams.ID = types.StringPointerValue(teamsItem.ID)
				teams.InSupportHours = types.BoolPointerValue(teamsItem.InSupportHours)
				teams.Name = types.StringPointerValue(teamsItem.Name)
				teams.RestrictSignalsResourceManagement = types.BoolPointerValue(teamsItem.RestrictSignalsResourceManagement)
				teams.SignalsIcalURL = types.StringPointerValue(teamsItem.SignalsIcalURL)
				teams.Slug = types.StringPointerValue(teamsItem.Slug)
				teams.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.UpdatedAt))

				r.Teams = append(r.Teams, teams)
			}
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		if resp.UpdatedBy == nil {
			r.UpdatedBy = nil
		} else {
			r.UpdatedBy = &tfTypes.NullableAuthor{}
			r.UpdatedBy.Email = types.StringPointerValue(resp.UpdatedBy.Email)
			r.UpdatedBy.ID = types.StringPointerValue(resp.UpdatedBy.ID)
			r.UpdatedBy.Name = types.StringPointerValue(resp.UpdatedBy.Name)
			r.UpdatedBy.Source = types.StringPointerValue(resp.UpdatedBy.Source)
		}
	}

	return diags
}

func (r *FunctionalityDataSourceModel) ToOperationsGetFunctionalityRequest(ctx context.Context) (*operations.GetFunctionalityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var functionalityID string
	functionalityID = r.ID.ValueString()

	out := operations.GetFunctionalityRequest{
		FunctionalityID: functionalityID,
	}

	return &out, diags
}
