// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *TicketingProjectFieldMapDataSourceModel) RefreshFromSharedTicketingProjectFieldMap(ctx context.Context, resp *shared.TicketingProjectFieldMap) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Body != nil {
			r.Body = []tfTypes.TicketingProjectFieldMapBody{}
			if len(r.Body) > len(resp.Body) {
				r.Body = r.Body[:len(resp.Body)]
			}
			for bodyCount, bodyItem := range resp.Body {
				var body tfTypes.TicketingProjectFieldMapBody
				if bodyItem.Cases != nil {
					body.Cases = []tfTypes.TicketingProjectFieldMapCases{}
					for casesCount, casesItem := range bodyItem.Cases {
						var cases tfTypes.TicketingProjectFieldMapCases
						if casesItem.ExternalValue == nil {
							cases.ExternalValue = nil
						} else {
							cases.ExternalValue = &tfTypes.NullableTicketingProjectFieldMapExternalValue{}
							cases.ExternalValue.Attribute = types.StringPointerValue(casesItem.ExternalValue.Attribute)
							cases.ExternalValue.Presentation = types.StringPointerValue(casesItem.ExternalValue.Presentation)
							cases.ExternalValue.Type = types.StringPointerValue(casesItem.ExternalValue.Type)
							cases.ExternalValue.Value = types.StringPointerValue(casesItem.ExternalValue.Value)
						}
						if casesItem.Logic != nil {
							cases.Logic = make(map[string]types.String, len(casesItem.Logic))
							for key, value := range casesItem.Logic {
								result, _ := json.Marshal(value)
								cases.Logic[key] = types.StringValue(string(result))
							}
						}
						if casesCount+1 > len(body.Cases) {
							body.Cases = append(body.Cases, cases)
						} else {
							body.Cases[casesCount].ExternalValue = cases.ExternalValue
							body.Cases[casesCount].Logic = cases.Logic
						}
					}
				}
				if bodyItem.Else == nil {
					body.Else = nil
				} else {
					body.Else = &tfTypes.NullableTicketingProjectFieldMapCasesElse{}
					if bodyItem.Else.ExternalValue == nil {
						body.Else.ExternalValue = nil
					} else {
						body.Else.ExternalValue = &tfTypes.NullableTicketingProjectFieldMapExternalValue{}
						body.Else.ExternalValue.Attribute = types.StringPointerValue(bodyItem.Else.ExternalValue.Attribute)
						body.Else.ExternalValue.Presentation = types.StringPointerValue(bodyItem.Else.ExternalValue.Presentation)
						body.Else.ExternalValue.Type = types.StringPointerValue(bodyItem.Else.ExternalValue.Type)
						body.Else.ExternalValue.Value = types.StringPointerValue(bodyItem.Else.ExternalValue.Value)
					}
				}
				body.ExternalField = types.StringPointerValue(bodyItem.ExternalField)
				if bodyItem.ExternalValue == nil {
					body.ExternalValue = nil
				} else {
					body.ExternalValue = &tfTypes.NullableTicketingProjectFieldMapExternalValue{}
					body.ExternalValue.Attribute = types.StringPointerValue(bodyItem.ExternalValue.Attribute)
					body.ExternalValue.Presentation = types.StringPointerValue(bodyItem.ExternalValue.Presentation)
					body.ExternalValue.Type = types.StringPointerValue(bodyItem.ExternalValue.Type)
					body.ExternalValue.Value = types.StringPointerValue(bodyItem.ExternalValue.Value)
				}
				body.Strategy = types.StringPointerValue(bodyItem.Strategy)
				if bodyItem.UserData != nil {
					body.UserData = make(map[string]types.String, len(bodyItem.UserData))
					for key1, value1 := range bodyItem.UserData {
						result1, _ := json.Marshal(value1)
						body.UserData[key1] = types.StringValue(string(result1))
					}
				}
				if bodyCount+1 > len(r.Body) {
					r.Body = append(r.Body, body)
				} else {
					r.Body[bodyCount].Cases = body.Cases
					r.Body[bodyCount].Else = body.Else
					r.Body[bodyCount].ExternalField = body.ExternalField
					r.Body[bodyCount].ExternalValue = body.ExternalValue
					r.Body[bodyCount].Strategy = body.Strategy
					r.Body[bodyCount].UserData = body.UserData
				}
			}
		}
		r.ConnectionID = types.StringPointerValue(resp.ConnectionID)
		r.ConnectionType = types.StringPointerValue(resp.ConnectionType)
		r.ID = types.StringPointerValue(resp.ID)
		r.TicketingProjectID = types.StringPointerValue(resp.TicketingProjectID)
	}

	return diags
}

func (r *TicketingProjectFieldMapDataSourceModel) ToOperationsGetTicketingFieldMapRequest(ctx context.Context) (*operations.GetTicketingFieldMapRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mapID string
	mapID = r.MapID.ValueString()

	var ticketingProjectID string
	ticketingProjectID = r.TicketingProjectID.ValueString()

	out := operations.GetTicketingFieldMapRequest{
		MapID:              mapID,
		TicketingProjectID: ticketingProjectID,
	}

	return &out, diags
}
