// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SignalsAPIOnCallShiftDataSource{}
var _ datasource.DataSourceWithConfigure = &SignalsAPIOnCallShiftDataSource{}

func NewSignalsAPIOnCallShiftDataSource() datasource.DataSource {
	return &SignalsAPIOnCallShiftDataSource{}
}

// SignalsAPIOnCallShiftDataSource is the data source implementation.
type SignalsAPIOnCallShiftDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// SignalsAPIOnCallShiftDataSourceModel describes the data model.
type SignalsAPIOnCallShiftDataSourceModel struct {
	Color           types.String              `tfsdk:"color"`
	CoverageRequest types.String              `tfsdk:"coverage_request"`
	EndTime         types.String              `tfsdk:"end_time"`
	ID              types.String              `tfsdk:"id"`
	OnCallRotation  *tfTypes.NullableSuccinct `tfsdk:"on_call_rotation"`
	OnCallSchedule  *tfTypes.NullableSuccinct `tfsdk:"on_call_schedule"`
	ScheduleID      types.String              `tfsdk:"schedule_id"`
	StartTime       types.String              `tfsdk:"start_time"`
	Team            *tfTypes.NullableSuccinct `tfsdk:"team"`
	TeamID          types.String              `tfsdk:"team_id"`
	TimeZone        types.String              `tfsdk:"time_zone"`
	User            *tfTypes.NullableSuccinct `tfsdk:"user"`
}

// Metadata returns the data source type name.
func (r *SignalsAPIOnCallShiftDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_signals_api_on_call_shift"
}

// Schema defines the schema for the data source.
func (r *SignalsAPIOnCallShiftDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SignalsAPIOnCallShift DataSource",

		Attributes: map[string]schema.Attribute{
			"color": schema.StringAttribute{
				Computed: true,
			},
			"coverage_request": schema.StringAttribute{
				Computed: true,
			},
			"end_time": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Required: true,
			},
			"on_call_rotation": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"on_call_schedule": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"schedule_id": schema.StringAttribute{
				Required: true,
			},
			"start_time": schema.StringAttribute{
				Computed: true,
			},
			"team": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"team_id": schema.StringAttribute{
				Required: true,
			},
			"time_zone": schema.StringAttribute{
				Computed: true,
			},
			"user": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
		},
	}
}

func (r *SignalsAPIOnCallShiftDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SignalsAPIOnCallShiftDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SignalsAPIOnCallShiftDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetOnCallShiftRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Signals.GetOnCallShift(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SignalsAPIOnCallShift != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSignalsAPIOnCallShift(ctx, res.SignalsAPIOnCallShift)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
