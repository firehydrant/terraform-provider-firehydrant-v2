// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *IncidentEntityResourceModel) ToSharedCreateIncident(ctx context.Context) (*shared.CreateIncident, diag.Diagnostics) {
	var diags diag.Diagnostics

	var alertIds []string
	if r.AlertIds != nil {
		alertIds = make([]string, 0, len(r.AlertIds))
		for _, alertIdsItem := range r.AlertIds {
			alertIds = append(alertIds, alertIdsItem.ValueString())
		}
	}
	var customFieldsInput []shared.CustomFieldsInput
	if r.CustomFieldsInput != nil {
		customFieldsInput = make([]shared.CustomFieldsInput, 0, len(r.CustomFieldsInput))
		for _, customFieldsInputItem := range r.CustomFieldsInput {
			var fieldID string
			fieldID = customFieldsInputItem.FieldID.ValueString()

			var valueArray []string
			if customFieldsInputItem.ValueArray != nil {
				valueArray = make([]string, 0, len(customFieldsInputItem.ValueArray))
				for _, valueArrayItem := range customFieldsInputItem.ValueArray {
					valueArray = append(valueArray, valueArrayItem.ValueString())
				}
			}
			valueString := new(string)
			if !customFieldsInputItem.ValueString.IsUnknown() && !customFieldsInputItem.ValueString.IsNull() {
				*valueString = customFieldsInputItem.ValueString.ValueString()
			} else {
				valueString = nil
			}
			customFieldsInput = append(customFieldsInput, shared.CustomFieldsInput{
				FieldID:     fieldID,
				ValueArray:  valueArray,
				ValueString: valueString,
			})
		}
	}
	customerImpactSummary := new(string)
	if !r.CustomerImpactSummary.IsUnknown() && !r.CustomerImpactSummary.IsNull() {
		*customerImpactSummary = r.CustomerImpactSummary.ValueString()
	} else {
		customerImpactSummary = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	externalLinks := new(string)
	if !r.ExternalLinks.IsUnknown() && !r.ExternalLinks.IsNull() {
		*externalLinks = r.ExternalLinks.ValueString()
	} else {
		externalLinks = nil
	}
	var impactsInput []shared.CreateIncidentImpactsInput
	if r.ImpactsInput != nil {
		impactsInput = make([]shared.CreateIncidentImpactsInput, 0, len(r.ImpactsInput))
		for _, impactsInputItem := range r.ImpactsInput {
			var conditionID string
			conditionID = impactsInputItem.ConditionID.ValueString()

			var id string
			id = impactsInputItem.ID.ValueString()

			var typeVar string
			typeVar = impactsInputItem.Type.ValueString()

			impactsInput = append(impactsInput, shared.CreateIncidentImpactsInput{
				ConditionID: conditionID,
				ID:          id,
				Type:        typeVar,
			})
		}
	}
	incidentTypeID := new(string)
	if !r.IncidentTypeID.IsUnknown() && !r.IncidentTypeID.IsNull() {
		*incidentTypeID = r.IncidentTypeID.ValueString()
	} else {
		incidentTypeID = nil
	}
	var labels *shared.CreateIncidentLabels
	if r.Labels != nil {
		labels = &shared.CreateIncidentLabels{}
	}
	var milestonesInput []shared.MilestonesInput
	if r.MilestonesInput != nil {
		milestonesInput = make([]shared.MilestonesInput, 0, len(r.MilestonesInput))
		for _, milestonesInputItem := range r.MilestonesInput {
			occurredAt, _ := time.Parse(time.RFC3339Nano, milestonesInputItem.OccurredAt.ValueString())
			var type1 string
			type1 = milestonesInputItem.Type.ValueString()

			milestonesInput = append(milestonesInput, shared.MilestonesInput{
				OccurredAt: occurredAt,
				Type:       type1,
			})
		}
	}
	var name string
	name = r.Name.ValueString()

	priority := new(string)
	if !r.Priority.IsUnknown() && !r.Priority.IsNull() {
		*priority = r.Priority.ValueString()
	} else {
		priority = nil
	}
	restricted := new(bool)
	if !r.Restricted.IsUnknown() && !r.Restricted.IsNull() {
		*restricted = r.Restricted.ValueBool()
	} else {
		restricted = nil
	}
	var runbookIds []string
	if r.RunbookIds != nil {
		runbookIds = make([]string, 0, len(r.RunbookIds))
		for _, runbookIdsItem := range r.RunbookIds {
			runbookIds = append(runbookIds, runbookIdsItem.ValueString())
		}
	}
	severity := new(string)
	if !r.Severity.IsUnknown() && !r.Severity.IsNull() {
		*severity = r.Severity.ValueString()
	} else {
		severity = nil
	}
	severityConditionID := new(string)
	if !r.SeverityConditionID.IsUnknown() && !r.SeverityConditionID.IsNull() {
		*severityConditionID = r.SeverityConditionID.ValueString()
	} else {
		severityConditionID = nil
	}
	severityImpactID := new(string)
	if !r.SeverityImpactID.IsUnknown() && !r.SeverityImpactID.IsNull() {
		*severityImpactID = r.SeverityImpactID.ValueString()
	} else {
		severityImpactID = nil
	}
	skipIncidentTypeValues := new(bool)
	if !r.SkipIncidentTypeValues.IsUnknown() && !r.SkipIncidentTypeValues.IsNull() {
		*skipIncidentTypeValues = r.SkipIncidentTypeValues.ValueBool()
	} else {
		skipIncidentTypeValues = nil
	}
	summary := new(string)
	if !r.Summary.IsUnknown() && !r.Summary.IsNull() {
		*summary = r.Summary.ValueString()
	} else {
		summary = nil
	}
	var tagList []string
	if r.TagList != nil {
		tagList = make([]string, 0, len(r.TagList))
		for _, tagListItem := range r.TagList {
			tagList = append(tagList, tagListItem.ValueString())
		}
	}
	var teamIds []string
	if r.TeamIds != nil {
		teamIds = make([]string, 0, len(r.TeamIds))
		for _, teamIdsItem := range r.TeamIds {
			teamIds = append(teamIds, teamIdsItem.ValueString())
		}
	}
	out := shared.CreateIncident{
		AlertIds:               alertIds,
		CustomFieldsInput:      customFieldsInput,
		CustomerImpactSummary:  customerImpactSummary,
		Description:            description,
		ExternalLinks:          externalLinks,
		ImpactsInput:           impactsInput,
		IncidentTypeID:         incidentTypeID,
		Labels:                 labels,
		MilestonesInput:        milestonesInput,
		Name:                   name,
		Priority:               priority,
		Restricted:             restricted,
		RunbookIds:             runbookIds,
		Severity:               severity,
		SeverityConditionID:    severityConditionID,
		SeverityImpactID:       severityImpactID,
		SkipIncidentTypeValues: skipIncidentTypeValues,
		Summary:                summary,
		TagList:                tagList,
		TeamIds:                teamIds,
	}

	return &out, diags
}

func (r *IncidentEntityResourceModel) ToOperationsGetIncidentRequest(ctx context.Context) (*operations.GetIncidentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var incidentID string
	incidentID = r.ID.ValueString()

	out := operations.GetIncidentRequest{
		IncidentID: incidentID,
	}

	return &out, diags
}

func (r *IncidentEntityResourceModel) ToOperationsCloseIncidentRequest(ctx context.Context) (*operations.CloseIncidentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var incidentID string
	incidentID = r.ID.ValueString()

	out := operations.CloseIncidentRequest{
		IncidentID: incidentID,
	}

	return &out, diags
}

func (r *IncidentEntityResourceModel) ToOperationsDeleteIncidentRequest(ctx context.Context) (*operations.DeleteIncidentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var incidentID string
	incidentID = r.ID.ValueString()

	out := operations.DeleteIncidentRequest{
		IncidentID: incidentID,
	}

	return &out, diags
}

func (r *IncidentEntityResourceModel) RefreshFromSharedIncidentEntity(ctx context.Context, resp *shared.IncidentEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Active = types.BoolPointerValue(resp.Active)
		r.AiIncidentSummary = types.StringPointerValue(resp.AiIncidentSummary)
		r.ChannelID = types.StringPointerValue(resp.ChannelID)
		r.ChannelName = types.StringPointerValue(resp.ChannelName)
		r.ChannelReference = types.StringPointerValue(resp.ChannelReference)
		r.ChannelStatus = types.StringPointerValue(resp.ChannelStatus)
		if resp.ConferenceBridges != nil {
			r.ConferenceBridges = []tfTypes.IncidentsConferenceBridgeEntity{}
			if len(r.ConferenceBridges) > len(resp.ConferenceBridges) {
				r.ConferenceBridges = r.ConferenceBridges[:len(resp.ConferenceBridges)]
			}
			for conferenceBridgesCount, conferenceBridgesItem := range resp.ConferenceBridges {
				var conferenceBridges tfTypes.IncidentsConferenceBridgeEntity
				if conferenceBridgesItem.Attachments != nil {
				}
				conferenceBridges.HasTranslatedTranscripts = types.BoolPointerValue(conferenceBridgesItem.HasTranslatedTranscripts)
				conferenceBridges.ID = types.StringPointerValue(conferenceBridgesItem.ID)
				if conferenceBridgesItem.LanguageCodes != nil {
					conferenceBridges.LanguageCodes = make([]types.String, 0, len(conferenceBridgesItem.LanguageCodes))
					for _, v := range conferenceBridgesItem.LanguageCodes {
						conferenceBridges.LanguageCodes = append(conferenceBridges.LanguageCodes, types.StringValue(v))
					}
				}
				conferenceBridges.PreviousHostAssignment = types.StringPointerValue(conferenceBridgesItem.PreviousHostAssignment)
				conferenceBridges.TranscriptionStatus = types.StringPointerValue(conferenceBridgesItem.TranscriptionStatus)
				conferenceBridges.TranscriptionSubCode = types.StringPointerValue(conferenceBridgesItem.TranscriptionSubCode)
				if conferenceBridgesCount+1 > len(r.ConferenceBridges) {
					r.ConferenceBridges = append(r.ConferenceBridges, conferenceBridges)
				} else {
					r.ConferenceBridges[conferenceBridgesCount].Attachments = conferenceBridges.Attachments
					r.ConferenceBridges[conferenceBridgesCount].HasTranslatedTranscripts = conferenceBridges.HasTranslatedTranscripts
					r.ConferenceBridges[conferenceBridgesCount].ID = conferenceBridges.ID
					r.ConferenceBridges[conferenceBridgesCount].LanguageCodes = conferenceBridges.LanguageCodes
					r.ConferenceBridges[conferenceBridgesCount].PreviousHostAssignment = conferenceBridges.PreviousHostAssignment
					r.ConferenceBridges[conferenceBridgesCount].TranscriptionStatus = conferenceBridges.TranscriptionStatus
					r.ConferenceBridges[conferenceBridgesCount].TranscriptionSubCode = conferenceBridges.TranscriptionSubCode
				}
			}
		}
		if resp.ContextObject == nil {
			r.ContextObject = nil
		} else {
			r.ContextObject = &tfTypes.NullableIncidentsContextObjectEntity{}
			r.ContextObject.ContextDescription = types.StringPointerValue(resp.ContextObject.ContextDescription)
			r.ContextObject.ContextTag = types.StringPointerValue(resp.ContextObject.ContextTag)
			r.ContextObject.ObjectID = types.StringPointerValue(resp.ContextObject.ObjectID)
			r.ContextObject.ObjectType = types.StringPointerValue(resp.ContextObject.ObjectType)
		}
		if resp.Conversations != nil {
			r.Conversations = []tfTypes.ConversationsAPIEntitiesReference{}
			if len(r.Conversations) > len(resp.Conversations) {
				r.Conversations = r.Conversations[:len(resp.Conversations)]
			}
			for conversationsCount, conversationsItem := range resp.Conversations {
				var conversations tfTypes.ConversationsAPIEntitiesReference
				if conversationsItem.Channel == nil {
					conversations.Channel = nil
				} else {
					conversations.Channel = &tfTypes.NullableConversationsAPIEntitiesChannel{}
					conversations.Channel.Name = types.StringPointerValue(conversationsItem.Channel.Name)
				}
				conversations.CommentsURL = types.StringPointerValue(conversationsItem.CommentsURL)
				conversations.Field = types.StringPointerValue(conversationsItem.Field)
				conversations.ID = types.StringPointerValue(conversationsItem.ID)
				conversations.ResourceClass = types.StringPointerValue(conversationsItem.ResourceClass)
				conversations.ResourceID = types.StringPointerValue(conversationsItem.ResourceID)
				if conversationsCount+1 > len(r.Conversations) {
					r.Conversations = append(r.Conversations, conversations)
				} else {
					r.Conversations[conversationsCount].Channel = conversations.Channel
					r.Conversations[conversationsCount].CommentsURL = conversations.CommentsURL
					r.Conversations[conversationsCount].Field = conversations.Field
					r.Conversations[conversationsCount].ID = conversations.ID
					r.Conversations[conversationsCount].ResourceClass = conversations.ResourceClass
					r.Conversations[conversationsCount].ResourceID = conversations.ResourceID
				}
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.CreatedBy == nil {
			r.CreatedBy = nil
		} else {
			r.CreatedBy = &tfTypes.NullableAuthorEntity{}
			r.CreatedBy.Email = types.StringPointerValue(resp.CreatedBy.Email)
			r.CreatedBy.ID = types.StringPointerValue(resp.CreatedBy.ID)
			r.CreatedBy.Name = types.StringPointerValue(resp.CreatedBy.Name)
			r.CreatedBy.Source = types.StringPointerValue(resp.CreatedBy.Source)
		}
		r.CurrentMilestone = types.StringPointerValue(resp.CurrentMilestone)
		if resp.CustomFields != nil {
			r.CustomFields = []tfTypes.CustomFieldsFieldValue{}
			if len(r.CustomFields) > len(resp.CustomFields) {
				r.CustomFields = r.CustomFields[:len(resp.CustomFields)]
			}
			for customFieldsCount, customFieldsItem := range resp.CustomFields {
				var customFields tfTypes.CustomFieldsFieldValue
				customFields.Description = types.StringPointerValue(customFieldsItem.Description)
				customFields.DisplayName = types.StringPointerValue(customFieldsItem.DisplayName)
				customFields.FieldID = types.StringPointerValue(customFieldsItem.FieldID)
				customFields.Name = types.StringPointerValue(customFieldsItem.Name)
				customFields.Slug = types.StringPointerValue(customFieldsItem.Slug)
				customFields.Value = types.StringPointerValue(customFieldsItem.Value)
				if customFieldsItem.ValueArray != nil {
					customFields.ValueArray = make([]types.String, 0, len(customFieldsItem.ValueArray))
					for _, v := range customFieldsItem.ValueArray {
						customFields.ValueArray = append(customFields.ValueArray, types.StringValue(v))
					}
				}
				customFields.ValueString = types.StringPointerValue(customFieldsItem.ValueString)
				customFields.ValueType = types.StringPointerValue(customFieldsItem.ValueType)
				if customFieldsCount+1 > len(r.CustomFields) {
					r.CustomFields = append(r.CustomFields, customFields)
				} else {
					r.CustomFields[customFieldsCount].Description = customFields.Description
					r.CustomFields[customFieldsCount].DisplayName = customFields.DisplayName
					r.CustomFields[customFieldsCount].FieldID = customFields.FieldID
					r.CustomFields[customFieldsCount].Name = customFields.Name
					r.CustomFields[customFieldsCount].Slug = customFields.Slug
					r.CustomFields[customFieldsCount].Value = customFields.Value
					r.CustomFields[customFieldsCount].ValueArray = customFields.ValueArray
					r.CustomFields[customFieldsCount].ValueString = customFields.ValueString
					r.CustomFields[customFieldsCount].ValueType = customFields.ValueType
				}
			}
		}
		r.CustomerImpactSummary = types.StringPointerValue(resp.CustomerImpactSummary)
		r.CustomersImpacted = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.CustomersImpacted))
		r.Description = types.StringPointerValue(resp.Description)
		r.DiscardedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DiscardedAt))
		if resp.Environments != nil {
			r.Environments = []tfTypes.SuccinctEntity{}
			if len(r.Environments) > len(resp.Environments) {
				r.Environments = r.Environments[:len(resp.Environments)]
			}
			for environmentsCount, environmentsItem := range resp.Environments {
				var environments tfTypes.SuccinctEntity
				environments.ID = types.StringPointerValue(environmentsItem.ID)
				environments.Name = types.StringPointerValue(environmentsItem.Name)
				if environmentsCount+1 > len(r.Environments) {
					r.Environments = append(r.Environments, environments)
				} else {
					r.Environments[environmentsCount].ID = environments.ID
					r.Environments[environmentsCount].Name = environments.Name
				}
			}
		}
		if resp.FieldRequirements != nil {
			r.FieldRequirements = []tfTypes.IncidentEntityFieldRequirementEntity{}
			if len(r.FieldRequirements) > len(resp.FieldRequirements) {
				r.FieldRequirements = r.FieldRequirements[:len(resp.FieldRequirements)]
			}
			for fieldRequirementsCount, fieldRequirementsItem := range resp.FieldRequirements {
				var fieldRequirements tfTypes.IncidentEntityFieldRequirementEntity
				fieldRequirements.FieldID = types.StringPointerValue(fieldRequirementsItem.FieldID)
				fieldRequirements.RequiredAtMilestoneID = types.StringPointerValue(fieldRequirementsItem.RequiredAtMilestoneID)
				if fieldRequirementsCount+1 > len(r.FieldRequirements) {
					r.FieldRequirements = append(r.FieldRequirements, fieldRequirements)
				} else {
					r.FieldRequirements[fieldRequirementsCount].FieldID = fieldRequirements.FieldID
					r.FieldRequirements[fieldRequirementsCount].RequiredAtMilestoneID = fieldRequirements.RequiredAtMilestoneID
				}
			}
		}
		if resp.Functionalities != nil {
			r.Functionalities = []tfTypes.SuccinctEntity{}
			if len(r.Functionalities) > len(resp.Functionalities) {
				r.Functionalities = r.Functionalities[:len(resp.Functionalities)]
			}
			for functionalitiesCount, functionalitiesItem := range resp.Functionalities {
				var functionalities tfTypes.SuccinctEntity
				functionalities.ID = types.StringPointerValue(functionalitiesItem.ID)
				functionalities.Name = types.StringPointerValue(functionalitiesItem.Name)
				if functionalitiesCount+1 > len(r.Functionalities) {
					r.Functionalities = append(r.Functionalities, functionalities)
				} else {
					r.Functionalities[functionalitiesCount].ID = functionalities.ID
					r.Functionalities[functionalitiesCount].Name = functionalities.Name
				}
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Impacts != nil {
			r.Impacts = []tfTypes.IncidentsImpactEntity{}
			if len(r.Impacts) > len(resp.Impacts) {
				r.Impacts = r.Impacts[:len(resp.Impacts)]
			}
			for impactsCount, impactsItem := range resp.Impacts {
				var impacts tfTypes.IncidentsImpactEntity
				if impactsItem.Condition == nil {
					impacts.Condition = nil
				} else {
					impacts.Condition = &tfTypes.NullableSeverityMatrixConditionEntity{}
					impacts.Condition.ID = types.StringPointerValue(impactsItem.Condition.ID)
					impacts.Condition.Name = types.StringPointerValue(impactsItem.Condition.Name)
					impacts.Condition.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(impactsItem.Condition.Position))
				}
				if impactsItem.Conversations != nil {
					impacts.Conversations = []tfTypes.ConversationsAPIEntitiesReference{}
					for conversationsCount1, conversationsItem1 := range impactsItem.Conversations {
						var conversations1 tfTypes.ConversationsAPIEntitiesReference
						if conversationsItem1.Channel == nil {
							conversations1.Channel = nil
						} else {
							conversations1.Channel = &tfTypes.NullableConversationsAPIEntitiesChannel{}
							conversations1.Channel.Name = types.StringPointerValue(conversationsItem1.Channel.Name)
						}
						conversations1.CommentsURL = types.StringPointerValue(conversationsItem1.CommentsURL)
						conversations1.Field = types.StringPointerValue(conversationsItem1.Field)
						conversations1.ID = types.StringPointerValue(conversationsItem1.ID)
						conversations1.ResourceClass = types.StringPointerValue(conversationsItem1.ResourceClass)
						conversations1.ResourceID = types.StringPointerValue(conversationsItem1.ResourceID)
						if conversationsCount1+1 > len(impacts.Conversations) {
							impacts.Conversations = append(impacts.Conversations, conversations1)
						} else {
							impacts.Conversations[conversationsCount1].Channel = conversations1.Channel
							impacts.Conversations[conversationsCount1].CommentsURL = conversations1.CommentsURL
							impacts.Conversations[conversationsCount1].Field = conversations1.Field
							impacts.Conversations[conversationsCount1].ID = conversations1.ID
							impacts.Conversations[conversationsCount1].ResourceClass = conversations1.ResourceClass
							impacts.Conversations[conversationsCount1].ResourceID = conversations1.ResourceID
						}
					}
				}
				impacts.ID = types.StringPointerValue(impactsItem.ID)
				if impactsItem.Impact == nil {
					impacts.Impact = nil
				} else {
					impacts.Impact = &tfTypes.NullableSuccinctEntity{}
					impacts.Impact.ID = types.StringPointerValue(impactsItem.Impact.ID)
					impacts.Impact.Name = types.StringPointerValue(impactsItem.Impact.Name)
				}
				impacts.Type = types.StringPointerValue(impactsItem.Type)
				if impactsCount+1 > len(r.Impacts) {
					r.Impacts = append(r.Impacts, impacts)
				} else {
					r.Impacts[impactsCount].Condition = impacts.Condition
					r.Impacts[impactsCount].Conversations = impacts.Conversations
					r.Impacts[impactsCount].ID = impacts.ID
					r.Impacts[impactsCount].Impact = impacts.Impact
					r.Impacts[impactsCount].Type = impacts.Type
				}
			}
		}
		if resp.IncidentChannels != nil {
			r.IncidentChannels = []tfTypes.IncidentsChannelEntity{}
			if len(r.IncidentChannels) > len(resp.IncidentChannels) {
				r.IncidentChannels = r.IncidentChannels[:len(resp.IncidentChannels)]
			}
			for incidentChannelsCount, incidentChannelsItem := range resp.IncidentChannels {
				var incidentChannels tfTypes.IncidentsChannelEntity
				incidentChannels.IconURL = types.StringPointerValue(incidentChannelsItem.IconURL)
				incidentChannels.ID = types.StringPointerValue(incidentChannelsItem.ID)
				incidentChannels.Name = types.StringPointerValue(incidentChannelsItem.Name)
				incidentChannels.Source = types.StringPointerValue(incidentChannelsItem.Source)
				incidentChannels.SourceID = types.StringPointerValue(incidentChannelsItem.SourceID)
				incidentChannels.SourceName = types.StringPointerValue(incidentChannelsItem.SourceName)
				incidentChannels.Status = types.StringPointerValue(incidentChannelsItem.Status)
				incidentChannels.URL = types.StringPointerValue(incidentChannelsItem.URL)
				if incidentChannelsCount+1 > len(r.IncidentChannels) {
					r.IncidentChannels = append(r.IncidentChannels, incidentChannels)
				} else {
					r.IncidentChannels[incidentChannelsCount].IconURL = incidentChannels.IconURL
					r.IncidentChannels[incidentChannelsCount].ID = incidentChannels.ID
					r.IncidentChannels[incidentChannelsCount].Name = incidentChannels.Name
					r.IncidentChannels[incidentChannelsCount].Source = incidentChannels.Source
					r.IncidentChannels[incidentChannelsCount].SourceID = incidentChannels.SourceID
					r.IncidentChannels[incidentChannelsCount].SourceName = incidentChannels.SourceName
					r.IncidentChannels[incidentChannelsCount].Status = incidentChannels.Status
					r.IncidentChannels[incidentChannelsCount].URL = incidentChannels.URL
				}
			}
		}
		if resp.IncidentTickets != nil {
			r.IncidentTickets = []tfTypes.TicketingTicketEntity{}
			if len(r.IncidentTickets) > len(resp.IncidentTickets) {
				r.IncidentTickets = r.IncidentTickets[:len(resp.IncidentTickets)]
			}
			for incidentTicketsCount, incidentTicketsItem := range resp.IncidentTickets {
				var incidentTickets tfTypes.TicketingTicketEntity
				if incidentTicketsItem.Assignees != nil {
					incidentTickets.Assignees = []tfTypes.AuthorEntity{}
					for assigneesCount, assigneesItem := range incidentTicketsItem.Assignees {
						var assignees tfTypes.AuthorEntity
						assignees.Email = types.StringPointerValue(assigneesItem.Email)
						assignees.ID = types.StringPointerValue(assigneesItem.ID)
						assignees.Name = types.StringPointerValue(assigneesItem.Name)
						assignees.Source = types.StringPointerValue(assigneesItem.Source)
						if assigneesCount+1 > len(incidentTickets.Assignees) {
							incidentTickets.Assignees = append(incidentTickets.Assignees, assignees)
						} else {
							incidentTickets.Assignees[assigneesCount].Email = assignees.Email
							incidentTickets.Assignees[assigneesCount].ID = assignees.ID
							incidentTickets.Assignees[assigneesCount].Name = assignees.Name
							incidentTickets.Assignees[assigneesCount].Source = assignees.Source
						}
					}
				}
				if incidentTicketsItem.Attachments != nil {
				}
				incidentTickets.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.CreatedAt))
				if incidentTicketsItem.CreatedBy == nil {
					incidentTickets.CreatedBy = nil
				} else {
					incidentTickets.CreatedBy = &tfTypes.NullableAuthorEntity{}
					incidentTickets.CreatedBy.Email = types.StringPointerValue(incidentTicketsItem.CreatedBy.Email)
					incidentTickets.CreatedBy.ID = types.StringPointerValue(incidentTicketsItem.CreatedBy.ID)
					incidentTickets.CreatedBy.Name = types.StringPointerValue(incidentTicketsItem.CreatedBy.Name)
					incidentTickets.CreatedBy.Source = types.StringPointerValue(incidentTicketsItem.CreatedBy.Source)
				}
				incidentTickets.Description = types.StringPointerValue(incidentTicketsItem.Description)
				incidentTickets.DueAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.DueAt))
				incidentTickets.ID = types.StringPointerValue(incidentTicketsItem.ID)
				incidentTickets.IncidentCurrentMilestone = types.StringPointerValue(incidentTicketsItem.IncidentCurrentMilestone)
				incidentTickets.IncidentID = types.StringPointerValue(incidentTicketsItem.IncidentID)
				incidentTickets.IncidentName = types.StringPointerValue(incidentTicketsItem.IncidentName)
				if incidentTicketsItem.Link == nil {
					incidentTickets.Link = nil
				} else {
					incidentTickets.Link = &tfTypes.NullableAttachmentsLinkEntity{}
					incidentTickets.Link.Deletable = types.BoolPointerValue(incidentTicketsItem.Link.Deletable)
					incidentTickets.Link.DisplayText = types.StringPointerValue(incidentTicketsItem.Link.DisplayText)
					incidentTickets.Link.Editable = types.BoolPointerValue(incidentTicketsItem.Link.Editable)
					incidentTickets.Link.HrefURL = types.StringPointerValue(incidentTicketsItem.Link.HrefURL)
					incidentTickets.Link.IconURL = types.StringPointerValue(incidentTicketsItem.Link.IconURL)
					incidentTickets.Link.ID = types.StringPointerValue(incidentTicketsItem.Link.ID)
					incidentTickets.Link.Type = types.StringPointerValue(incidentTicketsItem.Link.Type)
				}
				if incidentTicketsItem.Priority == nil {
					incidentTickets.Priority = nil
				} else {
					incidentTickets.Priority = &tfTypes.NullableTicketingPriorityEntity{}
					incidentTickets.Priority.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.Priority.CreatedAt))
					incidentTickets.Priority.ID = types.StringPointerValue(incidentTicketsItem.Priority.ID)
					incidentTickets.Priority.Name = types.StringPointerValue(incidentTicketsItem.Priority.Name)
					incidentTickets.Priority.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(incidentTicketsItem.Priority.Position))
					incidentTickets.Priority.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.Priority.UpdatedAt))
				}
				incidentTickets.State = types.StringPointerValue(incidentTicketsItem.State)
				incidentTickets.Summary = types.StringPointerValue(incidentTicketsItem.Summary)
				incidentTickets.SyncErrorMessage = types.StringPointerValue(incidentTicketsItem.SyncErrorMessage)
				if incidentTicketsItem.TagList != nil {
					incidentTickets.TagList = make([]types.String, 0, len(incidentTicketsItem.TagList))
					for _, v := range incidentTicketsItem.TagList {
						incidentTickets.TagList = append(incidentTickets.TagList, types.StringValue(v))
					}
				}
				incidentTickets.TaskID = types.StringPointerValue(incidentTicketsItem.TaskID)
				incidentTickets.Type = types.StringPointerValue(incidentTicketsItem.Type)
				incidentTickets.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.UpdatedAt))
				if incidentTicketsCount+1 > len(r.IncidentTickets) {
					r.IncidentTickets = append(r.IncidentTickets, incidentTickets)
				} else {
					r.IncidentTickets[incidentTicketsCount].Assignees = incidentTickets.Assignees
					r.IncidentTickets[incidentTicketsCount].Attachments = incidentTickets.Attachments
					r.IncidentTickets[incidentTicketsCount].CreatedAt = incidentTickets.CreatedAt
					r.IncidentTickets[incidentTicketsCount].CreatedBy = incidentTickets.CreatedBy
					r.IncidentTickets[incidentTicketsCount].Description = incidentTickets.Description
					r.IncidentTickets[incidentTicketsCount].DueAt = incidentTickets.DueAt
					r.IncidentTickets[incidentTicketsCount].ID = incidentTickets.ID
					r.IncidentTickets[incidentTicketsCount].IncidentCurrentMilestone = incidentTickets.IncidentCurrentMilestone
					r.IncidentTickets[incidentTicketsCount].IncidentID = incidentTickets.IncidentID
					r.IncidentTickets[incidentTicketsCount].IncidentName = incidentTickets.IncidentName
					r.IncidentTickets[incidentTicketsCount].Link = incidentTickets.Link
					r.IncidentTickets[incidentTicketsCount].Priority = incidentTickets.Priority
					r.IncidentTickets[incidentTicketsCount].State = incidentTickets.State
					r.IncidentTickets[incidentTicketsCount].Summary = incidentTickets.Summary
					r.IncidentTickets[incidentTicketsCount].SyncErrorMessage = incidentTickets.SyncErrorMessage
					r.IncidentTickets[incidentTicketsCount].TagList = incidentTickets.TagList
					r.IncidentTickets[incidentTicketsCount].TaskID = incidentTickets.TaskID
					r.IncidentTickets[incidentTicketsCount].Type = incidentTickets.Type
					r.IncidentTickets[incidentTicketsCount].UpdatedAt = incidentTickets.UpdatedAt
				}
			}
		}
		if resp.IncidentType == nil {
			r.IncidentType = nil
		} else {
			r.IncidentType = &tfTypes.NullableSuccinctEntity{}
			r.IncidentType.ID = types.StringPointerValue(resp.IncidentType.ID)
			r.IncidentType.Name = types.StringPointerValue(resp.IncidentType.Name)
		}
		r.IncidentURL = types.StringPointerValue(resp.IncidentURL)
		if resp.Labels == nil {
			r.Labels = nil
		} else {
			r.Labels = &tfTypes.CreateIncidentLabels{}
		}
		if resp.LastNote == nil {
			r.LastNote = nil
		} else {
			r.LastNote = &tfTypes.NullableEventNoteEntity{}
			r.LastNote.Body = types.StringPointerValue(resp.LastNote.Body)
			if resp.LastNote.Conversations != nil {
				r.LastNote.Conversations = []tfTypes.ConversationsAPIEntitiesReference{}
				if len(r.LastNote.Conversations) > len(resp.LastNote.Conversations) {
					r.LastNote.Conversations = r.LastNote.Conversations[:len(resp.LastNote.Conversations)]
				}
				for conversationsCount2, conversationsItem2 := range resp.LastNote.Conversations {
					var conversations2 tfTypes.ConversationsAPIEntitiesReference
					if conversationsItem2.Channel == nil {
						conversations2.Channel = nil
					} else {
						conversations2.Channel = &tfTypes.NullableConversationsAPIEntitiesChannel{}
						conversations2.Channel.Name = types.StringPointerValue(conversationsItem2.Channel.Name)
					}
					conversations2.CommentsURL = types.StringPointerValue(conversationsItem2.CommentsURL)
					conversations2.Field = types.StringPointerValue(conversationsItem2.Field)
					conversations2.ID = types.StringPointerValue(conversationsItem2.ID)
					conversations2.ResourceClass = types.StringPointerValue(conversationsItem2.ResourceClass)
					conversations2.ResourceID = types.StringPointerValue(conversationsItem2.ResourceID)
					if conversationsCount2+1 > len(r.LastNote.Conversations) {
						r.LastNote.Conversations = append(r.LastNote.Conversations, conversations2)
					} else {
						r.LastNote.Conversations[conversationsCount2].Channel = conversations2.Channel
						r.LastNote.Conversations[conversationsCount2].CommentsURL = conversations2.CommentsURL
						r.LastNote.Conversations[conversationsCount2].Field = conversations2.Field
						r.LastNote.Conversations[conversationsCount2].ID = conversations2.ID
						r.LastNote.Conversations[conversationsCount2].ResourceClass = conversations2.ResourceClass
						r.LastNote.Conversations[conversationsCount2].ResourceID = conversations2.ResourceID
					}
				}
			}
			r.LastNote.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastNote.CreatedAt))
			r.LastNote.ID = types.StringPointerValue(resp.LastNote.ID)
			if resp.LastNote.StatusPages != nil {
				r.LastNote.StatusPages = []tfTypes.IncidentsStatusPageEntity{}
				if len(r.LastNote.StatusPages) > len(resp.LastNote.StatusPages) {
					r.LastNote.StatusPages = r.LastNote.StatusPages[:len(resp.LastNote.StatusPages)]
				}
				for statusPagesCount, statusPagesItem := range resp.LastNote.StatusPages {
					var statusPages tfTypes.IncidentsStatusPageEntity
					statusPages.DisplayName = types.StringPointerValue(statusPagesItem.DisplayName)
					statusPages.ExternalID = types.StringPointerValue(statusPagesItem.ExternalID)
					statusPages.ID = types.StringPointerValue(statusPagesItem.ID)
					if statusPagesItem.Integration == nil {
						statusPages.Integration = nil
					} else {
						statusPages.Integration = &tfTypes.NullableIntegrationEntity{}
						statusPages.Integration.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(statusPagesItem.Integration.CreatedAt))
						statusPages.Integration.DisplayName = types.StringPointerValue(statusPagesItem.Integration.DisplayName)
						statusPages.Integration.ID = types.StringPointerValue(statusPagesItem.Integration.ID)
						statusPages.Integration.IntegrationName = types.StringPointerValue(statusPagesItem.Integration.IntegrationName)
						statusPages.Integration.IntegrationSlug = types.StringPointerValue(statusPagesItem.Integration.IntegrationSlug)
					}
					statusPages.Name = types.StringPointerValue(statusPagesItem.Name)
					statusPages.URL = types.StringPointerValue(statusPagesItem.URL)
					if statusPagesCount+1 > len(r.LastNote.StatusPages) {
						r.LastNote.StatusPages = append(r.LastNote.StatusPages, statusPages)
					} else {
						r.LastNote.StatusPages[statusPagesCount].DisplayName = statusPages.DisplayName
						r.LastNote.StatusPages[statusPagesCount].ExternalID = statusPages.ExternalID
						r.LastNote.StatusPages[statusPagesCount].ID = statusPages.ID
						r.LastNote.StatusPages[statusPagesCount].Integration = statusPages.Integration
						r.LastNote.StatusPages[statusPagesCount].Name = statusPages.Name
						r.LastNote.StatusPages[statusPagesCount].URL = statusPages.URL
					}
				}
			}
		}
		r.LastUpdate = types.StringPointerValue(resp.LastUpdate)
		if resp.LifecycleMeasurements != nil {
			r.LifecycleMeasurements = []tfTypes.IncidentsLifecycleMeasurementEntity{}
			if len(r.LifecycleMeasurements) > len(resp.LifecycleMeasurements) {
				r.LifecycleMeasurements = r.LifecycleMeasurements[:len(resp.LifecycleMeasurements)]
			}
			for lifecycleMeasurementsCount, lifecycleMeasurementsItem := range resp.LifecycleMeasurements {
				var lifecycleMeasurements tfTypes.IncidentsLifecycleMeasurementEntity
				lifecycleMeasurements.CalculatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(lifecycleMeasurementsItem.CalculatedAt))
				lifecycleMeasurements.Description = types.StringPointerValue(lifecycleMeasurementsItem.Description)
				lifecycleMeasurements.EndsAtMilestone = types.StringPointerValue(lifecycleMeasurementsItem.EndsAtMilestone)
				lifecycleMeasurements.ID = types.StringPointerValue(lifecycleMeasurementsItem.ID)
				lifecycleMeasurements.Name = types.StringPointerValue(lifecycleMeasurementsItem.Name)
				lifecycleMeasurements.Slug = types.StringPointerValue(lifecycleMeasurementsItem.Slug)
				lifecycleMeasurements.StartsAtMilestone = types.StringPointerValue(lifecycleMeasurementsItem.StartsAtMilestone)
				lifecycleMeasurements.Value = types.StringPointerValue(lifecycleMeasurementsItem.Value)
				if lifecycleMeasurementsCount+1 > len(r.LifecycleMeasurements) {
					r.LifecycleMeasurements = append(r.LifecycleMeasurements, lifecycleMeasurements)
				} else {
					r.LifecycleMeasurements[lifecycleMeasurementsCount].CalculatedAt = lifecycleMeasurements.CalculatedAt
					r.LifecycleMeasurements[lifecycleMeasurementsCount].Description = lifecycleMeasurements.Description
					r.LifecycleMeasurements[lifecycleMeasurementsCount].EndsAtMilestone = lifecycleMeasurements.EndsAtMilestone
					r.LifecycleMeasurements[lifecycleMeasurementsCount].ID = lifecycleMeasurements.ID
					r.LifecycleMeasurements[lifecycleMeasurementsCount].Name = lifecycleMeasurements.Name
					r.LifecycleMeasurements[lifecycleMeasurementsCount].Slug = lifecycleMeasurements.Slug
					r.LifecycleMeasurements[lifecycleMeasurementsCount].StartsAtMilestone = lifecycleMeasurements.StartsAtMilestone
					r.LifecycleMeasurements[lifecycleMeasurementsCount].Value = lifecycleMeasurements.Value
				}
			}
		}
		if resp.LifecyclePhases != nil {
			r.LifecyclePhases = []tfTypes.IncidentsLifecyclePhaseEntity{}
			if len(r.LifecyclePhases) > len(resp.LifecyclePhases) {
				r.LifecyclePhases = r.LifecyclePhases[:len(resp.LifecyclePhases)]
			}
			for lifecyclePhasesCount, lifecyclePhasesItem := range resp.LifecyclePhases {
				var lifecyclePhases tfTypes.IncidentsLifecyclePhaseEntity
				lifecyclePhases.Description = types.StringPointerValue(lifecyclePhasesItem.Description)
				lifecyclePhases.ID = types.StringPointerValue(lifecyclePhasesItem.ID)
				if lifecyclePhasesItem.Milestones != nil {
					lifecyclePhases.Milestones = []tfTypes.IncidentsLifecycleMilestoneEntity{}
					for milestonesCount, milestonesItem := range lifecyclePhasesItem.Milestones {
						var milestones tfTypes.IncidentsLifecycleMilestoneEntity
						milestones.Description = types.StringPointerValue(milestonesItem.Description)
						milestones.Duration = types.StringPointerValue(milestonesItem.Duration)
						milestones.ID = types.StringPointerValue(milestonesItem.ID)
						milestones.Name = types.StringPointerValue(milestonesItem.Name)
						milestones.OccurredAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem.OccurredAt))
						milestones.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(milestonesItem.Position))
						milestones.Slug = types.StringPointerValue(milestonesItem.Slug)
						milestones.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem.UpdatedAt))
						if milestonesItem.UpdatedBy == nil {
							milestones.UpdatedBy = nil
						} else {
							milestones.UpdatedBy = &tfTypes.NullableAuthorEntity{}
							milestones.UpdatedBy.Email = types.StringPointerValue(milestonesItem.UpdatedBy.Email)
							milestones.UpdatedBy.ID = types.StringPointerValue(milestonesItem.UpdatedBy.ID)
							milestones.UpdatedBy.Name = types.StringPointerValue(milestonesItem.UpdatedBy.Name)
							milestones.UpdatedBy.Source = types.StringPointerValue(milestonesItem.UpdatedBy.Source)
						}
						if milestonesCount+1 > len(lifecyclePhases.Milestones) {
							lifecyclePhases.Milestones = append(lifecyclePhases.Milestones, milestones)
						} else {
							lifecyclePhases.Milestones[milestonesCount].Description = milestones.Description
							lifecyclePhases.Milestones[milestonesCount].Duration = milestones.Duration
							lifecyclePhases.Milestones[milestonesCount].ID = milestones.ID
							lifecyclePhases.Milestones[milestonesCount].Name = milestones.Name
							lifecyclePhases.Milestones[milestonesCount].OccurredAt = milestones.OccurredAt
							lifecyclePhases.Milestones[milestonesCount].Position = milestones.Position
							lifecyclePhases.Milestones[milestonesCount].Slug = milestones.Slug
							lifecyclePhases.Milestones[milestonesCount].UpdatedAt = milestones.UpdatedAt
							lifecyclePhases.Milestones[milestonesCount].UpdatedBy = milestones.UpdatedBy
						}
					}
				}
				lifecyclePhases.Name = types.StringPointerValue(lifecyclePhasesItem.Name)
				lifecyclePhases.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(lifecyclePhasesItem.Position))
				lifecyclePhases.Type = types.StringPointerValue(lifecyclePhasesItem.Type)
				if lifecyclePhasesCount+1 > len(r.LifecyclePhases) {
					r.LifecyclePhases = append(r.LifecyclePhases, lifecyclePhases)
				} else {
					r.LifecyclePhases[lifecyclePhasesCount].Description = lifecyclePhases.Description
					r.LifecyclePhases[lifecyclePhasesCount].ID = lifecyclePhases.ID
					r.LifecyclePhases[lifecyclePhasesCount].Milestones = lifecyclePhases.Milestones
					r.LifecyclePhases[lifecyclePhasesCount].Name = lifecyclePhases.Name
					r.LifecyclePhases[lifecyclePhasesCount].Position = lifecyclePhases.Position
					r.LifecyclePhases[lifecyclePhasesCount].Type = lifecyclePhases.Type
				}
			}
		}
		if resp.Milestones != nil {
			r.Milestones = []tfTypes.IncidentsMilestoneEntity{}
			if len(r.Milestones) > len(resp.Milestones) {
				r.Milestones = r.Milestones[:len(resp.Milestones)]
			}
			for milestonesCount1, milestonesItem1 := range resp.Milestones {
				var milestones1 tfTypes.IncidentsMilestoneEntity
				milestones1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem1.CreatedAt))
				milestones1.Duration = types.StringPointerValue(milestonesItem1.Duration)
				milestones1.ID = types.StringPointerValue(milestonesItem1.ID)
				milestones1.OccurredAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem1.OccurredAt))
				milestones1.Type = types.StringPointerValue(milestonesItem1.Type)
				milestones1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem1.UpdatedAt))
				if milestonesCount1+1 > len(r.Milestones) {
					r.Milestones = append(r.Milestones, milestones1)
				} else {
					r.Milestones[milestonesCount1].CreatedAt = milestones1.CreatedAt
					r.Milestones[milestonesCount1].Duration = milestones1.Duration
					r.Milestones[milestonesCount1].ID = milestones1.ID
					r.Milestones[milestonesCount1].OccurredAt = milestones1.OccurredAt
					r.Milestones[milestonesCount1].Type = milestones1.Type
					r.Milestones[milestonesCount1].UpdatedAt = milestones1.UpdatedAt
				}
			}
		}
		r.MonetaryImpact = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.MonetaryImpact))
		r.MonetaryImpactCents = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.MonetaryImpactCents))
		r.Name = types.StringPointerValue(resp.Name)
		r.Number = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Number))
		if resp.Organization == nil {
			r.Organization = nil
		} else {
			r.Organization = &tfTypes.NullableOrganizationEntity{}
			r.Organization.ID = types.StringPointerValue(resp.Organization.ID)
			r.Organization.Name = types.StringPointerValue(resp.Organization.Name)
		}
		r.OrganizationID = types.StringPointerValue(resp.OrganizationID)
		r.Priority = types.StringPointerValue(resp.Priority)
		r.PrivateID = types.StringPointerValue(resp.PrivateID)
		r.PrivateStatusPageURL = types.StringPointerValue(resp.PrivateStatusPageURL)
		r.ReportID = types.StringPointerValue(resp.ReportID)
		if resp.RetroExports != nil {
		}
		if resp.RoleAssignments != nil {
			r.RoleAssignments = []tfTypes.IncidentsRoleAssignmentEntity{}
			if len(r.RoleAssignments) > len(resp.RoleAssignments) {
				r.RoleAssignments = r.RoleAssignments[:len(resp.RoleAssignments)]
			}
			for roleAssignmentsCount, roleAssignmentsItem := range resp.RoleAssignments {
				var roleAssignments tfTypes.IncidentsRoleAssignmentEntity
				roleAssignments.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.CreatedAt))
				roleAssignments.ID = types.StringPointerValue(roleAssignmentsItem.ID)
				if roleAssignmentsItem.IncidentRole == nil {
					roleAssignments.IncidentRole = nil
				} else {
					roleAssignments.IncidentRole = &tfTypes.NullableIncidentRoleEntity{}
					roleAssignments.IncidentRole.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.IncidentRole.CreatedAt))
					roleAssignments.IncidentRole.Description = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Description)
					roleAssignments.IncidentRole.DiscardedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.IncidentRole.DiscardedAt))
					roleAssignments.IncidentRole.ID = types.StringPointerValue(roleAssignmentsItem.IncidentRole.ID)
					roleAssignments.IncidentRole.Name = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Name)
					roleAssignments.IncidentRole.Summary = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Summary)
					roleAssignments.IncidentRole.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.IncidentRole.UpdatedAt))
				}
				roleAssignments.Status = types.StringPointerValue(roleAssignmentsItem.Status)
				roleAssignments.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.UpdatedAt))
				if roleAssignmentsItem.User == nil {
					roleAssignments.User = nil
				} else {
					roleAssignments.User = &tfTypes.NullableUserEntity{}
					roleAssignments.User.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.User.CreatedAt))
					roleAssignments.User.Email = types.StringPointerValue(roleAssignmentsItem.User.Email)
					roleAssignments.User.ID = types.StringPointerValue(roleAssignmentsItem.User.ID)
					roleAssignments.User.Name = types.StringPointerValue(roleAssignmentsItem.User.Name)
					if roleAssignmentsItem.User.SignalsEnabledNotificationTypes != nil {
						roleAssignments.User.SignalsEnabledNotificationTypes = make([]types.String, 0, len(roleAssignmentsItem.User.SignalsEnabledNotificationTypes))
						for _, v := range roleAssignmentsItem.User.SignalsEnabledNotificationTypes {
							roleAssignments.User.SignalsEnabledNotificationTypes = append(roleAssignments.User.SignalsEnabledNotificationTypes, types.StringValue(v))
						}
					}
					if roleAssignmentsItem.User.SignalsNotificationPolicyCompliance != nil {
						roleAssignments.User.SignalsNotificationPolicyCompliance = []tfTypes.SignalsAPINotificationPolicyItemComplianceEntity{}
						for signalsNotificationPolicyComplianceCount, signalsNotificationPolicyComplianceItem := range roleAssignmentsItem.User.SignalsNotificationPolicyCompliance {
							var signalsNotificationPolicyCompliance tfTypes.SignalsAPINotificationPolicyItemComplianceEntity
							signalsNotificationPolicyCompliance.IsCompliant = types.BoolPointerValue(signalsNotificationPolicyComplianceItem.IsCompliant)
							signalsNotificationPolicyCompliance.NotificationPolicyItemID = types.StringPointerValue(signalsNotificationPolicyComplianceItem.NotificationPolicyItemID)
							if signalsNotificationPolicyComplianceCount+1 > len(roleAssignments.User.SignalsNotificationPolicyCompliance) {
								roleAssignments.User.SignalsNotificationPolicyCompliance = append(roleAssignments.User.SignalsNotificationPolicyCompliance, signalsNotificationPolicyCompliance)
							} else {
								roleAssignments.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount].IsCompliant = signalsNotificationPolicyCompliance.IsCompliant
								roleAssignments.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount].NotificationPolicyItemID = signalsNotificationPolicyCompliance.NotificationPolicyItemID
							}
						}
					}
					roleAssignments.User.SlackLinked = types.BoolPointerValue(roleAssignmentsItem.User.SlackLinked)
					roleAssignments.User.SlackUserID = types.StringPointerValue(roleAssignmentsItem.User.SlackUserID)
					roleAssignments.User.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.User.UpdatedAt))
				}
				if roleAssignmentsCount+1 > len(r.RoleAssignments) {
					r.RoleAssignments = append(r.RoleAssignments, roleAssignments)
				} else {
					r.RoleAssignments[roleAssignmentsCount].CreatedAt = roleAssignments.CreatedAt
					r.RoleAssignments[roleAssignmentsCount].ID = roleAssignments.ID
					r.RoleAssignments[roleAssignmentsCount].IncidentRole = roleAssignments.IncidentRole
					r.RoleAssignments[roleAssignmentsCount].Status = roleAssignments.Status
					r.RoleAssignments[roleAssignmentsCount].UpdatedAt = roleAssignments.UpdatedAt
					r.RoleAssignments[roleAssignmentsCount].User = roleAssignments.User
				}
			}
		}
		if resp.Services != nil {
			r.Services = []tfTypes.SuccinctEntity{}
			if len(r.Services) > len(resp.Services) {
				r.Services = r.Services[:len(resp.Services)]
			}
			for servicesCount, servicesItem := range resp.Services {
				var services tfTypes.SuccinctEntity
				services.ID = types.StringPointerValue(servicesItem.ID)
				services.Name = types.StringPointerValue(servicesItem.Name)
				if servicesCount+1 > len(r.Services) {
					r.Services = append(r.Services, services)
				} else {
					r.Services[servicesCount].ID = services.ID
					r.Services[servicesCount].Name = services.Name
				}
			}
		}
		r.Severity = types.StringPointerValue(resp.Severity)
		r.SeverityColor = types.StringPointerValue(resp.SeverityColor)
		r.SeverityCondition = types.StringPointerValue(resp.SeverityCondition)
		if resp.SeverityConditionObject == nil {
			r.SeverityConditionObject = nil
		} else {
			r.SeverityConditionObject = &tfTypes.NullableSeverityMatrixConditionEntity{}
			r.SeverityConditionObject.ID = types.StringPointerValue(resp.SeverityConditionObject.ID)
			r.SeverityConditionObject.Name = types.StringPointerValue(resp.SeverityConditionObject.Name)
			r.SeverityConditionObject.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.SeverityConditionObject.Position))
		}
		r.SeverityImpact = types.StringPointerValue(resp.SeverityImpact)
		if resp.SeverityImpactObject == nil {
			r.SeverityImpactObject = nil
		} else {
			r.SeverityImpactObject = &tfTypes.NullableSeverityMatrixImpactEntity{}
			r.SeverityImpactObject.AffectsID = types.StringPointerValue(resp.SeverityImpactObject.AffectsID)
			r.SeverityImpactObject.ID = types.StringPointerValue(resp.SeverityImpactObject.ID)
			r.SeverityImpactObject.Name = types.StringPointerValue(resp.SeverityImpactObject.Name)
			r.SeverityImpactObject.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.SeverityImpactObject.Position))
			r.SeverityImpactObject.Type = types.StringPointerValue(resp.SeverityImpactObject.Type)
		}
		r.StartedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.StartedAt))
		if resp.StatusPages != nil {
			r.StatusPages = []tfTypes.IncidentsStatusPageEntity{}
			if len(r.StatusPages) > len(resp.StatusPages) {
				r.StatusPages = r.StatusPages[:len(resp.StatusPages)]
			}
			for statusPagesCount1, statusPagesItem1 := range resp.StatusPages {
				var statusPages1 tfTypes.IncidentsStatusPageEntity
				statusPages1.DisplayName = types.StringPointerValue(statusPagesItem1.DisplayName)
				statusPages1.ExternalID = types.StringPointerValue(statusPagesItem1.ExternalID)
				statusPages1.ID = types.StringPointerValue(statusPagesItem1.ID)
				if statusPagesItem1.Integration == nil {
					statusPages1.Integration = nil
				} else {
					statusPages1.Integration = &tfTypes.NullableIntegrationEntity{}
					statusPages1.Integration.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(statusPagesItem1.Integration.CreatedAt))
					statusPages1.Integration.DisplayName = types.StringPointerValue(statusPagesItem1.Integration.DisplayName)
					statusPages1.Integration.ID = types.StringPointerValue(statusPagesItem1.Integration.ID)
					statusPages1.Integration.IntegrationName = types.StringPointerValue(statusPagesItem1.Integration.IntegrationName)
					statusPages1.Integration.IntegrationSlug = types.StringPointerValue(statusPagesItem1.Integration.IntegrationSlug)
				}
				statusPages1.Name = types.StringPointerValue(statusPagesItem1.Name)
				statusPages1.URL = types.StringPointerValue(statusPagesItem1.URL)
				if statusPagesCount1+1 > len(r.StatusPages) {
					r.StatusPages = append(r.StatusPages, statusPages1)
				} else {
					r.StatusPages[statusPagesCount1].DisplayName = statusPages1.DisplayName
					r.StatusPages[statusPagesCount1].ExternalID = statusPages1.ExternalID
					r.StatusPages[statusPagesCount1].ID = statusPages1.ID
					r.StatusPages[statusPagesCount1].Integration = statusPages1.Integration
					r.StatusPages[statusPagesCount1].Name = statusPages1.Name
					r.StatusPages[statusPagesCount1].URL = statusPages1.URL
				}
			}
		}
		r.Summary = types.StringPointerValue(resp.Summary)
		if resp.TagList != nil {
			r.TagList = make([]types.String, 0, len(resp.TagList))
			for _, v := range resp.TagList {
				r.TagList = append(r.TagList, types.StringValue(v))
			}
		}
		if resp.TeamAssignments != nil {
			r.TeamAssignments = []tfTypes.IncidentsTeamAssignmentEntityLite{}
			if len(r.TeamAssignments) > len(resp.TeamAssignments) {
				r.TeamAssignments = r.TeamAssignments[:len(resp.TeamAssignments)]
			}
			for teamAssignmentsCount, teamAssignmentsItem := range resp.TeamAssignments {
				var teamAssignments tfTypes.IncidentsTeamAssignmentEntityLite
				teamAssignments.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.CreatedAt))
				teamAssignments.ID = types.StringPointerValue(teamAssignmentsItem.ID)
				teamAssignments.Status = types.StringPointerValue(teamAssignmentsItem.Status)
				if teamAssignmentsItem.Team == nil {
					teamAssignments.Team = nil
				} else {
					teamAssignments.Team = &tfTypes.NullableTeamEntityLite{}
					teamAssignments.Team.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.Team.CreatedAt))
					if teamAssignmentsItem.Team.CreatedBy == nil {
						teamAssignments.Team.CreatedBy = nil
					} else {
						teamAssignments.Team.CreatedBy = &tfTypes.NullableAuthorEntity{}
						teamAssignments.Team.CreatedBy.Email = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.Email)
						teamAssignments.Team.CreatedBy.ID = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.ID)
						teamAssignments.Team.CreatedBy.Name = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.Name)
						teamAssignments.Team.CreatedBy.Source = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.Source)
					}
					teamAssignments.Team.Description = types.StringPointerValue(teamAssignmentsItem.Team.Description)
					teamAssignments.Team.ID = types.StringPointerValue(teamAssignmentsItem.Team.ID)
					teamAssignments.Team.InSupportHours = types.BoolPointerValue(teamAssignmentsItem.Team.InSupportHours)
					teamAssignments.Team.Name = types.StringPointerValue(teamAssignmentsItem.Team.Name)
					teamAssignments.Team.SignalsIcalURL = types.StringPointerValue(teamAssignmentsItem.Team.SignalsIcalURL)
					teamAssignments.Team.Slug = types.StringPointerValue(teamAssignmentsItem.Team.Slug)
					teamAssignments.Team.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.Team.UpdatedAt))
				}
				teamAssignments.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.UpdatedAt))
				if teamAssignmentsCount+1 > len(r.TeamAssignments) {
					r.TeamAssignments = append(r.TeamAssignments, teamAssignments)
				} else {
					r.TeamAssignments[teamAssignmentsCount].CreatedAt = teamAssignments.CreatedAt
					r.TeamAssignments[teamAssignmentsCount].ID = teamAssignments.ID
					r.TeamAssignments[teamAssignmentsCount].Status = teamAssignments.Status
					r.TeamAssignments[teamAssignmentsCount].Team = teamAssignments.Team
					r.TeamAssignments[teamAssignmentsCount].UpdatedAt = teamAssignments.UpdatedAt
				}
			}
		}
		if resp.Ticket == nil {
			r.Ticket = nil
		} else {
			r.Ticket = &tfTypes.NullableTicketingTicketEntity{}
			if resp.Ticket.Assignees != nil {
				r.Ticket.Assignees = []tfTypes.AuthorEntity{}
				if len(r.Ticket.Assignees) > len(resp.Ticket.Assignees) {
					r.Ticket.Assignees = r.Ticket.Assignees[:len(resp.Ticket.Assignees)]
				}
				for assigneesCount1, assigneesItem1 := range resp.Ticket.Assignees {
					var assignees1 tfTypes.AuthorEntity
					assignees1.Email = types.StringPointerValue(assigneesItem1.Email)
					assignees1.ID = types.StringPointerValue(assigneesItem1.ID)
					assignees1.Name = types.StringPointerValue(assigneesItem1.Name)
					assignees1.Source = types.StringPointerValue(assigneesItem1.Source)
					if assigneesCount1+1 > len(r.Ticket.Assignees) {
						r.Ticket.Assignees = append(r.Ticket.Assignees, assignees1)
					} else {
						r.Ticket.Assignees[assigneesCount1].Email = assignees1.Email
						r.Ticket.Assignees[assigneesCount1].ID = assignees1.ID
						r.Ticket.Assignees[assigneesCount1].Name = assignees1.Name
						r.Ticket.Assignees[assigneesCount1].Source = assignees1.Source
					}
				}
			}
			if resp.Ticket.Attachments != nil {
			}
			r.Ticket.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Ticket.CreatedAt))
			if resp.Ticket.CreatedBy == nil {
				r.Ticket.CreatedBy = nil
			} else {
				r.Ticket.CreatedBy = &tfTypes.NullableAuthorEntity{}
				r.Ticket.CreatedBy.Email = types.StringPointerValue(resp.Ticket.CreatedBy.Email)
				r.Ticket.CreatedBy.ID = types.StringPointerValue(resp.Ticket.CreatedBy.ID)
				r.Ticket.CreatedBy.Name = types.StringPointerValue(resp.Ticket.CreatedBy.Name)
				r.Ticket.CreatedBy.Source = types.StringPointerValue(resp.Ticket.CreatedBy.Source)
			}
			r.Ticket.Description = types.StringPointerValue(resp.Ticket.Description)
			r.Ticket.DueAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Ticket.DueAt))
			r.Ticket.ID = types.StringPointerValue(resp.Ticket.ID)
			r.Ticket.IncidentCurrentMilestone = types.StringPointerValue(resp.Ticket.IncidentCurrentMilestone)
			r.Ticket.IncidentID = types.StringPointerValue(resp.Ticket.IncidentID)
			r.Ticket.IncidentName = types.StringPointerValue(resp.Ticket.IncidentName)
			if resp.Ticket.Link == nil {
				r.Ticket.Link = nil
			} else {
				r.Ticket.Link = &tfTypes.NullableAttachmentsLinkEntity{}
				r.Ticket.Link.Deletable = types.BoolPointerValue(resp.Ticket.Link.Deletable)
				r.Ticket.Link.DisplayText = types.StringPointerValue(resp.Ticket.Link.DisplayText)
				r.Ticket.Link.Editable = types.BoolPointerValue(resp.Ticket.Link.Editable)
				r.Ticket.Link.HrefURL = types.StringPointerValue(resp.Ticket.Link.HrefURL)
				r.Ticket.Link.IconURL = types.StringPointerValue(resp.Ticket.Link.IconURL)
				r.Ticket.Link.ID = types.StringPointerValue(resp.Ticket.Link.ID)
				r.Ticket.Link.Type = types.StringPointerValue(resp.Ticket.Link.Type)
			}
			if resp.Ticket.Priority == nil {
				r.Ticket.Priority = nil
			} else {
				r.Ticket.Priority = &tfTypes.NullableTicketingPriorityEntity{}
				r.Ticket.Priority.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Ticket.Priority.CreatedAt))
				r.Ticket.Priority.ID = types.StringPointerValue(resp.Ticket.Priority.ID)
				r.Ticket.Priority.Name = types.StringPointerValue(resp.Ticket.Priority.Name)
				r.Ticket.Priority.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Ticket.Priority.Position))
				r.Ticket.Priority.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Ticket.Priority.UpdatedAt))
			}
			r.Ticket.State = types.StringPointerValue(resp.Ticket.State)
			r.Ticket.Summary = types.StringPointerValue(resp.Ticket.Summary)
			r.Ticket.SyncErrorMessage = types.StringPointerValue(resp.Ticket.SyncErrorMessage)
			if resp.Ticket.TagList != nil {
				r.Ticket.TagList = make([]types.String, 0, len(resp.Ticket.TagList))
				for _, v := range resp.Ticket.TagList {
					r.Ticket.TagList = append(r.Ticket.TagList, types.StringValue(v))
				}
			}
			r.Ticket.TaskID = types.StringPointerValue(resp.Ticket.TaskID)
			r.Ticket.Type = types.StringPointerValue(resp.Ticket.Type)
			r.Ticket.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Ticket.UpdatedAt))
		}
	}

	return diags
}
