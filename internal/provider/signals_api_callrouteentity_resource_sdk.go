// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SignalsAPICallRouteEntityResourceModel) ToSharedCreateTeamCallRoute(ctx context.Context) (*shared.CreateTeamCallRoute, diag.Diagnostics) {
	var diags diag.Diagnostics

	connectMode := new(string)
	if !r.ConnectMode.IsUnknown() && !r.ConnectMode.IsNull() {
		*connectMode = r.ConnectMode.ValueString()
	} else {
		connectMode = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	greetingMessage := new(string)
	if !r.GreetingMessage.IsUnknown() && !r.GreetingMessage.IsNull() {
		*greetingMessage = r.GreetingMessage.ValueString()
	} else {
		greetingMessage = nil
	}
	var name string
	name = r.Name.ValueString()

	var phoneNumber string
	phoneNumber = r.PhoneNumber.ValueString()

	var routingMode string
	routingMode = r.RoutingMode.ValueString()

	var stepsInput []shared.CreateTeamCallRouteStepsInput
	if r.StepsInput != nil {
		stepsInput = make([]shared.CreateTeamCallRouteStepsInput, 0, len(r.StepsInput))
		for _, stepsInputItem := range r.StepsInput {
			onCallRotationID := new(string)
			if !stepsInputItem.OnCallRotationID.IsUnknown() && !stepsInputItem.OnCallRotationID.IsNull() {
				*onCallRotationID = stepsInputItem.OnCallRotationID.ValueString()
			} else {
				onCallRotationID = nil
			}
			var targetID string
			targetID = stepsInputItem.TargetID.ValueString()

			var targetType string
			targetType = stepsInputItem.TargetType.ValueString()

			var timeout string
			timeout = stepsInputItem.Timeout.ValueString()

			stepsInput = append(stepsInput, shared.CreateTeamCallRouteStepsInput{
				OnCallRotationID: onCallRotationID,
				TargetID:         targetID,
				TargetType:       targetType,
				Timeout:          timeout,
			})
		}
	}
	var targetInput *shared.CreateTeamCallRouteTargetInput
	if r.TargetInput != nil {
		var id string
		id = r.TargetInput.ID.ValueString()

		var typeVar string
		typeVar = r.TargetInput.Type.ValueString()

		targetInput = &shared.CreateTeamCallRouteTargetInput{
			ID:   id,
			Type: typeVar,
		}
	}
	out := shared.CreateTeamCallRoute{
		ConnectMode:     connectMode,
		Description:     description,
		GreetingMessage: greetingMessage,
		Name:            name,
		PhoneNumber:     phoneNumber,
		RoutingMode:     routingMode,
		StepsInput:      stepsInput,
		TargetInput:     targetInput,
	}

	return &out, diags
}

func (r *SignalsAPICallRouteEntityResourceModel) ToOperationsCreateTeamCallRouteRequest(ctx context.Context) (*operations.CreateTeamCallRouteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.TeamID.ValueString()

	createTeamCallRoute, createTeamCallRouteDiags := r.ToSharedCreateTeamCallRoute(ctx)
	diags.Append(createTeamCallRouteDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateTeamCallRouteRequest{
		TeamID:              teamID,
		CreateTeamCallRoute: *createTeamCallRoute,
	}

	return &out, diags
}

func (r *SignalsAPICallRouteEntityResourceModel) ToSharedUpdateCallRoute(ctx context.Context) (*shared.UpdateCallRoute, diag.Diagnostics) {
	var diags diag.Diagnostics

	connectMode := new(string)
	if !r.ConnectMode.IsUnknown() && !r.ConnectMode.IsNull() {
		*connectMode = r.ConnectMode.ValueString()
	} else {
		connectMode = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	greetingMessage := new(string)
	if !r.GreetingMessage.IsUnknown() && !r.GreetingMessage.IsNull() {
		*greetingMessage = r.GreetingMessage.ValueString()
	} else {
		greetingMessage = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	routingMode := new(string)
	if !r.RoutingMode.IsUnknown() && !r.RoutingMode.IsNull() {
		*routingMode = r.RoutingMode.ValueString()
	} else {
		routingMode = nil
	}
	var stepsInput []shared.UpdateCallRouteStepsInput
	if r.StepsInput != nil {
		stepsInput = make([]shared.UpdateCallRouteStepsInput, 0, len(r.StepsInput))
		for _, stepsInputItem := range r.StepsInput {
			onCallRotationID := new(string)
			if !stepsInputItem.OnCallRotationID.IsUnknown() && !stepsInputItem.OnCallRotationID.IsNull() {
				*onCallRotationID = stepsInputItem.OnCallRotationID.ValueString()
			} else {
				onCallRotationID = nil
			}
			var targetID string
			targetID = stepsInputItem.TargetID.ValueString()

			var targetType string
			targetType = stepsInputItem.TargetType.ValueString()

			var timeout string
			timeout = stepsInputItem.Timeout.ValueString()

			stepsInput = append(stepsInput, shared.UpdateCallRouteStepsInput{
				OnCallRotationID: onCallRotationID,
				TargetID:         targetID,
				TargetType:       targetType,
				Timeout:          timeout,
			})
		}
	}
	var targetInput *shared.UpdateCallRouteTargetInput
	if r.TargetInput != nil {
		var id string
		id = r.TargetInput.ID.ValueString()

		var typeVar string
		typeVar = r.TargetInput.Type.ValueString()

		targetInput = &shared.UpdateCallRouteTargetInput{
			ID:   id,
			Type: typeVar,
		}
	}
	out := shared.UpdateCallRoute{
		ConnectMode:     connectMode,
		Description:     description,
		GreetingMessage: greetingMessage,
		Name:            name,
		RoutingMode:     routingMode,
		StepsInput:      stepsInput,
		TargetInput:     targetInput,
	}

	return &out, diags
}

func (r *SignalsAPICallRouteEntityResourceModel) ToOperationsUpdateCallRouteRequest(ctx context.Context) (*operations.UpdateCallRouteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	updateCallRoute, updateCallRouteDiags := r.ToSharedUpdateCallRoute(ctx)
	diags.Append(updateCallRouteDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateCallRouteRequest{
		ID:              id,
		UpdateCallRoute: *updateCallRoute,
	}

	return &out, diags
}

func (r *SignalsAPICallRouteEntityResourceModel) ToOperationsGetCallRouteRequest(ctx context.Context) (*operations.GetCallRouteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetCallRouteRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SignalsAPICallRouteEntityResourceModel) ToOperationsDeleteCallRouteRequest(ctx context.Context) (*operations.DeleteCallRouteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteCallRouteRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SignalsAPICallRouteEntityResourceModel) RefreshFromSharedSignalsAPICallRouteEntity(ctx context.Context, resp *shared.SignalsAPICallRouteEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ConnectMode = types.StringPointerValue(resp.ConnectMode)
		r.Description = types.StringPointerValue(resp.Description)
		r.GreetingMessage = types.StringPointerValue(resp.GreetingMessage)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		r.PhoneNumber = types.StringPointerValue(resp.PhoneNumber)
		r.RoutingMode = types.StringPointerValue(resp.RoutingMode)
		if resp.Steps == nil {
			r.Steps = nil
		} else {
			r.Steps = &tfTypes.NullableSignalsAPICallRouteStepEntity{}
			r.Steps.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Steps.Position))
			if resp.Steps.Target == nil {
				r.Steps.Target = nil
			} else {
				r.Steps.Target = &tfTypes.NullableSignalsAPITargetEntity{}
				r.Steps.Target.ID = types.StringPointerValue(resp.Steps.Target.ID)
				r.Steps.Target.IsPageable = types.BoolPointerValue(resp.Steps.Target.IsPageable)
				r.Steps.Target.Name = types.StringPointerValue(resp.Steps.Target.Name)
				r.Steps.Target.TeamID = types.StringPointerValue(resp.Steps.Target.TeamID)
				r.Steps.Target.Type = types.StringPointerValue(resp.Steps.Target.Type)
			}
			r.Steps.Timeout = types.StringPointerValue(resp.Steps.Timeout)
		}
		if resp.Target == nil {
			r.Target = nil
		} else {
			r.Target = &tfTypes.NullableSignalsAPITargetEntity{}
			r.Target.ID = types.StringPointerValue(resp.Target.ID)
			r.Target.IsPageable = types.BoolPointerValue(resp.Target.IsPageable)
			r.Target.Name = types.StringPointerValue(resp.Target.Name)
			r.Target.TeamID = types.StringPointerValue(resp.Target.TeamID)
			r.Target.Type = types.StringPointerValue(resp.Target.Type)
		}
	}

	return diags
}
