// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *IntegrationsStatuspageConnectionEntityDataSourceModel) ToOperationsGetStatuspageConnectionRequest(ctx context.Context) (*operations.GetStatuspageConnectionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var connectionID string
	connectionID = r.ConnectionID.ValueString()

	out := operations.GetStatuspageConnectionRequest{
		ConnectionID: connectionID,
	}

	return &out, diags
}

func (r *IntegrationsStatuspageConnectionEntityDataSourceModel) RefreshFromSharedIntegrationsStatuspageConnectionEntity(ctx context.Context, resp *shared.IntegrationsStatuspageConnectionEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Conditions != nil {
			r.Conditions = []tfTypes.IntegrationsStatuspageConditionEntity{}
			if len(r.Conditions) > len(resp.Conditions) {
				r.Conditions = r.Conditions[:len(resp.Conditions)]
			}
			for conditionsCount, conditionsItem := range resp.Conditions {
				var conditions tfTypes.IntegrationsStatuspageConditionEntity
				conditions.ConditionID = types.StringPointerValue(conditionsItem.ConditionID)
				conditions.ConditionName = types.StringPointerValue(conditionsItem.ConditionName)
				conditions.StatuspageioCondition = types.StringPointerValue(conditionsItem.StatuspageioCondition)
				if conditionsCount+1 > len(r.Conditions) {
					r.Conditions = append(r.Conditions, conditions)
				} else {
					r.Conditions[conditionsCount].ConditionID = conditions.ConditionID
					r.Conditions[conditionsCount].ConditionName = conditions.ConditionName
					r.Conditions[conditionsCount].StatuspageioCondition = conditions.StatuspageioCondition
				}
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		if resp.MilestoneMappings != nil {
			r.MilestoneMappings = []tfTypes.IntegrationsStatuspageMilestoneMappingEntity{}
			if len(r.MilestoneMappings) > len(resp.MilestoneMappings) {
				r.MilestoneMappings = r.MilestoneMappings[:len(resp.MilestoneMappings)]
			}
			for milestoneMappingsCount, milestoneMappingsItem := range resp.MilestoneMappings {
				var milestoneMappings tfTypes.IntegrationsStatuspageMilestoneMappingEntity
				milestoneMappings.MilestoneID = types.StringPointerValue(milestoneMappingsItem.MilestoneID)
				milestoneMappings.Status = types.StringPointerValue(milestoneMappingsItem.Status)
				if milestoneMappingsCount+1 > len(r.MilestoneMappings) {
					r.MilestoneMappings = append(r.MilestoneMappings, milestoneMappings)
				} else {
					r.MilestoneMappings[milestoneMappingsCount].MilestoneID = milestoneMappings.MilestoneID
					r.MilestoneMappings[milestoneMappingsCount].Status = milestoneMappings.Status
				}
			}
		}
		r.PageID = types.StringPointerValue(resp.PageID)
		r.PageName = types.StringPointerValue(resp.PageName)
		if resp.Severities != nil {
			r.Severities = []tfTypes.IntegrationsStatuspageSeverityEntity{}
			if len(r.Severities) > len(resp.Severities) {
				r.Severities = r.Severities[:len(resp.Severities)]
			}
			for severitiesCount, severitiesItem := range resp.Severities {
				var severities tfTypes.IntegrationsStatuspageSeverityEntity
				severities.RemoteStatus = types.StringPointerValue(severitiesItem.RemoteStatus)
				severities.SeveritySlug = types.StringPointerValue(severitiesItem.SeveritySlug)
				if severitiesCount+1 > len(r.Severities) {
					r.Severities = append(r.Severities, severities)
				} else {
					r.Severities[severitiesCount].RemoteStatus = severities.RemoteStatus
					r.Severities[severitiesCount].SeveritySlug = severities.SeveritySlug
				}
			}
		}
	}

	return diags
}
