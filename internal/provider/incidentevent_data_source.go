// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &IncidentEventDataSource{}
var _ datasource.DataSourceWithConfigure = &IncidentEventDataSource{}

func NewIncidentEventDataSource() datasource.DataSource {
	return &IncidentEventDataSource{}
}

// IncidentEventDataSource is the data source implementation.
type IncidentEventDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// IncidentEventDataSourceModel describes the data model.
type IncidentEventDataSourceModel struct {
	Author        *tfTypes.NullableAuthor             `tfsdk:"author"`
	Context       types.String                        `tfsdk:"context"`
	Conversations []tfTypes.ConversationsAPIReference `tfsdk:"conversations"`
	Data          *tfTypes.IncidentEventData          `tfsdk:"data"`
	EventID       types.String                        `tfsdk:"event_id"`
	ID            types.String                        `tfsdk:"id"`
	IncidentID    types.String                        `tfsdk:"incident_id"`
	OccurredAt    types.String                        `tfsdk:"occurred_at"`
	Type          types.String                        `tfsdk:"type"`
	Visibility    types.String                        `tfsdk:"visibility"`
	Votes         *tfTypes.NullableVotes              `tfsdk:"votes"`
}

// Metadata returns the data source type name.
func (r *IncidentEventDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_incident_event"
}

// Schema defines the schema for the data source.
func (r *IncidentEventDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "IncidentEvent DataSource",

		Attributes: map[string]schema.Attribute{
			"author": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"email": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"source": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"context": schema.StringAttribute{
				Computed: true,
			},
			"conversations": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"channel": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"comments_url": schema.StringAttribute{
							Computed: true,
						},
						"field": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"resource_class": schema.StringAttribute{
							Computed: true,
						},
						"resource_id": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"data": schema.SingleNestedAttribute{
				Computed:    true,
				Description: `Can be one of: Note, TourStep, RootCause, ChangeType, RoleUpdate, TaskUpdate, AlertLinked, ChatMessage, AddTaskList, ImpactUpdate, TicketUpdate, GeneralUpdate, ChangelogEntry, IncidentStatus, TeamAssignment, BulkUpdate`,
			},
			"event_id": schema.StringAttribute{
				Required: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"incident_id": schema.StringAttribute{
				Computed: true,
			},
			"occurred_at": schema.StringAttribute{
				Computed: true,
			},
			"type": schema.StringAttribute{
				Computed: true,
			},
			"visibility": schema.StringAttribute{
				Computed: true,
			},
			"votes": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"disliked": schema.BoolAttribute{
						Computed:    true,
						Description: `Whether or not the current actor has voted negatively`,
					},
					"dislikes": schema.Int32Attribute{
						Computed: true,
					},
					"liked": schema.BoolAttribute{
						Computed:    true,
						Description: `Whether or not the current actor has voted positively`,
					},
					"likes": schema.Int32Attribute{
						Computed: true,
					},
					"voted": schema.BoolAttribute{
						Computed:    true,
						Description: `Whether or not the current actor has voted`,
					},
				},
				Description: `Votes model`,
			},
		},
	}
}

func (r *IncidentEventDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *IncidentEventDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *IncidentEventDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetIncidentEventRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Incidents.GetIncidentEvent(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.IncidentEvent != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedIncidentEvent(ctx, res.IncidentEvent)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
