// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AlertsAlertEntityDataSource{}
var _ datasource.DataSourceWithConfigure = &AlertsAlertEntityDataSource{}

func NewAlertsAlertEntityDataSource() datasource.DataSource {
	return &AlertsAlertEntityDataSource{}
}

// AlertsAlertEntityDataSource is the data source implementation.
type AlertsAlertEntityDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// AlertsAlertEntityDataSourceModel describes the data model.
type AlertsAlertEntityDataSourceModel struct {
	AlertID         types.String                                 `tfsdk:"alert_id"`
	ChildAlerts     []tfTypes.AlertsSirenAlertEntity             `tfsdk:"child_alerts"`
	Conversations   []tfTypes.ConversationsAPIEntitiesReference  `tfsdk:"conversations"`
	Description     types.String                                 `tfsdk:"description"`
	DurationIso8601 types.String                                 `tfsdk:"duration_iso8601"`
	DurationMs      types.Int32                                  `tfsdk:"duration_ms"`
	EndsAt          types.String                                 `tfsdk:"ends_at"`
	Environments    []tfTypes.SuccinctEntity                     `tfsdk:"environments"`
	Events          []tfTypes.AlertsSirenEventEntity             `tfsdk:"events"`
	ID              types.String                                 `tfsdk:"id"`
	Incidents       []tfTypes.PublicAPIV1IncidentsSuccinctEntity `tfsdk:"incidents"`
	IntegrationName types.String                                 `tfsdk:"integration_name"`
	IsExpired       types.Bool                                   `tfsdk:"is_expired"`
	IsNoise         types.Bool                                   `tfsdk:"is_noise"`
	Labels          *tfTypes.AlertsAlertEntityLabels             `tfsdk:"labels"`
	ParentAlerts    []tfTypes.AlertsSirenAlertEntity             `tfsdk:"parent_alerts"`
	Position        types.Int32                                  `tfsdk:"position"`
	Priority        types.String                                 `tfsdk:"priority"`
	RemoteID        types.String                                 `tfsdk:"remote_id"`
	RemoteURL       types.String                                 `tfsdk:"remote_url"`
	Services        []tfTypes.SuccinctEntity                     `tfsdk:"services"`
	SignalID        types.String                                 `tfsdk:"signal_id"`
	SignalRule      *tfTypes.NullableSignalsAPIRuleEntity        `tfsdk:"signal_rule"`
	SignalTarget    *tfTypes.NullableSignalsAPITargetEntity      `tfsdk:"signal_target"`
	SourceIcon      types.String                                 `tfsdk:"source_icon"`
	StartsAt        types.String                                 `tfsdk:"starts_at"`
	Status          types.String                                 `tfsdk:"status"`
	Summary         types.String                                 `tfsdk:"summary"`
	Tags            []types.String                               `tfsdk:"tags"`
	TeamID          types.String                                 `tfsdk:"team_id"`
	TeamName        types.String                                 `tfsdk:"team_name"`
}

// Metadata returns the data source type name.
func (r *AlertsAlertEntityDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_alerts_alert_entity"
}

// Schema defines the schema for the data source.
func (r *AlertsAlertEntityDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AlertsAlertEntity DataSource",

		Attributes: map[string]schema.Attribute{
			"alert_id": schema.StringAttribute{
				Required: true,
			},
			"child_alerts": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"description": schema.StringAttribute{
							Computed: true,
						},
						"ends_at": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"labels": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `Arbitrary key:value pairs of labels.`,
						},
						"remote_id": schema.StringAttribute{
							Computed: true,
						},
						"remote_url": schema.StringAttribute{
							Computed: true,
						},
						"signal_id": schema.StringAttribute{
							Computed: true,
						},
						"signal_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"create_incident_condition_when": schema.StringAttribute{
									Computed: true,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"created_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"deduplication_expiry": schema.StringAttribute{
									Computed:    true,
									Description: `Duration for deduplicating similar alerts (ISO8601 duration format e.g., 'PT30M', 'PT2H', 'P1D')`,
								},
								"expression": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"incident_type": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"notification_priority_override": schema.StringAttribute{
									Computed: true,
								},
								"target": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
										},
										"is_pageable": schema.BoolAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"team_id": schema.StringAttribute{
											Computed: true,
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"team_id": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Signals_API_RuleEntity model`,
						},
						"starts_at": schema.StringAttribute{
							Computed: true,
						},
						"status": schema.StringAttribute{
							Computed: true,
						},
						"summary": schema.StringAttribute{
							Computed: true,
						},
						"tags": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"conversations": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"channel": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"comments_url": schema.StringAttribute{
							Computed: true,
						},
						"field": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"resource_class": schema.StringAttribute{
							Computed: true,
						},
						"resource_id": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"duration_iso8601": schema.StringAttribute{
				Computed: true,
			},
			"duration_ms": schema.Int32Attribute{
				Computed: true,
			},
			"ends_at": schema.StringAttribute{
				Computed: true,
			},
			"environments": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"events": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"data": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `The event's payload`,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"type": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"incidents": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"number": schema.Int32Attribute{
							Computed: true,
						},
					},
				},
			},
			"integration_name": schema.StringAttribute{
				Computed: true,
			},
			"is_expired": schema.BoolAttribute{
				Computed: true,
			},
			"is_noise": schema.BoolAttribute{
				Computed: true,
			},
			"labels": schema.SingleNestedAttribute{
				Computed:    true,
				Description: `Arbitrary key:value pairs of labels.`,
			},
			"parent_alerts": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"description": schema.StringAttribute{
							Computed: true,
						},
						"ends_at": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"labels": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `Arbitrary key:value pairs of labels.`,
						},
						"remote_id": schema.StringAttribute{
							Computed: true,
						},
						"remote_url": schema.StringAttribute{
							Computed: true,
						},
						"signal_id": schema.StringAttribute{
							Computed: true,
						},
						"signal_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"create_incident_condition_when": schema.StringAttribute{
									Computed: true,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"created_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"deduplication_expiry": schema.StringAttribute{
									Computed:    true,
									Description: `Duration for deduplicating similar alerts (ISO8601 duration format e.g., 'PT30M', 'PT2H', 'P1D')`,
								},
								"expression": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"incident_type": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"notification_priority_override": schema.StringAttribute{
									Computed: true,
								},
								"target": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
										},
										"is_pageable": schema.BoolAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"team_id": schema.StringAttribute{
											Computed: true,
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"team_id": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Signals_API_RuleEntity model`,
						},
						"starts_at": schema.StringAttribute{
							Computed: true,
						},
						"status": schema.StringAttribute{
							Computed: true,
						},
						"summary": schema.StringAttribute{
							Computed: true,
						},
						"tags": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"position": schema.Int32Attribute{
				Computed: true,
			},
			"priority": schema.StringAttribute{
				Computed: true,
			},
			"remote_id": schema.StringAttribute{
				Computed: true,
			},
			"remote_url": schema.StringAttribute{
				Computed: true,
			},
			"services": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"signal_id": schema.StringAttribute{
				Computed: true,
			},
			"signal_rule": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"create_incident_condition_when": schema.StringAttribute{
						Computed: true,
					},
					"created_at": schema.StringAttribute{
						Computed: true,
					},
					"created_by": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"source": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"deduplication_expiry": schema.StringAttribute{
						Computed:    true,
						Description: `Duration for deduplicating similar alerts (ISO8601 duration format e.g., 'PT30M', 'PT2H', 'P1D')`,
					},
					"expression": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"incident_type": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"notification_priority_override": schema.StringAttribute{
						Computed: true,
					},
					"target": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.StringAttribute{
								Computed: true,
							},
							"is_pageable": schema.BoolAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"team_id": schema.StringAttribute{
								Computed: true,
							},
							"type": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"team_id": schema.StringAttribute{
						Computed: true,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `Signals_API_RuleEntity model`,
			},
			"signal_target": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"is_pageable": schema.BoolAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"team_id": schema.StringAttribute{
						Computed: true,
					},
					"type": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"source_icon": schema.StringAttribute{
				Computed: true,
			},
			"starts_at": schema.StringAttribute{
				Computed: true,
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
			"summary": schema.StringAttribute{
				Computed: true,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"team_id": schema.StringAttribute{
				Computed: true,
			},
			"team_name": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *AlertsAlertEntityDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AlertsAlertEntityDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AlertsAlertEntityDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetAlertRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Alerts.GetAlert(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AlertsAlertEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAlertsAlertEntity(ctx, res.AlertsAlertEntity)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
