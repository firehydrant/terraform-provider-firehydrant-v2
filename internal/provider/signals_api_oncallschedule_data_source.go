// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SignalsAPIOnCallScheduleDataSource{}
var _ datasource.DataSourceWithConfigure = &SignalsAPIOnCallScheduleDataSource{}

func NewSignalsAPIOnCallScheduleDataSource() datasource.DataSource {
	return &SignalsAPIOnCallScheduleDataSource{}
}

// SignalsAPIOnCallScheduleDataSource is the data source implementation.
type SignalsAPIOnCallScheduleDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// SignalsAPIOnCallScheduleDataSourceModel describes the data model.
type SignalsAPIOnCallScheduleDataSourceModel struct {
	Color                types.String                              `tfsdk:"color"`
	CreatedAt            types.String                              `tfsdk:"created_at"`
	CreatedBy            *tfTypes.NullableAuthor                   `tfsdk:"created_by"`
	Description          types.String                              `tfsdk:"description"`
	ID                   types.String                              `tfsdk:"id"`
	Members              []tfTypes.Succinct                        `tfsdk:"members"`
	Name                 types.String                              `tfsdk:"name"`
	Restrictions         []tfTypes.SignalsAPIOnCallRestriction     `tfsdk:"restrictions"`
	Rotations            []tfTypes.SignalsAPIOnCallRotation        `tfsdk:"rotations"`
	ShiftTimeWindowEnd   types.String                              `queryParam:"style=form,explode=true,name=shift_time_window_end" tfsdk:"shift_time_window_end"`
	ShiftTimeWindowStart types.String                              `queryParam:"style=form,explode=true,name=shift_time_window_start" tfsdk:"shift_time_window_start"`
	Shifts               []tfTypes.SignalsAPIOnCallShift           `tfsdk:"shifts"`
	SignalsIcalURL       types.String                              `tfsdk:"signals_ical_url"`
	SlackUserGroupID     types.String                              `tfsdk:"slack_user_group_id"`
	Strategy             *tfTypes.NullableSignalsAPIOnCallStrategy `tfsdk:"strategy"`
	Team                 *tfTypes.NullableSuccinct                 `tfsdk:"team"`
	TeamID               types.String                              `tfsdk:"team_id"`
	TimeZone             types.String                              `tfsdk:"time_zone"`
	UpdatedAt            types.String                              `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *SignalsAPIOnCallScheduleDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_signals_api_on_call_schedule"
}

// Schema defines the schema for the data source.
func (r *SignalsAPIOnCallScheduleDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SignalsAPIOnCallSchedule DataSource",

		Attributes: map[string]schema.Attribute{
			"color": schema.StringAttribute{
				Computed: true,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"created_by": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"email": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"source": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"members": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"restrictions": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"end_day": schema.StringAttribute{
							Computed: true,
						},
						"end_time": schema.StringAttribute{
							Computed: true,
						},
						"start_day": schema.StringAttribute{
							Computed: true,
						},
						"start_time": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"rotations": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"color": schema.StringAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"created_by": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"email": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"source": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"members": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"restrictions": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"end_day": schema.StringAttribute{
										Computed: true,
									},
									"end_time": schema.StringAttribute{
										Computed: true,
									},
									"start_day": schema.StringAttribute{
										Computed: true,
									},
									"start_time": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"shifts": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"color": schema.StringAttribute{
										Computed: true,
									},
									"coverage_request": schema.StringAttribute{
										Computed: true,
									},
									"end_time": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"on_call_rotation": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"on_call_schedule": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"start_time": schema.StringAttribute{
										Computed: true,
									},
									"team": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"time_zone": schema.StringAttribute{
										Computed: true,
									},
									"user": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
							},
						},
						"slack_user_group_id": schema.StringAttribute{
							Computed: true,
						},
						"strategy": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"handoff_day": schema.StringAttribute{
									Computed: true,
								},
								"handoff_time": schema.StringAttribute{
									Computed: true,
								},
								"shift_duration": schema.StringAttribute{
									Computed: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"team": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"time_zone": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"shift_time_window_end": schema.StringAttribute{
				Optional:    true,
				Description: `An optional ISO8601 timestamp for filtering the shifts listed in each on-call schedule to only include shifts that overlap with the provided time window.. If provided, only shifts that start at or before this time will be included.`,
			},
			"shift_time_window_start": schema.StringAttribute{
				Optional:    true,
				Description: `An optional ISO8601 timestamp for filtering the shifts listed in each on-call schedule to only include shifts that overlap with the provided time window. If provided, only shifts that end at or after this time will be included.`,
			},
			"shifts": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"color": schema.StringAttribute{
							Computed: true,
						},
						"coverage_request": schema.StringAttribute{
							Computed: true,
						},
						"end_time": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"on_call_rotation": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"on_call_schedule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"start_time": schema.StringAttribute{
							Computed: true,
						},
						"team": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"time_zone": schema.StringAttribute{
							Computed: true,
						},
						"user": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
			"signals_ical_url": schema.StringAttribute{
				Computed: true,
			},
			"slack_user_group_id": schema.StringAttribute{
				Computed: true,
			},
			"strategy": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"handoff_day": schema.StringAttribute{
						Computed: true,
					},
					"handoff_time": schema.StringAttribute{
						Computed: true,
					},
					"shift_duration": schema.StringAttribute{
						Computed: true,
					},
					"type": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"team": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"team_id": schema.StringAttribute{
				Required: true,
			},
			"time_zone": schema.StringAttribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *SignalsAPIOnCallScheduleDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SignalsAPIOnCallScheduleDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SignalsAPIOnCallScheduleDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetTeamOnCallScheduleRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Signals.GetTeamOnCallSchedule(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SignalsAPIOnCallSchedule != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSignalsAPIOnCallSchedule(ctx, res.SignalsAPIOnCallSchedule)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
