// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *EnvironmentEntryEntityResourceModel) ToSharedCreateEnvironment(ctx context.Context) (*shared.CreateEnvironment, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var name string
	name = r.Name.ValueString()

	out := shared.CreateEnvironment{
		Description: description,
		Name:        name,
	}

	return &out, diags
}

func (r *EnvironmentEntryEntityResourceModel) ToSharedUpdateEnvironment(ctx context.Context) (*shared.UpdateEnvironment, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var name string
	name = r.Name.ValueString()

	out := shared.UpdateEnvironment{
		Description: description,
		Name:        name,
	}

	return &out, diags
}

func (r *EnvironmentEntryEntityResourceModel) ToOperationsUpdateEnvironmentRequest(ctx context.Context) (*operations.UpdateEnvironmentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var environmentID string
	environmentID = r.ID.ValueString()

	updateEnvironment, updateEnvironmentDiags := r.ToSharedUpdateEnvironment(ctx)
	diags.Append(updateEnvironmentDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEnvironmentRequest{
		EnvironmentID:     environmentID,
		UpdateEnvironment: *updateEnvironment,
	}

	return &out, diags
}

func (r *EnvironmentEntryEntityResourceModel) ToOperationsGetEnvironmentRequest(ctx context.Context) (*operations.GetEnvironmentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var environmentID string
	environmentID = r.ID.ValueString()

	out := operations.GetEnvironmentRequest{
		EnvironmentID: environmentID,
	}

	return &out, diags
}

func (r *EnvironmentEntryEntityResourceModel) ToOperationsDeleteEnvironmentRequest(ctx context.Context) (*operations.DeleteEnvironmentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var environmentID string
	environmentID = r.ID.ValueString()

	out := operations.DeleteEnvironmentRequest{
		EnvironmentID: environmentID,
	}

	return &out, diags
}

func (r *EnvironmentEntryEntityResourceModel) RefreshFromSharedEnvironmentEntryEntity(ctx context.Context, resp *shared.EnvironmentEntryEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.ActiveIncidents != nil {
			r.ActiveIncidents = make([]types.String, 0, len(resp.ActiveIncidents))
			for _, v := range resp.ActiveIncidents {
				r.ActiveIncidents = append(r.ActiveIncidents, types.StringValue(v))
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		if resp.ExternalResources != nil {
			r.ExternalResources = []tfTypes.ExternalResourceEntity{}
			if len(r.ExternalResources) > len(resp.ExternalResources) {
				r.ExternalResources = r.ExternalResources[:len(resp.ExternalResources)]
			}
			for externalResourcesCount, externalResourcesItem := range resp.ExternalResources {
				var externalResources tfTypes.ExternalResourceEntity
				externalResources.ConnectionFullFaviconURL = types.StringPointerValue(externalResourcesItem.ConnectionFullFaviconURL)
				externalResources.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
				externalResources.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
				externalResources.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
				externalResources.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem.CreatedAt))
				externalResources.Name = types.StringPointerValue(externalResourcesItem.Name)
				externalResources.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
				externalResources.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
				externalResources.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem.UpdatedAt))
				if externalResourcesCount+1 > len(r.ExternalResources) {
					r.ExternalResources = append(r.ExternalResources, externalResources)
				} else {
					r.ExternalResources[externalResourcesCount].ConnectionFullFaviconURL = externalResources.ConnectionFullFaviconURL
					r.ExternalResources[externalResourcesCount].ConnectionID = externalResources.ConnectionID
					r.ExternalResources[externalResourcesCount].ConnectionName = externalResources.ConnectionName
					r.ExternalResources[externalResourcesCount].ConnectionType = externalResources.ConnectionType
					r.ExternalResources[externalResourcesCount].CreatedAt = externalResources.CreatedAt
					r.ExternalResources[externalResourcesCount].Name = externalResources.Name
					r.ExternalResources[externalResourcesCount].RemoteID = externalResources.RemoteID
					r.ExternalResources[externalResourcesCount].RemoteURL = externalResources.RemoteURL
					r.ExternalResources[externalResourcesCount].UpdatedAt = externalResources.UpdatedAt
				}
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		r.Slug = types.StringPointerValue(resp.Slug)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}
