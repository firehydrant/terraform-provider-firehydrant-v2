// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SeverityResourceModel) RefreshFromSharedSeverity(ctx context.Context, resp *shared.Severity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Color = types.StringPointerValue(resp.Color)
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Position))
		r.Slug = types.StringPointerValue(resp.Slug)
		r.SystemRecord = types.BoolPointerValue(resp.SystemRecord)
		r.Type = types.StringPointerValue(resp.Type)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *SeverityResourceModel) ToOperationsDeleteSeverityRequest(ctx context.Context) (*operations.DeleteSeverityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var severitySlug string
	severitySlug = r.Slug.ValueString()

	out := operations.DeleteSeverityRequest{
		SeveritySlug: severitySlug,
	}

	return &out, diags
}

func (r *SeverityResourceModel) ToOperationsGetSeverityRequest(ctx context.Context) (*operations.GetSeverityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var severitySlug string
	severitySlug = r.Slug.ValueString()

	out := operations.GetSeverityRequest{
		SeveritySlug: severitySlug,
	}

	return &out, diags
}

func (r *SeverityResourceModel) ToOperationsUpdateSeverityRequest(ctx context.Context) (*operations.UpdateSeverityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var severitySlug string
	severitySlug = r.Slug.ValueString()

	updateSeverity, updateSeverityDiags := r.ToSharedUpdateSeverity(ctx)
	diags.Append(updateSeverityDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateSeverityRequest{
		SeveritySlug:   severitySlug,
		UpdateSeverity: *updateSeverity,
	}

	return &out, diags
}

func (r *SeverityResourceModel) ToSharedCreateSeverity(ctx context.Context) (*shared.CreateSeverity, diag.Diagnostics) {
	var diags diag.Diagnostics

	color := new(string)
	if !r.Color.IsUnknown() && !r.Color.IsNull() {
		*color = r.Color.ValueString()
	} else {
		color = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	position := new(int)
	if !r.Position.IsUnknown() && !r.Position.IsNull() {
		*position = int(r.Position.ValueInt32())
	} else {
		position = nil
	}
	var slug string
	slug = r.Slug.ValueString()

	out := shared.CreateSeverity{
		Color:       color,
		Description: description,
		Position:    position,
		Slug:        slug,
	}

	return &out, diags
}

func (r *SeverityResourceModel) ToSharedUpdateSeverity(ctx context.Context) (*shared.UpdateSeverity, diag.Diagnostics) {
	var diags diag.Diagnostics

	color := new(string)
	if !r.Color.IsUnknown() && !r.Color.IsNull() {
		*color = r.Color.ValueString()
	} else {
		color = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	position := new(int)
	if !r.Position.IsUnknown() && !r.Position.IsNull() {
		*position = int(r.Position.ValueInt32())
	} else {
		position = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	out := shared.UpdateSeverity{
		Color:       color,
		Description: description,
		Position:    position,
		Slug:        slug,
	}

	return &out, diags
}
