// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ServiceDependencyDataSourceModel) RefreshFromSharedServiceDependency(ctx context.Context, resp *shared.ServiceDependency) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.ConnectedService == nil {
			r.ConnectedService = nil
		} else {
			r.ConnectedService = &tfTypes.NullableService{}
			if resp.ConnectedService.ActiveIncidents != nil {
				r.ConnectedService.ActiveIncidents = make([]types.String, 0, len(resp.ConnectedService.ActiveIncidents))
				for _, v := range resp.ConnectedService.ActiveIncidents {
					r.ConnectedService.ActiveIncidents = append(r.ConnectedService.ActiveIncidents, types.StringValue(v))
				}
			}
			r.ConnectedService.AlertOnAdd = types.BoolPointerValue(resp.ConnectedService.AlertOnAdd)
			if resp.ConnectedService.AllowedParams != nil {
				r.ConnectedService.AllowedParams = make([]types.String, 0, len(resp.ConnectedService.AllowedParams))
				for _, v := range resp.ConnectedService.AllowedParams {
					r.ConnectedService.AllowedParams = append(r.ConnectedService.AllowedParams, types.StringValue(v))
				}
			}
			r.ConnectedService.AutoAddRespondingTeam = types.BoolPointerValue(resp.ConnectedService.AutoAddRespondingTeam)
			if resp.ConnectedService.Checklists != nil {
				r.ConnectedService.Checklists = []tfTypes.ChecklistTemplate{}
				if len(r.ConnectedService.Checklists) > len(resp.ConnectedService.Checklists) {
					r.ConnectedService.Checklists = r.ConnectedService.Checklists[:len(resp.ConnectedService.Checklists)]
				}
				for checklistsCount, checklistsItem := range resp.ConnectedService.Checklists {
					var checklists tfTypes.ChecklistTemplate
					if checklistsItem.Checks != nil {
						checklists.Checks = []tfTypes.ChecklistCheck1{}
						for checksCount, checksItem := range checklistsItem.Checks {
							var checks tfTypes.ChecklistCheck1
							checks.Description = types.StringPointerValue(checksItem.Description)
							checks.ID = types.StringPointerValue(checksItem.ID)
							checks.Name = types.StringPointerValue(checksItem.Name)
							checks.Status = types.BoolPointerValue(checksItem.Status)
							if checksCount+1 > len(checklists.Checks) {
								checklists.Checks = append(checklists.Checks, checks)
							} else {
								checklists.Checks[checksCount].Description = checks.Description
								checklists.Checks[checksCount].ID = checks.ID
								checklists.Checks[checksCount].Name = checks.Name
								checklists.Checks[checksCount].Status = checks.Status
							}
						}
					}
					if checklistsItem.ConnectedServices != nil {
						checklists.ConnectedServices = []tfTypes.ServiceChecklist{}
						for connectedServicesCount, connectedServicesItem := range checklistsItem.ConnectedServices {
							var connectedServices tfTypes.ServiceChecklist
							connectedServices.AlertOnAdd = types.BoolPointerValue(connectedServicesItem.AlertOnAdd)
							if connectedServicesItem.AllowedParams != nil {
								connectedServices.AllowedParams = make([]types.String, 0, len(connectedServicesItem.AllowedParams))
								for _, v := range connectedServicesItem.AllowedParams {
									connectedServices.AllowedParams = append(connectedServices.AllowedParams, types.StringValue(v))
								}
							}
							connectedServices.AutoAddRespondingTeam = types.BoolPointerValue(connectedServicesItem.AutoAddRespondingTeam)
							connectedServices.CompletedChecks = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(connectedServicesItem.CompletedChecks))
							connectedServices.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.CreatedAt))
							connectedServices.Description = types.StringPointerValue(connectedServicesItem.Description)
							connectedServices.ID = types.StringPointerValue(connectedServicesItem.ID)
							if connectedServicesItem.Labels == nil {
								connectedServices.Labels = nil
							} else {
								connectedServices.Labels = &tfTypes.ServiceChecklistLabels{}
							}
							connectedServices.Name = types.StringPointerValue(connectedServicesItem.Name)
							if connectedServicesItem.Owner == nil {
								connectedServices.Owner = nil
							} else {
								connectedServices.Owner = &tfTypes.NullableTeamLite{}
								connectedServices.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.Owner.CreatedAt))
								if connectedServicesItem.Owner.CreatedBy == nil {
									connectedServices.Owner.CreatedBy = nil
								} else {
									connectedServices.Owner.CreatedBy = &tfTypes.NullableAuthor{}
									connectedServices.Owner.CreatedBy.Email = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Email)
									connectedServices.Owner.CreatedBy.ID = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.ID)
									connectedServices.Owner.CreatedBy.Name = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Name)
									connectedServices.Owner.CreatedBy.Source = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Source)
								}
								connectedServices.Owner.Description = types.StringPointerValue(connectedServicesItem.Owner.Description)
								connectedServices.Owner.ID = types.StringPointerValue(connectedServicesItem.Owner.ID)
								connectedServices.Owner.InSupportHours = types.BoolPointerValue(connectedServicesItem.Owner.InSupportHours)
								connectedServices.Owner.Name = types.StringPointerValue(connectedServicesItem.Owner.Name)
								connectedServices.Owner.SignalsIcalURL = types.StringPointerValue(connectedServicesItem.Owner.SignalsIcalURL)
								connectedServices.Owner.Slug = types.StringPointerValue(connectedServicesItem.Owner.Slug)
								connectedServices.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.Owner.UpdatedAt))
							}
							connectedServices.ServiceChecklistUpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.ServiceChecklistUpdatedAt))
							connectedServices.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(connectedServicesItem.ServiceTier))
							connectedServices.Slug = types.StringPointerValue(connectedServicesItem.Slug)
							connectedServices.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.UpdatedAt))
							if connectedServicesCount+1 > len(checklists.ConnectedServices) {
								checklists.ConnectedServices = append(checklists.ConnectedServices, connectedServices)
							} else {
								checklists.ConnectedServices[connectedServicesCount].AlertOnAdd = connectedServices.AlertOnAdd
								checklists.ConnectedServices[connectedServicesCount].AllowedParams = connectedServices.AllowedParams
								checklists.ConnectedServices[connectedServicesCount].AutoAddRespondingTeam = connectedServices.AutoAddRespondingTeam
								checklists.ConnectedServices[connectedServicesCount].CompletedChecks = connectedServices.CompletedChecks
								checklists.ConnectedServices[connectedServicesCount].CreatedAt = connectedServices.CreatedAt
								checklists.ConnectedServices[connectedServicesCount].Description = connectedServices.Description
								checklists.ConnectedServices[connectedServicesCount].ID = connectedServices.ID
								checklists.ConnectedServices[connectedServicesCount].Labels = connectedServices.Labels
								checklists.ConnectedServices[connectedServicesCount].Name = connectedServices.Name
								checklists.ConnectedServices[connectedServicesCount].Owner = connectedServices.Owner
								checklists.ConnectedServices[connectedServicesCount].ServiceChecklistUpdatedAt = connectedServices.ServiceChecklistUpdatedAt
								checklists.ConnectedServices[connectedServicesCount].ServiceTier = connectedServices.ServiceTier
								checklists.ConnectedServices[connectedServicesCount].Slug = connectedServices.Slug
								checklists.ConnectedServices[connectedServicesCount].UpdatedAt = connectedServices.UpdatedAt
							}
						}
					}
					checklists.CreatedAt = types.StringPointerValue(checklistsItem.CreatedAt)
					checklists.Description = types.StringPointerValue(checklistsItem.Description)
					checklists.ID = types.StringPointerValue(checklistsItem.ID)
					checklists.Name = types.StringPointerValue(checklistsItem.Name)
					if checklistsItem.Owner == nil {
						checklists.Owner = nil
					} else {
						checklists.Owner = &tfTypes.NullableTeamLite{}
						checklists.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(checklistsItem.Owner.CreatedAt))
						if checklistsItem.Owner.CreatedBy == nil {
							checklists.Owner.CreatedBy = nil
						} else {
							checklists.Owner.CreatedBy = &tfTypes.NullableAuthor{}
							checklists.Owner.CreatedBy.Email = types.StringPointerValue(checklistsItem.Owner.CreatedBy.Email)
							checklists.Owner.CreatedBy.ID = types.StringPointerValue(checklistsItem.Owner.CreatedBy.ID)
							checklists.Owner.CreatedBy.Name = types.StringPointerValue(checklistsItem.Owner.CreatedBy.Name)
							checklists.Owner.CreatedBy.Source = types.StringPointerValue(checklistsItem.Owner.CreatedBy.Source)
						}
						checklists.Owner.Description = types.StringPointerValue(checklistsItem.Owner.Description)
						checklists.Owner.ID = types.StringPointerValue(checklistsItem.Owner.ID)
						checklists.Owner.InSupportHours = types.BoolPointerValue(checklistsItem.Owner.InSupportHours)
						checklists.Owner.Name = types.StringPointerValue(checklistsItem.Owner.Name)
						checklists.Owner.SignalsIcalURL = types.StringPointerValue(checklistsItem.Owner.SignalsIcalURL)
						checklists.Owner.Slug = types.StringPointerValue(checklistsItem.Owner.Slug)
						checklists.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(checklistsItem.Owner.UpdatedAt))
					}
					checklists.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(checklistsItem.UpdatedAt))
					if checklistsCount+1 > len(r.ConnectedService.Checklists) {
						r.ConnectedService.Checklists = append(r.ConnectedService.Checklists, checklists)
					} else {
						r.ConnectedService.Checklists[checklistsCount].Checks = checklists.Checks
						r.ConnectedService.Checklists[checklistsCount].ConnectedServices = checklists.ConnectedServices
						r.ConnectedService.Checklists[checklistsCount].CreatedAt = checklists.CreatedAt
						r.ConnectedService.Checklists[checklistsCount].Description = checklists.Description
						r.ConnectedService.Checklists[checklistsCount].ID = checklists.ID
						r.ConnectedService.Checklists[checklistsCount].Name = checklists.Name
						r.ConnectedService.Checklists[checklistsCount].Owner = checklists.Owner
						r.ConnectedService.Checklists[checklistsCount].UpdatedAt = checklists.UpdatedAt
					}
				}
			}
			r.ConnectedService.CompletedChecks = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.ConnectedService.CompletedChecks))
			r.ConnectedService.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ConnectedService.CreatedAt))
			r.ConnectedService.Description = types.StringPointerValue(resp.ConnectedService.Description)
			if resp.ConnectedService.ExternalResources != nil {
				r.ConnectedService.ExternalResources = []tfTypes.ExternalResource{}
				if len(r.ConnectedService.ExternalResources) > len(resp.ConnectedService.ExternalResources) {
					r.ConnectedService.ExternalResources = r.ConnectedService.ExternalResources[:len(resp.ConnectedService.ExternalResources)]
				}
				for externalResourcesCount, externalResourcesItem := range resp.ConnectedService.ExternalResources {
					var externalResources tfTypes.ExternalResource
					externalResources.ConnectionFullFaviconURL = types.StringPointerValue(externalResourcesItem.ConnectionFullFaviconURL)
					externalResources.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
					externalResources.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
					externalResources.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
					externalResources.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem.CreatedAt))
					externalResources.Name = types.StringPointerValue(externalResourcesItem.Name)
					externalResources.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
					externalResources.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
					externalResources.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem.UpdatedAt))
					if externalResourcesCount+1 > len(r.ConnectedService.ExternalResources) {
						r.ConnectedService.ExternalResources = append(r.ConnectedService.ExternalResources, externalResources)
					} else {
						r.ConnectedService.ExternalResources[externalResourcesCount].ConnectionFullFaviconURL = externalResources.ConnectionFullFaviconURL
						r.ConnectedService.ExternalResources[externalResourcesCount].ConnectionID = externalResources.ConnectionID
						r.ConnectedService.ExternalResources[externalResourcesCount].ConnectionName = externalResources.ConnectionName
						r.ConnectedService.ExternalResources[externalResourcesCount].ConnectionType = externalResources.ConnectionType
						r.ConnectedService.ExternalResources[externalResourcesCount].CreatedAt = externalResources.CreatedAt
						r.ConnectedService.ExternalResources[externalResourcesCount].Name = externalResources.Name
						r.ConnectedService.ExternalResources[externalResourcesCount].RemoteID = externalResources.RemoteID
						r.ConnectedService.ExternalResources[externalResourcesCount].RemoteURL = externalResources.RemoteURL
						r.ConnectedService.ExternalResources[externalResourcesCount].UpdatedAt = externalResources.UpdatedAt
					}
				}
			}
			if resp.ConnectedService.Functionalities != nil {
				r.ConnectedService.Functionalities = []tfTypes.Functionality{}
				if len(r.ConnectedService.Functionalities) > len(resp.ConnectedService.Functionalities) {
					r.ConnectedService.Functionalities = r.ConnectedService.Functionalities[:len(resp.ConnectedService.Functionalities)]
				}
				for functionalitiesCount, functionalitiesItem := range resp.ConnectedService.Functionalities {
					var functionalities tfTypes.Functionality
					if functionalitiesItem.ActiveIncidents != nil {
						functionalities.ActiveIncidents = make([]types.String, 0, len(functionalitiesItem.ActiveIncidents))
						for _, v := range functionalitiesItem.ActiveIncidents {
							functionalities.ActiveIncidents = append(functionalities.ActiveIncidents, types.StringValue(v))
						}
					}
					functionalities.AlertOnAdd = types.BoolPointerValue(functionalitiesItem.AlertOnAdd)
					functionalities.AutoAddRespondingTeam = types.BoolPointerValue(functionalitiesItem.AutoAddRespondingTeam)
					functionalities.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem.CreatedAt))
					functionalities.Description = types.StringPointerValue(functionalitiesItem.Description)
					if functionalitiesItem.ExternalResources != nil {
						functionalities.ExternalResources = []tfTypes.ExternalResource{}
						for externalResourcesCount1, externalResourcesItem1 := range functionalitiesItem.ExternalResources {
							var externalResources1 tfTypes.ExternalResource
							externalResources1.ConnectionFullFaviconURL = types.StringPointerValue(externalResourcesItem1.ConnectionFullFaviconURL)
							externalResources1.ConnectionID = types.StringPointerValue(externalResourcesItem1.ConnectionID)
							externalResources1.ConnectionName = types.StringPointerValue(externalResourcesItem1.ConnectionName)
							externalResources1.ConnectionType = types.StringPointerValue(externalResourcesItem1.ConnectionType)
							externalResources1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem1.CreatedAt))
							externalResources1.Name = types.StringPointerValue(externalResourcesItem1.Name)
							externalResources1.RemoteID = types.StringPointerValue(externalResourcesItem1.RemoteID)
							externalResources1.RemoteURL = types.StringPointerValue(externalResourcesItem1.RemoteURL)
							externalResources1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem1.UpdatedAt))
							if externalResourcesCount1+1 > len(functionalities.ExternalResources) {
								functionalities.ExternalResources = append(functionalities.ExternalResources, externalResources1)
							} else {
								functionalities.ExternalResources[externalResourcesCount1].ConnectionFullFaviconURL = externalResources1.ConnectionFullFaviconURL
								functionalities.ExternalResources[externalResourcesCount1].ConnectionID = externalResources1.ConnectionID
								functionalities.ExternalResources[externalResourcesCount1].ConnectionName = externalResources1.ConnectionName
								functionalities.ExternalResources[externalResourcesCount1].ConnectionType = externalResources1.ConnectionType
								functionalities.ExternalResources[externalResourcesCount1].CreatedAt = externalResources1.CreatedAt
								functionalities.ExternalResources[externalResourcesCount1].Name = externalResources1.Name
								functionalities.ExternalResources[externalResourcesCount1].RemoteID = externalResources1.RemoteID
								functionalities.ExternalResources[externalResourcesCount1].RemoteURL = externalResources1.RemoteURL
								functionalities.ExternalResources[externalResourcesCount1].UpdatedAt = externalResources1.UpdatedAt
							}
						}
					}
					functionalities.ID = types.StringPointerValue(functionalitiesItem.ID)
					if functionalitiesItem.Labels != nil {
						functionalities.Labels = make(map[string]types.String, len(functionalitiesItem.Labels))
						for key, value := range functionalitiesItem.Labels {
							result, _ := json.Marshal(value)
							functionalities.Labels[key] = types.StringValue(string(result))
						}
					}
					if functionalitiesItem.Links != nil {
						functionalities.Links = []tfTypes.Links{}
						for linksCount, linksItem := range functionalitiesItem.Links {
							var links tfTypes.Links
							links.HrefURL = types.StringPointerValue(linksItem.HrefURL)
							links.IconURL = types.StringPointerValue(linksItem.IconURL)
							links.ID = types.StringPointerValue(linksItem.ID)
							links.Name = types.StringPointerValue(linksItem.Name)
							if linksCount+1 > len(functionalities.Links) {
								functionalities.Links = append(functionalities.Links, links)
							} else {
								functionalities.Links[linksCount].HrefURL = links.HrefURL
								functionalities.Links[linksCount].IconURL = links.IconURL
								functionalities.Links[linksCount].ID = links.ID
								functionalities.Links[linksCount].Name = links.Name
							}
						}
					}
					functionalities.Name = types.StringPointerValue(functionalitiesItem.Name)
					if functionalitiesItem.Owner == nil {
						functionalities.Owner = nil
					} else {
						functionalities.Owner = &tfTypes.NullableTeamLite{}
						functionalities.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem.Owner.CreatedAt))
						if functionalitiesItem.Owner.CreatedBy == nil {
							functionalities.Owner.CreatedBy = nil
						} else {
							functionalities.Owner.CreatedBy = &tfTypes.NullableAuthor{}
							functionalities.Owner.CreatedBy.Email = types.StringPointerValue(functionalitiesItem.Owner.CreatedBy.Email)
							functionalities.Owner.CreatedBy.ID = types.StringPointerValue(functionalitiesItem.Owner.CreatedBy.ID)
							functionalities.Owner.CreatedBy.Name = types.StringPointerValue(functionalitiesItem.Owner.CreatedBy.Name)
							functionalities.Owner.CreatedBy.Source = types.StringPointerValue(functionalitiesItem.Owner.CreatedBy.Source)
						}
						functionalities.Owner.Description = types.StringPointerValue(functionalitiesItem.Owner.Description)
						functionalities.Owner.ID = types.StringPointerValue(functionalitiesItem.Owner.ID)
						functionalities.Owner.InSupportHours = types.BoolPointerValue(functionalitiesItem.Owner.InSupportHours)
						functionalities.Owner.Name = types.StringPointerValue(functionalitiesItem.Owner.Name)
						functionalities.Owner.SignalsIcalURL = types.StringPointerValue(functionalitiesItem.Owner.SignalsIcalURL)
						functionalities.Owner.Slug = types.StringPointerValue(functionalitiesItem.Owner.Slug)
						functionalities.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem.Owner.UpdatedAt))
					}
					if functionalitiesItem.Services != nil {
						functionalities.Services = []tfTypes.ServiceLite{}
						for servicesCount, servicesItem := range functionalitiesItem.Services {
							var services tfTypes.ServiceLite
							services.AlertOnAdd = types.BoolPointerValue(servicesItem.AlertOnAdd)
							if servicesItem.AllowedParams != nil {
								services.AllowedParams = make([]types.String, 0, len(servicesItem.AllowedParams))
								for _, v := range servicesItem.AllowedParams {
									services.AllowedParams = append(services.AllowedParams, types.StringValue(v))
								}
							}
							services.AutoAddRespondingTeam = types.BoolPointerValue(servicesItem.AutoAddRespondingTeam)
							services.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem.CreatedAt))
							services.Description = types.StringPointerValue(servicesItem.Description)
							services.ID = types.StringPointerValue(servicesItem.ID)
							if servicesItem.Labels == nil {
								services.Labels = nil
							} else {
								services.Labels = &tfTypes.ServiceLiteLabels{}
							}
							services.Name = types.StringPointerValue(servicesItem.Name)
							services.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(servicesItem.ServiceTier))
							services.Slug = types.StringPointerValue(servicesItem.Slug)
							services.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem.UpdatedAt))
							if servicesCount+1 > len(functionalities.Services) {
								functionalities.Services = append(functionalities.Services, services)
							} else {
								functionalities.Services[servicesCount].AlertOnAdd = services.AlertOnAdd
								functionalities.Services[servicesCount].AllowedParams = services.AllowedParams
								functionalities.Services[servicesCount].AutoAddRespondingTeam = services.AutoAddRespondingTeam
								functionalities.Services[servicesCount].CreatedAt = services.CreatedAt
								functionalities.Services[servicesCount].Description = services.Description
								functionalities.Services[servicesCount].ID = services.ID
								functionalities.Services[servicesCount].Labels = services.Labels
								functionalities.Services[servicesCount].Name = services.Name
								functionalities.Services[servicesCount].ServiceTier = services.ServiceTier
								functionalities.Services[servicesCount].Slug = services.Slug
								functionalities.Services[servicesCount].UpdatedAt = services.UpdatedAt
							}
						}
					}
					functionalities.Slug = types.StringPointerValue(functionalitiesItem.Slug)
					if functionalitiesItem.Teams != nil {
						functionalities.Teams = []tfTypes.TeamLite{}
						for teamsCount, teamsItem := range functionalitiesItem.Teams {
							var teams tfTypes.TeamLite
							teams.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.CreatedAt))
							if teamsItem.CreatedBy == nil {
								teams.CreatedBy = nil
							} else {
								teams.CreatedBy = &tfTypes.NullableAuthor{}
								teams.CreatedBy.Email = types.StringPointerValue(teamsItem.CreatedBy.Email)
								teams.CreatedBy.ID = types.StringPointerValue(teamsItem.CreatedBy.ID)
								teams.CreatedBy.Name = types.StringPointerValue(teamsItem.CreatedBy.Name)
								teams.CreatedBy.Source = types.StringPointerValue(teamsItem.CreatedBy.Source)
							}
							teams.Description = types.StringPointerValue(teamsItem.Description)
							teams.ID = types.StringPointerValue(teamsItem.ID)
							teams.InSupportHours = types.BoolPointerValue(teamsItem.InSupportHours)
							teams.Name = types.StringPointerValue(teamsItem.Name)
							teams.SignalsIcalURL = types.StringPointerValue(teamsItem.SignalsIcalURL)
							teams.Slug = types.StringPointerValue(teamsItem.Slug)
							teams.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.UpdatedAt))
							if teamsCount+1 > len(functionalities.Teams) {
								functionalities.Teams = append(functionalities.Teams, teams)
							} else {
								functionalities.Teams[teamsCount].CreatedAt = teams.CreatedAt
								functionalities.Teams[teamsCount].CreatedBy = teams.CreatedBy
								functionalities.Teams[teamsCount].Description = teams.Description
								functionalities.Teams[teamsCount].ID = teams.ID
								functionalities.Teams[teamsCount].InSupportHours = teams.InSupportHours
								functionalities.Teams[teamsCount].Name = teams.Name
								functionalities.Teams[teamsCount].SignalsIcalURL = teams.SignalsIcalURL
								functionalities.Teams[teamsCount].Slug = teams.Slug
								functionalities.Teams[teamsCount].UpdatedAt = teams.UpdatedAt
							}
						}
					}
					functionalities.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem.UpdatedAt))
					if functionalitiesItem.UpdatedBy == nil {
						functionalities.UpdatedBy = nil
					} else {
						functionalities.UpdatedBy = &tfTypes.NullableAuthor{}
						functionalities.UpdatedBy.Email = types.StringPointerValue(functionalitiesItem.UpdatedBy.Email)
						functionalities.UpdatedBy.ID = types.StringPointerValue(functionalitiesItem.UpdatedBy.ID)
						functionalities.UpdatedBy.Name = types.StringPointerValue(functionalitiesItem.UpdatedBy.Name)
						functionalities.UpdatedBy.Source = types.StringPointerValue(functionalitiesItem.UpdatedBy.Source)
					}
					if functionalitiesCount+1 > len(r.ConnectedService.Functionalities) {
						r.ConnectedService.Functionalities = append(r.ConnectedService.Functionalities, functionalities)
					} else {
						r.ConnectedService.Functionalities[functionalitiesCount].ActiveIncidents = functionalities.ActiveIncidents
						r.ConnectedService.Functionalities[functionalitiesCount].AlertOnAdd = functionalities.AlertOnAdd
						r.ConnectedService.Functionalities[functionalitiesCount].AutoAddRespondingTeam = functionalities.AutoAddRespondingTeam
						r.ConnectedService.Functionalities[functionalitiesCount].CreatedAt = functionalities.CreatedAt
						r.ConnectedService.Functionalities[functionalitiesCount].Description = functionalities.Description
						r.ConnectedService.Functionalities[functionalitiesCount].ExternalResources = functionalities.ExternalResources
						r.ConnectedService.Functionalities[functionalitiesCount].ID = functionalities.ID
						r.ConnectedService.Functionalities[functionalitiesCount].Labels = functionalities.Labels
						r.ConnectedService.Functionalities[functionalitiesCount].Links = functionalities.Links
						r.ConnectedService.Functionalities[functionalitiesCount].Name = functionalities.Name
						r.ConnectedService.Functionalities[functionalitiesCount].Owner = functionalities.Owner
						r.ConnectedService.Functionalities[functionalitiesCount].Services = functionalities.Services
						r.ConnectedService.Functionalities[functionalitiesCount].Slug = functionalities.Slug
						r.ConnectedService.Functionalities[functionalitiesCount].Teams = functionalities.Teams
						r.ConnectedService.Functionalities[functionalitiesCount].UpdatedAt = functionalities.UpdatedAt
						r.ConnectedService.Functionalities[functionalitiesCount].UpdatedBy = functionalities.UpdatedBy
					}
				}
			}
			r.ConnectedService.ID = types.StringPointerValue(resp.ConnectedService.ID)
			if resp.ConnectedService.Labels != nil {
				r.ConnectedService.Labels = make(map[string]types.String, len(resp.ConnectedService.Labels))
				for key1, value1 := range resp.ConnectedService.Labels {
					result1, _ := json.Marshal(value1)
					r.ConnectedService.Labels[key1] = types.StringValue(string(result1))
				}
			}
			if resp.ConnectedService.LastImport == nil {
				r.ConnectedService.LastImport = nil
			} else {
				r.ConnectedService.LastImport = &tfTypes.NullableImportsImportableResource{}
				if resp.ConnectedService.LastImport.ImportErrors != nil {
					r.ConnectedService.LastImport.ImportErrors = []tfTypes.ImportsImportError{}
					if len(r.ConnectedService.LastImport.ImportErrors) > len(resp.ConnectedService.LastImport.ImportErrors) {
						r.ConnectedService.LastImport.ImportErrors = r.ConnectedService.LastImport.ImportErrors[:len(resp.ConnectedService.LastImport.ImportErrors)]
					}
					for importErrorsCount, importErrorsItem := range resp.ConnectedService.LastImport.ImportErrors {
						var importErrors tfTypes.ImportsImportError
						importErrors.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(importErrorsItem.CreatedAt))
						if importErrorsItem.Data == nil {
							importErrors.Data = nil
						} else {
							importErrors.Data = &tfTypes.ImportsImportErrorData{}
						}
						importErrors.ID = types.StringPointerValue(importErrorsItem.ID)
						importErrors.Message = types.StringPointerValue(importErrorsItem.Message)
						if importErrorsItem.Resource == nil {
							importErrors.Resource = nil
						} else {
							importErrors.Resource = &tfTypes.NullableImportsImportErrorResource{}
							importErrors.Resource.Name = types.StringPointerValue(importErrorsItem.Resource.Name)
							importErrors.Resource.ResourceID = types.StringPointerValue(importErrorsItem.Resource.ResourceID)
							importErrors.Resource.ResourceType = types.StringPointerValue(importErrorsItem.Resource.ResourceType)
						}
						if importErrorsCount+1 > len(r.ConnectedService.LastImport.ImportErrors) {
							r.ConnectedService.LastImport.ImportErrors = append(r.ConnectedService.LastImport.ImportErrors, importErrors)
						} else {
							r.ConnectedService.LastImport.ImportErrors[importErrorsCount].CreatedAt = importErrors.CreatedAt
							r.ConnectedService.LastImport.ImportErrors[importErrorsCount].Data = importErrors.Data
							r.ConnectedService.LastImport.ImportErrors[importErrorsCount].ID = importErrors.ID
							r.ConnectedService.LastImport.ImportErrors[importErrorsCount].Message = importErrors.Message
							r.ConnectedService.LastImport.ImportErrors[importErrorsCount].Resource = importErrors.Resource
						}
					}
				}
				r.ConnectedService.LastImport.ImportedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ConnectedService.LastImport.ImportedAt))
				r.ConnectedService.LastImport.RemoteID = types.StringPointerValue(resp.ConnectedService.LastImport.RemoteID)
				r.ConnectedService.LastImport.State = types.StringPointerValue(resp.ConnectedService.LastImport.State)
			}
			if resp.ConnectedService.Links != nil {
				r.ConnectedService.Links = []tfTypes.Links{}
				if len(r.ConnectedService.Links) > len(resp.ConnectedService.Links) {
					r.ConnectedService.Links = r.ConnectedService.Links[:len(resp.ConnectedService.Links)]
				}
				for linksCount1, linksItem1 := range resp.ConnectedService.Links {
					var links1 tfTypes.Links
					links1.HrefURL = types.StringPointerValue(linksItem1.HrefURL)
					links1.IconURL = types.StringPointerValue(linksItem1.IconURL)
					links1.ID = types.StringPointerValue(linksItem1.ID)
					links1.Name = types.StringPointerValue(linksItem1.Name)
					if linksCount1+1 > len(r.ConnectedService.Links) {
						r.ConnectedService.Links = append(r.ConnectedService.Links, links1)
					} else {
						r.ConnectedService.Links[linksCount1].HrefURL = links1.HrefURL
						r.ConnectedService.Links[linksCount1].IconURL = links1.IconURL
						r.ConnectedService.Links[linksCount1].ID = links1.ID
						r.ConnectedService.Links[linksCount1].Name = links1.Name
					}
				}
			}
			r.ConnectedService.ManagedBy = types.StringPointerValue(resp.ConnectedService.ManagedBy)
			if resp.ConnectedService.ManagedBySettings == nil {
				r.ConnectedService.ManagedBySettings = nil
			} else {
				r.ConnectedService.ManagedBySettings = &tfTypes.NullableServiceManagedBySettings{}
			}
			r.ConnectedService.Name = types.StringPointerValue(resp.ConnectedService.Name)
			if resp.ConnectedService.Owner == nil {
				r.ConnectedService.Owner = nil
			} else {
				r.ConnectedService.Owner = &tfTypes.NullableTeamLite{}
				r.ConnectedService.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ConnectedService.Owner.CreatedAt))
				if resp.ConnectedService.Owner.CreatedBy == nil {
					r.ConnectedService.Owner.CreatedBy = nil
				} else {
					r.ConnectedService.Owner.CreatedBy = &tfTypes.NullableAuthor{}
					r.ConnectedService.Owner.CreatedBy.Email = types.StringPointerValue(resp.ConnectedService.Owner.CreatedBy.Email)
					r.ConnectedService.Owner.CreatedBy.ID = types.StringPointerValue(resp.ConnectedService.Owner.CreatedBy.ID)
					r.ConnectedService.Owner.CreatedBy.Name = types.StringPointerValue(resp.ConnectedService.Owner.CreatedBy.Name)
					r.ConnectedService.Owner.CreatedBy.Source = types.StringPointerValue(resp.ConnectedService.Owner.CreatedBy.Source)
				}
				r.ConnectedService.Owner.Description = types.StringPointerValue(resp.ConnectedService.Owner.Description)
				r.ConnectedService.Owner.ID = types.StringPointerValue(resp.ConnectedService.Owner.ID)
				r.ConnectedService.Owner.InSupportHours = types.BoolPointerValue(resp.ConnectedService.Owner.InSupportHours)
				r.ConnectedService.Owner.Name = types.StringPointerValue(resp.ConnectedService.Owner.Name)
				r.ConnectedService.Owner.SignalsIcalURL = types.StringPointerValue(resp.ConnectedService.Owner.SignalsIcalURL)
				r.ConnectedService.Owner.Slug = types.StringPointerValue(resp.ConnectedService.Owner.Slug)
				r.ConnectedService.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ConnectedService.Owner.UpdatedAt))
			}
			r.ConnectedService.ServiceChecklistUpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ConnectedService.ServiceChecklistUpdatedAt))
			r.ConnectedService.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.ConnectedService.ServiceTier))
			r.ConnectedService.Slug = types.StringPointerValue(resp.ConnectedService.Slug)
			if resp.ConnectedService.Teams != nil {
				r.ConnectedService.Teams = []tfTypes.TeamLite{}
				if len(r.ConnectedService.Teams) > len(resp.ConnectedService.Teams) {
					r.ConnectedService.Teams = r.ConnectedService.Teams[:len(resp.ConnectedService.Teams)]
				}
				for teamsCount1, teamsItem1 := range resp.ConnectedService.Teams {
					var teams1 tfTypes.TeamLite
					teams1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem1.CreatedAt))
					if teamsItem1.CreatedBy == nil {
						teams1.CreatedBy = nil
					} else {
						teams1.CreatedBy = &tfTypes.NullableAuthor{}
						teams1.CreatedBy.Email = types.StringPointerValue(teamsItem1.CreatedBy.Email)
						teams1.CreatedBy.ID = types.StringPointerValue(teamsItem1.CreatedBy.ID)
						teams1.CreatedBy.Name = types.StringPointerValue(teamsItem1.CreatedBy.Name)
						teams1.CreatedBy.Source = types.StringPointerValue(teamsItem1.CreatedBy.Source)
					}
					teams1.Description = types.StringPointerValue(teamsItem1.Description)
					teams1.ID = types.StringPointerValue(teamsItem1.ID)
					teams1.InSupportHours = types.BoolPointerValue(teamsItem1.InSupportHours)
					teams1.Name = types.StringPointerValue(teamsItem1.Name)
					teams1.SignalsIcalURL = types.StringPointerValue(teamsItem1.SignalsIcalURL)
					teams1.Slug = types.StringPointerValue(teamsItem1.Slug)
					teams1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem1.UpdatedAt))
					if teamsCount1+1 > len(r.ConnectedService.Teams) {
						r.ConnectedService.Teams = append(r.ConnectedService.Teams, teams1)
					} else {
						r.ConnectedService.Teams[teamsCount1].CreatedAt = teams1.CreatedAt
						r.ConnectedService.Teams[teamsCount1].CreatedBy = teams1.CreatedBy
						r.ConnectedService.Teams[teamsCount1].Description = teams1.Description
						r.ConnectedService.Teams[teamsCount1].ID = teams1.ID
						r.ConnectedService.Teams[teamsCount1].InSupportHours = teams1.InSupportHours
						r.ConnectedService.Teams[teamsCount1].Name = teams1.Name
						r.ConnectedService.Teams[teamsCount1].SignalsIcalURL = teams1.SignalsIcalURL
						r.ConnectedService.Teams[teamsCount1].Slug = teams1.Slug
						r.ConnectedService.Teams[teamsCount1].UpdatedAt = teams1.UpdatedAt
					}
				}
			}
			r.ConnectedService.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ConnectedService.UpdatedAt))
			if resp.ConnectedService.UpdatedBy == nil {
				r.ConnectedService.UpdatedBy = nil
			} else {
				r.ConnectedService.UpdatedBy = &tfTypes.NullableAuthor{}
				r.ConnectedService.UpdatedBy.Email = types.StringPointerValue(resp.ConnectedService.UpdatedBy.Email)
				r.ConnectedService.UpdatedBy.ID = types.StringPointerValue(resp.ConnectedService.UpdatedBy.ID)
				r.ConnectedService.UpdatedBy.Name = types.StringPointerValue(resp.ConnectedService.UpdatedBy.Name)
				r.ConnectedService.UpdatedBy.Source = types.StringPointerValue(resp.ConnectedService.UpdatedBy.Source)
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.ID = types.StringPointerValue(resp.ID)
		r.Notes = types.StringPointerValue(resp.Notes)
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.NullableService{}
			if resp.Service.ActiveIncidents != nil {
				r.Service.ActiveIncidents = make([]types.String, 0, len(resp.Service.ActiveIncidents))
				for _, v := range resp.Service.ActiveIncidents {
					r.Service.ActiveIncidents = append(r.Service.ActiveIncidents, types.StringValue(v))
				}
			}
			r.Service.AlertOnAdd = types.BoolPointerValue(resp.Service.AlertOnAdd)
			if resp.Service.AllowedParams != nil {
				r.Service.AllowedParams = make([]types.String, 0, len(resp.Service.AllowedParams))
				for _, v := range resp.Service.AllowedParams {
					r.Service.AllowedParams = append(r.Service.AllowedParams, types.StringValue(v))
				}
			}
			r.Service.AutoAddRespondingTeam = types.BoolPointerValue(resp.Service.AutoAddRespondingTeam)
			if resp.Service.Checklists != nil {
				r.Service.Checklists = []tfTypes.ChecklistTemplate{}
				if len(r.Service.Checklists) > len(resp.Service.Checklists) {
					r.Service.Checklists = r.Service.Checklists[:len(resp.Service.Checklists)]
				}
				for checklistsCount1, checklistsItem1 := range resp.Service.Checklists {
					var checklists1 tfTypes.ChecklistTemplate
					if checklistsItem1.Checks != nil {
						checklists1.Checks = []tfTypes.ChecklistCheck1{}
						for checksCount1, checksItem1 := range checklistsItem1.Checks {
							var checks1 tfTypes.ChecklistCheck1
							checks1.Description = types.StringPointerValue(checksItem1.Description)
							checks1.ID = types.StringPointerValue(checksItem1.ID)
							checks1.Name = types.StringPointerValue(checksItem1.Name)
							checks1.Status = types.BoolPointerValue(checksItem1.Status)
							if checksCount1+1 > len(checklists1.Checks) {
								checklists1.Checks = append(checklists1.Checks, checks1)
							} else {
								checklists1.Checks[checksCount1].Description = checks1.Description
								checklists1.Checks[checksCount1].ID = checks1.ID
								checklists1.Checks[checksCount1].Name = checks1.Name
								checklists1.Checks[checksCount1].Status = checks1.Status
							}
						}
					}
					if checklistsItem1.ConnectedServices != nil {
						checklists1.ConnectedServices = []tfTypes.ServiceChecklist{}
						for connectedServicesCount1, connectedServicesItem1 := range checklistsItem1.ConnectedServices {
							var connectedServices1 tfTypes.ServiceChecklist
							connectedServices1.AlertOnAdd = types.BoolPointerValue(connectedServicesItem1.AlertOnAdd)
							if connectedServicesItem1.AllowedParams != nil {
								connectedServices1.AllowedParams = make([]types.String, 0, len(connectedServicesItem1.AllowedParams))
								for _, v := range connectedServicesItem1.AllowedParams {
									connectedServices1.AllowedParams = append(connectedServices1.AllowedParams, types.StringValue(v))
								}
							}
							connectedServices1.AutoAddRespondingTeam = types.BoolPointerValue(connectedServicesItem1.AutoAddRespondingTeam)
							connectedServices1.CompletedChecks = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(connectedServicesItem1.CompletedChecks))
							connectedServices1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem1.CreatedAt))
							connectedServices1.Description = types.StringPointerValue(connectedServicesItem1.Description)
							connectedServices1.ID = types.StringPointerValue(connectedServicesItem1.ID)
							if connectedServicesItem1.Labels == nil {
								connectedServices1.Labels = nil
							} else {
								connectedServices1.Labels = &tfTypes.ServiceChecklistLabels{}
							}
							connectedServices1.Name = types.StringPointerValue(connectedServicesItem1.Name)
							if connectedServicesItem1.Owner == nil {
								connectedServices1.Owner = nil
							} else {
								connectedServices1.Owner = &tfTypes.NullableTeamLite{}
								connectedServices1.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem1.Owner.CreatedAt))
								if connectedServicesItem1.Owner.CreatedBy == nil {
									connectedServices1.Owner.CreatedBy = nil
								} else {
									connectedServices1.Owner.CreatedBy = &tfTypes.NullableAuthor{}
									connectedServices1.Owner.CreatedBy.Email = types.StringPointerValue(connectedServicesItem1.Owner.CreatedBy.Email)
									connectedServices1.Owner.CreatedBy.ID = types.StringPointerValue(connectedServicesItem1.Owner.CreatedBy.ID)
									connectedServices1.Owner.CreatedBy.Name = types.StringPointerValue(connectedServicesItem1.Owner.CreatedBy.Name)
									connectedServices1.Owner.CreatedBy.Source = types.StringPointerValue(connectedServicesItem1.Owner.CreatedBy.Source)
								}
								connectedServices1.Owner.Description = types.StringPointerValue(connectedServicesItem1.Owner.Description)
								connectedServices1.Owner.ID = types.StringPointerValue(connectedServicesItem1.Owner.ID)
								connectedServices1.Owner.InSupportHours = types.BoolPointerValue(connectedServicesItem1.Owner.InSupportHours)
								connectedServices1.Owner.Name = types.StringPointerValue(connectedServicesItem1.Owner.Name)
								connectedServices1.Owner.SignalsIcalURL = types.StringPointerValue(connectedServicesItem1.Owner.SignalsIcalURL)
								connectedServices1.Owner.Slug = types.StringPointerValue(connectedServicesItem1.Owner.Slug)
								connectedServices1.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem1.Owner.UpdatedAt))
							}
							connectedServices1.ServiceChecklistUpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem1.ServiceChecklistUpdatedAt))
							connectedServices1.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(connectedServicesItem1.ServiceTier))
							connectedServices1.Slug = types.StringPointerValue(connectedServicesItem1.Slug)
							connectedServices1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem1.UpdatedAt))
							if connectedServicesCount1+1 > len(checklists1.ConnectedServices) {
								checklists1.ConnectedServices = append(checklists1.ConnectedServices, connectedServices1)
							} else {
								checklists1.ConnectedServices[connectedServicesCount1].AlertOnAdd = connectedServices1.AlertOnAdd
								checklists1.ConnectedServices[connectedServicesCount1].AllowedParams = connectedServices1.AllowedParams
								checklists1.ConnectedServices[connectedServicesCount1].AutoAddRespondingTeam = connectedServices1.AutoAddRespondingTeam
								checklists1.ConnectedServices[connectedServicesCount1].CompletedChecks = connectedServices1.CompletedChecks
								checklists1.ConnectedServices[connectedServicesCount1].CreatedAt = connectedServices1.CreatedAt
								checklists1.ConnectedServices[connectedServicesCount1].Description = connectedServices1.Description
								checklists1.ConnectedServices[connectedServicesCount1].ID = connectedServices1.ID
								checklists1.ConnectedServices[connectedServicesCount1].Labels = connectedServices1.Labels
								checklists1.ConnectedServices[connectedServicesCount1].Name = connectedServices1.Name
								checklists1.ConnectedServices[connectedServicesCount1].Owner = connectedServices1.Owner
								checklists1.ConnectedServices[connectedServicesCount1].ServiceChecklistUpdatedAt = connectedServices1.ServiceChecklistUpdatedAt
								checklists1.ConnectedServices[connectedServicesCount1].ServiceTier = connectedServices1.ServiceTier
								checklists1.ConnectedServices[connectedServicesCount1].Slug = connectedServices1.Slug
								checklists1.ConnectedServices[connectedServicesCount1].UpdatedAt = connectedServices1.UpdatedAt
							}
						}
					}
					checklists1.CreatedAt = types.StringPointerValue(checklistsItem1.CreatedAt)
					checklists1.Description = types.StringPointerValue(checklistsItem1.Description)
					checklists1.ID = types.StringPointerValue(checklistsItem1.ID)
					checklists1.Name = types.StringPointerValue(checklistsItem1.Name)
					if checklistsItem1.Owner == nil {
						checklists1.Owner = nil
					} else {
						checklists1.Owner = &tfTypes.NullableTeamLite{}
						checklists1.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(checklistsItem1.Owner.CreatedAt))
						if checklistsItem1.Owner.CreatedBy == nil {
							checklists1.Owner.CreatedBy = nil
						} else {
							checklists1.Owner.CreatedBy = &tfTypes.NullableAuthor{}
							checklists1.Owner.CreatedBy.Email = types.StringPointerValue(checklistsItem1.Owner.CreatedBy.Email)
							checklists1.Owner.CreatedBy.ID = types.StringPointerValue(checklistsItem1.Owner.CreatedBy.ID)
							checklists1.Owner.CreatedBy.Name = types.StringPointerValue(checklistsItem1.Owner.CreatedBy.Name)
							checklists1.Owner.CreatedBy.Source = types.StringPointerValue(checklistsItem1.Owner.CreatedBy.Source)
						}
						checklists1.Owner.Description = types.StringPointerValue(checklistsItem1.Owner.Description)
						checklists1.Owner.ID = types.StringPointerValue(checklistsItem1.Owner.ID)
						checklists1.Owner.InSupportHours = types.BoolPointerValue(checklistsItem1.Owner.InSupportHours)
						checklists1.Owner.Name = types.StringPointerValue(checklistsItem1.Owner.Name)
						checklists1.Owner.SignalsIcalURL = types.StringPointerValue(checklistsItem1.Owner.SignalsIcalURL)
						checklists1.Owner.Slug = types.StringPointerValue(checklistsItem1.Owner.Slug)
						checklists1.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(checklistsItem1.Owner.UpdatedAt))
					}
					checklists1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(checklistsItem1.UpdatedAt))
					if checklistsCount1+1 > len(r.Service.Checklists) {
						r.Service.Checklists = append(r.Service.Checklists, checklists1)
					} else {
						r.Service.Checklists[checklistsCount1].Checks = checklists1.Checks
						r.Service.Checklists[checklistsCount1].ConnectedServices = checklists1.ConnectedServices
						r.Service.Checklists[checklistsCount1].CreatedAt = checklists1.CreatedAt
						r.Service.Checklists[checklistsCount1].Description = checklists1.Description
						r.Service.Checklists[checklistsCount1].ID = checklists1.ID
						r.Service.Checklists[checklistsCount1].Name = checklists1.Name
						r.Service.Checklists[checklistsCount1].Owner = checklists1.Owner
						r.Service.Checklists[checklistsCount1].UpdatedAt = checklists1.UpdatedAt
					}
				}
			}
			r.Service.CompletedChecks = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Service.CompletedChecks))
			r.Service.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Service.CreatedAt))
			r.Service.Description = types.StringPointerValue(resp.Service.Description)
			if resp.Service.ExternalResources != nil {
				r.Service.ExternalResources = []tfTypes.ExternalResource{}
				if len(r.Service.ExternalResources) > len(resp.Service.ExternalResources) {
					r.Service.ExternalResources = r.Service.ExternalResources[:len(resp.Service.ExternalResources)]
				}
				for externalResourcesCount2, externalResourcesItem2 := range resp.Service.ExternalResources {
					var externalResources2 tfTypes.ExternalResource
					externalResources2.ConnectionFullFaviconURL = types.StringPointerValue(externalResourcesItem2.ConnectionFullFaviconURL)
					externalResources2.ConnectionID = types.StringPointerValue(externalResourcesItem2.ConnectionID)
					externalResources2.ConnectionName = types.StringPointerValue(externalResourcesItem2.ConnectionName)
					externalResources2.ConnectionType = types.StringPointerValue(externalResourcesItem2.ConnectionType)
					externalResources2.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem2.CreatedAt))
					externalResources2.Name = types.StringPointerValue(externalResourcesItem2.Name)
					externalResources2.RemoteID = types.StringPointerValue(externalResourcesItem2.RemoteID)
					externalResources2.RemoteURL = types.StringPointerValue(externalResourcesItem2.RemoteURL)
					externalResources2.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem2.UpdatedAt))
					if externalResourcesCount2+1 > len(r.Service.ExternalResources) {
						r.Service.ExternalResources = append(r.Service.ExternalResources, externalResources2)
					} else {
						r.Service.ExternalResources[externalResourcesCount2].ConnectionFullFaviconURL = externalResources2.ConnectionFullFaviconURL
						r.Service.ExternalResources[externalResourcesCount2].ConnectionID = externalResources2.ConnectionID
						r.Service.ExternalResources[externalResourcesCount2].ConnectionName = externalResources2.ConnectionName
						r.Service.ExternalResources[externalResourcesCount2].ConnectionType = externalResources2.ConnectionType
						r.Service.ExternalResources[externalResourcesCount2].CreatedAt = externalResources2.CreatedAt
						r.Service.ExternalResources[externalResourcesCount2].Name = externalResources2.Name
						r.Service.ExternalResources[externalResourcesCount2].RemoteID = externalResources2.RemoteID
						r.Service.ExternalResources[externalResourcesCount2].RemoteURL = externalResources2.RemoteURL
						r.Service.ExternalResources[externalResourcesCount2].UpdatedAt = externalResources2.UpdatedAt
					}
				}
			}
			if resp.Service.Functionalities != nil {
				r.Service.Functionalities = []tfTypes.Functionality{}
				if len(r.Service.Functionalities) > len(resp.Service.Functionalities) {
					r.Service.Functionalities = r.Service.Functionalities[:len(resp.Service.Functionalities)]
				}
				for functionalitiesCount1, functionalitiesItem1 := range resp.Service.Functionalities {
					var functionalities1 tfTypes.Functionality
					if functionalitiesItem1.ActiveIncidents != nil {
						functionalities1.ActiveIncidents = make([]types.String, 0, len(functionalitiesItem1.ActiveIncidents))
						for _, v := range functionalitiesItem1.ActiveIncidents {
							functionalities1.ActiveIncidents = append(functionalities1.ActiveIncidents, types.StringValue(v))
						}
					}
					functionalities1.AlertOnAdd = types.BoolPointerValue(functionalitiesItem1.AlertOnAdd)
					functionalities1.AutoAddRespondingTeam = types.BoolPointerValue(functionalitiesItem1.AutoAddRespondingTeam)
					functionalities1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem1.CreatedAt))
					functionalities1.Description = types.StringPointerValue(functionalitiesItem1.Description)
					if functionalitiesItem1.ExternalResources != nil {
						functionalities1.ExternalResources = []tfTypes.ExternalResource{}
						for externalResourcesCount3, externalResourcesItem3 := range functionalitiesItem1.ExternalResources {
							var externalResources3 tfTypes.ExternalResource
							externalResources3.ConnectionFullFaviconURL = types.StringPointerValue(externalResourcesItem3.ConnectionFullFaviconURL)
							externalResources3.ConnectionID = types.StringPointerValue(externalResourcesItem3.ConnectionID)
							externalResources3.ConnectionName = types.StringPointerValue(externalResourcesItem3.ConnectionName)
							externalResources3.ConnectionType = types.StringPointerValue(externalResourcesItem3.ConnectionType)
							externalResources3.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem3.CreatedAt))
							externalResources3.Name = types.StringPointerValue(externalResourcesItem3.Name)
							externalResources3.RemoteID = types.StringPointerValue(externalResourcesItem3.RemoteID)
							externalResources3.RemoteURL = types.StringPointerValue(externalResourcesItem3.RemoteURL)
							externalResources3.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem3.UpdatedAt))
							if externalResourcesCount3+1 > len(functionalities1.ExternalResources) {
								functionalities1.ExternalResources = append(functionalities1.ExternalResources, externalResources3)
							} else {
								functionalities1.ExternalResources[externalResourcesCount3].ConnectionFullFaviconURL = externalResources3.ConnectionFullFaviconURL
								functionalities1.ExternalResources[externalResourcesCount3].ConnectionID = externalResources3.ConnectionID
								functionalities1.ExternalResources[externalResourcesCount3].ConnectionName = externalResources3.ConnectionName
								functionalities1.ExternalResources[externalResourcesCount3].ConnectionType = externalResources3.ConnectionType
								functionalities1.ExternalResources[externalResourcesCount3].CreatedAt = externalResources3.CreatedAt
								functionalities1.ExternalResources[externalResourcesCount3].Name = externalResources3.Name
								functionalities1.ExternalResources[externalResourcesCount3].RemoteID = externalResources3.RemoteID
								functionalities1.ExternalResources[externalResourcesCount3].RemoteURL = externalResources3.RemoteURL
								functionalities1.ExternalResources[externalResourcesCount3].UpdatedAt = externalResources3.UpdatedAt
							}
						}
					}
					functionalities1.ID = types.StringPointerValue(functionalitiesItem1.ID)
					if functionalitiesItem1.Labels != nil {
						functionalities1.Labels = make(map[string]types.String, len(functionalitiesItem1.Labels))
						for key2, value2 := range functionalitiesItem1.Labels {
							result2, _ := json.Marshal(value2)
							functionalities1.Labels[key2] = types.StringValue(string(result2))
						}
					}
					if functionalitiesItem1.Links != nil {
						functionalities1.Links = []tfTypes.Links{}
						for linksCount2, linksItem2 := range functionalitiesItem1.Links {
							var links2 tfTypes.Links
							links2.HrefURL = types.StringPointerValue(linksItem2.HrefURL)
							links2.IconURL = types.StringPointerValue(linksItem2.IconURL)
							links2.ID = types.StringPointerValue(linksItem2.ID)
							links2.Name = types.StringPointerValue(linksItem2.Name)
							if linksCount2+1 > len(functionalities1.Links) {
								functionalities1.Links = append(functionalities1.Links, links2)
							} else {
								functionalities1.Links[linksCount2].HrefURL = links2.HrefURL
								functionalities1.Links[linksCount2].IconURL = links2.IconURL
								functionalities1.Links[linksCount2].ID = links2.ID
								functionalities1.Links[linksCount2].Name = links2.Name
							}
						}
					}
					functionalities1.Name = types.StringPointerValue(functionalitiesItem1.Name)
					if functionalitiesItem1.Owner == nil {
						functionalities1.Owner = nil
					} else {
						functionalities1.Owner = &tfTypes.NullableTeamLite{}
						functionalities1.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem1.Owner.CreatedAt))
						if functionalitiesItem1.Owner.CreatedBy == nil {
							functionalities1.Owner.CreatedBy = nil
						} else {
							functionalities1.Owner.CreatedBy = &tfTypes.NullableAuthor{}
							functionalities1.Owner.CreatedBy.Email = types.StringPointerValue(functionalitiesItem1.Owner.CreatedBy.Email)
							functionalities1.Owner.CreatedBy.ID = types.StringPointerValue(functionalitiesItem1.Owner.CreatedBy.ID)
							functionalities1.Owner.CreatedBy.Name = types.StringPointerValue(functionalitiesItem1.Owner.CreatedBy.Name)
							functionalities1.Owner.CreatedBy.Source = types.StringPointerValue(functionalitiesItem1.Owner.CreatedBy.Source)
						}
						functionalities1.Owner.Description = types.StringPointerValue(functionalitiesItem1.Owner.Description)
						functionalities1.Owner.ID = types.StringPointerValue(functionalitiesItem1.Owner.ID)
						functionalities1.Owner.InSupportHours = types.BoolPointerValue(functionalitiesItem1.Owner.InSupportHours)
						functionalities1.Owner.Name = types.StringPointerValue(functionalitiesItem1.Owner.Name)
						functionalities1.Owner.SignalsIcalURL = types.StringPointerValue(functionalitiesItem1.Owner.SignalsIcalURL)
						functionalities1.Owner.Slug = types.StringPointerValue(functionalitiesItem1.Owner.Slug)
						functionalities1.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem1.Owner.UpdatedAt))
					}
					if functionalitiesItem1.Services != nil {
						functionalities1.Services = []tfTypes.ServiceLite{}
						for servicesCount1, servicesItem1 := range functionalitiesItem1.Services {
							var services1 tfTypes.ServiceLite
							services1.AlertOnAdd = types.BoolPointerValue(servicesItem1.AlertOnAdd)
							if servicesItem1.AllowedParams != nil {
								services1.AllowedParams = make([]types.String, 0, len(servicesItem1.AllowedParams))
								for _, v := range servicesItem1.AllowedParams {
									services1.AllowedParams = append(services1.AllowedParams, types.StringValue(v))
								}
							}
							services1.AutoAddRespondingTeam = types.BoolPointerValue(servicesItem1.AutoAddRespondingTeam)
							services1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem1.CreatedAt))
							services1.Description = types.StringPointerValue(servicesItem1.Description)
							services1.ID = types.StringPointerValue(servicesItem1.ID)
							if servicesItem1.Labels == nil {
								services1.Labels = nil
							} else {
								services1.Labels = &tfTypes.ServiceLiteLabels{}
							}
							services1.Name = types.StringPointerValue(servicesItem1.Name)
							services1.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(servicesItem1.ServiceTier))
							services1.Slug = types.StringPointerValue(servicesItem1.Slug)
							services1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem1.UpdatedAt))
							if servicesCount1+1 > len(functionalities1.Services) {
								functionalities1.Services = append(functionalities1.Services, services1)
							} else {
								functionalities1.Services[servicesCount1].AlertOnAdd = services1.AlertOnAdd
								functionalities1.Services[servicesCount1].AllowedParams = services1.AllowedParams
								functionalities1.Services[servicesCount1].AutoAddRespondingTeam = services1.AutoAddRespondingTeam
								functionalities1.Services[servicesCount1].CreatedAt = services1.CreatedAt
								functionalities1.Services[servicesCount1].Description = services1.Description
								functionalities1.Services[servicesCount1].ID = services1.ID
								functionalities1.Services[servicesCount1].Labels = services1.Labels
								functionalities1.Services[servicesCount1].Name = services1.Name
								functionalities1.Services[servicesCount1].ServiceTier = services1.ServiceTier
								functionalities1.Services[servicesCount1].Slug = services1.Slug
								functionalities1.Services[servicesCount1].UpdatedAt = services1.UpdatedAt
							}
						}
					}
					functionalities1.Slug = types.StringPointerValue(functionalitiesItem1.Slug)
					if functionalitiesItem1.Teams != nil {
						functionalities1.Teams = []tfTypes.TeamLite{}
						for teamsCount2, teamsItem2 := range functionalitiesItem1.Teams {
							var teams2 tfTypes.TeamLite
							teams2.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem2.CreatedAt))
							if teamsItem2.CreatedBy == nil {
								teams2.CreatedBy = nil
							} else {
								teams2.CreatedBy = &tfTypes.NullableAuthor{}
								teams2.CreatedBy.Email = types.StringPointerValue(teamsItem2.CreatedBy.Email)
								teams2.CreatedBy.ID = types.StringPointerValue(teamsItem2.CreatedBy.ID)
								teams2.CreatedBy.Name = types.StringPointerValue(teamsItem2.CreatedBy.Name)
								teams2.CreatedBy.Source = types.StringPointerValue(teamsItem2.CreatedBy.Source)
							}
							teams2.Description = types.StringPointerValue(teamsItem2.Description)
							teams2.ID = types.StringPointerValue(teamsItem2.ID)
							teams2.InSupportHours = types.BoolPointerValue(teamsItem2.InSupportHours)
							teams2.Name = types.StringPointerValue(teamsItem2.Name)
							teams2.SignalsIcalURL = types.StringPointerValue(teamsItem2.SignalsIcalURL)
							teams2.Slug = types.StringPointerValue(teamsItem2.Slug)
							teams2.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem2.UpdatedAt))
							if teamsCount2+1 > len(functionalities1.Teams) {
								functionalities1.Teams = append(functionalities1.Teams, teams2)
							} else {
								functionalities1.Teams[teamsCount2].CreatedAt = teams2.CreatedAt
								functionalities1.Teams[teamsCount2].CreatedBy = teams2.CreatedBy
								functionalities1.Teams[teamsCount2].Description = teams2.Description
								functionalities1.Teams[teamsCount2].ID = teams2.ID
								functionalities1.Teams[teamsCount2].InSupportHours = teams2.InSupportHours
								functionalities1.Teams[teamsCount2].Name = teams2.Name
								functionalities1.Teams[teamsCount2].SignalsIcalURL = teams2.SignalsIcalURL
								functionalities1.Teams[teamsCount2].Slug = teams2.Slug
								functionalities1.Teams[teamsCount2].UpdatedAt = teams2.UpdatedAt
							}
						}
					}
					functionalities1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem1.UpdatedAt))
					if functionalitiesItem1.UpdatedBy == nil {
						functionalities1.UpdatedBy = nil
					} else {
						functionalities1.UpdatedBy = &tfTypes.NullableAuthor{}
						functionalities1.UpdatedBy.Email = types.StringPointerValue(functionalitiesItem1.UpdatedBy.Email)
						functionalities1.UpdatedBy.ID = types.StringPointerValue(functionalitiesItem1.UpdatedBy.ID)
						functionalities1.UpdatedBy.Name = types.StringPointerValue(functionalitiesItem1.UpdatedBy.Name)
						functionalities1.UpdatedBy.Source = types.StringPointerValue(functionalitiesItem1.UpdatedBy.Source)
					}
					if functionalitiesCount1+1 > len(r.Service.Functionalities) {
						r.Service.Functionalities = append(r.Service.Functionalities, functionalities1)
					} else {
						r.Service.Functionalities[functionalitiesCount1].ActiveIncidents = functionalities1.ActiveIncidents
						r.Service.Functionalities[functionalitiesCount1].AlertOnAdd = functionalities1.AlertOnAdd
						r.Service.Functionalities[functionalitiesCount1].AutoAddRespondingTeam = functionalities1.AutoAddRespondingTeam
						r.Service.Functionalities[functionalitiesCount1].CreatedAt = functionalities1.CreatedAt
						r.Service.Functionalities[functionalitiesCount1].Description = functionalities1.Description
						r.Service.Functionalities[functionalitiesCount1].ExternalResources = functionalities1.ExternalResources
						r.Service.Functionalities[functionalitiesCount1].ID = functionalities1.ID
						r.Service.Functionalities[functionalitiesCount1].Labels = functionalities1.Labels
						r.Service.Functionalities[functionalitiesCount1].Links = functionalities1.Links
						r.Service.Functionalities[functionalitiesCount1].Name = functionalities1.Name
						r.Service.Functionalities[functionalitiesCount1].Owner = functionalities1.Owner
						r.Service.Functionalities[functionalitiesCount1].Services = functionalities1.Services
						r.Service.Functionalities[functionalitiesCount1].Slug = functionalities1.Slug
						r.Service.Functionalities[functionalitiesCount1].Teams = functionalities1.Teams
						r.Service.Functionalities[functionalitiesCount1].UpdatedAt = functionalities1.UpdatedAt
						r.Service.Functionalities[functionalitiesCount1].UpdatedBy = functionalities1.UpdatedBy
					}
				}
			}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
			if resp.Service.Labels != nil {
				r.Service.Labels = make(map[string]types.String, len(resp.Service.Labels))
				for key3, value3 := range resp.Service.Labels {
					result3, _ := json.Marshal(value3)
					r.Service.Labels[key3] = types.StringValue(string(result3))
				}
			}
			if resp.Service.LastImport == nil {
				r.Service.LastImport = nil
			} else {
				r.Service.LastImport = &tfTypes.NullableImportsImportableResource{}
				if resp.Service.LastImport.ImportErrors != nil {
					r.Service.LastImport.ImportErrors = []tfTypes.ImportsImportError{}
					if len(r.Service.LastImport.ImportErrors) > len(resp.Service.LastImport.ImportErrors) {
						r.Service.LastImport.ImportErrors = r.Service.LastImport.ImportErrors[:len(resp.Service.LastImport.ImportErrors)]
					}
					for importErrorsCount1, importErrorsItem1 := range resp.Service.LastImport.ImportErrors {
						var importErrors1 tfTypes.ImportsImportError
						importErrors1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(importErrorsItem1.CreatedAt))
						if importErrorsItem1.Data == nil {
							importErrors1.Data = nil
						} else {
							importErrors1.Data = &tfTypes.ImportsImportErrorData{}
						}
						importErrors1.ID = types.StringPointerValue(importErrorsItem1.ID)
						importErrors1.Message = types.StringPointerValue(importErrorsItem1.Message)
						if importErrorsItem1.Resource == nil {
							importErrors1.Resource = nil
						} else {
							importErrors1.Resource = &tfTypes.NullableImportsImportErrorResource{}
							importErrors1.Resource.Name = types.StringPointerValue(importErrorsItem1.Resource.Name)
							importErrors1.Resource.ResourceID = types.StringPointerValue(importErrorsItem1.Resource.ResourceID)
							importErrors1.Resource.ResourceType = types.StringPointerValue(importErrorsItem1.Resource.ResourceType)
						}
						if importErrorsCount1+1 > len(r.Service.LastImport.ImportErrors) {
							r.Service.LastImport.ImportErrors = append(r.Service.LastImport.ImportErrors, importErrors1)
						} else {
							r.Service.LastImport.ImportErrors[importErrorsCount1].CreatedAt = importErrors1.CreatedAt
							r.Service.LastImport.ImportErrors[importErrorsCount1].Data = importErrors1.Data
							r.Service.LastImport.ImportErrors[importErrorsCount1].ID = importErrors1.ID
							r.Service.LastImport.ImportErrors[importErrorsCount1].Message = importErrors1.Message
							r.Service.LastImport.ImportErrors[importErrorsCount1].Resource = importErrors1.Resource
						}
					}
				}
				r.Service.LastImport.ImportedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Service.LastImport.ImportedAt))
				r.Service.LastImport.RemoteID = types.StringPointerValue(resp.Service.LastImport.RemoteID)
				r.Service.LastImport.State = types.StringPointerValue(resp.Service.LastImport.State)
			}
			if resp.Service.Links != nil {
				r.Service.Links = []tfTypes.Links{}
				if len(r.Service.Links) > len(resp.Service.Links) {
					r.Service.Links = r.Service.Links[:len(resp.Service.Links)]
				}
				for linksCount3, linksItem3 := range resp.Service.Links {
					var links3 tfTypes.Links
					links3.HrefURL = types.StringPointerValue(linksItem3.HrefURL)
					links3.IconURL = types.StringPointerValue(linksItem3.IconURL)
					links3.ID = types.StringPointerValue(linksItem3.ID)
					links3.Name = types.StringPointerValue(linksItem3.Name)
					if linksCount3+1 > len(r.Service.Links) {
						r.Service.Links = append(r.Service.Links, links3)
					} else {
						r.Service.Links[linksCount3].HrefURL = links3.HrefURL
						r.Service.Links[linksCount3].IconURL = links3.IconURL
						r.Service.Links[linksCount3].ID = links3.ID
						r.Service.Links[linksCount3].Name = links3.Name
					}
				}
			}
			r.Service.ManagedBy = types.StringPointerValue(resp.Service.ManagedBy)
			if resp.Service.ManagedBySettings == nil {
				r.Service.ManagedBySettings = nil
			} else {
				r.Service.ManagedBySettings = &tfTypes.NullableServiceManagedBySettings{}
			}
			r.Service.Name = types.StringPointerValue(resp.Service.Name)
			if resp.Service.Owner == nil {
				r.Service.Owner = nil
			} else {
				r.Service.Owner = &tfTypes.NullableTeamLite{}
				r.Service.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Service.Owner.CreatedAt))
				if resp.Service.Owner.CreatedBy == nil {
					r.Service.Owner.CreatedBy = nil
				} else {
					r.Service.Owner.CreatedBy = &tfTypes.NullableAuthor{}
					r.Service.Owner.CreatedBy.Email = types.StringPointerValue(resp.Service.Owner.CreatedBy.Email)
					r.Service.Owner.CreatedBy.ID = types.StringPointerValue(resp.Service.Owner.CreatedBy.ID)
					r.Service.Owner.CreatedBy.Name = types.StringPointerValue(resp.Service.Owner.CreatedBy.Name)
					r.Service.Owner.CreatedBy.Source = types.StringPointerValue(resp.Service.Owner.CreatedBy.Source)
				}
				r.Service.Owner.Description = types.StringPointerValue(resp.Service.Owner.Description)
				r.Service.Owner.ID = types.StringPointerValue(resp.Service.Owner.ID)
				r.Service.Owner.InSupportHours = types.BoolPointerValue(resp.Service.Owner.InSupportHours)
				r.Service.Owner.Name = types.StringPointerValue(resp.Service.Owner.Name)
				r.Service.Owner.SignalsIcalURL = types.StringPointerValue(resp.Service.Owner.SignalsIcalURL)
				r.Service.Owner.Slug = types.StringPointerValue(resp.Service.Owner.Slug)
				r.Service.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Service.Owner.UpdatedAt))
			}
			r.Service.ServiceChecklistUpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Service.ServiceChecklistUpdatedAt))
			r.Service.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Service.ServiceTier))
			r.Service.Slug = types.StringPointerValue(resp.Service.Slug)
			if resp.Service.Teams != nil {
				r.Service.Teams = []tfTypes.TeamLite{}
				if len(r.Service.Teams) > len(resp.Service.Teams) {
					r.Service.Teams = r.Service.Teams[:len(resp.Service.Teams)]
				}
				for teamsCount3, teamsItem3 := range resp.Service.Teams {
					var teams3 tfTypes.TeamLite
					teams3.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem3.CreatedAt))
					if teamsItem3.CreatedBy == nil {
						teams3.CreatedBy = nil
					} else {
						teams3.CreatedBy = &tfTypes.NullableAuthor{}
						teams3.CreatedBy.Email = types.StringPointerValue(teamsItem3.CreatedBy.Email)
						teams3.CreatedBy.ID = types.StringPointerValue(teamsItem3.CreatedBy.ID)
						teams3.CreatedBy.Name = types.StringPointerValue(teamsItem3.CreatedBy.Name)
						teams3.CreatedBy.Source = types.StringPointerValue(teamsItem3.CreatedBy.Source)
					}
					teams3.Description = types.StringPointerValue(teamsItem3.Description)
					teams3.ID = types.StringPointerValue(teamsItem3.ID)
					teams3.InSupportHours = types.BoolPointerValue(teamsItem3.InSupportHours)
					teams3.Name = types.StringPointerValue(teamsItem3.Name)
					teams3.SignalsIcalURL = types.StringPointerValue(teamsItem3.SignalsIcalURL)
					teams3.Slug = types.StringPointerValue(teamsItem3.Slug)
					teams3.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem3.UpdatedAt))
					if teamsCount3+1 > len(r.Service.Teams) {
						r.Service.Teams = append(r.Service.Teams, teams3)
					} else {
						r.Service.Teams[teamsCount3].CreatedAt = teams3.CreatedAt
						r.Service.Teams[teamsCount3].CreatedBy = teams3.CreatedBy
						r.Service.Teams[teamsCount3].Description = teams3.Description
						r.Service.Teams[teamsCount3].ID = teams3.ID
						r.Service.Teams[teamsCount3].InSupportHours = teams3.InSupportHours
						r.Service.Teams[teamsCount3].Name = teams3.Name
						r.Service.Teams[teamsCount3].SignalsIcalURL = teams3.SignalsIcalURL
						r.Service.Teams[teamsCount3].Slug = teams3.Slug
						r.Service.Teams[teamsCount3].UpdatedAt = teams3.UpdatedAt
					}
				}
			}
			r.Service.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Service.UpdatedAt))
			if resp.Service.UpdatedBy == nil {
				r.Service.UpdatedBy = nil
			} else {
				r.Service.UpdatedBy = &tfTypes.NullableAuthor{}
				r.Service.UpdatedBy.Email = types.StringPointerValue(resp.Service.UpdatedBy.Email)
				r.Service.UpdatedBy.ID = types.StringPointerValue(resp.Service.UpdatedBy.ID)
				r.Service.UpdatedBy.Name = types.StringPointerValue(resp.Service.UpdatedBy.Name)
				r.Service.UpdatedBy.Source = types.StringPointerValue(resp.Service.UpdatedBy.Source)
			}
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *ServiceDependencyDataSourceModel) ToOperationsGetServiceDependencyRequest(ctx context.Context) (*operations.GetServiceDependencyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var serviceDependencyID string
	serviceDependencyID = r.ID.ValueString()

	out := operations.GetServiceDependencyRequest{
		ServiceDependencyID: serviceDependencyID,
	}

	return &out, diags
}
