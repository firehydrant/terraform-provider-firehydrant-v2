// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &TicketingProjectsProjectListItemDataSource{}
var _ datasource.DataSourceWithConfigure = &TicketingProjectsProjectListItemDataSource{}

func NewTicketingProjectsProjectListItemDataSource() datasource.DataSource {
	return &TicketingProjectsProjectListItemDataSource{}
}

// TicketingProjectsProjectListItemDataSource is the data source implementation.
type TicketingProjectsProjectListItemDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// TicketingProjectsProjectListItemDataSourceModel describes the data model.
type TicketingProjectsProjectListItemDataSourceModel struct {
	Config             *tfTypes.NullableTicketingProjectConfig   `tfsdk:"config"`
	ConnectionSlug     types.String                              `tfsdk:"connection_slug"`
	FieldMap           *tfTypes.NullableTicketingProjectFieldMap `tfsdk:"field_map"`
	ID                 types.String                              `tfsdk:"id"`
	Name               types.String                              `tfsdk:"name"`
	TicketingProjectID types.String                              `tfsdk:"ticketing_project_id"`
	UpdatedAt          types.String                              `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *TicketingProjectsProjectListItemDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ticketing_projects_project_list_item"
}

// Schema defines the schema for the data source.
func (r *TicketingProjectsProjectListItemDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "TicketingProjectsProjectListItem DataSource",

		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"connection_id": schema.StringAttribute{
						Computed: true,
					},
					"connection_type": schema.StringAttribute{
						Computed: true,
					},
					"details": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `A config object containing details about the project config. Can be one of: Ticketing::JiraCloud::ProjectConfig, Ticketing::JiraOnprem::ProjectConfig, or Ticketing::Shortcut::ProjectConfig`,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"ticketing_project_id": schema.StringAttribute{
						Computed: true,
					},
					"ticketing_project_name": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `Ticketing_ProjectConfig model`,
			},
			"connection_slug": schema.StringAttribute{
				Computed: true,
			},
			"field_map": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"body": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"cases": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"external_value": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"attribute": schema.StringAttribute{
														Computed: true,
													},
													"presentation": schema.StringAttribute{
														Computed: true,
													},
													"type": schema.StringAttribute{
														Computed: true,
													},
													"value": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"logic": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `An unstructured object of key/value pairs describing the logic for applying the rule.`,
											},
										},
									},
								},
								"else": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"external_value": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"attribute": schema.StringAttribute{
													Computed: true,
												},
												"presentation": schema.StringAttribute{
													Computed: true,
												},
												"type": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
								},
								"external_field": schema.StringAttribute{
									Computed: true,
								},
								"external_value": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"attribute": schema.StringAttribute{
											Computed: true,
										},
										"presentation": schema.StringAttribute{
											Computed: true,
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
										"value": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"strategy": schema.StringAttribute{
									Computed: true,
								},
								"user_data": schema.MapAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
					},
					"connection_id": schema.StringAttribute{
						Computed: true,
					},
					"connection_type": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"ticketing_project_id": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `Ticketing_ProjectFieldMap model`,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"ticketing_project_id": schema.StringAttribute{
				Required: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *TicketingProjectsProjectListItemDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *TicketingProjectsProjectListItemDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *TicketingProjectsProjectListItemDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetTicketingProjectRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Ticketing.GetTicketingProject(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
