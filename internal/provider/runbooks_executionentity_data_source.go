// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &RunbooksExecutionEntityDataSource{}
var _ datasource.DataSourceWithConfigure = &RunbooksExecutionEntityDataSource{}

func NewRunbooksExecutionEntityDataSource() datasource.DataSource {
	return &RunbooksExecutionEntityDataSource{}
}

// RunbooksExecutionEntityDataSource is the data source implementation.
type RunbooksExecutionEntityDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// RunbooksExecutionEntityDataSourceModel describes the data model.
type RunbooksExecutionEntityDataSourceModel struct {
	CreatedAt           types.String                                              `tfsdk:"created_at"`
	CreatedBy           types.String                                              `tfsdk:"created_by"`
	ExecutedFor         *tfTypes.NullableRunbooksExecutionEntityExecutedForEntity `tfsdk:"executed_for"`
	HasBeenRerun        types.Bool                                                `tfsdk:"has_been_rerun"`
	ID                  types.String                                              `tfsdk:"id"`
	Runbook             *tfTypes.NullableSlimRunbookEntity                        `tfsdk:"runbook"`
	Status              types.String                                              `tfsdk:"status"`
	StatusReason        types.String                                              `tfsdk:"status_reason"`
	StatusReasonMessage types.String                                              `tfsdk:"status_reason_message"`
	Steps               *tfTypes.NullableRunbooksExecutionStepEntity              `tfsdk:"steps"`
	UpdatedAt           types.String                                              `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *RunbooksExecutionEntityDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_runbooks_execution_entity"
}

// Schema defines the schema for the data source.
func (r *RunbooksExecutionEntityDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "RunbooksExecutionEntity DataSource",

		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"created_by": schema.StringAttribute{
				Computed: true,
			},
			"executed_for": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"type": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"has_been_rerun": schema.BoolAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"runbook": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"attachment_rule": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"logic": schema.MapAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `An unstructured object of key/value pairs describing the logic for applying the rule.`,
							},
							"user_data": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"label": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
									"value": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
					},
					"categories": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `categories the runbook applies to`,
					},
					"created_at": schema.StringAttribute{
						Computed: true,
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"owner": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"created_at": schema.StringAttribute{
								Computed: true,
							},
							"created_by": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"email": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"source": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"description": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"in_support_hours": schema.BoolAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"signals_ical_url": schema.StringAttribute{
								Computed: true,
							},
							"slug": schema.StringAttribute{
								Computed: true,
							},
							"updated_at": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"summary": schema.StringAttribute{
						Computed: true,
					},
					"type": schema.StringAttribute{
						Computed: true,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
			"status_reason": schema.StringAttribute{
				Computed: true,
			},
			"status_reason_message": schema.StringAttribute{
				Computed: true,
			},
			"steps": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"action_slug": schema.StringAttribute{
						Computed: true,
					},
					"action_type": schema.StringAttribute{
						Computed: true,
					},
					"automatic": schema.BoolAttribute{
						Computed: true,
					},
					"conference_bridge": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"attachments": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{},
								},
								Description: `A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity`,
							},
							"has_translated_transcripts": schema.BoolAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"language_codes": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `A list of language codes that have translated transcripts for this conference bridge`,
							},
							"previous_host_assignment": schema.StringAttribute{
								Computed: true,
							},
							"transcription_status": schema.StringAttribute{
								Computed: true,
							},
							"transcription_sub_code": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `Incidents_ConferenceBridgeEntity model`,
					},
					"config": schema.SingleNestedAttribute{
						Computed: true,
					},
					"executable": schema.BoolAttribute{
						Computed: true,
					},
					"execution": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"data": schema.SingleNestedAttribute{
								Computed: true,
							},
							"error": schema.StringAttribute{
								Computed: true,
							},
							"performed_at": schema.StringAttribute{
								Computed: true,
							},
							"performed_by": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"email": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"scheduled_for": schema.StringAttribute{
								Computed: true,
							},
							"state": schema.StringAttribute{
								Computed: true,
							},
							"webhook_delivery": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"headers": schema.StringAttribute{
										Computed: true,
									},
									"status_code": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
					},
					"has_been_rerun": schema.BoolAttribute{
						Computed: true,
					},
					"has_been_retried": schema.BoolAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"integration_name": schema.StringAttribute{
						Computed: true,
					},
					"integration_slug": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"repeatable": schema.BoolAttribute{
						Computed: true,
					},
					"repeats": schema.BoolAttribute{
						Computed: true,
					},
					"repeats_at": schema.StringAttribute{
						Computed: true,
					},
					"repeats_duration": schema.StringAttribute{
						Computed:    true,
						Description: `ISO8601 formatted duration string`,
					},
					"rule": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"logic": schema.MapAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `An unstructured object of key/value pairs describing the logic for applying the rule.`,
							},
							"user_data": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"label": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
									"value": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
					},
					"step_elements": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{},
						},
					},
				},
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *RunbooksExecutionEntityDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RunbooksExecutionEntityDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *RunbooksExecutionEntityDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetRunbookExecutionRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Runbooks.GetRunbookExecution(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.RunbooksExecutionEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedRunbooksExecutionEntity(ctx, res.RunbooksExecutionEntity)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
