// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &IncidentsConferenceBridgeDataSource{}
var _ datasource.DataSourceWithConfigure = &IncidentsConferenceBridgeDataSource{}

func NewIncidentsConferenceBridgeDataSource() datasource.DataSource {
	return &IncidentsConferenceBridgeDataSource{}
}

// IncidentsConferenceBridgeDataSource is the data source implementation.
type IncidentsConferenceBridgeDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// IncidentsConferenceBridgeDataSourceModel describes the data model.
type IncidentsConferenceBridgeDataSourceModel struct {
	Attachments              []tfTypes.IncidentsConferenceBridgeAttachment `tfsdk:"attachments"`
	HasTranslatedTranscripts types.Bool                                    `tfsdk:"has_translated_transcripts"`
	ID                       types.String                                  `tfsdk:"id"`
	IncidentID               types.String                                  `tfsdk:"incident_id"`
	LanguageCode             types.String                                  `tfsdk:"language_code"`
	LanguageCodes            []types.String                                `tfsdk:"language_codes"`
	PreviousHostAssignment   types.String                                  `tfsdk:"previous_host_assignment"`
	TranscriptionStatus      types.String                                  `tfsdk:"transcription_status"`
	TranscriptionSubCode     types.String                                  `tfsdk:"transcription_sub_code"`
}

// Metadata returns the data source type name.
func (r *IncidentsConferenceBridgeDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_incidents_conference_bridge"
}

// Schema defines the schema for the data source.
func (r *IncidentsConferenceBridgeDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "IncidentsConferenceBridge DataSource",

		Attributes: map[string]schema.Attribute{
			"attachments": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
				},
				Description: `A list of objects attached to this item. Can be one of: Link, CustomerSupportIssue, or GenericAttachment`,
			},
			"has_translated_transcripts": schema.BoolAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `The ID of the conference bridge`,
			},
			"incident_id": schema.StringAttribute{
				Required: true,
			},
			"language_code": schema.StringAttribute{
				Required:    true,
				Description: `The language code of the translation`,
			},
			"language_codes": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `A list of language codes that have translated transcripts for this conference bridge`,
			},
			"previous_host_assignment": schema.StringAttribute{
				Computed: true,
			},
			"transcription_status": schema.StringAttribute{
				Computed: true,
			},
			"transcription_sub_code": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *IncidentsConferenceBridgeDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *IncidentsConferenceBridgeDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *IncidentsConferenceBridgeDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetConferenceBridgeTranslationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Incidents.GetConferenceBridgeTranslation(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
