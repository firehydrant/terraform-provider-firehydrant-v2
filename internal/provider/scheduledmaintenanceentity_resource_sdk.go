// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"time"
)

func (r *ScheduledMaintenanceEntityResourceModel) ToSharedCreateScheduledMaintenance(ctx context.Context) (*shared.CreateScheduledMaintenance, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	endsAt, _ := time.Parse(time.RFC3339Nano, r.EndsAt.ValueString())
	var impactsInput []shared.CreateScheduledMaintenanceImpactsInput
	if r.ImpactsInput != nil {
		impactsInput = make([]shared.CreateScheduledMaintenanceImpactsInput, 0, len(r.ImpactsInput))
		for _, impactsInputItem := range r.ImpactsInput {
			var conditionID string
			conditionID = impactsInputItem.ConditionID.ValueString()

			var id string
			id = impactsInputItem.ID.ValueString()

			var typeVar string
			typeVar = impactsInputItem.Type.ValueString()

			impactsInput = append(impactsInput, shared.CreateScheduledMaintenanceImpactsInput{
				ConditionID: conditionID,
				ID:          id,
				Type:        typeVar,
			})
		}
	}
	var labels *shared.CreateScheduledMaintenanceLabels
	if r.Labels != nil {
		labels = &shared.CreateScheduledMaintenanceLabels{}
	}
	var name string
	name = r.Name.ValueString()

	startsAt, _ := time.Parse(time.RFC3339Nano, r.StartsAt.ValueString())
	var statusPagesInput []shared.CreateScheduledMaintenanceStatusPagesInput
	if r.StatusPagesInput != nil {
		statusPagesInput = make([]shared.CreateScheduledMaintenanceStatusPagesInput, 0, len(r.StatusPagesInput))
		for _, statusPagesInputItem := range r.StatusPagesInput {
			var connectionID string
			connectionID = statusPagesInputItem.ConnectionID.ValueString()

			integrationSlug := new(string)
			if !statusPagesInputItem.IntegrationSlug.IsUnknown() && !statusPagesInputItem.IntegrationSlug.IsNull() {
				*integrationSlug = statusPagesInputItem.IntegrationSlug.ValueString()
			} else {
				integrationSlug = nil
			}
			statusPagesInput = append(statusPagesInput, shared.CreateScheduledMaintenanceStatusPagesInput{
				ConnectionID:    connectionID,
				IntegrationSlug: integrationSlug,
			})
		}
	}
	summary := new(string)
	if !r.Summary.IsUnknown() && !r.Summary.IsNull() {
		*summary = r.Summary.ValueString()
	} else {
		summary = nil
	}
	out := shared.CreateScheduledMaintenance{
		Description:      description,
		EndsAt:           endsAt,
		ImpactsInput:     impactsInput,
		Labels:           labels,
		Name:             name,
		StartsAt:         startsAt,
		StatusPagesInput: statusPagesInput,
		Summary:          summary,
	}

	return &out, diags
}

func (r *ScheduledMaintenanceEntityResourceModel) ToSharedUpdateScheduledMaintenance(ctx context.Context) (*shared.UpdateScheduledMaintenance, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	endsAt := new(time.Time)
	if !r.EndsAt.IsUnknown() && !r.EndsAt.IsNull() {
		*endsAt, _ = time.Parse(time.RFC3339Nano, r.EndsAt.ValueString())
	} else {
		endsAt = nil
	}
	var impactsInput []shared.UpdateScheduledMaintenanceImpactsInput
	if r.ImpactsInput != nil {
		impactsInput = make([]shared.UpdateScheduledMaintenanceImpactsInput, 0, len(r.ImpactsInput))
		for _, impactsInputItem := range r.ImpactsInput {
			var conditionID string
			conditionID = impactsInputItem.ConditionID.ValueString()

			var id string
			id = impactsInputItem.ID.ValueString()

			var typeVar string
			typeVar = impactsInputItem.Type.ValueString()

			impactsInput = append(impactsInput, shared.UpdateScheduledMaintenanceImpactsInput{
				ConditionID: conditionID,
				ID:          id,
				Type:        typeVar,
			})
		}
	}
	var labels *shared.UpdateScheduledMaintenanceLabels
	if r.Labels != nil {
		labels = &shared.UpdateScheduledMaintenanceLabels{}
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	startsAt := new(time.Time)
	if !r.StartsAt.IsUnknown() && !r.StartsAt.IsNull() {
		*startsAt, _ = time.Parse(time.RFC3339Nano, r.StartsAt.ValueString())
	} else {
		startsAt = nil
	}
	var statusPagesInput []shared.UpdateScheduledMaintenanceStatusPagesInput
	if r.StatusPagesInput != nil {
		statusPagesInput = make([]shared.UpdateScheduledMaintenanceStatusPagesInput, 0, len(r.StatusPagesInput))
		for _, statusPagesInputItem := range r.StatusPagesInput {
			var connectionID string
			connectionID = statusPagesInputItem.ConnectionID.ValueString()

			integrationSlug := new(string)
			if !statusPagesInputItem.IntegrationSlug.IsUnknown() && !statusPagesInputItem.IntegrationSlug.IsNull() {
				*integrationSlug = statusPagesInputItem.IntegrationSlug.ValueString()
			} else {
				integrationSlug = nil
			}
			statusPagesInput = append(statusPagesInput, shared.UpdateScheduledMaintenanceStatusPagesInput{
				ConnectionID:    connectionID,
				IntegrationSlug: integrationSlug,
			})
		}
	}
	summary := new(string)
	if !r.Summary.IsUnknown() && !r.Summary.IsNull() {
		*summary = r.Summary.ValueString()
	} else {
		summary = nil
	}
	out := shared.UpdateScheduledMaintenance{
		Description:      description,
		EndsAt:           endsAt,
		ImpactsInput:     impactsInput,
		Labels:           labels,
		Name:             name,
		StartsAt:         startsAt,
		StatusPagesInput: statusPagesInput,
		Summary:          summary,
	}

	return &out, diags
}

func (r *ScheduledMaintenanceEntityResourceModel) ToOperationsUpdateScheduledMaintenanceRequest(ctx context.Context) (*operations.UpdateScheduledMaintenanceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var scheduledMaintenanceID string
	scheduledMaintenanceID = r.ID.ValueString()

	updateScheduledMaintenance, updateScheduledMaintenanceDiags := r.ToSharedUpdateScheduledMaintenance(ctx)
	diags.Append(updateScheduledMaintenanceDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateScheduledMaintenanceRequest{
		ScheduledMaintenanceID:     scheduledMaintenanceID,
		UpdateScheduledMaintenance: *updateScheduledMaintenance,
	}

	return &out, diags
}

func (r *ScheduledMaintenanceEntityResourceModel) ToOperationsGetScheduledMaintenanceRequest(ctx context.Context) (*operations.GetScheduledMaintenanceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var scheduledMaintenanceID string
	scheduledMaintenanceID = r.ID.ValueString()

	out := operations.GetScheduledMaintenanceRequest{
		ScheduledMaintenanceID: scheduledMaintenanceID,
	}

	return &out, diags
}
