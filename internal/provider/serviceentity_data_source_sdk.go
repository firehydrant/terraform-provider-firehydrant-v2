// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ServiceEntityDataSourceModel) ToOperationsGetServiceRequest(ctx context.Context) (*operations.GetServiceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var serviceID string
	serviceID = r.ID.ValueString()

	out := operations.GetServiceRequest{
		ServiceID: serviceID,
	}

	return &out, diags
}

func (r *ServiceEntityDataSourceModel) RefreshFromSharedServiceEntity(ctx context.Context, resp *shared.ServiceEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.ActiveIncidents != nil {
			r.ActiveIncidents = make([]types.String, 0, len(resp.ActiveIncidents))
			for _, v := range resp.ActiveIncidents {
				r.ActiveIncidents = append(r.ActiveIncidents, types.StringValue(v))
			}
		}
		r.AlertOnAdd = types.BoolPointerValue(resp.AlertOnAdd)
		if resp.AllowedParams != nil {
			r.AllowedParams = make([]types.String, 0, len(resp.AllowedParams))
			for _, v := range resp.AllowedParams {
				r.AllowedParams = append(r.AllowedParams, types.StringValue(v))
			}
		}
		r.AutoAddRespondingTeam = types.BoolPointerValue(resp.AutoAddRespondingTeam)
		if resp.Checklists != nil {
			r.Checklists = []tfTypes.ChecklistTemplateEntity{}
			if len(r.Checklists) > len(resp.Checklists) {
				r.Checklists = r.Checklists[:len(resp.Checklists)]
			}
			for checklistsCount, checklistsItem := range resp.Checklists {
				var checklists tfTypes.ChecklistTemplateEntity
				if checklistsItem.Checks != nil {
					checklists.Checks = []tfTypes.ChecklistCheckEntity1{}
					for checksCount, checksItem := range checklistsItem.Checks {
						var checks tfTypes.ChecklistCheckEntity1
						checks.Description = types.StringPointerValue(checksItem.Description)
						checks.ID = types.StringPointerValue(checksItem.ID)
						checks.Name = types.StringPointerValue(checksItem.Name)
						checks.Status = types.BoolPointerValue(checksItem.Status)
						if checksCount+1 > len(checklists.Checks) {
							checklists.Checks = append(checklists.Checks, checks)
						} else {
							checklists.Checks[checksCount].Description = checks.Description
							checklists.Checks[checksCount].ID = checks.ID
							checklists.Checks[checksCount].Name = checks.Name
							checklists.Checks[checksCount].Status = checks.Status
						}
					}
				}
				if checklistsItem.ConnectedServices != nil {
					checklists.ConnectedServices = []tfTypes.ServiceEntityChecklist{}
					for connectedServicesCount, connectedServicesItem := range checklistsItem.ConnectedServices {
						var connectedServices tfTypes.ServiceEntityChecklist
						connectedServices.AlertOnAdd = types.BoolPointerValue(connectedServicesItem.AlertOnAdd)
						if connectedServicesItem.AllowedParams != nil {
							connectedServices.AllowedParams = make([]types.String, 0, len(connectedServicesItem.AllowedParams))
							for _, v := range connectedServicesItem.AllowedParams {
								connectedServices.AllowedParams = append(connectedServices.AllowedParams, types.StringValue(v))
							}
						}
						connectedServices.AutoAddRespondingTeam = types.BoolPointerValue(connectedServicesItem.AutoAddRespondingTeam)
						connectedServices.CompletedChecks = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(connectedServicesItem.CompletedChecks))
						connectedServices.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.CreatedAt))
						connectedServices.Description = types.StringPointerValue(connectedServicesItem.Description)
						connectedServices.ID = types.StringPointerValue(connectedServicesItem.ID)
						if connectedServicesItem.Labels == nil {
							connectedServices.Labels = nil
						} else {
							connectedServices.Labels = &tfTypes.ServiceEntityChecklistLabels{}
						}
						connectedServices.Name = types.StringPointerValue(connectedServicesItem.Name)
						if connectedServicesItem.Owner == nil {
							connectedServices.Owner = nil
						} else {
							connectedServices.Owner = &tfTypes.NullableTeamEntityLite{}
							connectedServices.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.Owner.CreatedAt))
							if connectedServicesItem.Owner.CreatedBy == nil {
								connectedServices.Owner.CreatedBy = nil
							} else {
								connectedServices.Owner.CreatedBy = &tfTypes.NullableAuthorEntity{}
								connectedServices.Owner.CreatedBy.Email = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Email)
								connectedServices.Owner.CreatedBy.ID = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.ID)
								connectedServices.Owner.CreatedBy.Name = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Name)
								connectedServices.Owner.CreatedBy.Source = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Source)
							}
							connectedServices.Owner.Description = types.StringPointerValue(connectedServicesItem.Owner.Description)
							connectedServices.Owner.ID = types.StringPointerValue(connectedServicesItem.Owner.ID)
							connectedServices.Owner.InSupportHours = types.BoolPointerValue(connectedServicesItem.Owner.InSupportHours)
							connectedServices.Owner.Name = types.StringPointerValue(connectedServicesItem.Owner.Name)
							connectedServices.Owner.SignalsIcalURL = types.StringPointerValue(connectedServicesItem.Owner.SignalsIcalURL)
							connectedServices.Owner.Slug = types.StringPointerValue(connectedServicesItem.Owner.Slug)
							connectedServices.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.Owner.UpdatedAt))
						}
						connectedServices.ServiceChecklistUpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.ServiceChecklistUpdatedAt))
						connectedServices.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(connectedServicesItem.ServiceTier))
						connectedServices.Slug = types.StringPointerValue(connectedServicesItem.Slug)
						connectedServices.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.UpdatedAt))
						if connectedServicesCount+1 > len(checklists.ConnectedServices) {
							checklists.ConnectedServices = append(checklists.ConnectedServices, connectedServices)
						} else {
							checklists.ConnectedServices[connectedServicesCount].AlertOnAdd = connectedServices.AlertOnAdd
							checklists.ConnectedServices[connectedServicesCount].AllowedParams = connectedServices.AllowedParams
							checklists.ConnectedServices[connectedServicesCount].AutoAddRespondingTeam = connectedServices.AutoAddRespondingTeam
							checklists.ConnectedServices[connectedServicesCount].CompletedChecks = connectedServices.CompletedChecks
							checklists.ConnectedServices[connectedServicesCount].CreatedAt = connectedServices.CreatedAt
							checklists.ConnectedServices[connectedServicesCount].Description = connectedServices.Description
							checklists.ConnectedServices[connectedServicesCount].ID = connectedServices.ID
							checklists.ConnectedServices[connectedServicesCount].Labels = connectedServices.Labels
							checklists.ConnectedServices[connectedServicesCount].Name = connectedServices.Name
							checklists.ConnectedServices[connectedServicesCount].Owner = connectedServices.Owner
							checklists.ConnectedServices[connectedServicesCount].ServiceChecklistUpdatedAt = connectedServices.ServiceChecklistUpdatedAt
							checklists.ConnectedServices[connectedServicesCount].ServiceTier = connectedServices.ServiceTier
							checklists.ConnectedServices[connectedServicesCount].Slug = connectedServices.Slug
							checklists.ConnectedServices[connectedServicesCount].UpdatedAt = connectedServices.UpdatedAt
						}
					}
				}
				checklists.CreatedAt = types.StringPointerValue(checklistsItem.CreatedAt)
				checklists.Description = types.StringPointerValue(checklistsItem.Description)
				checklists.ID = types.StringPointerValue(checklistsItem.ID)
				checklists.Name = types.StringPointerValue(checklistsItem.Name)
				if checklistsItem.Owner == nil {
					checklists.Owner = nil
				} else {
					checklists.Owner = &tfTypes.NullableTeamEntityLite{}
					checklists.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(checklistsItem.Owner.CreatedAt))
					if checklistsItem.Owner.CreatedBy == nil {
						checklists.Owner.CreatedBy = nil
					} else {
						checklists.Owner.CreatedBy = &tfTypes.NullableAuthorEntity{}
						checklists.Owner.CreatedBy.Email = types.StringPointerValue(checklistsItem.Owner.CreatedBy.Email)
						checklists.Owner.CreatedBy.ID = types.StringPointerValue(checklistsItem.Owner.CreatedBy.ID)
						checklists.Owner.CreatedBy.Name = types.StringPointerValue(checklistsItem.Owner.CreatedBy.Name)
						checklists.Owner.CreatedBy.Source = types.StringPointerValue(checklistsItem.Owner.CreatedBy.Source)
					}
					checklists.Owner.Description = types.StringPointerValue(checklistsItem.Owner.Description)
					checklists.Owner.ID = types.StringPointerValue(checklistsItem.Owner.ID)
					checklists.Owner.InSupportHours = types.BoolPointerValue(checklistsItem.Owner.InSupportHours)
					checklists.Owner.Name = types.StringPointerValue(checklistsItem.Owner.Name)
					checklists.Owner.SignalsIcalURL = types.StringPointerValue(checklistsItem.Owner.SignalsIcalURL)
					checklists.Owner.Slug = types.StringPointerValue(checklistsItem.Owner.Slug)
					checklists.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(checklistsItem.Owner.UpdatedAt))
				}
				checklists.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(checklistsItem.UpdatedAt))
				if checklistsCount+1 > len(r.Checklists) {
					r.Checklists = append(r.Checklists, checklists)
				} else {
					r.Checklists[checklistsCount].Checks = checklists.Checks
					r.Checklists[checklistsCount].ConnectedServices = checklists.ConnectedServices
					r.Checklists[checklistsCount].CreatedAt = checklists.CreatedAt
					r.Checklists[checklistsCount].Description = checklists.Description
					r.Checklists[checklistsCount].ID = checklists.ID
					r.Checklists[checklistsCount].Name = checklists.Name
					r.Checklists[checklistsCount].Owner = checklists.Owner
					r.Checklists[checklistsCount].UpdatedAt = checklists.UpdatedAt
				}
			}
		}
		r.CompletedChecks = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.CompletedChecks))
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		if resp.ExternalResources != nil {
			r.ExternalResources = []tfTypes.ExternalResourceEntity{}
			if len(r.ExternalResources) > len(resp.ExternalResources) {
				r.ExternalResources = r.ExternalResources[:len(resp.ExternalResources)]
			}
			for externalResourcesCount, externalResourcesItem := range resp.ExternalResources {
				var externalResources tfTypes.ExternalResourceEntity
				externalResources.ConnectionFullFaviconURL = types.StringPointerValue(externalResourcesItem.ConnectionFullFaviconURL)
				externalResources.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
				externalResources.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
				externalResources.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
				externalResources.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem.CreatedAt))
				externalResources.Name = types.StringPointerValue(externalResourcesItem.Name)
				externalResources.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
				externalResources.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
				externalResources.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem.UpdatedAt))
				if externalResourcesCount+1 > len(r.ExternalResources) {
					r.ExternalResources = append(r.ExternalResources, externalResources)
				} else {
					r.ExternalResources[externalResourcesCount].ConnectionFullFaviconURL = externalResources.ConnectionFullFaviconURL
					r.ExternalResources[externalResourcesCount].ConnectionID = externalResources.ConnectionID
					r.ExternalResources[externalResourcesCount].ConnectionName = externalResources.ConnectionName
					r.ExternalResources[externalResourcesCount].ConnectionType = externalResources.ConnectionType
					r.ExternalResources[externalResourcesCount].CreatedAt = externalResources.CreatedAt
					r.ExternalResources[externalResourcesCount].Name = externalResources.Name
					r.ExternalResources[externalResourcesCount].RemoteID = externalResources.RemoteID
					r.ExternalResources[externalResourcesCount].RemoteURL = externalResources.RemoteURL
					r.ExternalResources[externalResourcesCount].UpdatedAt = externalResources.UpdatedAt
				}
			}
		}
		if resp.Functionalities != nil {
			r.Functionalities = []tfTypes.FunctionalityEntity{}
			if len(r.Functionalities) > len(resp.Functionalities) {
				r.Functionalities = r.Functionalities[:len(resp.Functionalities)]
			}
			for functionalitiesCount, functionalitiesItem := range resp.Functionalities {
				var functionalities tfTypes.FunctionalityEntity
				if functionalitiesItem.ActiveIncidents != nil {
					functionalities.ActiveIncidents = make([]types.String, 0, len(functionalitiesItem.ActiveIncidents))
					for _, v := range functionalitiesItem.ActiveIncidents {
						functionalities.ActiveIncidents = append(functionalities.ActiveIncidents, types.StringValue(v))
					}
				}
				functionalities.AlertOnAdd = types.BoolPointerValue(functionalitiesItem.AlertOnAdd)
				functionalities.AutoAddRespondingTeam = types.BoolPointerValue(functionalitiesItem.AutoAddRespondingTeam)
				functionalities.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem.CreatedAt))
				functionalities.Description = types.StringPointerValue(functionalitiesItem.Description)
				if functionalitiesItem.ExternalResources != nil {
					functionalities.ExternalResources = []tfTypes.ExternalResourceEntity{}
					for externalResourcesCount1, externalResourcesItem1 := range functionalitiesItem.ExternalResources {
						var externalResources1 tfTypes.ExternalResourceEntity
						externalResources1.ConnectionFullFaviconURL = types.StringPointerValue(externalResourcesItem1.ConnectionFullFaviconURL)
						externalResources1.ConnectionID = types.StringPointerValue(externalResourcesItem1.ConnectionID)
						externalResources1.ConnectionName = types.StringPointerValue(externalResourcesItem1.ConnectionName)
						externalResources1.ConnectionType = types.StringPointerValue(externalResourcesItem1.ConnectionType)
						externalResources1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem1.CreatedAt))
						externalResources1.Name = types.StringPointerValue(externalResourcesItem1.Name)
						externalResources1.RemoteID = types.StringPointerValue(externalResourcesItem1.RemoteID)
						externalResources1.RemoteURL = types.StringPointerValue(externalResourcesItem1.RemoteURL)
						externalResources1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem1.UpdatedAt))
						if externalResourcesCount1+1 > len(functionalities.ExternalResources) {
							functionalities.ExternalResources = append(functionalities.ExternalResources, externalResources1)
						} else {
							functionalities.ExternalResources[externalResourcesCount1].ConnectionFullFaviconURL = externalResources1.ConnectionFullFaviconURL
							functionalities.ExternalResources[externalResourcesCount1].ConnectionID = externalResources1.ConnectionID
							functionalities.ExternalResources[externalResourcesCount1].ConnectionName = externalResources1.ConnectionName
							functionalities.ExternalResources[externalResourcesCount1].ConnectionType = externalResources1.ConnectionType
							functionalities.ExternalResources[externalResourcesCount1].CreatedAt = externalResources1.CreatedAt
							functionalities.ExternalResources[externalResourcesCount1].Name = externalResources1.Name
							functionalities.ExternalResources[externalResourcesCount1].RemoteID = externalResources1.RemoteID
							functionalities.ExternalResources[externalResourcesCount1].RemoteURL = externalResources1.RemoteURL
							functionalities.ExternalResources[externalResourcesCount1].UpdatedAt = externalResources1.UpdatedAt
						}
					}
				}
				functionalities.ID = types.StringPointerValue(functionalitiesItem.ID)
				if functionalitiesItem.Labels != nil {
					functionalities.Labels = make(map[string]types.String, len(functionalitiesItem.Labels))
					for key, value := range functionalitiesItem.Labels {
						result, _ := json.Marshal(value)
						functionalities.Labels[key] = types.StringValue(string(result))
					}
				}
				if functionalitiesItem.Links != nil {
					functionalities.Links = []tfTypes.LinksEntity{}
					for linksCount, linksItem := range functionalitiesItem.Links {
						var links tfTypes.LinksEntity
						links.HrefURL = types.StringPointerValue(linksItem.HrefURL)
						links.IconURL = types.StringPointerValue(linksItem.IconURL)
						links.ID = types.StringPointerValue(linksItem.ID)
						links.Name = types.StringPointerValue(linksItem.Name)
						if linksCount+1 > len(functionalities.Links) {
							functionalities.Links = append(functionalities.Links, links)
						} else {
							functionalities.Links[linksCount].HrefURL = links.HrefURL
							functionalities.Links[linksCount].IconURL = links.IconURL
							functionalities.Links[linksCount].ID = links.ID
							functionalities.Links[linksCount].Name = links.Name
						}
					}
				}
				functionalities.Name = types.StringPointerValue(functionalitiesItem.Name)
				if functionalitiesItem.Owner == nil {
					functionalities.Owner = nil
				} else {
					functionalities.Owner = &tfTypes.NullableTeamEntityLite{}
					functionalities.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem.Owner.CreatedAt))
					if functionalitiesItem.Owner.CreatedBy == nil {
						functionalities.Owner.CreatedBy = nil
					} else {
						functionalities.Owner.CreatedBy = &tfTypes.NullableAuthorEntity{}
						functionalities.Owner.CreatedBy.Email = types.StringPointerValue(functionalitiesItem.Owner.CreatedBy.Email)
						functionalities.Owner.CreatedBy.ID = types.StringPointerValue(functionalitiesItem.Owner.CreatedBy.ID)
						functionalities.Owner.CreatedBy.Name = types.StringPointerValue(functionalitiesItem.Owner.CreatedBy.Name)
						functionalities.Owner.CreatedBy.Source = types.StringPointerValue(functionalitiesItem.Owner.CreatedBy.Source)
					}
					functionalities.Owner.Description = types.StringPointerValue(functionalitiesItem.Owner.Description)
					functionalities.Owner.ID = types.StringPointerValue(functionalitiesItem.Owner.ID)
					functionalities.Owner.InSupportHours = types.BoolPointerValue(functionalitiesItem.Owner.InSupportHours)
					functionalities.Owner.Name = types.StringPointerValue(functionalitiesItem.Owner.Name)
					functionalities.Owner.SignalsIcalURL = types.StringPointerValue(functionalitiesItem.Owner.SignalsIcalURL)
					functionalities.Owner.Slug = types.StringPointerValue(functionalitiesItem.Owner.Slug)
					functionalities.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem.Owner.UpdatedAt))
				}
				if functionalitiesItem.Services != nil {
					functionalities.Services = []tfTypes.ServiceEntityLite{}
					for servicesCount, servicesItem := range functionalitiesItem.Services {
						var services tfTypes.ServiceEntityLite
						services.AlertOnAdd = types.BoolPointerValue(servicesItem.AlertOnAdd)
						if servicesItem.AllowedParams != nil {
							services.AllowedParams = make([]types.String, 0, len(servicesItem.AllowedParams))
							for _, v := range servicesItem.AllowedParams {
								services.AllowedParams = append(services.AllowedParams, types.StringValue(v))
							}
						}
						services.AutoAddRespondingTeam = types.BoolPointerValue(servicesItem.AutoAddRespondingTeam)
						services.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem.CreatedAt))
						services.Description = types.StringPointerValue(servicesItem.Description)
						services.ID = types.StringPointerValue(servicesItem.ID)
						if servicesItem.Labels == nil {
							services.Labels = nil
						} else {
							services.Labels = &tfTypes.ServiceEntityLiteLabels{}
						}
						services.Name = types.StringPointerValue(servicesItem.Name)
						services.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(servicesItem.ServiceTier))
						services.Slug = types.StringPointerValue(servicesItem.Slug)
						services.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem.UpdatedAt))
						if servicesCount+1 > len(functionalities.Services) {
							functionalities.Services = append(functionalities.Services, services)
						} else {
							functionalities.Services[servicesCount].AlertOnAdd = services.AlertOnAdd
							functionalities.Services[servicesCount].AllowedParams = services.AllowedParams
							functionalities.Services[servicesCount].AutoAddRespondingTeam = services.AutoAddRespondingTeam
							functionalities.Services[servicesCount].CreatedAt = services.CreatedAt
							functionalities.Services[servicesCount].Description = services.Description
							functionalities.Services[servicesCount].ID = services.ID
							functionalities.Services[servicesCount].Labels = services.Labels
							functionalities.Services[servicesCount].Name = services.Name
							functionalities.Services[servicesCount].ServiceTier = services.ServiceTier
							functionalities.Services[servicesCount].Slug = services.Slug
							functionalities.Services[servicesCount].UpdatedAt = services.UpdatedAt
						}
					}
				}
				functionalities.Slug = types.StringPointerValue(functionalitiesItem.Slug)
				if functionalitiesItem.Teams != nil {
					functionalities.Teams = []tfTypes.TeamEntityLite{}
					for teamsCount, teamsItem := range functionalitiesItem.Teams {
						var teams tfTypes.TeamEntityLite
						teams.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.CreatedAt))
						if teamsItem.CreatedBy == nil {
							teams.CreatedBy = nil
						} else {
							teams.CreatedBy = &tfTypes.NullableAuthorEntity{}
							teams.CreatedBy.Email = types.StringPointerValue(teamsItem.CreatedBy.Email)
							teams.CreatedBy.ID = types.StringPointerValue(teamsItem.CreatedBy.ID)
							teams.CreatedBy.Name = types.StringPointerValue(teamsItem.CreatedBy.Name)
							teams.CreatedBy.Source = types.StringPointerValue(teamsItem.CreatedBy.Source)
						}
						teams.Description = types.StringPointerValue(teamsItem.Description)
						teams.ID = types.StringPointerValue(teamsItem.ID)
						teams.InSupportHours = types.BoolPointerValue(teamsItem.InSupportHours)
						teams.Name = types.StringPointerValue(teamsItem.Name)
						teams.SignalsIcalURL = types.StringPointerValue(teamsItem.SignalsIcalURL)
						teams.Slug = types.StringPointerValue(teamsItem.Slug)
						teams.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.UpdatedAt))
						if teamsCount+1 > len(functionalities.Teams) {
							functionalities.Teams = append(functionalities.Teams, teams)
						} else {
							functionalities.Teams[teamsCount].CreatedAt = teams.CreatedAt
							functionalities.Teams[teamsCount].CreatedBy = teams.CreatedBy
							functionalities.Teams[teamsCount].Description = teams.Description
							functionalities.Teams[teamsCount].ID = teams.ID
							functionalities.Teams[teamsCount].InSupportHours = teams.InSupportHours
							functionalities.Teams[teamsCount].Name = teams.Name
							functionalities.Teams[teamsCount].SignalsIcalURL = teams.SignalsIcalURL
							functionalities.Teams[teamsCount].Slug = teams.Slug
							functionalities.Teams[teamsCount].UpdatedAt = teams.UpdatedAt
						}
					}
				}
				functionalities.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem.UpdatedAt))
				if functionalitiesItem.UpdatedBy == nil {
					functionalities.UpdatedBy = nil
				} else {
					functionalities.UpdatedBy = &tfTypes.NullableAuthorEntity{}
					functionalities.UpdatedBy.Email = types.StringPointerValue(functionalitiesItem.UpdatedBy.Email)
					functionalities.UpdatedBy.ID = types.StringPointerValue(functionalitiesItem.UpdatedBy.ID)
					functionalities.UpdatedBy.Name = types.StringPointerValue(functionalitiesItem.UpdatedBy.Name)
					functionalities.UpdatedBy.Source = types.StringPointerValue(functionalitiesItem.UpdatedBy.Source)
				}
				if functionalitiesCount+1 > len(r.Functionalities) {
					r.Functionalities = append(r.Functionalities, functionalities)
				} else {
					r.Functionalities[functionalitiesCount].ActiveIncidents = functionalities.ActiveIncidents
					r.Functionalities[functionalitiesCount].AlertOnAdd = functionalities.AlertOnAdd
					r.Functionalities[functionalitiesCount].AutoAddRespondingTeam = functionalities.AutoAddRespondingTeam
					r.Functionalities[functionalitiesCount].CreatedAt = functionalities.CreatedAt
					r.Functionalities[functionalitiesCount].Description = functionalities.Description
					r.Functionalities[functionalitiesCount].ExternalResources = functionalities.ExternalResources
					r.Functionalities[functionalitiesCount].ID = functionalities.ID
					r.Functionalities[functionalitiesCount].Labels = functionalities.Labels
					r.Functionalities[functionalitiesCount].Links = functionalities.Links
					r.Functionalities[functionalitiesCount].Name = functionalities.Name
					r.Functionalities[functionalitiesCount].Owner = functionalities.Owner
					r.Functionalities[functionalitiesCount].Services = functionalities.Services
					r.Functionalities[functionalitiesCount].Slug = functionalities.Slug
					r.Functionalities[functionalitiesCount].Teams = functionalities.Teams
					r.Functionalities[functionalitiesCount].UpdatedAt = functionalities.UpdatedAt
					r.Functionalities[functionalitiesCount].UpdatedBy = functionalities.UpdatedBy
				}
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Labels != nil {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key1, value1 := range resp.Labels {
				result1, _ := json.Marshal(value1)
				r.Labels[key1] = types.StringValue(string(result1))
			}
		}
		if resp.LastImport == nil {
			r.LastImport = nil
		} else {
			r.LastImport = &tfTypes.NullableImportsImportableResourceEntity{}
			if resp.LastImport.ImportErrors != nil {
				r.LastImport.ImportErrors = []tfTypes.ImportsImportErrorEntity{}
				if len(r.LastImport.ImportErrors) > len(resp.LastImport.ImportErrors) {
					r.LastImport.ImportErrors = r.LastImport.ImportErrors[:len(resp.LastImport.ImportErrors)]
				}
				for importErrorsCount, importErrorsItem := range resp.LastImport.ImportErrors {
					var importErrors tfTypes.ImportsImportErrorEntity
					importErrors.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(importErrorsItem.CreatedAt))
					if importErrorsItem.Data == nil {
						importErrors.Data = nil
					} else {
						importErrors.Data = &tfTypes.ImportsImportErrorEntityData{}
					}
					importErrors.ID = types.StringPointerValue(importErrorsItem.ID)
					importErrors.Message = types.StringPointerValue(importErrorsItem.Message)
					if importErrorsItem.Resource == nil {
						importErrors.Resource = nil
					} else {
						importErrors.Resource = &tfTypes.NullableImportsImportErrorEntityResourceEntity{}
						importErrors.Resource.Name = types.StringPointerValue(importErrorsItem.Resource.Name)
						importErrors.Resource.ResourceID = types.StringPointerValue(importErrorsItem.Resource.ResourceID)
						importErrors.Resource.ResourceType = types.StringPointerValue(importErrorsItem.Resource.ResourceType)
					}
					if importErrorsCount+1 > len(r.LastImport.ImportErrors) {
						r.LastImport.ImportErrors = append(r.LastImport.ImportErrors, importErrors)
					} else {
						r.LastImport.ImportErrors[importErrorsCount].CreatedAt = importErrors.CreatedAt
						r.LastImport.ImportErrors[importErrorsCount].Data = importErrors.Data
						r.LastImport.ImportErrors[importErrorsCount].ID = importErrors.ID
						r.LastImport.ImportErrors[importErrorsCount].Message = importErrors.Message
						r.LastImport.ImportErrors[importErrorsCount].Resource = importErrors.Resource
					}
				}
			}
			r.LastImport.ImportedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastImport.ImportedAt))
			r.LastImport.RemoteID = types.StringPointerValue(resp.LastImport.RemoteID)
			r.LastImport.State = types.StringPointerValue(resp.LastImport.State)
		}
		if resp.Links != nil {
			r.Links = []tfTypes.LinksEntity{}
			if len(r.Links) > len(resp.Links) {
				r.Links = r.Links[:len(resp.Links)]
			}
			for linksCount1, linksItem1 := range resp.Links {
				var links1 tfTypes.LinksEntity
				links1.HrefURL = types.StringPointerValue(linksItem1.HrefURL)
				links1.IconURL = types.StringPointerValue(linksItem1.IconURL)
				links1.ID = types.StringPointerValue(linksItem1.ID)
				links1.Name = types.StringPointerValue(linksItem1.Name)
				if linksCount1+1 > len(r.Links) {
					r.Links = append(r.Links, links1)
				} else {
					r.Links[linksCount1].HrefURL = links1.HrefURL
					r.Links[linksCount1].IconURL = links1.IconURL
					r.Links[linksCount1].ID = links1.ID
					r.Links[linksCount1].Name = links1.Name
				}
			}
		}
		r.ManagedBy = types.StringPointerValue(resp.ManagedBy)
		if resp.ManagedBySettings == nil {
			r.ManagedBySettings = nil
		} else {
			r.ManagedBySettings = &tfTypes.ServiceEntityManagedBySettings{}
		}
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Owner == nil {
			r.Owner = nil
		} else {
			r.Owner = &tfTypes.NullableTeamEntityLite{}
			r.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Owner.CreatedAt))
			if resp.Owner.CreatedBy == nil {
				r.Owner.CreatedBy = nil
			} else {
				r.Owner.CreatedBy = &tfTypes.NullableAuthorEntity{}
				r.Owner.CreatedBy.Email = types.StringPointerValue(resp.Owner.CreatedBy.Email)
				r.Owner.CreatedBy.ID = types.StringPointerValue(resp.Owner.CreatedBy.ID)
				r.Owner.CreatedBy.Name = types.StringPointerValue(resp.Owner.CreatedBy.Name)
				r.Owner.CreatedBy.Source = types.StringPointerValue(resp.Owner.CreatedBy.Source)
			}
			r.Owner.Description = types.StringPointerValue(resp.Owner.Description)
			r.Owner.ID = types.StringPointerValue(resp.Owner.ID)
			r.Owner.InSupportHours = types.BoolPointerValue(resp.Owner.InSupportHours)
			r.Owner.Name = types.StringPointerValue(resp.Owner.Name)
			r.Owner.SignalsIcalURL = types.StringPointerValue(resp.Owner.SignalsIcalURL)
			r.Owner.Slug = types.StringPointerValue(resp.Owner.Slug)
			r.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Owner.UpdatedAt))
		}
		r.ServiceChecklistUpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ServiceChecklistUpdatedAt))
		r.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.ServiceTier))
		r.Slug = types.StringPointerValue(resp.Slug)
		if resp.Teams != nil {
			r.Teams = []tfTypes.TeamEntityLite{}
			if len(r.Teams) > len(resp.Teams) {
				r.Teams = r.Teams[:len(resp.Teams)]
			}
			for teamsCount1, teamsItem1 := range resp.Teams {
				var teams1 tfTypes.TeamEntityLite
				teams1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem1.CreatedAt))
				if teamsItem1.CreatedBy == nil {
					teams1.CreatedBy = nil
				} else {
					teams1.CreatedBy = &tfTypes.NullableAuthorEntity{}
					teams1.CreatedBy.Email = types.StringPointerValue(teamsItem1.CreatedBy.Email)
					teams1.CreatedBy.ID = types.StringPointerValue(teamsItem1.CreatedBy.ID)
					teams1.CreatedBy.Name = types.StringPointerValue(teamsItem1.CreatedBy.Name)
					teams1.CreatedBy.Source = types.StringPointerValue(teamsItem1.CreatedBy.Source)
				}
				teams1.Description = types.StringPointerValue(teamsItem1.Description)
				teams1.ID = types.StringPointerValue(teamsItem1.ID)
				teams1.InSupportHours = types.BoolPointerValue(teamsItem1.InSupportHours)
				teams1.Name = types.StringPointerValue(teamsItem1.Name)
				teams1.SignalsIcalURL = types.StringPointerValue(teamsItem1.SignalsIcalURL)
				teams1.Slug = types.StringPointerValue(teamsItem1.Slug)
				teams1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem1.UpdatedAt))
				if teamsCount1+1 > len(r.Teams) {
					r.Teams = append(r.Teams, teams1)
				} else {
					r.Teams[teamsCount1].CreatedAt = teams1.CreatedAt
					r.Teams[teamsCount1].CreatedBy = teams1.CreatedBy
					r.Teams[teamsCount1].Description = teams1.Description
					r.Teams[teamsCount1].ID = teams1.ID
					r.Teams[teamsCount1].InSupportHours = teams1.InSupportHours
					r.Teams[teamsCount1].Name = teams1.Name
					r.Teams[teamsCount1].SignalsIcalURL = teams1.SignalsIcalURL
					r.Teams[teamsCount1].Slug = teams1.Slug
					r.Teams[teamsCount1].UpdatedAt = teams1.UpdatedAt
				}
			}
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		if resp.UpdatedBy == nil {
			r.UpdatedBy = nil
		} else {
			r.UpdatedBy = &tfTypes.NullableAuthorEntity{}
			r.UpdatedBy.Email = types.StringPointerValue(resp.UpdatedBy.Email)
			r.UpdatedBy.ID = types.StringPointerValue(resp.UpdatedBy.ID)
			r.UpdatedBy.Name = types.StringPointerValue(resp.UpdatedBy.Name)
			r.UpdatedBy.Source = types.StringPointerValue(resp.UpdatedBy.Source)
		}
	}

	return diags
}
