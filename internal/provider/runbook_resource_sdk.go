// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
)

func (r *RunbookResourceModel) ToOperationsDeleteRunbookRequest(ctx context.Context) (*operations.DeleteRunbookRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var runbookID string
	runbookID = r.ID.ValueString()

	out := operations.DeleteRunbookRequest{
		RunbookID: runbookID,
	}

	return &out, diags
}

func (r *RunbookResourceModel) ToOperationsGetRunbookRequest(ctx context.Context) (*operations.GetRunbookRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var runbookID string
	runbookID = r.ID.ValueString()

	out := operations.GetRunbookRequest{
		RunbookID: runbookID,
	}

	return &out, diags
}

func (r *RunbookResourceModel) ToOperationsUpdateRunbookRequest(ctx context.Context) (*operations.UpdateRunbookRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var runbookID string
	runbookID = r.ID.ValueString()

	updateRunbook, updateRunbookDiags := r.ToSharedUpdateRunbook(ctx)
	diags.Append(updateRunbookDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateRunbookRequest{
		RunbookID:     runbookID,
		UpdateRunbook: *updateRunbook,
	}

	return &out, diags
}

func (r *RunbookResourceModel) ToSharedCreateRunbook(ctx context.Context) (*shared.CreateRunbook, diag.Diagnostics) {
	var diags diag.Diagnostics

	var attachmentRuleInput *shared.CreateRunbookAttachmentRuleInput
	if r.AttachmentRuleInput != nil {
		var logic string
		logic = r.AttachmentRuleInput.Logic.ValueString()

		userData := new(string)
		if !r.AttachmentRuleInput.UserData.IsUnknown() && !r.AttachmentRuleInput.UserData.IsNull() {
			*userData = r.AttachmentRuleInput.UserData.ValueString()
		} else {
			userData = nil
		}
		attachmentRuleInput = &shared.CreateRunbookAttachmentRuleInput{
			Logic:    logic,
			UserData: userData,
		}
	}
	autoAttachToRestrictedIncidents := new(bool)
	if !r.AutoAttachToRestrictedIncidents.IsUnknown() && !r.AutoAttachToRestrictedIncidents.IsNull() {
		*autoAttachToRestrictedIncidents = r.AutoAttachToRestrictedIncidents.ValueBool()
	} else {
		autoAttachToRestrictedIncidents = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var name string
	name = r.Name.ValueString()

	var ownerInput *shared.CreateRunbookOwnerInput
	if r.OwnerInput != nil {
		var id string
		id = r.OwnerInput.ID.ValueString()

		ownerInput = &shared.CreateRunbookOwnerInput{
			ID: id,
		}
	}
	var stepsInput []shared.CreateRunbookStepsInput
	if r.StepsInput != nil {
		stepsInput = make([]shared.CreateRunbookStepsInput, 0, len(r.StepsInput))
		for _, stepsInputItem := range r.StepsInput {
			var actionID string
			actionID = stepsInputItem.ActionID.ValueString()

			var name1 string
			name1 = stepsInputItem.Name.ValueString()

			var rule *shared.CreateRunbookRule
			if stepsInputItem.Rule != nil {
				var logic1 string
				logic1 = stepsInputItem.Rule.Logic.ValueString()

				userData1 := new(string)
				if !stepsInputItem.Rule.UserData.IsUnknown() && !stepsInputItem.Rule.UserData.IsNull() {
					*userData1 = stepsInputItem.Rule.UserData.ValueString()
				} else {
					userData1 = nil
				}
				rule = &shared.CreateRunbookRule{
					Logic:    logic1,
					UserData: userData1,
				}
			}
			stepsInput = append(stepsInput, shared.CreateRunbookStepsInput{
				ActionID: actionID,
				Name:     name1,
				Rule:     rule,
			})
		}
	}
	summary := new(string)
	if !r.Summary.IsUnknown() && !r.Summary.IsNull() {
		*summary = r.Summary.ValueString()
	} else {
		summary = nil
	}
	tutorial := new(bool)
	if !r.Tutorial.IsUnknown() && !r.Tutorial.IsNull() {
		*tutorial = r.Tutorial.ValueBool()
	} else {
		tutorial = nil
	}
	var typeVar string
	typeVar = r.Type.ValueString()

	out := shared.CreateRunbook{
		AttachmentRuleInput:             attachmentRuleInput,
		AutoAttachToRestrictedIncidents: autoAttachToRestrictedIncidents,
		Description:                     description,
		Name:                            name,
		OwnerInput:                      ownerInput,
		StepsInput:                      stepsInput,
		Summary:                         summary,
		Tutorial:                        tutorial,
		Type:                            typeVar,
	}

	return &out, diags
}

func (r *RunbookResourceModel) ToSharedUpdateRunbook(ctx context.Context) (*shared.UpdateRunbook, diag.Diagnostics) {
	var diags diag.Diagnostics

	var attachmentRuleInput *shared.UpdateRunbookAttachmentRuleInput
	if r.AttachmentRuleInput != nil {
		var logic string
		logic = r.AttachmentRuleInput.Logic.ValueString()

		userData := new(string)
		if !r.AttachmentRuleInput.UserData.IsUnknown() && !r.AttachmentRuleInput.UserData.IsNull() {
			*userData = r.AttachmentRuleInput.UserData.ValueString()
		} else {
			userData = nil
		}
		attachmentRuleInput = &shared.UpdateRunbookAttachmentRuleInput{
			Logic:    logic,
			UserData: userData,
		}
	}
	autoAttachToRestrictedIncidents := new(bool)
	if !r.AutoAttachToRestrictedIncidents.IsUnknown() && !r.AutoAttachToRestrictedIncidents.IsNull() {
		*autoAttachToRestrictedIncidents = r.AutoAttachToRestrictedIncidents.ValueBool()
	} else {
		autoAttachToRestrictedIncidents = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var ownerInput *shared.UpdateRunbookOwnerInput
	if r.OwnerInput != nil {
		id := new(string)
		if !r.OwnerInput.ID.IsUnknown() && !r.OwnerInput.ID.IsNull() {
			*id = r.OwnerInput.ID.ValueString()
		} else {
			id = nil
		}
		ownerInput = &shared.UpdateRunbookOwnerInput{
			ID: id,
		}
	}
	var stepsInput []shared.UpdateRunbookStepsInput
	if r.StepsInput != nil {
		stepsInput = make([]shared.UpdateRunbookStepsInput, 0, len(r.StepsInput))
		for _, stepsInputItem := range r.StepsInput {
			var actionID string
			actionID = stepsInputItem.ActionID.ValueString()

			var name1 string
			name1 = stepsInputItem.Name.ValueString()

			var rule *shared.UpdateRunbookRule
			if stepsInputItem.Rule != nil {
				var logic1 string
				logic1 = stepsInputItem.Rule.Logic.ValueString()

				userData1 := new(string)
				if !stepsInputItem.Rule.UserData.IsUnknown() && !stepsInputItem.Rule.UserData.IsNull() {
					*userData1 = stepsInputItem.Rule.UserData.ValueString()
				} else {
					userData1 = nil
				}
				rule = &shared.UpdateRunbookRule{
					Logic:    logic1,
					UserData: userData1,
				}
			}
			stepsInput = append(stepsInput, shared.UpdateRunbookStepsInput{
				ActionID: actionID,
				Name:     name1,
				Rule:     rule,
			})
		}
	}
	summary := new(string)
	if !r.Summary.IsUnknown() && !r.Summary.IsNull() {
		*summary = r.Summary.ValueString()
	} else {
		summary = nil
	}
	tutorial := new(bool)
	if !r.Tutorial.IsUnknown() && !r.Tutorial.IsNull() {
		*tutorial = r.Tutorial.ValueBool()
	} else {
		tutorial = nil
	}
	out := shared.UpdateRunbook{
		AttachmentRuleInput:             attachmentRuleInput,
		AutoAttachToRestrictedIncidents: autoAttachToRestrictedIncidents,
		Description:                     description,
		Name:                            name,
		OwnerInput:                      ownerInput,
		StepsInput:                      stepsInput,
		Summary:                         summary,
		Tutorial:                        tutorial,
	}

	return &out, diags
}
