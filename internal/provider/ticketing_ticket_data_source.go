// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &TicketingTicketDataSource{}
var _ datasource.DataSourceWithConfigure = &TicketingTicketDataSource{}

func NewTicketingTicketDataSource() datasource.DataSource {
	return &TicketingTicketDataSource{}
}

// TicketingTicketDataSource is the data source implementation.
type TicketingTicketDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// TicketingTicketDataSourceModel describes the data model.
type TicketingTicketDataSourceModel struct {
	Assignees                []tfTypes.Author                    `tfsdk:"assignees"`
	Attachments              []tfTypes.TicketingTicketAttachment `tfsdk:"attachments"`
	CreatedAt                types.String                        `tfsdk:"created_at"`
	CreatedBy                *tfTypes.NullableAuthor             `tfsdk:"created_by"`
	Description              types.String                        `tfsdk:"description"`
	DueAt                    types.String                        `tfsdk:"due_at"`
	ID                       types.String                        `tfsdk:"id"`
	IncidentCurrentMilestone types.String                        `tfsdk:"incident_current_milestone"`
	IncidentID               types.String                        `tfsdk:"incident_id"`
	IncidentName             types.String                        `tfsdk:"incident_name"`
	Link                     *tfTypes.NullableAttachmentsLink    `tfsdk:"link"`
	Priority                 *tfTypes.NullableTicketingPriority  `tfsdk:"priority"`
	State                    types.String                        `tfsdk:"state"`
	Summary                  types.String                        `tfsdk:"summary"`
	SyncErrorMessage         types.String                        `tfsdk:"sync_error_message"`
	TagList                  []types.String                      `tfsdk:"tag_list"`
	TaskID                   types.String                        `tfsdk:"task_id"`
	Type                     types.String                        `tfsdk:"type"`
	UpdatedAt                types.String                        `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *TicketingTicketDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ticketing_ticket"
}

// Schema defines the schema for the data source.
func (r *TicketingTicketDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "TicketingTicket DataSource",

		Attributes: map[string]schema.Attribute{
			"assignees": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"email": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"source": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"attachments": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
				},
				Description: `A list of objects attached to this item. Can be one of: Link, CustomerSupportIssue, or GenericAttachment`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"created_by": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"email": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"source": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"due_at": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"incident_current_milestone": schema.StringAttribute{
				Computed:    true,
				Description: `Milestone of incident that this ticket is related to`,
			},
			"incident_id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of incident that this ticket is related to`,
			},
			"incident_name": schema.StringAttribute{
				Computed:    true,
				Description: `Name of incident that this ticket is related to`,
			},
			"link": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"deletable": schema.BoolAttribute{
						Computed:    true,
						Description: `Link can be deleted`,
					},
					"display_text": schema.StringAttribute{
						Computed: true,
					},
					"editable": schema.BoolAttribute{
						Computed:    true,
						Description: `Link can be edited`,
					},
					"href_url": schema.StringAttribute{
						Computed: true,
					},
					"icon_url": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"type": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `Attachments_Link model`,
			},
			"priority": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"position": schema.Int32Attribute{
						Computed: true,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `Ticketing_Priority model`,
			},
			"state": schema.StringAttribute{
				Computed: true,
			},
			"summary": schema.StringAttribute{
				Computed: true,
			},
			"sync_error_message": schema.StringAttribute{
				Computed:    true,
				Description: `Error message from syncing this ticket to integrations`,
			},
			"tag_list": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"task_id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of task that this ticket is related to`,
			},
			"type": schema.StringAttribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *TicketingTicketDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *TicketingTicketDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *TicketingTicketDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetTicketRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Ticketing.GetTicket(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
