// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ChecklistTemplateEntityResourceModel) ToSharedCreateChecklistTemplate(ctx context.Context) (*shared.CreateChecklistTemplate, diag.Diagnostics) {
	var diags diag.Diagnostics

	checks := make([]shared.CreateChecklistTemplateCheck, 0, len(r.Checks))
	for _, checksItem := range r.Checks {
		description := new(string)
		if !checksItem.Description.IsUnknown() && !checksItem.Description.IsNull() {
			*description = checksItem.Description.ValueString()
		} else {
			description = nil
		}
		var name string
		name = checksItem.Name.ValueString()

		checks = append(checks, shared.CreateChecklistTemplateCheck{
			Description: description,
			Name:        name,
		})
	}
	var connectedServicesInput []shared.CreateChecklistTemplateConnectedServicesInput
	if r.ConnectedServicesInput != nil {
		connectedServicesInput = make([]shared.CreateChecklistTemplateConnectedServicesInput, 0, len(r.ConnectedServicesInput))
		for _, connectedServicesInputItem := range r.ConnectedServicesInput {
			var id string
			id = connectedServicesInputItem.ID.ValueString()

			connectedServicesInput = append(connectedServicesInput, shared.CreateChecklistTemplateConnectedServicesInput{
				ID: id,
			})
		}
	}
	description1 := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description1 = r.Description.ValueString()
	} else {
		description1 = nil
	}
	var name1 string
	name1 = r.Name.ValueString()

	teamID := new(string)
	if !r.TeamID.IsUnknown() && !r.TeamID.IsNull() {
		*teamID = r.TeamID.ValueString()
	} else {
		teamID = nil
	}
	out := shared.CreateChecklistTemplate{
		Checks:                 checks,
		ConnectedServicesInput: connectedServicesInput,
		Description:            description1,
		Name:                   name1,
		TeamID:                 teamID,
	}

	return &out, diags
}

func (r *ChecklistTemplateEntityResourceModel) ToSharedUpdateChecklistTemplate(ctx context.Context) (*shared.UpdateChecklistTemplate, diag.Diagnostics) {
	var diags diag.Diagnostics

	var checks []shared.UpdateChecklistTemplateCheck
	if r.Checks != nil {
		checks = make([]shared.UpdateChecklistTemplateCheck, 0, len(r.Checks))
		for _, checksItem := range r.Checks {
			description := new(string)
			if !checksItem.Description.IsUnknown() && !checksItem.Description.IsNull() {
				*description = checksItem.Description.ValueString()
			} else {
				description = nil
			}
			id := new(string)
			if !checksItem.ID.IsUnknown() && !checksItem.ID.IsNull() {
				*id = checksItem.ID.ValueString()
			} else {
				id = nil
			}
			var name string
			name = checksItem.Name.ValueString()

			checks = append(checks, shared.UpdateChecklistTemplateCheck{
				Description: description,
				ID:          id,
				Name:        name,
			})
		}
	}
	var connectedServicesInput []shared.UpdateChecklistTemplateConnectedServicesInput
	if r.ConnectedServicesInput != nil {
		connectedServicesInput = make([]shared.UpdateChecklistTemplateConnectedServicesInput, 0, len(r.ConnectedServicesInput))
		for _, connectedServicesInputItem := range r.ConnectedServicesInput {
			var id1 string
			id1 = connectedServicesInputItem.ID.ValueString()

			connectedServicesInput = append(connectedServicesInput, shared.UpdateChecklistTemplateConnectedServicesInput{
				ID: id1,
			})
		}
	}
	description1 := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description1 = r.Description.ValueString()
	} else {
		description1 = nil
	}
	name1 := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name1 = r.Name.ValueString()
	} else {
		name1 = nil
	}
	teamID := new(string)
	if !r.TeamID.IsUnknown() && !r.TeamID.IsNull() {
		*teamID = r.TeamID.ValueString()
	} else {
		teamID = nil
	}
	out := shared.UpdateChecklistTemplate{
		Checks:                 checks,
		ConnectedServicesInput: connectedServicesInput,
		Description:            description1,
		Name:                   name1,
		TeamID:                 teamID,
	}

	return &out, diags
}

func (r *ChecklistTemplateEntityResourceModel) ToOperationsUpdateChecklistTemplateRequest(ctx context.Context) (*operations.UpdateChecklistTemplateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	updateChecklistTemplate, updateChecklistTemplateDiags := r.ToSharedUpdateChecklistTemplate(ctx)
	diags.Append(updateChecklistTemplateDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateChecklistTemplateRequest{
		ID:                      id,
		UpdateChecklistTemplate: *updateChecklistTemplate,
	}

	return &out, diags
}

func (r *ChecklistTemplateEntityResourceModel) ToOperationsGetChecklistTemplateRequest(ctx context.Context) (*operations.GetChecklistTemplateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetChecklistTemplateRequest{
		ID: id,
	}

	return &out, diags
}

func (r *ChecklistTemplateEntityResourceModel) ToOperationsDeleteChecklistTemplateRequest(ctx context.Context) (*operations.DeleteChecklistTemplateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteChecklistTemplateRequest{
		ID: id,
	}

	return &out, diags
}

func (r *ChecklistTemplateEntityResourceModel) RefreshFromSharedChecklistTemplateEntity(ctx context.Context, resp *shared.ChecklistTemplateEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Checks = []tfTypes.ChecklistCheckEntity{}
		if len(r.Checks) > len(resp.Checks) {
			r.Checks = r.Checks[:len(resp.Checks)]
		}
		for checksCount, checksItem := range resp.Checks {
			var checks tfTypes.ChecklistCheckEntity
			checks.Description = types.StringPointerValue(checksItem.Description)
			checks.ID = types.StringPointerValue(checksItem.ID)
			checks.Name = types.StringPointerValue(checksItem.Name)
			checks.Status = types.BoolPointerValue(checksItem.Status)
			if checksCount+1 > len(r.Checks) {
				r.Checks = append(r.Checks, checks)
			} else {
				r.Checks[checksCount].Description = checks.Description
				r.Checks[checksCount].ID = checks.ID
				r.Checks[checksCount].Name = checks.Name
				r.Checks[checksCount].Status = checks.Status
			}
		}
		if resp.ConnectedServices != nil {
			r.ConnectedServices = []tfTypes.ServiceEntityChecklist{}
			if len(r.ConnectedServices) > len(resp.ConnectedServices) {
				r.ConnectedServices = r.ConnectedServices[:len(resp.ConnectedServices)]
			}
			for connectedServicesCount, connectedServicesItem := range resp.ConnectedServices {
				var connectedServices tfTypes.ServiceEntityChecklist
				connectedServices.AlertOnAdd = types.BoolPointerValue(connectedServicesItem.AlertOnAdd)
				if connectedServicesItem.AllowedParams != nil {
					connectedServices.AllowedParams = make([]types.String, 0, len(connectedServicesItem.AllowedParams))
					for _, v := range connectedServicesItem.AllowedParams {
						connectedServices.AllowedParams = append(connectedServices.AllowedParams, types.StringValue(v))
					}
				}
				connectedServices.AutoAddRespondingTeam = types.BoolPointerValue(connectedServicesItem.AutoAddRespondingTeam)
				connectedServices.CompletedChecks = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(connectedServicesItem.CompletedChecks))
				connectedServices.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.CreatedAt))
				connectedServices.Description = types.StringPointerValue(connectedServicesItem.Description)
				connectedServices.ID = types.StringPointerValue(connectedServicesItem.ID)
				if connectedServicesItem.Labels == nil {
					connectedServices.Labels = nil
				} else {
					connectedServices.Labels = &tfTypes.ServiceEntityChecklistLabels{}
				}
				connectedServices.Name = types.StringPointerValue(connectedServicesItem.Name)
				if connectedServicesItem.Owner == nil {
					connectedServices.Owner = nil
				} else {
					connectedServices.Owner = &tfTypes.NullableTeamEntityLite{}
					connectedServices.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.Owner.CreatedAt))
					if connectedServicesItem.Owner.CreatedBy == nil {
						connectedServices.Owner.CreatedBy = nil
					} else {
						connectedServices.Owner.CreatedBy = &tfTypes.NullableAuthorEntity{}
						connectedServices.Owner.CreatedBy.Email = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Email)
						connectedServices.Owner.CreatedBy.ID = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.ID)
						connectedServices.Owner.CreatedBy.Name = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Name)
						connectedServices.Owner.CreatedBy.Source = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Source)
					}
					connectedServices.Owner.Description = types.StringPointerValue(connectedServicesItem.Owner.Description)
					connectedServices.Owner.ID = types.StringPointerValue(connectedServicesItem.Owner.ID)
					connectedServices.Owner.InSupportHours = types.BoolPointerValue(connectedServicesItem.Owner.InSupportHours)
					connectedServices.Owner.Name = types.StringPointerValue(connectedServicesItem.Owner.Name)
					connectedServices.Owner.SignalsIcalURL = types.StringPointerValue(connectedServicesItem.Owner.SignalsIcalURL)
					connectedServices.Owner.Slug = types.StringPointerValue(connectedServicesItem.Owner.Slug)
					connectedServices.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.Owner.UpdatedAt))
				}
				connectedServices.ServiceChecklistUpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.ServiceChecklistUpdatedAt))
				connectedServices.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(connectedServicesItem.ServiceTier))
				connectedServices.Slug = types.StringPointerValue(connectedServicesItem.Slug)
				connectedServices.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.UpdatedAt))
				if connectedServicesCount+1 > len(r.ConnectedServices) {
					r.ConnectedServices = append(r.ConnectedServices, connectedServices)
				} else {
					r.ConnectedServices[connectedServicesCount].AlertOnAdd = connectedServices.AlertOnAdd
					r.ConnectedServices[connectedServicesCount].AllowedParams = connectedServices.AllowedParams
					r.ConnectedServices[connectedServicesCount].AutoAddRespondingTeam = connectedServices.AutoAddRespondingTeam
					r.ConnectedServices[connectedServicesCount].CompletedChecks = connectedServices.CompletedChecks
					r.ConnectedServices[connectedServicesCount].CreatedAt = connectedServices.CreatedAt
					r.ConnectedServices[connectedServicesCount].Description = connectedServices.Description
					r.ConnectedServices[connectedServicesCount].ID = connectedServices.ID
					r.ConnectedServices[connectedServicesCount].Labels = connectedServices.Labels
					r.ConnectedServices[connectedServicesCount].Name = connectedServices.Name
					r.ConnectedServices[connectedServicesCount].Owner = connectedServices.Owner
					r.ConnectedServices[connectedServicesCount].ServiceChecklistUpdatedAt = connectedServices.ServiceChecklistUpdatedAt
					r.ConnectedServices[connectedServicesCount].ServiceTier = connectedServices.ServiceTier
					r.ConnectedServices[connectedServicesCount].Slug = connectedServices.Slug
					r.ConnectedServices[connectedServicesCount].UpdatedAt = connectedServices.UpdatedAt
				}
			}
		}
		r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Owner == nil {
			r.Owner = nil
		} else {
			r.Owner = &tfTypes.NullableTeamEntityLite{}
			r.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Owner.CreatedAt))
			if resp.Owner.CreatedBy == nil {
				r.Owner.CreatedBy = nil
			} else {
				r.Owner.CreatedBy = &tfTypes.NullableAuthorEntity{}
				r.Owner.CreatedBy.Email = types.StringPointerValue(resp.Owner.CreatedBy.Email)
				r.Owner.CreatedBy.ID = types.StringPointerValue(resp.Owner.CreatedBy.ID)
				r.Owner.CreatedBy.Name = types.StringPointerValue(resp.Owner.CreatedBy.Name)
				r.Owner.CreatedBy.Source = types.StringPointerValue(resp.Owner.CreatedBy.Source)
			}
			r.Owner.Description = types.StringPointerValue(resp.Owner.Description)
			r.Owner.ID = types.StringPointerValue(resp.Owner.ID)
			r.Owner.InSupportHours = types.BoolPointerValue(resp.Owner.InSupportHours)
			r.Owner.Name = types.StringPointerValue(resp.Owner.Name)
			r.Owner.SignalsIcalURL = types.StringPointerValue(resp.Owner.SignalsIcalURL)
			r.Owner.Slug = types.StringPointerValue(resp.Owner.Slug)
			r.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Owner.UpdatedAt))
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}
