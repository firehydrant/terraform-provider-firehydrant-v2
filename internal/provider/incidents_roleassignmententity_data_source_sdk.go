// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *IncidentsRoleAssignmentEntityDataSourceModel) ToOperationsGetIncidentUserRequest(ctx context.Context) (*operations.GetIncidentUserRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var incidentID string
	incidentID = r.IncidentID.ValueString()

	var userID string
	userID = r.UserID.ValueString()

	out := operations.GetIncidentUserRequest{
		IncidentID: incidentID,
		UserID:     userID,
	}

	return &out, diags
}

func (r *IncidentsRoleAssignmentEntityDataSourceModel) RefreshFromSharedIncidentsRoleAssignmentEntity(ctx context.Context, resp *shared.IncidentsRoleAssignmentEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.ID = types.StringPointerValue(resp.ID)
		if resp.IncidentRole == nil {
			r.IncidentRole = nil
		} else {
			r.IncidentRole = &tfTypes.NullableIncidentRoleEntity{}
			r.IncidentRole.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.IncidentRole.CreatedAt))
			r.IncidentRole.Description = types.StringPointerValue(resp.IncidentRole.Description)
			r.IncidentRole.DiscardedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.IncidentRole.DiscardedAt))
			r.IncidentRole.ID = types.StringPointerValue(resp.IncidentRole.ID)
			r.IncidentRole.Name = types.StringPointerValue(resp.IncidentRole.Name)
			r.IncidentRole.Summary = types.StringPointerValue(resp.IncidentRole.Summary)
			r.IncidentRole.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.IncidentRole.UpdatedAt))
		}
		r.Status = types.StringPointerValue(resp.Status)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		if resp.User == nil {
			r.User = nil
		} else {
			r.User = &tfTypes.NullableUserEntity{}
			r.User.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.User.CreatedAt))
			r.User.Email = types.StringPointerValue(resp.User.Email)
			r.User.ID = types.StringPointerValue(resp.User.ID)
			r.User.Name = types.StringPointerValue(resp.User.Name)
			if resp.User.SignalsEnabledNotificationTypes != nil {
				r.User.SignalsEnabledNotificationTypes = make([]types.String, 0, len(resp.User.SignalsEnabledNotificationTypes))
				for _, v := range resp.User.SignalsEnabledNotificationTypes {
					r.User.SignalsEnabledNotificationTypes = append(r.User.SignalsEnabledNotificationTypes, types.StringValue(v))
				}
			}
			if resp.User.SignalsNotificationPolicyCompliance != nil {
				r.User.SignalsNotificationPolicyCompliance = []tfTypes.SignalsAPINotificationPolicyItemComplianceEntity{}
				if len(r.User.SignalsNotificationPolicyCompliance) > len(resp.User.SignalsNotificationPolicyCompliance) {
					r.User.SignalsNotificationPolicyCompliance = r.User.SignalsNotificationPolicyCompliance[:len(resp.User.SignalsNotificationPolicyCompliance)]
				}
				for signalsNotificationPolicyComplianceCount, signalsNotificationPolicyComplianceItem := range resp.User.SignalsNotificationPolicyCompliance {
					var signalsNotificationPolicyCompliance tfTypes.SignalsAPINotificationPolicyItemComplianceEntity
					signalsNotificationPolicyCompliance.IsCompliant = types.BoolPointerValue(signalsNotificationPolicyComplianceItem.IsCompliant)
					signalsNotificationPolicyCompliance.NotificationPolicyItemID = types.StringPointerValue(signalsNotificationPolicyComplianceItem.NotificationPolicyItemID)
					if signalsNotificationPolicyComplianceCount+1 > len(r.User.SignalsNotificationPolicyCompliance) {
						r.User.SignalsNotificationPolicyCompliance = append(r.User.SignalsNotificationPolicyCompliance, signalsNotificationPolicyCompliance)
					} else {
						r.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount].IsCompliant = signalsNotificationPolicyCompliance.IsCompliant
						r.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount].NotificationPolicyItemID = signalsNotificationPolicyCompliance.NotificationPolicyItemID
					}
				}
			}
			r.User.SlackLinked = types.BoolPointerValue(resp.User.SlackLinked)
			r.User.SlackUserID = types.StringPointerValue(resp.User.SlackUserID)
			r.User.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.User.UpdatedAt))
		}
	}

	return diags
}
