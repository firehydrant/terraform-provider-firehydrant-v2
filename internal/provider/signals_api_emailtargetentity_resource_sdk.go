// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SignalsAPIEmailTargetEntityResourceModel) ToSharedCreateSignalsEmailTarget(ctx context.Context) (*shared.CreateSignalsEmailTarget, diag.Diagnostics) {
	var diags diag.Diagnostics

	var allowedSenders []string
	if r.AllowedSenders != nil {
		allowedSenders = make([]string, 0, len(r.AllowedSenders))
		for _, allowedSendersItem := range r.AllowedSenders {
			allowedSenders = append(allowedSenders, allowedSendersItem.ValueString())
		}
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	levelCel := new(string)
	if !r.LevelCel.IsUnknown() && !r.LevelCel.IsNull() {
		*levelCel = r.LevelCel.ValueString()
	} else {
		levelCel = nil
	}
	var name string
	name = r.Name.ValueString()

	ruleMatchingStrategy := new(string)
	if !r.RuleMatchingStrategy.IsUnknown() && !r.RuleMatchingStrategy.IsNull() {
		*ruleMatchingStrategy = r.RuleMatchingStrategy.ValueString()
	} else {
		ruleMatchingStrategy = nil
	}
	var rules []string
	if r.Rules != nil {
		rules = make([]string, 0, len(r.Rules))
		for _, rulesItem := range r.Rules {
			rules = append(rules, rulesItem.ValueString())
		}
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	statusCel := new(string)
	if !r.StatusCel.IsUnknown() && !r.StatusCel.IsNull() {
		*statusCel = r.StatusCel.ValueString()
	} else {
		statusCel = nil
	}
	var targetInput *shared.CreateSignalsEmailTargetTargetInput
	if r.TargetInput != nil {
		var id string
		id = r.TargetInput.ID.ValueString()

		var typeVar string
		typeVar = r.TargetInput.Type.ValueString()

		targetInput = &shared.CreateSignalsEmailTargetTargetInput{
			ID:   id,
			Type: typeVar,
		}
	}
	out := shared.CreateSignalsEmailTarget{
		AllowedSenders:       allowedSenders,
		Description:          description,
		LevelCel:             levelCel,
		Name:                 name,
		RuleMatchingStrategy: ruleMatchingStrategy,
		Rules:                rules,
		Slug:                 slug,
		StatusCel:            statusCel,
		TargetInput:          targetInput,
	}

	return &out, diags
}

func (r *SignalsAPIEmailTargetEntityResourceModel) ToSharedUpdateSignalsEmailTarget(ctx context.Context) (*shared.UpdateSignalsEmailTarget, diag.Diagnostics) {
	var diags diag.Diagnostics

	var allowedSenders []string
	if r.AllowedSenders != nil {
		allowedSenders = make([]string, 0, len(r.AllowedSenders))
		for _, allowedSendersItem := range r.AllowedSenders {
			allowedSenders = append(allowedSenders, allowedSendersItem.ValueString())
		}
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	levelCel := new(string)
	if !r.LevelCel.IsUnknown() && !r.LevelCel.IsNull() {
		*levelCel = r.LevelCel.ValueString()
	} else {
		levelCel = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	ruleMatchingStrategy := new(string)
	if !r.RuleMatchingStrategy.IsUnknown() && !r.RuleMatchingStrategy.IsNull() {
		*ruleMatchingStrategy = r.RuleMatchingStrategy.ValueString()
	} else {
		ruleMatchingStrategy = nil
	}
	var rules []string
	if r.Rules != nil {
		rules = make([]string, 0, len(r.Rules))
		for _, rulesItem := range r.Rules {
			rules = append(rules, rulesItem.ValueString())
		}
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	statusCel := new(string)
	if !r.StatusCel.IsUnknown() && !r.StatusCel.IsNull() {
		*statusCel = r.StatusCel.ValueString()
	} else {
		statusCel = nil
	}
	var targetInput *shared.UpdateSignalsEmailTargetTargetInput
	if r.TargetInput != nil {
		var id string
		id = r.TargetInput.ID.ValueString()

		var typeVar string
		typeVar = r.TargetInput.Type.ValueString()

		targetInput = &shared.UpdateSignalsEmailTargetTargetInput{
			ID:   id,
			Type: typeVar,
		}
	}
	out := shared.UpdateSignalsEmailTarget{
		AllowedSenders:       allowedSenders,
		Description:          description,
		LevelCel:             levelCel,
		Name:                 name,
		RuleMatchingStrategy: ruleMatchingStrategy,
		Rules:                rules,
		Slug:                 slug,
		StatusCel:            statusCel,
		TargetInput:          targetInput,
	}

	return &out, diags
}

func (r *SignalsAPIEmailTargetEntityResourceModel) ToOperationsUpdateSignalsEmailTargetRequest(ctx context.Context) (*operations.UpdateSignalsEmailTargetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	updateSignalsEmailTarget, updateSignalsEmailTargetDiags := r.ToSharedUpdateSignalsEmailTarget(ctx)
	diags.Append(updateSignalsEmailTargetDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateSignalsEmailTargetRequest{
		ID:                       id,
		UpdateSignalsEmailTarget: *updateSignalsEmailTarget,
	}

	return &out, diags
}

func (r *SignalsAPIEmailTargetEntityResourceModel) ToOperationsGetSignalsEmailTargetRequest(ctx context.Context) (*operations.GetSignalsEmailTargetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetSignalsEmailTargetRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SignalsAPIEmailTargetEntityResourceModel) RefreshFromSharedSignalsAPIEmailTargetEntity(ctx context.Context, resp *shared.SignalsAPIEmailTargetEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.AllowedSenders != nil {
			r.AllowedSenders = make([]types.String, 0, len(resp.AllowedSenders))
			for _, v := range resp.AllowedSenders {
				r.AllowedSenders = append(r.AllowedSenders, types.StringValue(v))
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.CreatedBy == nil {
			r.CreatedBy = nil
		} else {
			r.CreatedBy = &tfTypes.NullableAuthorEntity{}
			r.CreatedBy.Email = types.StringPointerValue(resp.CreatedBy.Email)
			r.CreatedBy.ID = types.StringPointerValue(resp.CreatedBy.ID)
			r.CreatedBy.Name = types.StringPointerValue(resp.CreatedBy.Name)
			r.CreatedBy.Source = types.StringPointerValue(resp.CreatedBy.Source)
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.Email = types.StringPointerValue(resp.Email)
		r.ID = types.StringPointerValue(resp.ID)
		r.LevelCel = types.StringPointerValue(resp.LevelCel)
		r.Name = types.StringPointerValue(resp.Name)
		r.RuleMatchingStrategy = types.StringPointerValue(resp.RuleMatchingStrategy)
		if resp.Rules != nil {
			r.Rules = make([]types.String, 0, len(resp.Rules))
			for _, v := range resp.Rules {
				r.Rules = append(r.Rules, types.StringValue(v))
			}
		}
		r.Slug = types.StringPointerValue(resp.Slug)
		r.StatusCel = types.StringPointerValue(resp.StatusCel)
		if resp.Target == nil {
			r.Target = nil
		} else {
			r.Target = &tfTypes.NullableSignalsAPITargetEntity{}
			r.Target.ID = types.StringPointerValue(resp.Target.ID)
			r.Target.IsPageable = types.BoolPointerValue(resp.Target.IsPageable)
			r.Target.Name = types.StringPointerValue(resp.Target.Name)
			r.Target.Type = types.StringPointerValue(resp.Target.Type)
		}
		r.TeamID = types.StringPointerValue(resp.TeamID)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}
