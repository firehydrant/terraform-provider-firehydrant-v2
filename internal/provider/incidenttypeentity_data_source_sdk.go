// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *IncidentTypeEntityDataSourceModel) ToOperationsGetIncidentTypeRequest(ctx context.Context) (*operations.GetIncidentTypeRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetIncidentTypeRequest{
		ID: id,
	}

	return &out, diags
}

func (r *IncidentTypeEntityDataSourceModel) RefreshFromSharedIncidentTypeEntity(ctx context.Context, resp *shared.IncidentTypeEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Template == nil {
			r.Template = nil
		} else {
			r.Template = &tfTypes.NullableIncidentTypeEntityTemplateEntity{}
			r.Template.CustomFields = types.StringPointerValue(resp.Template.CustomFields)
			r.Template.CustomerImpactSummary = types.StringPointerValue(resp.Template.CustomerImpactSummary)
			r.Template.Description = types.StringPointerValue(resp.Template.Description)
			if resp.Template.Impacts != nil {
				r.Template.Impacts = []tfTypes.IncidentTypeEntityTemplateImpactEntity{}
				if len(r.Template.Impacts) > len(resp.Template.Impacts) {
					r.Template.Impacts = r.Template.Impacts[:len(resp.Template.Impacts)]
				}
				for impactsCount, impactsItem := range resp.Template.Impacts {
					var impacts tfTypes.IncidentTypeEntityTemplateImpactEntity
					impacts.ConditionID = types.StringPointerValue(impactsItem.ConditionID)
					impacts.ConditionName = types.StringPointerValue(impactsItem.ConditionName)
					impacts.ID = types.StringPointerValue(impactsItem.ID)
					impacts.Name = types.StringPointerValue(impactsItem.Name)
					impacts.Type = types.StringPointerValue(impactsItem.Type)
					if impactsCount+1 > len(r.Template.Impacts) {
						r.Template.Impacts = append(r.Template.Impacts, impacts)
					} else {
						r.Template.Impacts[impactsCount].ConditionID = impacts.ConditionID
						r.Template.Impacts[impactsCount].ConditionName = impacts.ConditionName
						r.Template.Impacts[impactsCount].ID = impacts.ID
						r.Template.Impacts[impactsCount].Name = impacts.Name
						r.Template.Impacts[impactsCount].Type = impacts.Type
					}
				}
			}
			r.Template.IncidentName = types.StringPointerValue(resp.Template.IncidentName)
			if resp.Template.Labels != nil {
				r.Template.Labels = make(map[string]types.String, len(resp.Template.Labels))
				for key, value := range resp.Template.Labels {
					result, _ := json.Marshal(value)
					r.Template.Labels[key] = types.StringValue(string(result))
				}
			}
			r.Template.Priority = types.StringPointerValue(resp.Template.Priority)
			r.Template.PrivateIncident = types.BoolPointerValue(resp.Template.PrivateIncident)
			if resp.Template.RunbookIds != nil {
				r.Template.RunbookIds = make([]types.String, 0, len(resp.Template.RunbookIds))
				for _, v := range resp.Template.RunbookIds {
					r.Template.RunbookIds = append(r.Template.RunbookIds, types.StringValue(v))
				}
			}
			r.Template.Severity = types.StringPointerValue(resp.Template.Severity)
			r.Template.Summary = types.StringPointerValue(resp.Template.Summary)
			if resp.Template.TagList != nil {
				r.Template.TagList = make([]types.String, 0, len(resp.Template.TagList))
				for _, v := range resp.Template.TagList {
					r.Template.TagList = append(r.Template.TagList, types.StringValue(v))
				}
			}
			if resp.Template.TeamIds != nil {
				r.Template.TeamIds = make([]types.String, 0, len(resp.Template.TeamIds))
				for _, v := range resp.Template.TeamIds {
					r.Template.TeamIds = append(r.Template.TeamIds, types.StringValue(v))
				}
			}
		}
		if resp.TemplateValues == nil {
			r.TemplateValues = nil
		} else {
			r.TemplateValues = &tfTypes.NullableIncidentTypeEntityTemplateValuesEntity{}
			if resp.TemplateValues.Environments != nil {
				r.TemplateValues.Environments = []tfTypes.IncidentTypeEntityTemplateImpactEntity{}
				if len(r.TemplateValues.Environments) > len(resp.TemplateValues.Environments) {
					r.TemplateValues.Environments = r.TemplateValues.Environments[:len(resp.TemplateValues.Environments)]
				}
				for environmentsCount, environmentsItem := range resp.TemplateValues.Environments {
					var environments tfTypes.IncidentTypeEntityTemplateImpactEntity
					environments.ConditionID = types.StringPointerValue(environmentsItem.ConditionID)
					environments.ConditionName = types.StringPointerValue(environmentsItem.ConditionName)
					environments.ID = types.StringPointerValue(environmentsItem.ID)
					environments.Name = types.StringPointerValue(environmentsItem.Name)
					environments.Type = types.StringPointerValue(environmentsItem.Type)
					if environmentsCount+1 > len(r.TemplateValues.Environments) {
						r.TemplateValues.Environments = append(r.TemplateValues.Environments, environments)
					} else {
						r.TemplateValues.Environments[environmentsCount].ConditionID = environments.ConditionID
						r.TemplateValues.Environments[environmentsCount].ConditionName = environments.ConditionName
						r.TemplateValues.Environments[environmentsCount].ID = environments.ID
						r.TemplateValues.Environments[environmentsCount].Name = environments.Name
						r.TemplateValues.Environments[environmentsCount].Type = environments.Type
					}
				}
			}
			if resp.TemplateValues.Functionalities != nil {
				r.TemplateValues.Functionalities = []tfTypes.IncidentTypeEntityTemplateImpactEntity{}
				if len(r.TemplateValues.Functionalities) > len(resp.TemplateValues.Functionalities) {
					r.TemplateValues.Functionalities = r.TemplateValues.Functionalities[:len(resp.TemplateValues.Functionalities)]
				}
				for functionalitiesCount, functionalitiesItem := range resp.TemplateValues.Functionalities {
					var functionalities tfTypes.IncidentTypeEntityTemplateImpactEntity
					functionalities.ConditionID = types.StringPointerValue(functionalitiesItem.ConditionID)
					functionalities.ConditionName = types.StringPointerValue(functionalitiesItem.ConditionName)
					functionalities.ID = types.StringPointerValue(functionalitiesItem.ID)
					functionalities.Name = types.StringPointerValue(functionalitiesItem.Name)
					functionalities.Type = types.StringPointerValue(functionalitiesItem.Type)
					if functionalitiesCount+1 > len(r.TemplateValues.Functionalities) {
						r.TemplateValues.Functionalities = append(r.TemplateValues.Functionalities, functionalities)
					} else {
						r.TemplateValues.Functionalities[functionalitiesCount].ConditionID = functionalities.ConditionID
						r.TemplateValues.Functionalities[functionalitiesCount].ConditionName = functionalities.ConditionName
						r.TemplateValues.Functionalities[functionalitiesCount].ID = functionalities.ID
						r.TemplateValues.Functionalities[functionalitiesCount].Name = functionalities.Name
						r.TemplateValues.Functionalities[functionalitiesCount].Type = functionalities.Type
					}
				}
			}
			if resp.TemplateValues.Services != nil {
				r.TemplateValues.Services = []tfTypes.IncidentTypeEntityTemplateImpactEntity{}
				if len(r.TemplateValues.Services) > len(resp.TemplateValues.Services) {
					r.TemplateValues.Services = r.TemplateValues.Services[:len(resp.TemplateValues.Services)]
				}
				for servicesCount, servicesItem := range resp.TemplateValues.Services {
					var services tfTypes.IncidentTypeEntityTemplateImpactEntity
					services.ConditionID = types.StringPointerValue(servicesItem.ConditionID)
					services.ConditionName = types.StringPointerValue(servicesItem.ConditionName)
					services.ID = types.StringPointerValue(servicesItem.ID)
					services.Name = types.StringPointerValue(servicesItem.Name)
					services.Type = types.StringPointerValue(servicesItem.Type)
					if servicesCount+1 > len(r.TemplateValues.Services) {
						r.TemplateValues.Services = append(r.TemplateValues.Services, services)
					} else {
						r.TemplateValues.Services[servicesCount].ConditionID = services.ConditionID
						r.TemplateValues.Services[servicesCount].ConditionName = services.ConditionName
						r.TemplateValues.Services[servicesCount].ID = services.ID
						r.TemplateValues.Services[servicesCount].Name = services.Name
						r.TemplateValues.Services[servicesCount].Type = services.Type
					}
				}
			}
			if resp.TemplateValues.Teams != nil {
				r.TemplateValues.Teams = []tfTypes.TeamEntity{}
				if len(r.TemplateValues.Teams) > len(resp.TemplateValues.Teams) {
					r.TemplateValues.Teams = r.TemplateValues.Teams[:len(resp.TemplateValues.Teams)]
				}
				for teamsCount, teamsItem := range resp.TemplateValues.Teams {
					var teams tfTypes.TeamEntity
					teams.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.CreatedAt))
					if teamsItem.CreatedBy == nil {
						teams.CreatedBy = nil
					} else {
						teams.CreatedBy = &tfTypes.NullableAuthorEntity{}
						teams.CreatedBy.Email = types.StringPointerValue(teamsItem.CreatedBy.Email)
						teams.CreatedBy.ID = types.StringPointerValue(teamsItem.CreatedBy.ID)
						teams.CreatedBy.Name = types.StringPointerValue(teamsItem.CreatedBy.Name)
						teams.CreatedBy.Source = types.StringPointerValue(teamsItem.CreatedBy.Source)
					}
					if teamsItem.DefaultSignalsEscalationPolicy == nil {
						teams.DefaultSignalsEscalationPolicy = nil
					} else {
						teams.DefaultSignalsEscalationPolicy = &tfTypes.NullableSuccinctEntity{}
						teams.DefaultSignalsEscalationPolicy.ID = types.StringPointerValue(teamsItem.DefaultSignalsEscalationPolicy.ID)
						teams.DefaultSignalsEscalationPolicy.Name = types.StringPointerValue(teamsItem.DefaultSignalsEscalationPolicy.Name)
					}
					teams.Description = types.StringPointerValue(teamsItem.Description)
					if teamsItem.Functionalities != nil {
						teams.Functionalities = []tfTypes.FunctionalityEntityLite{}
						for functionalitiesCount1, functionalitiesItem1 := range teamsItem.Functionalities {
							var functionalities1 tfTypes.FunctionalityEntityLite
							if functionalitiesItem1.ActiveIncidents != nil {
								functionalities1.ActiveIncidents = make([]types.String, 0, len(functionalitiesItem1.ActiveIncidents))
								for _, v := range functionalitiesItem1.ActiveIncidents {
									functionalities1.ActiveIncidents = append(functionalities1.ActiveIncidents, types.StringValue(v))
								}
							}
							functionalities1.AlertOnAdd = types.BoolPointerValue(functionalitiesItem1.AlertOnAdd)
							functionalities1.AutoAddRespondingTeam = types.BoolPointerValue(functionalitiesItem1.AutoAddRespondingTeam)
							functionalities1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem1.CreatedAt))
							functionalities1.Description = types.StringPointerValue(functionalitiesItem1.Description)
							functionalities1.ID = types.StringPointerValue(functionalitiesItem1.ID)
							if functionalitiesItem1.Labels == nil {
								functionalities1.Labels = nil
							} else {
								functionalities1.Labels = &tfTypes.FunctionalityEntityLiteLabels{}
							}
							if functionalitiesItem1.Links != nil {
								functionalities1.Links = []tfTypes.LinksEntity{}
								for linksCount, linksItem := range functionalitiesItem1.Links {
									var links tfTypes.LinksEntity
									links.HrefURL = types.StringPointerValue(linksItem.HrefURL)
									links.IconURL = types.StringPointerValue(linksItem.IconURL)
									links.ID = types.StringPointerValue(linksItem.ID)
									links.Name = types.StringPointerValue(linksItem.Name)
									if linksCount+1 > len(functionalities1.Links) {
										functionalities1.Links = append(functionalities1.Links, links)
									} else {
										functionalities1.Links[linksCount].HrefURL = links.HrefURL
										functionalities1.Links[linksCount].IconURL = links.IconURL
										functionalities1.Links[linksCount].ID = links.ID
										functionalities1.Links[linksCount].Name = links.Name
									}
								}
							}
							functionalities1.Name = types.StringPointerValue(functionalitiesItem1.Name)
							if functionalitiesItem1.Owner == nil {
								functionalities1.Owner = nil
							} else {
								functionalities1.Owner = &tfTypes.NullableTeamEntityLite{}
								functionalities1.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem1.Owner.CreatedAt))
								if functionalitiesItem1.Owner.CreatedBy == nil {
									functionalities1.Owner.CreatedBy = nil
								} else {
									functionalities1.Owner.CreatedBy = &tfTypes.NullableAuthorEntity{}
									functionalities1.Owner.CreatedBy.Email = types.StringPointerValue(functionalitiesItem1.Owner.CreatedBy.Email)
									functionalities1.Owner.CreatedBy.ID = types.StringPointerValue(functionalitiesItem1.Owner.CreatedBy.ID)
									functionalities1.Owner.CreatedBy.Name = types.StringPointerValue(functionalitiesItem1.Owner.CreatedBy.Name)
									functionalities1.Owner.CreatedBy.Source = types.StringPointerValue(functionalitiesItem1.Owner.CreatedBy.Source)
								}
								functionalities1.Owner.Description = types.StringPointerValue(functionalitiesItem1.Owner.Description)
								functionalities1.Owner.ID = types.StringPointerValue(functionalitiesItem1.Owner.ID)
								functionalities1.Owner.InSupportHours = types.BoolPointerValue(functionalitiesItem1.Owner.InSupportHours)
								functionalities1.Owner.Name = types.StringPointerValue(functionalitiesItem1.Owner.Name)
								functionalities1.Owner.SignalsIcalURL = types.StringPointerValue(functionalitiesItem1.Owner.SignalsIcalURL)
								functionalities1.Owner.Slug = types.StringPointerValue(functionalitiesItem1.Owner.Slug)
								functionalities1.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem1.Owner.UpdatedAt))
							}
							functionalities1.Slug = types.StringPointerValue(functionalitiesItem1.Slug)
							functionalities1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem1.UpdatedAt))
							if functionalitiesItem1.UpdatedBy == nil {
								functionalities1.UpdatedBy = nil
							} else {
								functionalities1.UpdatedBy = &tfTypes.NullableAuthorEntity{}
								functionalities1.UpdatedBy.Email = types.StringPointerValue(functionalitiesItem1.UpdatedBy.Email)
								functionalities1.UpdatedBy.ID = types.StringPointerValue(functionalitiesItem1.UpdatedBy.ID)
								functionalities1.UpdatedBy.Name = types.StringPointerValue(functionalitiesItem1.UpdatedBy.Name)
								functionalities1.UpdatedBy.Source = types.StringPointerValue(functionalitiesItem1.UpdatedBy.Source)
							}
							if functionalitiesCount1+1 > len(teams.Functionalities) {
								teams.Functionalities = append(teams.Functionalities, functionalities1)
							} else {
								teams.Functionalities[functionalitiesCount1].ActiveIncidents = functionalities1.ActiveIncidents
								teams.Functionalities[functionalitiesCount1].AlertOnAdd = functionalities1.AlertOnAdd
								teams.Functionalities[functionalitiesCount1].AutoAddRespondingTeam = functionalities1.AutoAddRespondingTeam
								teams.Functionalities[functionalitiesCount1].CreatedAt = functionalities1.CreatedAt
								teams.Functionalities[functionalitiesCount1].Description = functionalities1.Description
								teams.Functionalities[functionalitiesCount1].ID = functionalities1.ID
								teams.Functionalities[functionalitiesCount1].Labels = functionalities1.Labels
								teams.Functionalities[functionalitiesCount1].Links = functionalities1.Links
								teams.Functionalities[functionalitiesCount1].Name = functionalities1.Name
								teams.Functionalities[functionalitiesCount1].Owner = functionalities1.Owner
								teams.Functionalities[functionalitiesCount1].Slug = functionalities1.Slug
								teams.Functionalities[functionalitiesCount1].UpdatedAt = functionalities1.UpdatedAt
								teams.Functionalities[functionalitiesCount1].UpdatedBy = functionalities1.UpdatedBy
							}
						}
					}
					teams.ID = types.StringPointerValue(teamsItem.ID)
					teams.InSupportHours = types.BoolPointerValue(teamsItem.InSupportHours)
					if teamsItem.Memberships != nil {
						teams.Memberships = []tfTypes.MembershipEntity{}
						for membershipsCount, membershipsItem := range teamsItem.Memberships {
							var memberships tfTypes.MembershipEntity
							if membershipsItem.DefaultIncidentRole == nil {
								memberships.DefaultIncidentRole = nil
							} else {
								memberships.DefaultIncidentRole = &tfTypes.NullableIncidentRoleEntity{}
								memberships.DefaultIncidentRole.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(membershipsItem.DefaultIncidentRole.CreatedAt))
								memberships.DefaultIncidentRole.Description = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Description)
								memberships.DefaultIncidentRole.DiscardedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(membershipsItem.DefaultIncidentRole.DiscardedAt))
								memberships.DefaultIncidentRole.ID = types.StringPointerValue(membershipsItem.DefaultIncidentRole.ID)
								memberships.DefaultIncidentRole.Name = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Name)
								memberships.DefaultIncidentRole.Summary = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Summary)
								memberships.DefaultIncidentRole.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(membershipsItem.DefaultIncidentRole.UpdatedAt))
							}
							if membershipsItem.Schedule == nil {
								memberships.Schedule = nil
							} else {
								memberships.Schedule = &tfTypes.NullableScheduleEntity{}
								memberships.Schedule.Discarded = types.BoolPointerValue(membershipsItem.Schedule.Discarded)
								memberships.Schedule.ID = types.StringPointerValue(membershipsItem.Schedule.ID)
								memberships.Schedule.Integration = types.StringPointerValue(membershipsItem.Schedule.Integration)
								memberships.Schedule.Name = types.StringPointerValue(membershipsItem.Schedule.Name)
							}
							if membershipsItem.SignalsOnCallSchedule == nil {
								memberships.SignalsOnCallSchedule = nil
							} else {
								memberships.SignalsOnCallSchedule = &tfTypes.NullableSuccinctEntity{}
								memberships.SignalsOnCallSchedule.ID = types.StringPointerValue(membershipsItem.SignalsOnCallSchedule.ID)
								memberships.SignalsOnCallSchedule.Name = types.StringPointerValue(membershipsItem.SignalsOnCallSchedule.Name)
							}
							if membershipsItem.User == nil {
								memberships.User = nil
							} else {
								memberships.User = &tfTypes.NullableUserEntity{}
								memberships.User.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(membershipsItem.User.CreatedAt))
								memberships.User.Email = types.StringPointerValue(membershipsItem.User.Email)
								memberships.User.ID = types.StringPointerValue(membershipsItem.User.ID)
								memberships.User.Name = types.StringPointerValue(membershipsItem.User.Name)
								if membershipsItem.User.SignalsEnabledNotificationTypes != nil {
									memberships.User.SignalsEnabledNotificationTypes = make([]types.String, 0, len(membershipsItem.User.SignalsEnabledNotificationTypes))
									for _, v := range membershipsItem.User.SignalsEnabledNotificationTypes {
										memberships.User.SignalsEnabledNotificationTypes = append(memberships.User.SignalsEnabledNotificationTypes, types.StringValue(v))
									}
								}
								if membershipsItem.User.SignalsNotificationPolicyCompliance != nil {
									memberships.User.SignalsNotificationPolicyCompliance = []tfTypes.SignalsAPINotificationPolicyItemComplianceEntity{}
									for signalsNotificationPolicyComplianceCount, signalsNotificationPolicyComplianceItem := range membershipsItem.User.SignalsNotificationPolicyCompliance {
										var signalsNotificationPolicyCompliance tfTypes.SignalsAPINotificationPolicyItemComplianceEntity
										signalsNotificationPolicyCompliance.IsCompliant = types.BoolPointerValue(signalsNotificationPolicyComplianceItem.IsCompliant)
										signalsNotificationPolicyCompliance.NotificationPolicyItemID = types.StringPointerValue(signalsNotificationPolicyComplianceItem.NotificationPolicyItemID)
										if signalsNotificationPolicyComplianceCount+1 > len(memberships.User.SignalsNotificationPolicyCompliance) {
											memberships.User.SignalsNotificationPolicyCompliance = append(memberships.User.SignalsNotificationPolicyCompliance, signalsNotificationPolicyCompliance)
										} else {
											memberships.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount].IsCompliant = signalsNotificationPolicyCompliance.IsCompliant
											memberships.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount].NotificationPolicyItemID = signalsNotificationPolicyCompliance.NotificationPolicyItemID
										}
									}
								}
								memberships.User.SlackLinked = types.BoolPointerValue(membershipsItem.User.SlackLinked)
								memberships.User.SlackUserID = types.StringPointerValue(membershipsItem.User.SlackUserID)
								memberships.User.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(membershipsItem.User.UpdatedAt))
							}
							if membershipsCount+1 > len(teams.Memberships) {
								teams.Memberships = append(teams.Memberships, memberships)
							} else {
								teams.Memberships[membershipsCount].DefaultIncidentRole = memberships.DefaultIncidentRole
								teams.Memberships[membershipsCount].Schedule = memberships.Schedule
								teams.Memberships[membershipsCount].SignalsOnCallSchedule = memberships.SignalsOnCallSchedule
								teams.Memberships[membershipsCount].User = memberships.User
							}
						}
					}
					if teamsItem.MsTeamsChannel == nil {
						teams.MsTeamsChannel = nil
					} else {
						teams.MsTeamsChannel = &tfTypes.NullableIntegrationsMicrosoftTeamsV2ChannelEntity{}
						teams.MsTeamsChannel.ChannelID = types.StringPointerValue(teamsItem.MsTeamsChannel.ChannelID)
						teams.MsTeamsChannel.ChannelName = types.StringPointerValue(teamsItem.MsTeamsChannel.ChannelName)
						teams.MsTeamsChannel.ChannelURL = types.StringPointerValue(teamsItem.MsTeamsChannel.ChannelURL)
						teams.MsTeamsChannel.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.ID)
						if teamsItem.MsTeamsChannel.Incident == nil {
							teams.MsTeamsChannel.Incident = nil
						} else {
							teams.MsTeamsChannel.Incident = &tfTypes.NullableIncidentEntity{}
							teams.MsTeamsChannel.Incident.Active = types.BoolPointerValue(teamsItem.MsTeamsChannel.Incident.Active)
							teams.MsTeamsChannel.Incident.AiIncidentSummary = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.AiIncidentSummary)
							teams.MsTeamsChannel.Incident.ChannelID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ChannelID)
							teams.MsTeamsChannel.Incident.ChannelName = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ChannelName)
							teams.MsTeamsChannel.Incident.ChannelReference = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ChannelReference)
							teams.MsTeamsChannel.Incident.ChannelStatus = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ChannelStatus)
							if teamsItem.MsTeamsChannel.Incident.ConferenceBridges != nil {
								teams.MsTeamsChannel.Incident.ConferenceBridges = []tfTypes.IncidentsConferenceBridgeEntity{}
								for conferenceBridgesCount, conferenceBridgesItem := range teamsItem.MsTeamsChannel.Incident.ConferenceBridges {
									var conferenceBridges tfTypes.IncidentsConferenceBridgeEntity
									if conferenceBridgesItem.Attachments != nil {
									}
									conferenceBridges.HasTranslatedTranscripts = types.BoolPointerValue(conferenceBridgesItem.HasTranslatedTranscripts)
									conferenceBridges.ID = types.StringPointerValue(conferenceBridgesItem.ID)
									if conferenceBridgesItem.LanguageCodes != nil {
										conferenceBridges.LanguageCodes = make([]types.String, 0, len(conferenceBridgesItem.LanguageCodes))
										for _, v := range conferenceBridgesItem.LanguageCodes {
											conferenceBridges.LanguageCodes = append(conferenceBridges.LanguageCodes, types.StringValue(v))
										}
									}
									conferenceBridges.TranscriptionStatus = types.StringPointerValue(conferenceBridgesItem.TranscriptionStatus)
									conferenceBridges.TranscriptionSubCode = types.StringPointerValue(conferenceBridgesItem.TranscriptionSubCode)
									if conferenceBridgesCount+1 > len(teams.MsTeamsChannel.Incident.ConferenceBridges) {
										teams.MsTeamsChannel.Incident.ConferenceBridges = append(teams.MsTeamsChannel.Incident.ConferenceBridges, conferenceBridges)
									} else {
										teams.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].Attachments = conferenceBridges.Attachments
										teams.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].HasTranslatedTranscripts = conferenceBridges.HasTranslatedTranscripts
										teams.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].ID = conferenceBridges.ID
										teams.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].LanguageCodes = conferenceBridges.LanguageCodes
										teams.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].TranscriptionStatus = conferenceBridges.TranscriptionStatus
										teams.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].TranscriptionSubCode = conferenceBridges.TranscriptionSubCode
									}
								}
							}
							if teamsItem.MsTeamsChannel.Incident.ContextObject == nil {
								teams.MsTeamsChannel.Incident.ContextObject = nil
							} else {
								teams.MsTeamsChannel.Incident.ContextObject = &tfTypes.NullableIncidentsContextObjectEntity{}
								teams.MsTeamsChannel.Incident.ContextObject.ContextDescription = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ContextObject.ContextDescription)
								teams.MsTeamsChannel.Incident.ContextObject.ContextTag = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ContextObject.ContextTag)
								teams.MsTeamsChannel.Incident.ContextObject.ObjectID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ContextObject.ObjectID)
								teams.MsTeamsChannel.Incident.ContextObject.ObjectType = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ContextObject.ObjectType)
							}
							if teamsItem.MsTeamsChannel.Incident.Conversations != nil {
								teams.MsTeamsChannel.Incident.Conversations = []tfTypes.ConversationsAPIEntitiesReference{}
								for conversationsCount, conversationsItem := range teamsItem.MsTeamsChannel.Incident.Conversations {
									var conversations tfTypes.ConversationsAPIEntitiesReference
									if conversationsItem.Channel == nil {
										conversations.Channel = nil
									} else {
										conversations.Channel = &tfTypes.NullableConversationsAPIEntitiesChannel{}
										conversations.Channel.Name = types.StringPointerValue(conversationsItem.Channel.Name)
									}
									conversations.CommentsURL = types.StringPointerValue(conversationsItem.CommentsURL)
									conversations.Field = types.StringPointerValue(conversationsItem.Field)
									conversations.ID = types.StringPointerValue(conversationsItem.ID)
									conversations.ResourceClass = types.StringPointerValue(conversationsItem.ResourceClass)
									conversations.ResourceID = types.StringPointerValue(conversationsItem.ResourceID)
									if conversationsCount+1 > len(teams.MsTeamsChannel.Incident.Conversations) {
										teams.MsTeamsChannel.Incident.Conversations = append(teams.MsTeamsChannel.Incident.Conversations, conversations)
									} else {
										teams.MsTeamsChannel.Incident.Conversations[conversationsCount].Channel = conversations.Channel
										teams.MsTeamsChannel.Incident.Conversations[conversationsCount].CommentsURL = conversations.CommentsURL
										teams.MsTeamsChannel.Incident.Conversations[conversationsCount].Field = conversations.Field
										teams.MsTeamsChannel.Incident.Conversations[conversationsCount].ID = conversations.ID
										teams.MsTeamsChannel.Incident.Conversations[conversationsCount].ResourceClass = conversations.ResourceClass
										teams.MsTeamsChannel.Incident.Conversations[conversationsCount].ResourceID = conversations.ResourceID
									}
								}
							}
							teams.MsTeamsChannel.Incident.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.MsTeamsChannel.Incident.CreatedAt))
							if teamsItem.MsTeamsChannel.Incident.CreatedBy == nil {
								teams.MsTeamsChannel.Incident.CreatedBy = nil
							} else {
								teams.MsTeamsChannel.Incident.CreatedBy = &tfTypes.NullableAuthorEntity{}
								teams.MsTeamsChannel.Incident.CreatedBy.Email = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.CreatedBy.Email)
								teams.MsTeamsChannel.Incident.CreatedBy.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.CreatedBy.ID)
								teams.MsTeamsChannel.Incident.CreatedBy.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.CreatedBy.Name)
								teams.MsTeamsChannel.Incident.CreatedBy.Source = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.CreatedBy.Source)
							}
							teams.MsTeamsChannel.Incident.CurrentMilestone = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.CurrentMilestone)
							if teamsItem.MsTeamsChannel.Incident.CustomFields != nil {
								teams.MsTeamsChannel.Incident.CustomFields = []tfTypes.CustomFieldsFieldValue{}
								for customFieldsCount, customFieldsItem := range teamsItem.MsTeamsChannel.Incident.CustomFields {
									var customFields tfTypes.CustomFieldsFieldValue
									customFields.Description = types.StringPointerValue(customFieldsItem.Description)
									customFields.DisplayName = types.StringPointerValue(customFieldsItem.DisplayName)
									customFields.FieldID = types.StringPointerValue(customFieldsItem.FieldID)
									customFields.Name = types.StringPointerValue(customFieldsItem.Name)
									customFields.Slug = types.StringPointerValue(customFieldsItem.Slug)
									customFields.Value = types.StringPointerValue(customFieldsItem.Value)
									if customFieldsItem.ValueArray != nil {
										customFields.ValueArray = make([]types.String, 0, len(customFieldsItem.ValueArray))
										for _, v := range customFieldsItem.ValueArray {
											customFields.ValueArray = append(customFields.ValueArray, types.StringValue(v))
										}
									}
									customFields.ValueString = types.StringPointerValue(customFieldsItem.ValueString)
									customFields.ValueType = types.StringPointerValue(customFieldsItem.ValueType)
									if customFieldsCount+1 > len(teams.MsTeamsChannel.Incident.CustomFields) {
										teams.MsTeamsChannel.Incident.CustomFields = append(teams.MsTeamsChannel.Incident.CustomFields, customFields)
									} else {
										teams.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Description = customFields.Description
										teams.MsTeamsChannel.Incident.CustomFields[customFieldsCount].DisplayName = customFields.DisplayName
										teams.MsTeamsChannel.Incident.CustomFields[customFieldsCount].FieldID = customFields.FieldID
										teams.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Name = customFields.Name
										teams.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Slug = customFields.Slug
										teams.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Value = customFields.Value
										teams.MsTeamsChannel.Incident.CustomFields[customFieldsCount].ValueArray = customFields.ValueArray
										teams.MsTeamsChannel.Incident.CustomFields[customFieldsCount].ValueString = customFields.ValueString
										teams.MsTeamsChannel.Incident.CustomFields[customFieldsCount].ValueType = customFields.ValueType
									}
								}
							}
							teams.MsTeamsChannel.Incident.CustomerImpactSummary = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.CustomerImpactSummary)
							teams.MsTeamsChannel.Incident.CustomersImpacted = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(teamsItem.MsTeamsChannel.Incident.CustomersImpacted))
							teams.MsTeamsChannel.Incident.Description = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Description)
							teams.MsTeamsChannel.Incident.DiscardedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.MsTeamsChannel.Incident.DiscardedAt))
							if teamsItem.MsTeamsChannel.Incident.Environments != nil {
								teams.MsTeamsChannel.Incident.Environments = []tfTypes.SuccinctEntity{}
								for environmentsCount1, environmentsItem1 := range teamsItem.MsTeamsChannel.Incident.Environments {
									var environments1 tfTypes.SuccinctEntity
									environments1.ID = types.StringPointerValue(environmentsItem1.ID)
									environments1.Name = types.StringPointerValue(environmentsItem1.Name)
									if environmentsCount1+1 > len(teams.MsTeamsChannel.Incident.Environments) {
										teams.MsTeamsChannel.Incident.Environments = append(teams.MsTeamsChannel.Incident.Environments, environments1)
									} else {
										teams.MsTeamsChannel.Incident.Environments[environmentsCount1].ID = environments1.ID
										teams.MsTeamsChannel.Incident.Environments[environmentsCount1].Name = environments1.Name
									}
								}
							}
							if teamsItem.MsTeamsChannel.Incident.FieldRequirements != nil {
								teams.MsTeamsChannel.Incident.FieldRequirements = []tfTypes.IncidentEntityFieldRequirementEntity{}
								for fieldRequirementsCount, fieldRequirementsItem := range teamsItem.MsTeamsChannel.Incident.FieldRequirements {
									var fieldRequirements tfTypes.IncidentEntityFieldRequirementEntity
									fieldRequirements.FieldID = types.StringPointerValue(fieldRequirementsItem.FieldID)
									fieldRequirements.RequiredAtMilestoneID = types.StringPointerValue(fieldRequirementsItem.RequiredAtMilestoneID)
									if fieldRequirementsCount+1 > len(teams.MsTeamsChannel.Incident.FieldRequirements) {
										teams.MsTeamsChannel.Incident.FieldRequirements = append(teams.MsTeamsChannel.Incident.FieldRequirements, fieldRequirements)
									} else {
										teams.MsTeamsChannel.Incident.FieldRequirements[fieldRequirementsCount].FieldID = fieldRequirements.FieldID
										teams.MsTeamsChannel.Incident.FieldRequirements[fieldRequirementsCount].RequiredAtMilestoneID = fieldRequirements.RequiredAtMilestoneID
									}
								}
							}
							if teamsItem.MsTeamsChannel.Incident.Functionalities != nil {
								teams.MsTeamsChannel.Incident.Functionalities = []tfTypes.SuccinctEntity{}
								for functionalitiesCount2, functionalitiesItem2 := range teamsItem.MsTeamsChannel.Incident.Functionalities {
									var functionalities2 tfTypes.SuccinctEntity
									functionalities2.ID = types.StringPointerValue(functionalitiesItem2.ID)
									functionalities2.Name = types.StringPointerValue(functionalitiesItem2.Name)
									if functionalitiesCount2+1 > len(teams.MsTeamsChannel.Incident.Functionalities) {
										teams.MsTeamsChannel.Incident.Functionalities = append(teams.MsTeamsChannel.Incident.Functionalities, functionalities2)
									} else {
										teams.MsTeamsChannel.Incident.Functionalities[functionalitiesCount2].ID = functionalities2.ID
										teams.MsTeamsChannel.Incident.Functionalities[functionalitiesCount2].Name = functionalities2.Name
									}
								}
							}
							teams.MsTeamsChannel.Incident.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ID)
							if teamsItem.MsTeamsChannel.Incident.Impacts != nil {
								teams.MsTeamsChannel.Incident.Impacts = []tfTypes.IncidentsImpactEntity{}
								for impactsCount1, impactsItem1 := range teamsItem.MsTeamsChannel.Incident.Impacts {
									var impacts1 tfTypes.IncidentsImpactEntity
									if impactsItem1.Condition == nil {
										impacts1.Condition = nil
									} else {
										impacts1.Condition = &tfTypes.NullableSeverityMatrixConditionEntity{}
										impacts1.Condition.ID = types.StringPointerValue(impactsItem1.Condition.ID)
										impacts1.Condition.Name = types.StringPointerValue(impactsItem1.Condition.Name)
										impacts1.Condition.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(impactsItem1.Condition.Position))
									}
									if impactsItem1.Conversations != nil {
										impacts1.Conversations = []tfTypes.ConversationsAPIEntitiesReference{}
										for conversationsCount1, conversationsItem1 := range impactsItem1.Conversations {
											var conversations1 tfTypes.ConversationsAPIEntitiesReference
											if conversationsItem1.Channel == nil {
												conversations1.Channel = nil
											} else {
												conversations1.Channel = &tfTypes.NullableConversationsAPIEntitiesChannel{}
												conversations1.Channel.Name = types.StringPointerValue(conversationsItem1.Channel.Name)
											}
											conversations1.CommentsURL = types.StringPointerValue(conversationsItem1.CommentsURL)
											conversations1.Field = types.StringPointerValue(conversationsItem1.Field)
											conversations1.ID = types.StringPointerValue(conversationsItem1.ID)
											conversations1.ResourceClass = types.StringPointerValue(conversationsItem1.ResourceClass)
											conversations1.ResourceID = types.StringPointerValue(conversationsItem1.ResourceID)
											if conversationsCount1+1 > len(impacts1.Conversations) {
												impacts1.Conversations = append(impacts1.Conversations, conversations1)
											} else {
												impacts1.Conversations[conversationsCount1].Channel = conversations1.Channel
												impacts1.Conversations[conversationsCount1].CommentsURL = conversations1.CommentsURL
												impacts1.Conversations[conversationsCount1].Field = conversations1.Field
												impacts1.Conversations[conversationsCount1].ID = conversations1.ID
												impacts1.Conversations[conversationsCount1].ResourceClass = conversations1.ResourceClass
												impacts1.Conversations[conversationsCount1].ResourceID = conversations1.ResourceID
											}
										}
									}
									impacts1.ID = types.StringPointerValue(impactsItem1.ID)
									if impactsItem1.Impact == nil {
										impacts1.Impact = nil
									} else {
										impacts1.Impact = &tfTypes.NullableSuccinctEntity{}
										impacts1.Impact.ID = types.StringPointerValue(impactsItem1.Impact.ID)
										impacts1.Impact.Name = types.StringPointerValue(impactsItem1.Impact.Name)
									}
									impacts1.Type = types.StringPointerValue(impactsItem1.Type)
									if impactsCount1+1 > len(teams.MsTeamsChannel.Incident.Impacts) {
										teams.MsTeamsChannel.Incident.Impacts = append(teams.MsTeamsChannel.Incident.Impacts, impacts1)
									} else {
										teams.MsTeamsChannel.Incident.Impacts[impactsCount1].Condition = impacts1.Condition
										teams.MsTeamsChannel.Incident.Impacts[impactsCount1].Conversations = impacts1.Conversations
										teams.MsTeamsChannel.Incident.Impacts[impactsCount1].ID = impacts1.ID
										teams.MsTeamsChannel.Incident.Impacts[impactsCount1].Impact = impacts1.Impact
										teams.MsTeamsChannel.Incident.Impacts[impactsCount1].Type = impacts1.Type
									}
								}
							}
							if teamsItem.MsTeamsChannel.Incident.IncidentChannels != nil {
								teams.MsTeamsChannel.Incident.IncidentChannels = []tfTypes.IncidentsChannelEntity{}
								for incidentChannelsCount, incidentChannelsItem := range teamsItem.MsTeamsChannel.Incident.IncidentChannels {
									var incidentChannels tfTypes.IncidentsChannelEntity
									incidentChannels.IconURL = types.StringPointerValue(incidentChannelsItem.IconURL)
									incidentChannels.ID = types.StringPointerValue(incidentChannelsItem.ID)
									incidentChannels.Name = types.StringPointerValue(incidentChannelsItem.Name)
									incidentChannels.Source = types.StringPointerValue(incidentChannelsItem.Source)
									incidentChannels.SourceID = types.StringPointerValue(incidentChannelsItem.SourceID)
									incidentChannels.SourceName = types.StringPointerValue(incidentChannelsItem.SourceName)
									incidentChannels.Status = types.StringPointerValue(incidentChannelsItem.Status)
									incidentChannels.URL = types.StringPointerValue(incidentChannelsItem.URL)
									if incidentChannelsCount+1 > len(teams.MsTeamsChannel.Incident.IncidentChannels) {
										teams.MsTeamsChannel.Incident.IncidentChannels = append(teams.MsTeamsChannel.Incident.IncidentChannels, incidentChannels)
									} else {
										teams.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].IconURL = incidentChannels.IconURL
										teams.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].ID = incidentChannels.ID
										teams.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].Name = incidentChannels.Name
										teams.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].Source = incidentChannels.Source
										teams.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].SourceID = incidentChannels.SourceID
										teams.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].SourceName = incidentChannels.SourceName
										teams.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].Status = incidentChannels.Status
										teams.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].URL = incidentChannels.URL
									}
								}
							}
							if teamsItem.MsTeamsChannel.Incident.IncidentTickets != nil {
								teams.MsTeamsChannel.Incident.IncidentTickets = []tfTypes.TicketingTicketEntity{}
								for incidentTicketsCount, incidentTicketsItem := range teamsItem.MsTeamsChannel.Incident.IncidentTickets {
									var incidentTickets tfTypes.TicketingTicketEntity
									if incidentTicketsItem.Assignees != nil {
										incidentTickets.Assignees = []tfTypes.AuthorEntity{}
										for assigneesCount, assigneesItem := range incidentTicketsItem.Assignees {
											var assignees tfTypes.AuthorEntity
											assignees.Email = types.StringPointerValue(assigneesItem.Email)
											assignees.ID = types.StringPointerValue(assigneesItem.ID)
											assignees.Name = types.StringPointerValue(assigneesItem.Name)
											assignees.Source = types.StringPointerValue(assigneesItem.Source)
											if assigneesCount+1 > len(incidentTickets.Assignees) {
												incidentTickets.Assignees = append(incidentTickets.Assignees, assignees)
											} else {
												incidentTickets.Assignees[assigneesCount].Email = assignees.Email
												incidentTickets.Assignees[assigneesCount].ID = assignees.ID
												incidentTickets.Assignees[assigneesCount].Name = assignees.Name
												incidentTickets.Assignees[assigneesCount].Source = assignees.Source
											}
										}
									}
									if incidentTicketsItem.Attachments != nil {
									}
									incidentTickets.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.CreatedAt))
									if incidentTicketsItem.CreatedBy == nil {
										incidentTickets.CreatedBy = nil
									} else {
										incidentTickets.CreatedBy = &tfTypes.NullableAuthorEntity{}
										incidentTickets.CreatedBy.Email = types.StringPointerValue(incidentTicketsItem.CreatedBy.Email)
										incidentTickets.CreatedBy.ID = types.StringPointerValue(incidentTicketsItem.CreatedBy.ID)
										incidentTickets.CreatedBy.Name = types.StringPointerValue(incidentTicketsItem.CreatedBy.Name)
										incidentTickets.CreatedBy.Source = types.StringPointerValue(incidentTicketsItem.CreatedBy.Source)
									}
									incidentTickets.Description = types.StringPointerValue(incidentTicketsItem.Description)
									incidentTickets.DueAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.DueAt))
									incidentTickets.ID = types.StringPointerValue(incidentTicketsItem.ID)
									incidentTickets.IncidentCurrentMilestone = types.StringPointerValue(incidentTicketsItem.IncidentCurrentMilestone)
									incidentTickets.IncidentID = types.StringPointerValue(incidentTicketsItem.IncidentID)
									incidentTickets.IncidentName = types.StringPointerValue(incidentTicketsItem.IncidentName)
									if incidentTicketsItem.Link == nil {
										incidentTickets.Link = nil
									} else {
										incidentTickets.Link = &tfTypes.NullableAttachmentsLinkEntity{}
										incidentTickets.Link.Deletable = types.BoolPointerValue(incidentTicketsItem.Link.Deletable)
										incidentTickets.Link.DisplayText = types.StringPointerValue(incidentTicketsItem.Link.DisplayText)
										incidentTickets.Link.Editable = types.BoolPointerValue(incidentTicketsItem.Link.Editable)
										incidentTickets.Link.HrefURL = types.StringPointerValue(incidentTicketsItem.Link.HrefURL)
										incidentTickets.Link.IconURL = types.StringPointerValue(incidentTicketsItem.Link.IconURL)
										incidentTickets.Link.ID = types.StringPointerValue(incidentTicketsItem.Link.ID)
										incidentTickets.Link.Type = types.StringPointerValue(incidentTicketsItem.Link.Type)
									}
									if incidentTicketsItem.Priority == nil {
										incidentTickets.Priority = nil
									} else {
										incidentTickets.Priority = &tfTypes.NullableTicketingPriorityEntity{}
										incidentTickets.Priority.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.Priority.CreatedAt))
										incidentTickets.Priority.ID = types.StringPointerValue(incidentTicketsItem.Priority.ID)
										incidentTickets.Priority.Name = types.StringPointerValue(incidentTicketsItem.Priority.Name)
										incidentTickets.Priority.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(incidentTicketsItem.Priority.Position))
										incidentTickets.Priority.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.Priority.UpdatedAt))
									}
									incidentTickets.State = types.StringPointerValue(incidentTicketsItem.State)
									incidentTickets.Summary = types.StringPointerValue(incidentTicketsItem.Summary)
									incidentTickets.SyncErrorMessage = types.StringPointerValue(incidentTicketsItem.SyncErrorMessage)
									if incidentTicketsItem.TagList != nil {
										incidentTickets.TagList = make([]types.String, 0, len(incidentTicketsItem.TagList))
										for _, v := range incidentTicketsItem.TagList {
											incidentTickets.TagList = append(incidentTickets.TagList, types.StringValue(v))
										}
									}
									incidentTickets.TaskID = types.StringPointerValue(incidentTicketsItem.TaskID)
									incidentTickets.Type = types.StringPointerValue(incidentTicketsItem.Type)
									incidentTickets.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.UpdatedAt))
									if incidentTicketsCount+1 > len(teams.MsTeamsChannel.Incident.IncidentTickets) {
										teams.MsTeamsChannel.Incident.IncidentTickets = append(teams.MsTeamsChannel.Incident.IncidentTickets, incidentTickets)
									} else {
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Assignees = incidentTickets.Assignees
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Attachments = incidentTickets.Attachments
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].CreatedAt = incidentTickets.CreatedAt
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].CreatedBy = incidentTickets.CreatedBy
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Description = incidentTickets.Description
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].DueAt = incidentTickets.DueAt
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].ID = incidentTickets.ID
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].IncidentCurrentMilestone = incidentTickets.IncidentCurrentMilestone
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].IncidentID = incidentTickets.IncidentID
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].IncidentName = incidentTickets.IncidentName
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Link = incidentTickets.Link
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Priority = incidentTickets.Priority
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].State = incidentTickets.State
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Summary = incidentTickets.Summary
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].SyncErrorMessage = incidentTickets.SyncErrorMessage
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].TagList = incidentTickets.TagList
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].TaskID = incidentTickets.TaskID
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Type = incidentTickets.Type
										teams.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].UpdatedAt = incidentTickets.UpdatedAt
									}
								}
							}
							if teamsItem.MsTeamsChannel.Incident.IncidentType == nil {
								teams.MsTeamsChannel.Incident.IncidentType = nil
							} else {
								teams.MsTeamsChannel.Incident.IncidentType = &tfTypes.NullableSuccinctEntity{}
								teams.MsTeamsChannel.Incident.IncidentType.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.IncidentType.ID)
								teams.MsTeamsChannel.Incident.IncidentType.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.IncidentType.Name)
							}
							teams.MsTeamsChannel.Incident.IncidentURL = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.IncidentURL)
							if teamsItem.MsTeamsChannel.Incident.Labels == nil {
								teams.MsTeamsChannel.Incident.Labels = nil
							} else {
								teams.MsTeamsChannel.Incident.Labels = &tfTypes.NullableIncidentEntityLabels{}
							}
							if teamsItem.MsTeamsChannel.Incident.LastNote == nil {
								teams.MsTeamsChannel.Incident.LastNote = nil
							} else {
								teams.MsTeamsChannel.Incident.LastNote = &tfTypes.NullableEventNoteEntity{}
								teams.MsTeamsChannel.Incident.LastNote.Body = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.LastNote.Body)
								if teamsItem.MsTeamsChannel.Incident.LastNote.Conversations != nil {
									teams.MsTeamsChannel.Incident.LastNote.Conversations = []tfTypes.ConversationsAPIEntitiesReference{}
									for conversationsCount2, conversationsItem2 := range teamsItem.MsTeamsChannel.Incident.LastNote.Conversations {
										var conversations2 tfTypes.ConversationsAPIEntitiesReference
										if conversationsItem2.Channel == nil {
											conversations2.Channel = nil
										} else {
											conversations2.Channel = &tfTypes.NullableConversationsAPIEntitiesChannel{}
											conversations2.Channel.Name = types.StringPointerValue(conversationsItem2.Channel.Name)
										}
										conversations2.CommentsURL = types.StringPointerValue(conversationsItem2.CommentsURL)
										conversations2.Field = types.StringPointerValue(conversationsItem2.Field)
										conversations2.ID = types.StringPointerValue(conversationsItem2.ID)
										conversations2.ResourceClass = types.StringPointerValue(conversationsItem2.ResourceClass)
										conversations2.ResourceID = types.StringPointerValue(conversationsItem2.ResourceID)
										if conversationsCount2+1 > len(teams.MsTeamsChannel.Incident.LastNote.Conversations) {
											teams.MsTeamsChannel.Incident.LastNote.Conversations = append(teams.MsTeamsChannel.Incident.LastNote.Conversations, conversations2)
										} else {
											teams.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].Channel = conversations2.Channel
											teams.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].CommentsURL = conversations2.CommentsURL
											teams.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].Field = conversations2.Field
											teams.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].ID = conversations2.ID
											teams.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].ResourceClass = conversations2.ResourceClass
											teams.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].ResourceID = conversations2.ResourceID
										}
									}
								}
								teams.MsTeamsChannel.Incident.LastNote.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.MsTeamsChannel.Incident.LastNote.CreatedAt))
								teams.MsTeamsChannel.Incident.LastNote.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.LastNote.ID)
								if teamsItem.MsTeamsChannel.Incident.LastNote.StatusPages != nil {
									teams.MsTeamsChannel.Incident.LastNote.StatusPages = []tfTypes.IncidentsStatusPageEntity{}
									for statusPagesCount, statusPagesItem := range teamsItem.MsTeamsChannel.Incident.LastNote.StatusPages {
										var statusPages tfTypes.IncidentsStatusPageEntity
										statusPages.DisplayName = types.StringPointerValue(statusPagesItem.DisplayName)
										statusPages.ExternalID = types.StringPointerValue(statusPagesItem.ExternalID)
										statusPages.ID = types.StringPointerValue(statusPagesItem.ID)
										if statusPagesItem.Integration == nil {
											statusPages.Integration = nil
										} else {
											statusPages.Integration = &tfTypes.NullableIntegrationEntity{}
											statusPages.Integration.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(statusPagesItem.Integration.CreatedAt))
											statusPages.Integration.DisplayName = types.StringPointerValue(statusPagesItem.Integration.DisplayName)
											statusPages.Integration.ID = types.StringPointerValue(statusPagesItem.Integration.ID)
											statusPages.Integration.IntegrationName = types.StringPointerValue(statusPagesItem.Integration.IntegrationName)
											statusPages.Integration.IntegrationSlug = types.StringPointerValue(statusPagesItem.Integration.IntegrationSlug)
										}
										statusPages.Name = types.StringPointerValue(statusPagesItem.Name)
										statusPages.URL = types.StringPointerValue(statusPagesItem.URL)
										if statusPagesCount+1 > len(teams.MsTeamsChannel.Incident.LastNote.StatusPages) {
											teams.MsTeamsChannel.Incident.LastNote.StatusPages = append(teams.MsTeamsChannel.Incident.LastNote.StatusPages, statusPages)
										} else {
											teams.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].DisplayName = statusPages.DisplayName
											teams.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].ExternalID = statusPages.ExternalID
											teams.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].ID = statusPages.ID
											teams.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].Integration = statusPages.Integration
											teams.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].Name = statusPages.Name
											teams.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].URL = statusPages.URL
										}
									}
								}
							}
							teams.MsTeamsChannel.Incident.LastUpdate = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.LastUpdate)
							if teamsItem.MsTeamsChannel.Incident.LifecycleMeasurements != nil {
								teams.MsTeamsChannel.Incident.LifecycleMeasurements = []tfTypes.IncidentsLifecycleMeasurementEntity{}
								for lifecycleMeasurementsCount, lifecycleMeasurementsItem := range teamsItem.MsTeamsChannel.Incident.LifecycleMeasurements {
									var lifecycleMeasurements tfTypes.IncidentsLifecycleMeasurementEntity
									lifecycleMeasurements.CalculatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(lifecycleMeasurementsItem.CalculatedAt))
									lifecycleMeasurements.Description = types.StringPointerValue(lifecycleMeasurementsItem.Description)
									lifecycleMeasurements.EndsAtMilestone = types.StringPointerValue(lifecycleMeasurementsItem.EndsAtMilestone)
									lifecycleMeasurements.ID = types.StringPointerValue(lifecycleMeasurementsItem.ID)
									lifecycleMeasurements.Name = types.StringPointerValue(lifecycleMeasurementsItem.Name)
									lifecycleMeasurements.Slug = types.StringPointerValue(lifecycleMeasurementsItem.Slug)
									lifecycleMeasurements.StartsAtMilestone = types.StringPointerValue(lifecycleMeasurementsItem.StartsAtMilestone)
									lifecycleMeasurements.Value = types.StringPointerValue(lifecycleMeasurementsItem.Value)
									if lifecycleMeasurementsCount+1 > len(teams.MsTeamsChannel.Incident.LifecycleMeasurements) {
										teams.MsTeamsChannel.Incident.LifecycleMeasurements = append(teams.MsTeamsChannel.Incident.LifecycleMeasurements, lifecycleMeasurements)
									} else {
										teams.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].CalculatedAt = lifecycleMeasurements.CalculatedAt
										teams.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Description = lifecycleMeasurements.Description
										teams.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].EndsAtMilestone = lifecycleMeasurements.EndsAtMilestone
										teams.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].ID = lifecycleMeasurements.ID
										teams.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Name = lifecycleMeasurements.Name
										teams.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Slug = lifecycleMeasurements.Slug
										teams.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].StartsAtMilestone = lifecycleMeasurements.StartsAtMilestone
										teams.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Value = lifecycleMeasurements.Value
									}
								}
							}
							if teamsItem.MsTeamsChannel.Incident.LifecyclePhases != nil {
								teams.MsTeamsChannel.Incident.LifecyclePhases = []tfTypes.IncidentsLifecyclePhaseEntity{}
								for lifecyclePhasesCount, lifecyclePhasesItem := range teamsItem.MsTeamsChannel.Incident.LifecyclePhases {
									var lifecyclePhases tfTypes.IncidentsLifecyclePhaseEntity
									lifecyclePhases.Description = types.StringPointerValue(lifecyclePhasesItem.Description)
									lifecyclePhases.ID = types.StringPointerValue(lifecyclePhasesItem.ID)
									if lifecyclePhasesItem.Milestones != nil {
										lifecyclePhases.Milestones = []tfTypes.IncidentsLifecycleMilestoneEntity{}
										for milestonesCount, milestonesItem := range lifecyclePhasesItem.Milestones {
											var milestones tfTypes.IncidentsLifecycleMilestoneEntity
											milestones.Description = types.StringPointerValue(milestonesItem.Description)
											milestones.Duration = types.StringPointerValue(milestonesItem.Duration)
											milestones.ID = types.StringPointerValue(milestonesItem.ID)
											milestones.Name = types.StringPointerValue(milestonesItem.Name)
											milestones.OccurredAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem.OccurredAt))
											milestones.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(milestonesItem.Position))
											milestones.Slug = types.StringPointerValue(milestonesItem.Slug)
											milestones.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem.UpdatedAt))
											if milestonesItem.UpdatedBy == nil {
												milestones.UpdatedBy = nil
											} else {
												milestones.UpdatedBy = &tfTypes.NullableAuthorEntity{}
												milestones.UpdatedBy.Email = types.StringPointerValue(milestonesItem.UpdatedBy.Email)
												milestones.UpdatedBy.ID = types.StringPointerValue(milestonesItem.UpdatedBy.ID)
												milestones.UpdatedBy.Name = types.StringPointerValue(milestonesItem.UpdatedBy.Name)
												milestones.UpdatedBy.Source = types.StringPointerValue(milestonesItem.UpdatedBy.Source)
											}
											if milestonesCount+1 > len(lifecyclePhases.Milestones) {
												lifecyclePhases.Milestones = append(lifecyclePhases.Milestones, milestones)
											} else {
												lifecyclePhases.Milestones[milestonesCount].Description = milestones.Description
												lifecyclePhases.Milestones[milestonesCount].Duration = milestones.Duration
												lifecyclePhases.Milestones[milestonesCount].ID = milestones.ID
												lifecyclePhases.Milestones[milestonesCount].Name = milestones.Name
												lifecyclePhases.Milestones[milestonesCount].OccurredAt = milestones.OccurredAt
												lifecyclePhases.Milestones[milestonesCount].Position = milestones.Position
												lifecyclePhases.Milestones[milestonesCount].Slug = milestones.Slug
												lifecyclePhases.Milestones[milestonesCount].UpdatedAt = milestones.UpdatedAt
												lifecyclePhases.Milestones[milestonesCount].UpdatedBy = milestones.UpdatedBy
											}
										}
									}
									lifecyclePhases.Name = types.StringPointerValue(lifecyclePhasesItem.Name)
									lifecyclePhases.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(lifecyclePhasesItem.Position))
									lifecyclePhases.Type = types.StringPointerValue(lifecyclePhasesItem.Type)
									if lifecyclePhasesCount+1 > len(teams.MsTeamsChannel.Incident.LifecyclePhases) {
										teams.MsTeamsChannel.Incident.LifecyclePhases = append(teams.MsTeamsChannel.Incident.LifecyclePhases, lifecyclePhases)
									} else {
										teams.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Description = lifecyclePhases.Description
										teams.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].ID = lifecyclePhases.ID
										teams.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Milestones = lifecyclePhases.Milestones
										teams.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Name = lifecyclePhases.Name
										teams.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Position = lifecyclePhases.Position
										teams.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Type = lifecyclePhases.Type
									}
								}
							}
							if teamsItem.MsTeamsChannel.Incident.Milestones != nil {
								teams.MsTeamsChannel.Incident.Milestones = []tfTypes.IncidentsMilestoneEntity{}
								for milestonesCount1, milestonesItem1 := range teamsItem.MsTeamsChannel.Incident.Milestones {
									var milestones1 tfTypes.IncidentsMilestoneEntity
									milestones1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem1.CreatedAt))
									milestones1.Duration = types.StringPointerValue(milestonesItem1.Duration)
									milestones1.ID = types.StringPointerValue(milestonesItem1.ID)
									milestones1.OccurredAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem1.OccurredAt))
									milestones1.Type = types.StringPointerValue(milestonesItem1.Type)
									milestones1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem1.UpdatedAt))
									if milestonesCount1+1 > len(teams.MsTeamsChannel.Incident.Milestones) {
										teams.MsTeamsChannel.Incident.Milestones = append(teams.MsTeamsChannel.Incident.Milestones, milestones1)
									} else {
										teams.MsTeamsChannel.Incident.Milestones[milestonesCount1].CreatedAt = milestones1.CreatedAt
										teams.MsTeamsChannel.Incident.Milestones[milestonesCount1].Duration = milestones1.Duration
										teams.MsTeamsChannel.Incident.Milestones[milestonesCount1].ID = milestones1.ID
										teams.MsTeamsChannel.Incident.Milestones[milestonesCount1].OccurredAt = milestones1.OccurredAt
										teams.MsTeamsChannel.Incident.Milestones[milestonesCount1].Type = milestones1.Type
										teams.MsTeamsChannel.Incident.Milestones[milestonesCount1].UpdatedAt = milestones1.UpdatedAt
									}
								}
							}
							teams.MsTeamsChannel.Incident.MonetaryImpact = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(teamsItem.MsTeamsChannel.Incident.MonetaryImpact))
							teams.MsTeamsChannel.Incident.MonetaryImpactCents = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(teamsItem.MsTeamsChannel.Incident.MonetaryImpactCents))
							teams.MsTeamsChannel.Incident.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Name)
							teams.MsTeamsChannel.Incident.Number = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(teamsItem.MsTeamsChannel.Incident.Number))
							if teamsItem.MsTeamsChannel.Incident.Organization == nil {
								teams.MsTeamsChannel.Incident.Organization = nil
							} else {
								teams.MsTeamsChannel.Incident.Organization = &tfTypes.NullableOrganizationEntity{}
								teams.MsTeamsChannel.Incident.Organization.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Organization.ID)
								teams.MsTeamsChannel.Incident.Organization.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Organization.Name)
							}
							teams.MsTeamsChannel.Incident.OrganizationID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.OrganizationID)
							teams.MsTeamsChannel.Incident.Priority = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Priority)
							teams.MsTeamsChannel.Incident.PrivateID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.PrivateID)
							teams.MsTeamsChannel.Incident.PrivateStatusPageURL = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.PrivateStatusPageURL)
							teams.MsTeamsChannel.Incident.ReportID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ReportID)
							if teamsItem.MsTeamsChannel.Incident.RetroExports != nil {
							}
							if teamsItem.MsTeamsChannel.Incident.RoleAssignments != nil {
								teams.MsTeamsChannel.Incident.RoleAssignments = []tfTypes.IncidentsRoleAssignmentEntity{}
								for roleAssignmentsCount, roleAssignmentsItem := range teamsItem.MsTeamsChannel.Incident.RoleAssignments {
									var roleAssignments tfTypes.IncidentsRoleAssignmentEntity
									roleAssignments.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.CreatedAt))
									roleAssignments.ID = types.StringPointerValue(roleAssignmentsItem.ID)
									if roleAssignmentsItem.IncidentRole == nil {
										roleAssignments.IncidentRole = nil
									} else {
										roleAssignments.IncidentRole = &tfTypes.NullableIncidentRoleEntity{}
										roleAssignments.IncidentRole.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.IncidentRole.CreatedAt))
										roleAssignments.IncidentRole.Description = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Description)
										roleAssignments.IncidentRole.DiscardedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.IncidentRole.DiscardedAt))
										roleAssignments.IncidentRole.ID = types.StringPointerValue(roleAssignmentsItem.IncidentRole.ID)
										roleAssignments.IncidentRole.Name = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Name)
										roleAssignments.IncidentRole.Summary = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Summary)
										roleAssignments.IncidentRole.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.IncidentRole.UpdatedAt))
									}
									roleAssignments.Status = types.StringPointerValue(roleAssignmentsItem.Status)
									roleAssignments.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.UpdatedAt))
									if roleAssignmentsItem.User == nil {
										roleAssignments.User = nil
									} else {
										roleAssignments.User = &tfTypes.NullableUserEntity{}
										roleAssignments.User.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.User.CreatedAt))
										roleAssignments.User.Email = types.StringPointerValue(roleAssignmentsItem.User.Email)
										roleAssignments.User.ID = types.StringPointerValue(roleAssignmentsItem.User.ID)
										roleAssignments.User.Name = types.StringPointerValue(roleAssignmentsItem.User.Name)
										if roleAssignmentsItem.User.SignalsEnabledNotificationTypes != nil {
											roleAssignments.User.SignalsEnabledNotificationTypes = make([]types.String, 0, len(roleAssignmentsItem.User.SignalsEnabledNotificationTypes))
											for _, v := range roleAssignmentsItem.User.SignalsEnabledNotificationTypes {
												roleAssignments.User.SignalsEnabledNotificationTypes = append(roleAssignments.User.SignalsEnabledNotificationTypes, types.StringValue(v))
											}
										}
										if roleAssignmentsItem.User.SignalsNotificationPolicyCompliance != nil {
											roleAssignments.User.SignalsNotificationPolicyCompliance = []tfTypes.SignalsAPINotificationPolicyItemComplianceEntity{}
											for signalsNotificationPolicyComplianceCount1, signalsNotificationPolicyComplianceItem1 := range roleAssignmentsItem.User.SignalsNotificationPolicyCompliance {
												var signalsNotificationPolicyCompliance1 tfTypes.SignalsAPINotificationPolicyItemComplianceEntity
												signalsNotificationPolicyCompliance1.IsCompliant = types.BoolPointerValue(signalsNotificationPolicyComplianceItem1.IsCompliant)
												signalsNotificationPolicyCompliance1.NotificationPolicyItemID = types.StringPointerValue(signalsNotificationPolicyComplianceItem1.NotificationPolicyItemID)
												if signalsNotificationPolicyComplianceCount1+1 > len(roleAssignments.User.SignalsNotificationPolicyCompliance) {
													roleAssignments.User.SignalsNotificationPolicyCompliance = append(roleAssignments.User.SignalsNotificationPolicyCompliance, signalsNotificationPolicyCompliance1)
												} else {
													roleAssignments.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount1].IsCompliant = signalsNotificationPolicyCompliance1.IsCompliant
													roleAssignments.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount1].NotificationPolicyItemID = signalsNotificationPolicyCompliance1.NotificationPolicyItemID
												}
											}
										}
										roleAssignments.User.SlackLinked = types.BoolPointerValue(roleAssignmentsItem.User.SlackLinked)
										roleAssignments.User.SlackUserID = types.StringPointerValue(roleAssignmentsItem.User.SlackUserID)
										roleAssignments.User.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.User.UpdatedAt))
									}
									if roleAssignmentsCount+1 > len(teams.MsTeamsChannel.Incident.RoleAssignments) {
										teams.MsTeamsChannel.Incident.RoleAssignments = append(teams.MsTeamsChannel.Incident.RoleAssignments, roleAssignments)
									} else {
										teams.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].CreatedAt = roleAssignments.CreatedAt
										teams.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].ID = roleAssignments.ID
										teams.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].IncidentRole = roleAssignments.IncidentRole
										teams.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].Status = roleAssignments.Status
										teams.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].UpdatedAt = roleAssignments.UpdatedAt
										teams.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].User = roleAssignments.User
									}
								}
							}
							if teamsItem.MsTeamsChannel.Incident.Services != nil {
								teams.MsTeamsChannel.Incident.Services = []tfTypes.SuccinctEntity{}
								for servicesCount1, servicesItem1 := range teamsItem.MsTeamsChannel.Incident.Services {
									var services1 tfTypes.SuccinctEntity
									services1.ID = types.StringPointerValue(servicesItem1.ID)
									services1.Name = types.StringPointerValue(servicesItem1.Name)
									if servicesCount1+1 > len(teams.MsTeamsChannel.Incident.Services) {
										teams.MsTeamsChannel.Incident.Services = append(teams.MsTeamsChannel.Incident.Services, services1)
									} else {
										teams.MsTeamsChannel.Incident.Services[servicesCount1].ID = services1.ID
										teams.MsTeamsChannel.Incident.Services[servicesCount1].Name = services1.Name
									}
								}
							}
							teams.MsTeamsChannel.Incident.Severity = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Severity)
							teams.MsTeamsChannel.Incident.SeverityColor = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityColor)
							teams.MsTeamsChannel.Incident.SeverityCondition = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityCondition)
							if teamsItem.MsTeamsChannel.Incident.SeverityConditionObject == nil {
								teams.MsTeamsChannel.Incident.SeverityConditionObject = nil
							} else {
								teams.MsTeamsChannel.Incident.SeverityConditionObject = &tfTypes.NullableSeverityMatrixConditionEntity{}
								teams.MsTeamsChannel.Incident.SeverityConditionObject.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityConditionObject.ID)
								teams.MsTeamsChannel.Incident.SeverityConditionObject.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityConditionObject.Name)
								teams.MsTeamsChannel.Incident.SeverityConditionObject.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(teamsItem.MsTeamsChannel.Incident.SeverityConditionObject.Position))
							}
							teams.MsTeamsChannel.Incident.SeverityImpact = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityImpact)
							if teamsItem.MsTeamsChannel.Incident.SeverityImpactObject == nil {
								teams.MsTeamsChannel.Incident.SeverityImpactObject = nil
							} else {
								teams.MsTeamsChannel.Incident.SeverityImpactObject = &tfTypes.NullableSeverityMatrixImpactEntity{}
								teams.MsTeamsChannel.Incident.SeverityImpactObject.AffectsID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityImpactObject.AffectsID)
								teams.MsTeamsChannel.Incident.SeverityImpactObject.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityImpactObject.ID)
								teams.MsTeamsChannel.Incident.SeverityImpactObject.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityImpactObject.Name)
								teams.MsTeamsChannel.Incident.SeverityImpactObject.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(teamsItem.MsTeamsChannel.Incident.SeverityImpactObject.Position))
								teams.MsTeamsChannel.Incident.SeverityImpactObject.Type = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityImpactObject.Type)
							}
							teams.MsTeamsChannel.Incident.StartedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.MsTeamsChannel.Incident.StartedAt))
							if teamsItem.MsTeamsChannel.Incident.StatusPages != nil {
								teams.MsTeamsChannel.Incident.StatusPages = []tfTypes.IncidentsStatusPageEntity{}
								for statusPagesCount1, statusPagesItem1 := range teamsItem.MsTeamsChannel.Incident.StatusPages {
									var statusPages1 tfTypes.IncidentsStatusPageEntity
									statusPages1.DisplayName = types.StringPointerValue(statusPagesItem1.DisplayName)
									statusPages1.ExternalID = types.StringPointerValue(statusPagesItem1.ExternalID)
									statusPages1.ID = types.StringPointerValue(statusPagesItem1.ID)
									if statusPagesItem1.Integration == nil {
										statusPages1.Integration = nil
									} else {
										statusPages1.Integration = &tfTypes.NullableIntegrationEntity{}
										statusPages1.Integration.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(statusPagesItem1.Integration.CreatedAt))
										statusPages1.Integration.DisplayName = types.StringPointerValue(statusPagesItem1.Integration.DisplayName)
										statusPages1.Integration.ID = types.StringPointerValue(statusPagesItem1.Integration.ID)
										statusPages1.Integration.IntegrationName = types.StringPointerValue(statusPagesItem1.Integration.IntegrationName)
										statusPages1.Integration.IntegrationSlug = types.StringPointerValue(statusPagesItem1.Integration.IntegrationSlug)
									}
									statusPages1.Name = types.StringPointerValue(statusPagesItem1.Name)
									statusPages1.URL = types.StringPointerValue(statusPagesItem1.URL)
									if statusPagesCount1+1 > len(teams.MsTeamsChannel.Incident.StatusPages) {
										teams.MsTeamsChannel.Incident.StatusPages = append(teams.MsTeamsChannel.Incident.StatusPages, statusPages1)
									} else {
										teams.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].DisplayName = statusPages1.DisplayName
										teams.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].ExternalID = statusPages1.ExternalID
										teams.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].ID = statusPages1.ID
										teams.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].Integration = statusPages1.Integration
										teams.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].Name = statusPages1.Name
										teams.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].URL = statusPages1.URL
									}
								}
							}
							teams.MsTeamsChannel.Incident.Summary = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Summary)
							if teamsItem.MsTeamsChannel.Incident.TagList != nil {
								teams.MsTeamsChannel.Incident.TagList = make([]types.String, 0, len(teamsItem.MsTeamsChannel.Incident.TagList))
								for _, v := range teamsItem.MsTeamsChannel.Incident.TagList {
									teams.MsTeamsChannel.Incident.TagList = append(teams.MsTeamsChannel.Incident.TagList, types.StringValue(v))
								}
							}
							if teamsItem.MsTeamsChannel.Incident.TeamAssignments != nil {
								teams.MsTeamsChannel.Incident.TeamAssignments = []tfTypes.IncidentsTeamAssignmentEntityLite{}
								for teamAssignmentsCount, teamAssignmentsItem := range teamsItem.MsTeamsChannel.Incident.TeamAssignments {
									var teamAssignments tfTypes.IncidentsTeamAssignmentEntityLite
									teamAssignments.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.CreatedAt))
									teamAssignments.ID = types.StringPointerValue(teamAssignmentsItem.ID)
									teamAssignments.Status = types.StringPointerValue(teamAssignmentsItem.Status)
									if teamAssignmentsItem.Team == nil {
										teamAssignments.Team = nil
									} else {
										teamAssignments.Team = &tfTypes.NullableTeamEntityLite{}
										teamAssignments.Team.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.Team.CreatedAt))
										if teamAssignmentsItem.Team.CreatedBy == nil {
											teamAssignments.Team.CreatedBy = nil
										} else {
											teamAssignments.Team.CreatedBy = &tfTypes.NullableAuthorEntity{}
											teamAssignments.Team.CreatedBy.Email = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.Email)
											teamAssignments.Team.CreatedBy.ID = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.ID)
											teamAssignments.Team.CreatedBy.Name = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.Name)
											teamAssignments.Team.CreatedBy.Source = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.Source)
										}
										teamAssignments.Team.Description = types.StringPointerValue(teamAssignmentsItem.Team.Description)
										teamAssignments.Team.ID = types.StringPointerValue(teamAssignmentsItem.Team.ID)
										teamAssignments.Team.InSupportHours = types.BoolPointerValue(teamAssignmentsItem.Team.InSupportHours)
										teamAssignments.Team.Name = types.StringPointerValue(teamAssignmentsItem.Team.Name)
										teamAssignments.Team.SignalsIcalURL = types.StringPointerValue(teamAssignmentsItem.Team.SignalsIcalURL)
										teamAssignments.Team.Slug = types.StringPointerValue(teamAssignmentsItem.Team.Slug)
										teamAssignments.Team.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.Team.UpdatedAt))
									}
									teamAssignments.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.UpdatedAt))
									if teamAssignmentsCount+1 > len(teams.MsTeamsChannel.Incident.TeamAssignments) {
										teams.MsTeamsChannel.Incident.TeamAssignments = append(teams.MsTeamsChannel.Incident.TeamAssignments, teamAssignments)
									} else {
										teams.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].CreatedAt = teamAssignments.CreatedAt
										teams.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].ID = teamAssignments.ID
										teams.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].Status = teamAssignments.Status
										teams.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].Team = teamAssignments.Team
										teams.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].UpdatedAt = teamAssignments.UpdatedAt
									}
								}
							}
							if teamsItem.MsTeamsChannel.Incident.Ticket == nil {
								teams.MsTeamsChannel.Incident.Ticket = nil
							} else {
								teams.MsTeamsChannel.Incident.Ticket = &tfTypes.NullableTicketingTicketEntity{}
								if teamsItem.MsTeamsChannel.Incident.Ticket.Assignees != nil {
									teams.MsTeamsChannel.Incident.Ticket.Assignees = []tfTypes.AuthorEntity{}
									for assigneesCount1, assigneesItem1 := range teamsItem.MsTeamsChannel.Incident.Ticket.Assignees {
										var assignees1 tfTypes.AuthorEntity
										assignees1.Email = types.StringPointerValue(assigneesItem1.Email)
										assignees1.ID = types.StringPointerValue(assigneesItem1.ID)
										assignees1.Name = types.StringPointerValue(assigneesItem1.Name)
										assignees1.Source = types.StringPointerValue(assigneesItem1.Source)
										if assigneesCount1+1 > len(teams.MsTeamsChannel.Incident.Ticket.Assignees) {
											teams.MsTeamsChannel.Incident.Ticket.Assignees = append(teams.MsTeamsChannel.Incident.Ticket.Assignees, assignees1)
										} else {
											teams.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].Email = assignees1.Email
											teams.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].ID = assignees1.ID
											teams.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].Name = assignees1.Name
											teams.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].Source = assignees1.Source
										}
									}
								}
								if teamsItem.MsTeamsChannel.Incident.Ticket.Attachments != nil {
								}
								teams.MsTeamsChannel.Incident.Ticket.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.MsTeamsChannel.Incident.Ticket.CreatedAt))
								if teamsItem.MsTeamsChannel.Incident.Ticket.CreatedBy == nil {
									teams.MsTeamsChannel.Incident.Ticket.CreatedBy = nil
								} else {
									teams.MsTeamsChannel.Incident.Ticket.CreatedBy = &tfTypes.NullableAuthorEntity{}
									teams.MsTeamsChannel.Incident.Ticket.CreatedBy.Email = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.CreatedBy.Email)
									teams.MsTeamsChannel.Incident.Ticket.CreatedBy.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.CreatedBy.ID)
									teams.MsTeamsChannel.Incident.Ticket.CreatedBy.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.CreatedBy.Name)
									teams.MsTeamsChannel.Incident.Ticket.CreatedBy.Source = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.CreatedBy.Source)
								}
								teams.MsTeamsChannel.Incident.Ticket.Description = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Description)
								teams.MsTeamsChannel.Incident.Ticket.DueAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.MsTeamsChannel.Incident.Ticket.DueAt))
								teams.MsTeamsChannel.Incident.Ticket.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.ID)
								teams.MsTeamsChannel.Incident.Ticket.IncidentCurrentMilestone = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.IncidentCurrentMilestone)
								teams.MsTeamsChannel.Incident.Ticket.IncidentID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.IncidentID)
								teams.MsTeamsChannel.Incident.Ticket.IncidentName = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.IncidentName)
								if teamsItem.MsTeamsChannel.Incident.Ticket.Link == nil {
									teams.MsTeamsChannel.Incident.Ticket.Link = nil
								} else {
									teams.MsTeamsChannel.Incident.Ticket.Link = &tfTypes.NullableAttachmentsLinkEntity{}
									teams.MsTeamsChannel.Incident.Ticket.Link.Deletable = types.BoolPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.Deletable)
									teams.MsTeamsChannel.Incident.Ticket.Link.DisplayText = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.DisplayText)
									teams.MsTeamsChannel.Incident.Ticket.Link.Editable = types.BoolPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.Editable)
									teams.MsTeamsChannel.Incident.Ticket.Link.HrefURL = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.HrefURL)
									teams.MsTeamsChannel.Incident.Ticket.Link.IconURL = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.IconURL)
									teams.MsTeamsChannel.Incident.Ticket.Link.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.ID)
									teams.MsTeamsChannel.Incident.Ticket.Link.Type = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.Type)
								}
								if teamsItem.MsTeamsChannel.Incident.Ticket.Priority == nil {
									teams.MsTeamsChannel.Incident.Ticket.Priority = nil
								} else {
									teams.MsTeamsChannel.Incident.Ticket.Priority = &tfTypes.NullableTicketingPriorityEntity{}
									teams.MsTeamsChannel.Incident.Ticket.Priority.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.MsTeamsChannel.Incident.Ticket.Priority.CreatedAt))
									teams.MsTeamsChannel.Incident.Ticket.Priority.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Priority.ID)
									teams.MsTeamsChannel.Incident.Ticket.Priority.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Priority.Name)
									teams.MsTeamsChannel.Incident.Ticket.Priority.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(teamsItem.MsTeamsChannel.Incident.Ticket.Priority.Position))
									teams.MsTeamsChannel.Incident.Ticket.Priority.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.MsTeamsChannel.Incident.Ticket.Priority.UpdatedAt))
								}
								teams.MsTeamsChannel.Incident.Ticket.State = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.State)
								teams.MsTeamsChannel.Incident.Ticket.Summary = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Summary)
								teams.MsTeamsChannel.Incident.Ticket.SyncErrorMessage = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.SyncErrorMessage)
								if teamsItem.MsTeamsChannel.Incident.Ticket.TagList != nil {
									teams.MsTeamsChannel.Incident.Ticket.TagList = make([]types.String, 0, len(teamsItem.MsTeamsChannel.Incident.Ticket.TagList))
									for _, v := range teamsItem.MsTeamsChannel.Incident.Ticket.TagList {
										teams.MsTeamsChannel.Incident.Ticket.TagList = append(teams.MsTeamsChannel.Incident.Ticket.TagList, types.StringValue(v))
									}
								}
								teams.MsTeamsChannel.Incident.Ticket.TaskID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.TaskID)
								teams.MsTeamsChannel.Incident.Ticket.Type = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Type)
								teams.MsTeamsChannel.Incident.Ticket.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.MsTeamsChannel.Incident.Ticket.UpdatedAt))
							}
						}
						teams.MsTeamsChannel.MsTeamID = types.StringPointerValue(teamsItem.MsTeamsChannel.MsTeamID)
						teams.MsTeamsChannel.Status = types.StringPointerValue(teamsItem.MsTeamsChannel.Status)
						teams.MsTeamsChannel.TeamName = types.StringPointerValue(teamsItem.MsTeamsChannel.TeamName)
					}
					teams.Name = types.StringPointerValue(teamsItem.Name)
					if teamsItem.OwnedChecklistTemplates != nil {
						teams.OwnedChecklistTemplates = []tfTypes.ChecklistTemplateEntity{}
						for ownedChecklistTemplatesCount, ownedChecklistTemplatesItem := range teamsItem.OwnedChecklistTemplates {
							var ownedChecklistTemplates tfTypes.ChecklistTemplateEntity
							if ownedChecklistTemplatesItem.Checks != nil {
								ownedChecklistTemplates.Checks = []tfTypes.ChecklistCheckEntity1{}
								for checksCount, checksItem := range ownedChecklistTemplatesItem.Checks {
									var checks tfTypes.ChecklistCheckEntity1
									checks.Description = types.StringPointerValue(checksItem.Description)
									checks.ID = types.StringPointerValue(checksItem.ID)
									checks.Name = types.StringPointerValue(checksItem.Name)
									checks.Status = types.BoolPointerValue(checksItem.Status)
									if checksCount+1 > len(ownedChecklistTemplates.Checks) {
										ownedChecklistTemplates.Checks = append(ownedChecklistTemplates.Checks, checks)
									} else {
										ownedChecklistTemplates.Checks[checksCount].Description = checks.Description
										ownedChecklistTemplates.Checks[checksCount].ID = checks.ID
										ownedChecklistTemplates.Checks[checksCount].Name = checks.Name
										ownedChecklistTemplates.Checks[checksCount].Status = checks.Status
									}
								}
							}
							if ownedChecklistTemplatesItem.ConnectedServices != nil {
								ownedChecklistTemplates.ConnectedServices = []tfTypes.ServiceEntityChecklist{}
								for connectedServicesCount, connectedServicesItem := range ownedChecklistTemplatesItem.ConnectedServices {
									var connectedServices tfTypes.ServiceEntityChecklist
									connectedServices.AlertOnAdd = types.BoolPointerValue(connectedServicesItem.AlertOnAdd)
									if connectedServicesItem.AllowedParams != nil {
										connectedServices.AllowedParams = make([]types.String, 0, len(connectedServicesItem.AllowedParams))
										for _, v := range connectedServicesItem.AllowedParams {
											connectedServices.AllowedParams = append(connectedServices.AllowedParams, types.StringValue(v))
										}
									}
									connectedServices.AutoAddRespondingTeam = types.BoolPointerValue(connectedServicesItem.AutoAddRespondingTeam)
									connectedServices.CompletedChecks = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(connectedServicesItem.CompletedChecks))
									connectedServices.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.CreatedAt))
									connectedServices.Description = types.StringPointerValue(connectedServicesItem.Description)
									connectedServices.ID = types.StringPointerValue(connectedServicesItem.ID)
									if connectedServicesItem.Labels == nil {
										connectedServices.Labels = nil
									} else {
										connectedServices.Labels = &tfTypes.ServiceEntityChecklistLabels{}
									}
									connectedServices.Name = types.StringPointerValue(connectedServicesItem.Name)
									if connectedServicesItem.Owner == nil {
										connectedServices.Owner = nil
									} else {
										connectedServices.Owner = &tfTypes.NullableTeamEntityLite{}
										connectedServices.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.Owner.CreatedAt))
										if connectedServicesItem.Owner.CreatedBy == nil {
											connectedServices.Owner.CreatedBy = nil
										} else {
											connectedServices.Owner.CreatedBy = &tfTypes.NullableAuthorEntity{}
											connectedServices.Owner.CreatedBy.Email = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Email)
											connectedServices.Owner.CreatedBy.ID = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.ID)
											connectedServices.Owner.CreatedBy.Name = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Name)
											connectedServices.Owner.CreatedBy.Source = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Source)
										}
										connectedServices.Owner.Description = types.StringPointerValue(connectedServicesItem.Owner.Description)
										connectedServices.Owner.ID = types.StringPointerValue(connectedServicesItem.Owner.ID)
										connectedServices.Owner.InSupportHours = types.BoolPointerValue(connectedServicesItem.Owner.InSupportHours)
										connectedServices.Owner.Name = types.StringPointerValue(connectedServicesItem.Owner.Name)
										connectedServices.Owner.SignalsIcalURL = types.StringPointerValue(connectedServicesItem.Owner.SignalsIcalURL)
										connectedServices.Owner.Slug = types.StringPointerValue(connectedServicesItem.Owner.Slug)
										connectedServices.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.Owner.UpdatedAt))
									}
									connectedServices.ServiceChecklistUpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.ServiceChecklistUpdatedAt))
									connectedServices.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(connectedServicesItem.ServiceTier))
									connectedServices.Slug = types.StringPointerValue(connectedServicesItem.Slug)
									connectedServices.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.UpdatedAt))
									if connectedServicesCount+1 > len(ownedChecklistTemplates.ConnectedServices) {
										ownedChecklistTemplates.ConnectedServices = append(ownedChecklistTemplates.ConnectedServices, connectedServices)
									} else {
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].AlertOnAdd = connectedServices.AlertOnAdd
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].AllowedParams = connectedServices.AllowedParams
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].AutoAddRespondingTeam = connectedServices.AutoAddRespondingTeam
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].CompletedChecks = connectedServices.CompletedChecks
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].CreatedAt = connectedServices.CreatedAt
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].Description = connectedServices.Description
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].ID = connectedServices.ID
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].Labels = connectedServices.Labels
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].Name = connectedServices.Name
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].Owner = connectedServices.Owner
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].ServiceChecklistUpdatedAt = connectedServices.ServiceChecklistUpdatedAt
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].ServiceTier = connectedServices.ServiceTier
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].Slug = connectedServices.Slug
										ownedChecklistTemplates.ConnectedServices[connectedServicesCount].UpdatedAt = connectedServices.UpdatedAt
									}
								}
							}
							ownedChecklistTemplates.CreatedAt = types.StringPointerValue(ownedChecklistTemplatesItem.CreatedAt)
							ownedChecklistTemplates.Description = types.StringPointerValue(ownedChecklistTemplatesItem.Description)
							ownedChecklistTemplates.ID = types.StringPointerValue(ownedChecklistTemplatesItem.ID)
							ownedChecklistTemplates.Name = types.StringPointerValue(ownedChecklistTemplatesItem.Name)
							if ownedChecklistTemplatesItem.Owner == nil {
								ownedChecklistTemplates.Owner = nil
							} else {
								ownedChecklistTemplates.Owner = &tfTypes.NullableTeamEntityLite{}
								ownedChecklistTemplates.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedChecklistTemplatesItem.Owner.CreatedAt))
								if ownedChecklistTemplatesItem.Owner.CreatedBy == nil {
									ownedChecklistTemplates.Owner.CreatedBy = nil
								} else {
									ownedChecklistTemplates.Owner.CreatedBy = &tfTypes.NullableAuthorEntity{}
									ownedChecklistTemplates.Owner.CreatedBy.Email = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.CreatedBy.Email)
									ownedChecklistTemplates.Owner.CreatedBy.ID = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.CreatedBy.ID)
									ownedChecklistTemplates.Owner.CreatedBy.Name = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.CreatedBy.Name)
									ownedChecklistTemplates.Owner.CreatedBy.Source = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.CreatedBy.Source)
								}
								ownedChecklistTemplates.Owner.Description = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.Description)
								ownedChecklistTemplates.Owner.ID = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.ID)
								ownedChecklistTemplates.Owner.InSupportHours = types.BoolPointerValue(ownedChecklistTemplatesItem.Owner.InSupportHours)
								ownedChecklistTemplates.Owner.Name = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.Name)
								ownedChecklistTemplates.Owner.SignalsIcalURL = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.SignalsIcalURL)
								ownedChecklistTemplates.Owner.Slug = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.Slug)
								ownedChecklistTemplates.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedChecklistTemplatesItem.Owner.UpdatedAt))
							}
							ownedChecklistTemplates.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedChecklistTemplatesItem.UpdatedAt))
							if ownedChecklistTemplatesCount+1 > len(teams.OwnedChecklistTemplates) {
								teams.OwnedChecklistTemplates = append(teams.OwnedChecklistTemplates, ownedChecklistTemplates)
							} else {
								teams.OwnedChecklistTemplates[ownedChecklistTemplatesCount].Checks = ownedChecklistTemplates.Checks
								teams.OwnedChecklistTemplates[ownedChecklistTemplatesCount].ConnectedServices = ownedChecklistTemplates.ConnectedServices
								teams.OwnedChecklistTemplates[ownedChecklistTemplatesCount].CreatedAt = ownedChecklistTemplates.CreatedAt
								teams.OwnedChecklistTemplates[ownedChecklistTemplatesCount].Description = ownedChecklistTemplates.Description
								teams.OwnedChecklistTemplates[ownedChecklistTemplatesCount].ID = ownedChecklistTemplates.ID
								teams.OwnedChecklistTemplates[ownedChecklistTemplatesCount].Name = ownedChecklistTemplates.Name
								teams.OwnedChecklistTemplates[ownedChecklistTemplatesCount].Owner = ownedChecklistTemplates.Owner
								teams.OwnedChecklistTemplates[ownedChecklistTemplatesCount].UpdatedAt = ownedChecklistTemplates.UpdatedAt
							}
						}
					}
					if teamsItem.OwnedFunctionalities != nil {
						teams.OwnedFunctionalities = []tfTypes.FunctionalityEntityLite{}
						for ownedFunctionalitiesCount, ownedFunctionalitiesItem := range teamsItem.OwnedFunctionalities {
							var ownedFunctionalities tfTypes.FunctionalityEntityLite
							if ownedFunctionalitiesItem.ActiveIncidents != nil {
								ownedFunctionalities.ActiveIncidents = make([]types.String, 0, len(ownedFunctionalitiesItem.ActiveIncidents))
								for _, v := range ownedFunctionalitiesItem.ActiveIncidents {
									ownedFunctionalities.ActiveIncidents = append(ownedFunctionalities.ActiveIncidents, types.StringValue(v))
								}
							}
							ownedFunctionalities.AlertOnAdd = types.BoolPointerValue(ownedFunctionalitiesItem.AlertOnAdd)
							ownedFunctionalities.AutoAddRespondingTeam = types.BoolPointerValue(ownedFunctionalitiesItem.AutoAddRespondingTeam)
							ownedFunctionalities.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedFunctionalitiesItem.CreatedAt))
							ownedFunctionalities.Description = types.StringPointerValue(ownedFunctionalitiesItem.Description)
							ownedFunctionalities.ID = types.StringPointerValue(ownedFunctionalitiesItem.ID)
							if ownedFunctionalitiesItem.Labels == nil {
								ownedFunctionalities.Labels = nil
							} else {
								ownedFunctionalities.Labels = &tfTypes.FunctionalityEntityLiteLabels{}
							}
							if ownedFunctionalitiesItem.Links != nil {
								ownedFunctionalities.Links = []tfTypes.LinksEntity{}
								for linksCount1, linksItem1 := range ownedFunctionalitiesItem.Links {
									var links1 tfTypes.LinksEntity
									links1.HrefURL = types.StringPointerValue(linksItem1.HrefURL)
									links1.IconURL = types.StringPointerValue(linksItem1.IconURL)
									links1.ID = types.StringPointerValue(linksItem1.ID)
									links1.Name = types.StringPointerValue(linksItem1.Name)
									if linksCount1+1 > len(ownedFunctionalities.Links) {
										ownedFunctionalities.Links = append(ownedFunctionalities.Links, links1)
									} else {
										ownedFunctionalities.Links[linksCount1].HrefURL = links1.HrefURL
										ownedFunctionalities.Links[linksCount1].IconURL = links1.IconURL
										ownedFunctionalities.Links[linksCount1].ID = links1.ID
										ownedFunctionalities.Links[linksCount1].Name = links1.Name
									}
								}
							}
							ownedFunctionalities.Name = types.StringPointerValue(ownedFunctionalitiesItem.Name)
							if ownedFunctionalitiesItem.Owner == nil {
								ownedFunctionalities.Owner = nil
							} else {
								ownedFunctionalities.Owner = &tfTypes.NullableTeamEntityLite{}
								ownedFunctionalities.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedFunctionalitiesItem.Owner.CreatedAt))
								if ownedFunctionalitiesItem.Owner.CreatedBy == nil {
									ownedFunctionalities.Owner.CreatedBy = nil
								} else {
									ownedFunctionalities.Owner.CreatedBy = &tfTypes.NullableAuthorEntity{}
									ownedFunctionalities.Owner.CreatedBy.Email = types.StringPointerValue(ownedFunctionalitiesItem.Owner.CreatedBy.Email)
									ownedFunctionalities.Owner.CreatedBy.ID = types.StringPointerValue(ownedFunctionalitiesItem.Owner.CreatedBy.ID)
									ownedFunctionalities.Owner.CreatedBy.Name = types.StringPointerValue(ownedFunctionalitiesItem.Owner.CreatedBy.Name)
									ownedFunctionalities.Owner.CreatedBy.Source = types.StringPointerValue(ownedFunctionalitiesItem.Owner.CreatedBy.Source)
								}
								ownedFunctionalities.Owner.Description = types.StringPointerValue(ownedFunctionalitiesItem.Owner.Description)
								ownedFunctionalities.Owner.ID = types.StringPointerValue(ownedFunctionalitiesItem.Owner.ID)
								ownedFunctionalities.Owner.InSupportHours = types.BoolPointerValue(ownedFunctionalitiesItem.Owner.InSupportHours)
								ownedFunctionalities.Owner.Name = types.StringPointerValue(ownedFunctionalitiesItem.Owner.Name)
								ownedFunctionalities.Owner.SignalsIcalURL = types.StringPointerValue(ownedFunctionalitiesItem.Owner.SignalsIcalURL)
								ownedFunctionalities.Owner.Slug = types.StringPointerValue(ownedFunctionalitiesItem.Owner.Slug)
								ownedFunctionalities.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedFunctionalitiesItem.Owner.UpdatedAt))
							}
							ownedFunctionalities.Slug = types.StringPointerValue(ownedFunctionalitiesItem.Slug)
							ownedFunctionalities.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedFunctionalitiesItem.UpdatedAt))
							if ownedFunctionalitiesItem.UpdatedBy == nil {
								ownedFunctionalities.UpdatedBy = nil
							} else {
								ownedFunctionalities.UpdatedBy = &tfTypes.NullableAuthorEntity{}
								ownedFunctionalities.UpdatedBy.Email = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Email)
								ownedFunctionalities.UpdatedBy.ID = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.ID)
								ownedFunctionalities.UpdatedBy.Name = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Name)
								ownedFunctionalities.UpdatedBy.Source = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Source)
							}
							if ownedFunctionalitiesCount+1 > len(teams.OwnedFunctionalities) {
								teams.OwnedFunctionalities = append(teams.OwnedFunctionalities, ownedFunctionalities)
							} else {
								teams.OwnedFunctionalities[ownedFunctionalitiesCount].ActiveIncidents = ownedFunctionalities.ActiveIncidents
								teams.OwnedFunctionalities[ownedFunctionalitiesCount].AlertOnAdd = ownedFunctionalities.AlertOnAdd
								teams.OwnedFunctionalities[ownedFunctionalitiesCount].AutoAddRespondingTeam = ownedFunctionalities.AutoAddRespondingTeam
								teams.OwnedFunctionalities[ownedFunctionalitiesCount].CreatedAt = ownedFunctionalities.CreatedAt
								teams.OwnedFunctionalities[ownedFunctionalitiesCount].Description = ownedFunctionalities.Description
								teams.OwnedFunctionalities[ownedFunctionalitiesCount].ID = ownedFunctionalities.ID
								teams.OwnedFunctionalities[ownedFunctionalitiesCount].Labels = ownedFunctionalities.Labels
								teams.OwnedFunctionalities[ownedFunctionalitiesCount].Links = ownedFunctionalities.Links
								teams.OwnedFunctionalities[ownedFunctionalitiesCount].Name = ownedFunctionalities.Name
								teams.OwnedFunctionalities[ownedFunctionalitiesCount].Owner = ownedFunctionalities.Owner
								teams.OwnedFunctionalities[ownedFunctionalitiesCount].Slug = ownedFunctionalities.Slug
								teams.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedAt = ownedFunctionalities.UpdatedAt
								teams.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedBy = ownedFunctionalities.UpdatedBy
							}
						}
					}
					if teamsItem.OwnedRunbooks != nil {
						teams.OwnedRunbooks = []tfTypes.SlimRunbookEntity{}
						for ownedRunbooksCount, ownedRunbooksItem := range teamsItem.OwnedRunbooks {
							var ownedRunbooks tfTypes.SlimRunbookEntity
							if ownedRunbooksItem.AttachmentRule == nil {
								ownedRunbooks.AttachmentRule = nil
							} else {
								ownedRunbooks.AttachmentRule = &tfTypes.NullableRulesRuleEntity{}
								if ownedRunbooksItem.AttachmentRule.Logic != nil {
									ownedRunbooks.AttachmentRule.Logic = make(map[string]types.String, len(ownedRunbooksItem.AttachmentRule.Logic))
									for key1, value1 := range ownedRunbooksItem.AttachmentRule.Logic {
										result1, _ := json.Marshal(value1)
										ownedRunbooks.AttachmentRule.Logic[key1] = types.StringValue(string(result1))
									}
								}
								if ownedRunbooksItem.AttachmentRule.UserData == nil {
									ownedRunbooks.AttachmentRule.UserData = nil
								} else {
									ownedRunbooks.AttachmentRule.UserData = &tfTypes.NullableFHTypesGenericEntity{}
									ownedRunbooks.AttachmentRule.UserData.Label = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Label)
									ownedRunbooks.AttachmentRule.UserData.Type = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Type)
									ownedRunbooks.AttachmentRule.UserData.Value = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Value)
								}
							}
							if ownedRunbooksItem.Categories != nil {
								ownedRunbooks.Categories = make([]types.String, 0, len(ownedRunbooksItem.Categories))
								for _, v := range ownedRunbooksItem.Categories {
									ownedRunbooks.Categories = append(ownedRunbooks.Categories, types.StringValue(v))
								}
							}
							ownedRunbooks.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedRunbooksItem.CreatedAt))
							ownedRunbooks.Description = types.StringPointerValue(ownedRunbooksItem.Description)
							ownedRunbooks.ID = types.StringPointerValue(ownedRunbooksItem.ID)
							ownedRunbooks.Name = types.StringPointerValue(ownedRunbooksItem.Name)
							if ownedRunbooksItem.Owner == nil {
								ownedRunbooks.Owner = nil
							} else {
								ownedRunbooks.Owner = &tfTypes.NullableTeamEntityLite{}
								ownedRunbooks.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedRunbooksItem.Owner.CreatedAt))
								if ownedRunbooksItem.Owner.CreatedBy == nil {
									ownedRunbooks.Owner.CreatedBy = nil
								} else {
									ownedRunbooks.Owner.CreatedBy = &tfTypes.NullableAuthorEntity{}
									ownedRunbooks.Owner.CreatedBy.Email = types.StringPointerValue(ownedRunbooksItem.Owner.CreatedBy.Email)
									ownedRunbooks.Owner.CreatedBy.ID = types.StringPointerValue(ownedRunbooksItem.Owner.CreatedBy.ID)
									ownedRunbooks.Owner.CreatedBy.Name = types.StringPointerValue(ownedRunbooksItem.Owner.CreatedBy.Name)
									ownedRunbooks.Owner.CreatedBy.Source = types.StringPointerValue(ownedRunbooksItem.Owner.CreatedBy.Source)
								}
								ownedRunbooks.Owner.Description = types.StringPointerValue(ownedRunbooksItem.Owner.Description)
								ownedRunbooks.Owner.ID = types.StringPointerValue(ownedRunbooksItem.Owner.ID)
								ownedRunbooks.Owner.InSupportHours = types.BoolPointerValue(ownedRunbooksItem.Owner.InSupportHours)
								ownedRunbooks.Owner.Name = types.StringPointerValue(ownedRunbooksItem.Owner.Name)
								ownedRunbooks.Owner.SignalsIcalURL = types.StringPointerValue(ownedRunbooksItem.Owner.SignalsIcalURL)
								ownedRunbooks.Owner.Slug = types.StringPointerValue(ownedRunbooksItem.Owner.Slug)
								ownedRunbooks.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedRunbooksItem.Owner.UpdatedAt))
							}
							ownedRunbooks.Summary = types.StringPointerValue(ownedRunbooksItem.Summary)
							ownedRunbooks.Type = types.StringPointerValue(ownedRunbooksItem.Type)
							ownedRunbooks.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedRunbooksItem.UpdatedAt))
							if ownedRunbooksCount+1 > len(teams.OwnedRunbooks) {
								teams.OwnedRunbooks = append(teams.OwnedRunbooks, ownedRunbooks)
							} else {
								teams.OwnedRunbooks[ownedRunbooksCount].AttachmentRule = ownedRunbooks.AttachmentRule
								teams.OwnedRunbooks[ownedRunbooksCount].Categories = ownedRunbooks.Categories
								teams.OwnedRunbooks[ownedRunbooksCount].CreatedAt = ownedRunbooks.CreatedAt
								teams.OwnedRunbooks[ownedRunbooksCount].Description = ownedRunbooks.Description
								teams.OwnedRunbooks[ownedRunbooksCount].ID = ownedRunbooks.ID
								teams.OwnedRunbooks[ownedRunbooksCount].Name = ownedRunbooks.Name
								teams.OwnedRunbooks[ownedRunbooksCount].Owner = ownedRunbooks.Owner
								teams.OwnedRunbooks[ownedRunbooksCount].Summary = ownedRunbooks.Summary
								teams.OwnedRunbooks[ownedRunbooksCount].Type = ownedRunbooks.Type
								teams.OwnedRunbooks[ownedRunbooksCount].UpdatedAt = ownedRunbooks.UpdatedAt
							}
						}
					}
					if teamsItem.OwnedServices != nil {
						teams.OwnedServices = []tfTypes.ServiceEntityLite{}
						for ownedServicesCount, ownedServicesItem := range teamsItem.OwnedServices {
							var ownedServices tfTypes.ServiceEntityLite
							ownedServices.AlertOnAdd = types.BoolPointerValue(ownedServicesItem.AlertOnAdd)
							if ownedServicesItem.AllowedParams != nil {
								ownedServices.AllowedParams = make([]types.String, 0, len(ownedServicesItem.AllowedParams))
								for _, v := range ownedServicesItem.AllowedParams {
									ownedServices.AllowedParams = append(ownedServices.AllowedParams, types.StringValue(v))
								}
							}
							ownedServices.AutoAddRespondingTeam = types.BoolPointerValue(ownedServicesItem.AutoAddRespondingTeam)
							ownedServices.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedServicesItem.CreatedAt))
							ownedServices.Description = types.StringPointerValue(ownedServicesItem.Description)
							ownedServices.ID = types.StringPointerValue(ownedServicesItem.ID)
							if ownedServicesItem.Labels == nil {
								ownedServices.Labels = nil
							} else {
								ownedServices.Labels = &tfTypes.ServiceEntityLiteLabels{}
							}
							ownedServices.Name = types.StringPointerValue(ownedServicesItem.Name)
							ownedServices.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(ownedServicesItem.ServiceTier))
							ownedServices.Slug = types.StringPointerValue(ownedServicesItem.Slug)
							ownedServices.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedServicesItem.UpdatedAt))
							if ownedServicesCount+1 > len(teams.OwnedServices) {
								teams.OwnedServices = append(teams.OwnedServices, ownedServices)
							} else {
								teams.OwnedServices[ownedServicesCount].AlertOnAdd = ownedServices.AlertOnAdd
								teams.OwnedServices[ownedServicesCount].AllowedParams = ownedServices.AllowedParams
								teams.OwnedServices[ownedServicesCount].AutoAddRespondingTeam = ownedServices.AutoAddRespondingTeam
								teams.OwnedServices[ownedServicesCount].CreatedAt = ownedServices.CreatedAt
								teams.OwnedServices[ownedServicesCount].Description = ownedServices.Description
								teams.OwnedServices[ownedServicesCount].ID = ownedServices.ID
								teams.OwnedServices[ownedServicesCount].Labels = ownedServices.Labels
								teams.OwnedServices[ownedServicesCount].Name = ownedServices.Name
								teams.OwnedServices[ownedServicesCount].ServiceTier = ownedServices.ServiceTier
								teams.OwnedServices[ownedServicesCount].Slug = ownedServices.Slug
								teams.OwnedServices[ownedServicesCount].UpdatedAt = ownedServices.UpdatedAt
							}
						}
					}
					if teamsItem.RespondingServices != nil {
						teams.RespondingServices = []tfTypes.ServiceEntityLite{}
						for respondingServicesCount, respondingServicesItem := range teamsItem.RespondingServices {
							var respondingServices tfTypes.ServiceEntityLite
							respondingServices.AlertOnAdd = types.BoolPointerValue(respondingServicesItem.AlertOnAdd)
							if respondingServicesItem.AllowedParams != nil {
								respondingServices.AllowedParams = make([]types.String, 0, len(respondingServicesItem.AllowedParams))
								for _, v := range respondingServicesItem.AllowedParams {
									respondingServices.AllowedParams = append(respondingServices.AllowedParams, types.StringValue(v))
								}
							}
							respondingServices.AutoAddRespondingTeam = types.BoolPointerValue(respondingServicesItem.AutoAddRespondingTeam)
							respondingServices.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(respondingServicesItem.CreatedAt))
							respondingServices.Description = types.StringPointerValue(respondingServicesItem.Description)
							respondingServices.ID = types.StringPointerValue(respondingServicesItem.ID)
							if respondingServicesItem.Labels == nil {
								respondingServices.Labels = nil
							} else {
								respondingServices.Labels = &tfTypes.ServiceEntityLiteLabels{}
							}
							respondingServices.Name = types.StringPointerValue(respondingServicesItem.Name)
							respondingServices.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(respondingServicesItem.ServiceTier))
							respondingServices.Slug = types.StringPointerValue(respondingServicesItem.Slug)
							respondingServices.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(respondingServicesItem.UpdatedAt))
							if respondingServicesCount+1 > len(teams.RespondingServices) {
								teams.RespondingServices = append(teams.RespondingServices, respondingServices)
							} else {
								teams.RespondingServices[respondingServicesCount].AlertOnAdd = respondingServices.AlertOnAdd
								teams.RespondingServices[respondingServicesCount].AllowedParams = respondingServices.AllowedParams
								teams.RespondingServices[respondingServicesCount].AutoAddRespondingTeam = respondingServices.AutoAddRespondingTeam
								teams.RespondingServices[respondingServicesCount].CreatedAt = respondingServices.CreatedAt
								teams.RespondingServices[respondingServicesCount].Description = respondingServices.Description
								teams.RespondingServices[respondingServicesCount].ID = respondingServices.ID
								teams.RespondingServices[respondingServicesCount].Labels = respondingServices.Labels
								teams.RespondingServices[respondingServicesCount].Name = respondingServices.Name
								teams.RespondingServices[respondingServicesCount].ServiceTier = respondingServices.ServiceTier
								teams.RespondingServices[respondingServicesCount].Slug = respondingServices.Slug
								teams.RespondingServices[respondingServicesCount].UpdatedAt = respondingServices.UpdatedAt
							}
						}
					}
					if teamsItem.Services != nil {
						teams.Services = []tfTypes.ServiceEntityLite{}
						for servicesCount2, servicesItem2 := range teamsItem.Services {
							var services2 tfTypes.ServiceEntityLite
							services2.AlertOnAdd = types.BoolPointerValue(servicesItem2.AlertOnAdd)
							if servicesItem2.AllowedParams != nil {
								services2.AllowedParams = make([]types.String, 0, len(servicesItem2.AllowedParams))
								for _, v := range servicesItem2.AllowedParams {
									services2.AllowedParams = append(services2.AllowedParams, types.StringValue(v))
								}
							}
							services2.AutoAddRespondingTeam = types.BoolPointerValue(servicesItem2.AutoAddRespondingTeam)
							services2.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem2.CreatedAt))
							services2.Description = types.StringPointerValue(servicesItem2.Description)
							services2.ID = types.StringPointerValue(servicesItem2.ID)
							if servicesItem2.Labels == nil {
								services2.Labels = nil
							} else {
								services2.Labels = &tfTypes.ServiceEntityLiteLabels{}
							}
							services2.Name = types.StringPointerValue(servicesItem2.Name)
							services2.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(servicesItem2.ServiceTier))
							services2.Slug = types.StringPointerValue(servicesItem2.Slug)
							services2.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem2.UpdatedAt))
							if servicesCount2+1 > len(teams.Services) {
								teams.Services = append(teams.Services, services2)
							} else {
								teams.Services[servicesCount2].AlertOnAdd = services2.AlertOnAdd
								teams.Services[servicesCount2].AllowedParams = services2.AllowedParams
								teams.Services[servicesCount2].AutoAddRespondingTeam = services2.AutoAddRespondingTeam
								teams.Services[servicesCount2].CreatedAt = services2.CreatedAt
								teams.Services[servicesCount2].Description = services2.Description
								teams.Services[servicesCount2].ID = services2.ID
								teams.Services[servicesCount2].Labels = services2.Labels
								teams.Services[servicesCount2].Name = services2.Name
								teams.Services[servicesCount2].ServiceTier = services2.ServiceTier
								teams.Services[servicesCount2].Slug = services2.Slug
								teams.Services[servicesCount2].UpdatedAt = services2.UpdatedAt
							}
						}
					}
					teams.SignalsIcalURL = types.StringPointerValue(teamsItem.SignalsIcalURL)
					if teamsItem.SlackChannel == nil {
						teams.SlackChannel = nil
					} else {
						teams.SlackChannel = &tfTypes.NullableIntegrationsSlackSlackChannelEntity{}
						teams.SlackChannel.ID = types.StringPointerValue(teamsItem.SlackChannel.ID)
						teams.SlackChannel.Name = types.StringPointerValue(teamsItem.SlackChannel.Name)
						teams.SlackChannel.SlackChannelID = types.StringPointerValue(teamsItem.SlackChannel.SlackChannelID)
					}
					teams.Slug = types.StringPointerValue(teamsItem.Slug)
					teams.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamsItem.UpdatedAt))
					if teamsCount+1 > len(r.TemplateValues.Teams) {
						r.TemplateValues.Teams = append(r.TemplateValues.Teams, teams)
					} else {
						r.TemplateValues.Teams[teamsCount].CreatedAt = teams.CreatedAt
						r.TemplateValues.Teams[teamsCount].CreatedBy = teams.CreatedBy
						r.TemplateValues.Teams[teamsCount].DefaultSignalsEscalationPolicy = teams.DefaultSignalsEscalationPolicy
						r.TemplateValues.Teams[teamsCount].Description = teams.Description
						r.TemplateValues.Teams[teamsCount].Functionalities = teams.Functionalities
						r.TemplateValues.Teams[teamsCount].ID = teams.ID
						r.TemplateValues.Teams[teamsCount].InSupportHours = teams.InSupportHours
						r.TemplateValues.Teams[teamsCount].Memberships = teams.Memberships
						r.TemplateValues.Teams[teamsCount].MsTeamsChannel = teams.MsTeamsChannel
						r.TemplateValues.Teams[teamsCount].Name = teams.Name
						r.TemplateValues.Teams[teamsCount].OwnedChecklistTemplates = teams.OwnedChecklistTemplates
						r.TemplateValues.Teams[teamsCount].OwnedFunctionalities = teams.OwnedFunctionalities
						r.TemplateValues.Teams[teamsCount].OwnedRunbooks = teams.OwnedRunbooks
						r.TemplateValues.Teams[teamsCount].OwnedServices = teams.OwnedServices
						r.TemplateValues.Teams[teamsCount].RespondingServices = teams.RespondingServices
						r.TemplateValues.Teams[teamsCount].Services = teams.Services
						r.TemplateValues.Teams[teamsCount].SignalsIcalURL = teams.SignalsIcalURL
						r.TemplateValues.Teams[teamsCount].SlackChannel = teams.SlackChannel
						r.TemplateValues.Teams[teamsCount].Slug = teams.Slug
						r.TemplateValues.Teams[teamsCount].UpdatedAt = teams.UpdatedAt
					}
				}
			}
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}
