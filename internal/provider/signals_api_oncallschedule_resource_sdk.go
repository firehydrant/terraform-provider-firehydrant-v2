// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SignalsAPIOnCallScheduleResourceModel) RefreshFromSharedSignalsAPIOnCallSchedule(ctx context.Context, resp *shared.SignalsAPIOnCallSchedule) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Color = types.StringPointerValue(resp.Color)
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.CreatedBy == nil {
			r.CreatedBy = nil
		} else {
			r.CreatedBy = &tfTypes.NullableAuthor{}
			r.CreatedBy.Email = types.StringPointerValue(resp.CreatedBy.Email)
			r.CreatedBy.ID = types.StringPointerValue(resp.CreatedBy.ID)
			r.CreatedBy.Name = types.StringPointerValue(resp.CreatedBy.Name)
			r.CreatedBy.Source = types.StringPointerValue(resp.CreatedBy.Source)
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Members != nil {
			r.Members = []tfTypes.Succinct{}
			if len(r.Members) > len(resp.Members) {
				r.Members = r.Members[:len(resp.Members)]
			}
			for membersCount, membersItem := range resp.Members {
				var members tfTypes.Succinct
				members.ID = types.StringPointerValue(membersItem.ID)
				members.Name = types.StringPointerValue(membersItem.Name)
				if membersCount+1 > len(r.Members) {
					r.Members = append(r.Members, members)
				} else {
					r.Members[membersCount].ID = members.ID
					r.Members[membersCount].Name = members.Name
				}
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Restrictions != nil {
			r.Restrictions = []tfTypes.SignalsAPIOnCallRestriction{}
			if len(r.Restrictions) > len(resp.Restrictions) {
				r.Restrictions = r.Restrictions[:len(resp.Restrictions)]
			}
			for restrictionsCount, restrictionsItem := range resp.Restrictions {
				var restrictions tfTypes.SignalsAPIOnCallRestriction
				restrictions.EndDay = types.StringPointerValue(restrictionsItem.EndDay)
				restrictions.EndTime = types.StringPointerValue(restrictionsItem.EndTime)
				restrictions.StartDay = types.StringPointerValue(restrictionsItem.StartDay)
				restrictions.StartTime = types.StringPointerValue(restrictionsItem.StartTime)
				if restrictionsCount+1 > len(r.Restrictions) {
					r.Restrictions = append(r.Restrictions, restrictions)
				} else {
					r.Restrictions[restrictionsCount].EndDay = restrictions.EndDay
					r.Restrictions[restrictionsCount].EndTime = restrictions.EndTime
					r.Restrictions[restrictionsCount].StartDay = restrictions.StartDay
					r.Restrictions[restrictionsCount].StartTime = restrictions.StartTime
				}
			}
		}
		if resp.Rotations != nil {
			r.Rotations = []tfTypes.SignalsAPIOnCallRotation{}
			if len(r.Rotations) > len(resp.Rotations) {
				r.Rotations = r.Rotations[:len(resp.Rotations)]
			}
			for rotationsCount, rotationsItem := range resp.Rotations {
				var rotations tfTypes.SignalsAPIOnCallRotation
				rotations.Color = types.StringPointerValue(rotationsItem.Color)
				rotations.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(rotationsItem.CreatedAt))
				if rotationsItem.CreatedBy == nil {
					rotations.CreatedBy = nil
				} else {
					rotations.CreatedBy = &tfTypes.NullableAuthor{}
					rotations.CreatedBy.Email = types.StringPointerValue(rotationsItem.CreatedBy.Email)
					rotations.CreatedBy.ID = types.StringPointerValue(rotationsItem.CreatedBy.ID)
					rotations.CreatedBy.Name = types.StringPointerValue(rotationsItem.CreatedBy.Name)
					rotations.CreatedBy.Source = types.StringPointerValue(rotationsItem.CreatedBy.Source)
				}
				rotations.Description = types.StringPointerValue(rotationsItem.Description)
				rotations.ID = types.StringPointerValue(rotationsItem.ID)
				if rotationsItem.Members != nil {
					rotations.Members = []tfTypes.Succinct{}
					for membersCount1, membersItem1 := range rotationsItem.Members {
						var members1 tfTypes.Succinct
						members1.ID = types.StringPointerValue(membersItem1.ID)
						members1.Name = types.StringPointerValue(membersItem1.Name)
						if membersCount1+1 > len(rotations.Members) {
							rotations.Members = append(rotations.Members, members1)
						} else {
							rotations.Members[membersCount1].ID = members1.ID
							rotations.Members[membersCount1].Name = members1.Name
						}
					}
				}
				rotations.Name = types.StringPointerValue(rotationsItem.Name)
				if rotationsItem.Restrictions != nil {
					rotations.Restrictions = []tfTypes.SignalsAPIOnCallRestriction{}
					for restrictionsCount1, restrictionsItem1 := range rotationsItem.Restrictions {
						var restrictions1 tfTypes.SignalsAPIOnCallRestriction
						restrictions1.EndDay = types.StringPointerValue(restrictionsItem1.EndDay)
						restrictions1.EndTime = types.StringPointerValue(restrictionsItem1.EndTime)
						restrictions1.StartDay = types.StringPointerValue(restrictionsItem1.StartDay)
						restrictions1.StartTime = types.StringPointerValue(restrictionsItem1.StartTime)
						if restrictionsCount1+1 > len(rotations.Restrictions) {
							rotations.Restrictions = append(rotations.Restrictions, restrictions1)
						} else {
							rotations.Restrictions[restrictionsCount1].EndDay = restrictions1.EndDay
							rotations.Restrictions[restrictionsCount1].EndTime = restrictions1.EndTime
							rotations.Restrictions[restrictionsCount1].StartDay = restrictions1.StartDay
							rotations.Restrictions[restrictionsCount1].StartTime = restrictions1.StartTime
						}
					}
				}
				if rotationsItem.Shifts != nil {
					rotations.Shifts = []tfTypes.SignalsAPIOnCallShift{}
					for shiftsCount, shiftsItem := range rotationsItem.Shifts {
						var shifts tfTypes.SignalsAPIOnCallShift
						shifts.Color = types.StringPointerValue(shiftsItem.Color)
						shifts.CoverageRequest = types.StringPointerValue(shiftsItem.CoverageRequest)
						shifts.EndTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(shiftsItem.EndTime))
						shifts.ID = types.StringPointerValue(shiftsItem.ID)
						if shiftsItem.OnCallRotation == nil {
							shifts.OnCallRotation = nil
						} else {
							shifts.OnCallRotation = &tfTypes.NullableSuccinct{}
							shifts.OnCallRotation.ID = types.StringPointerValue(shiftsItem.OnCallRotation.ID)
							shifts.OnCallRotation.Name = types.StringPointerValue(shiftsItem.OnCallRotation.Name)
						}
						if shiftsItem.OnCallSchedule == nil {
							shifts.OnCallSchedule = nil
						} else {
							shifts.OnCallSchedule = &tfTypes.NullableSuccinct{}
							shifts.OnCallSchedule.ID = types.StringPointerValue(shiftsItem.OnCallSchedule.ID)
							shifts.OnCallSchedule.Name = types.StringPointerValue(shiftsItem.OnCallSchedule.Name)
						}
						shifts.StartTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(shiftsItem.StartTime))
						if shiftsItem.Team == nil {
							shifts.Team = nil
						} else {
							shifts.Team = &tfTypes.NullableSuccinct{}
							shifts.Team.ID = types.StringPointerValue(shiftsItem.Team.ID)
							shifts.Team.Name = types.StringPointerValue(shiftsItem.Team.Name)
						}
						shifts.TimeZone = types.StringPointerValue(shiftsItem.TimeZone)
						if shiftsItem.User == nil {
							shifts.User = nil
						} else {
							shifts.User = &tfTypes.NullableSuccinct{}
							shifts.User.ID = types.StringPointerValue(shiftsItem.User.ID)
							shifts.User.Name = types.StringPointerValue(shiftsItem.User.Name)
						}
						if shiftsCount+1 > len(rotations.Shifts) {
							rotations.Shifts = append(rotations.Shifts, shifts)
						} else {
							rotations.Shifts[shiftsCount].Color = shifts.Color
							rotations.Shifts[shiftsCount].CoverageRequest = shifts.CoverageRequest
							rotations.Shifts[shiftsCount].EndTime = shifts.EndTime
							rotations.Shifts[shiftsCount].ID = shifts.ID
							rotations.Shifts[shiftsCount].OnCallRotation = shifts.OnCallRotation
							rotations.Shifts[shiftsCount].OnCallSchedule = shifts.OnCallSchedule
							rotations.Shifts[shiftsCount].StartTime = shifts.StartTime
							rotations.Shifts[shiftsCount].Team = shifts.Team
							rotations.Shifts[shiftsCount].TimeZone = shifts.TimeZone
							rotations.Shifts[shiftsCount].User = shifts.User
						}
					}
				}
				rotations.SlackUserGroupID = types.StringPointerValue(rotationsItem.SlackUserGroupID)
				if rotationsItem.Strategy == nil {
					rotations.Strategy = nil
				} else {
					rotations.Strategy = &tfTypes.NullableSignalsAPIOnCallStrategy{}
					rotations.Strategy.HandoffDay = types.StringPointerValue(rotationsItem.Strategy.HandoffDay)
					rotations.Strategy.HandoffTime = types.StringPointerValue(rotationsItem.Strategy.HandoffTime)
					rotations.Strategy.ShiftDuration = types.StringPointerValue(rotationsItem.Strategy.ShiftDuration)
					rotations.Strategy.Type = types.StringPointerValue(rotationsItem.Strategy.Type)
				}
				if rotationsItem.Team == nil {
					rotations.Team = nil
				} else {
					rotations.Team = &tfTypes.NullableSuccinct{}
					rotations.Team.ID = types.StringPointerValue(rotationsItem.Team.ID)
					rotations.Team.Name = types.StringPointerValue(rotationsItem.Team.Name)
				}
				rotations.TimeZone = types.StringPointerValue(rotationsItem.TimeZone)
				rotations.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(rotationsItem.UpdatedAt))
				if rotationsCount+1 > len(r.Rotations) {
					r.Rotations = append(r.Rotations, rotations)
				} else {
					r.Rotations[rotationsCount].Color = rotations.Color
					r.Rotations[rotationsCount].CreatedAt = rotations.CreatedAt
					r.Rotations[rotationsCount].CreatedBy = rotations.CreatedBy
					r.Rotations[rotationsCount].Description = rotations.Description
					r.Rotations[rotationsCount].ID = rotations.ID
					r.Rotations[rotationsCount].Members = rotations.Members
					r.Rotations[rotationsCount].Name = rotations.Name
					r.Rotations[rotationsCount].Restrictions = rotations.Restrictions
					r.Rotations[rotationsCount].Shifts = rotations.Shifts
					r.Rotations[rotationsCount].SlackUserGroupID = rotations.SlackUserGroupID
					r.Rotations[rotationsCount].Strategy = rotations.Strategy
					r.Rotations[rotationsCount].Team = rotations.Team
					r.Rotations[rotationsCount].TimeZone = rotations.TimeZone
					r.Rotations[rotationsCount].UpdatedAt = rotations.UpdatedAt
				}
			}
		}
		if resp.Shifts != nil {
			r.Shifts = []tfTypes.SignalsAPIOnCallShift{}
			if len(r.Shifts) > len(resp.Shifts) {
				r.Shifts = r.Shifts[:len(resp.Shifts)]
			}
			for shiftsCount1, shiftsItem1 := range resp.Shifts {
				var shifts1 tfTypes.SignalsAPIOnCallShift
				shifts1.Color = types.StringPointerValue(shiftsItem1.Color)
				shifts1.CoverageRequest = types.StringPointerValue(shiftsItem1.CoverageRequest)
				shifts1.EndTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(shiftsItem1.EndTime))
				shifts1.ID = types.StringPointerValue(shiftsItem1.ID)
				if shiftsItem1.OnCallRotation == nil {
					shifts1.OnCallRotation = nil
				} else {
					shifts1.OnCallRotation = &tfTypes.NullableSuccinct{}
					shifts1.OnCallRotation.ID = types.StringPointerValue(shiftsItem1.OnCallRotation.ID)
					shifts1.OnCallRotation.Name = types.StringPointerValue(shiftsItem1.OnCallRotation.Name)
				}
				if shiftsItem1.OnCallSchedule == nil {
					shifts1.OnCallSchedule = nil
				} else {
					shifts1.OnCallSchedule = &tfTypes.NullableSuccinct{}
					shifts1.OnCallSchedule.ID = types.StringPointerValue(shiftsItem1.OnCallSchedule.ID)
					shifts1.OnCallSchedule.Name = types.StringPointerValue(shiftsItem1.OnCallSchedule.Name)
				}
				shifts1.StartTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(shiftsItem1.StartTime))
				if shiftsItem1.Team == nil {
					shifts1.Team = nil
				} else {
					shifts1.Team = &tfTypes.NullableSuccinct{}
					shifts1.Team.ID = types.StringPointerValue(shiftsItem1.Team.ID)
					shifts1.Team.Name = types.StringPointerValue(shiftsItem1.Team.Name)
				}
				shifts1.TimeZone = types.StringPointerValue(shiftsItem1.TimeZone)
				if shiftsItem1.User == nil {
					shifts1.User = nil
				} else {
					shifts1.User = &tfTypes.NullableSuccinct{}
					shifts1.User.ID = types.StringPointerValue(shiftsItem1.User.ID)
					shifts1.User.Name = types.StringPointerValue(shiftsItem1.User.Name)
				}
				if shiftsCount1+1 > len(r.Shifts) {
					r.Shifts = append(r.Shifts, shifts1)
				} else {
					r.Shifts[shiftsCount1].Color = shifts1.Color
					r.Shifts[shiftsCount1].CoverageRequest = shifts1.CoverageRequest
					r.Shifts[shiftsCount1].EndTime = shifts1.EndTime
					r.Shifts[shiftsCount1].ID = shifts1.ID
					r.Shifts[shiftsCount1].OnCallRotation = shifts1.OnCallRotation
					r.Shifts[shiftsCount1].OnCallSchedule = shifts1.OnCallSchedule
					r.Shifts[shiftsCount1].StartTime = shifts1.StartTime
					r.Shifts[shiftsCount1].Team = shifts1.Team
					r.Shifts[shiftsCount1].TimeZone = shifts1.TimeZone
					r.Shifts[shiftsCount1].User = shifts1.User
				}
			}
		}
		r.SignalsIcalURL = types.StringPointerValue(resp.SignalsIcalURL)
		r.SlackUserGroupID = types.StringPointerValue(resp.SlackUserGroupID)
		if resp.Strategy == nil {
			r.Strategy = nil
		} else {
			r.Strategy = &tfTypes.NullableSignalsAPIOnCallStrategy{}
			r.Strategy.HandoffDay = types.StringPointerValue(resp.Strategy.HandoffDay)
			r.Strategy.HandoffTime = types.StringPointerValue(resp.Strategy.HandoffTime)
			r.Strategy.ShiftDuration = types.StringPointerValue(resp.Strategy.ShiftDuration)
			r.Strategy.Type = types.StringPointerValue(resp.Strategy.Type)
		}
		if resp.Team == nil {
			r.Team = nil
		} else {
			r.Team = &tfTypes.NullableSuccinct{}
			r.Team.ID = types.StringPointerValue(resp.Team.ID)
			r.Team.Name = types.StringPointerValue(resp.Team.Name)
		}
		r.TimeZone = types.StringPointerValue(resp.TimeZone)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *SignalsAPIOnCallScheduleResourceModel) ToOperationsCreateTeamOnCallScheduleRequest(ctx context.Context) (*operations.CreateTeamOnCallScheduleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.TeamID.ValueString()

	createTeamOnCallSchedule, createTeamOnCallScheduleDiags := r.ToSharedCreateTeamOnCallSchedule(ctx)
	diags.Append(createTeamOnCallScheduleDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateTeamOnCallScheduleRequest{
		TeamID:                   teamID,
		CreateTeamOnCallSchedule: *createTeamOnCallSchedule,
	}

	return &out, diags
}

func (r *SignalsAPIOnCallScheduleResourceModel) ToOperationsGetTeamOnCallScheduleRequest(ctx context.Context) (*operations.GetTeamOnCallScheduleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.TeamID.ValueString()

	var scheduleID string
	scheduleID = r.ID.ValueString()

	out := operations.GetTeamOnCallScheduleRequest{
		TeamID:     teamID,
		ScheduleID: scheduleID,
	}

	return &out, diags
}

func (r *SignalsAPIOnCallScheduleResourceModel) ToOperationsUpdateTeamOnCallScheduleRequest(ctx context.Context) (*operations.UpdateTeamOnCallScheduleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.TeamID.ValueString()

	var scheduleID string
	scheduleID = r.ID.ValueString()

	updateTeamOnCallSchedule, updateTeamOnCallScheduleDiags := r.ToSharedUpdateTeamOnCallSchedule(ctx)
	diags.Append(updateTeamOnCallScheduleDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateTeamOnCallScheduleRequest{
		TeamID:                   teamID,
		ScheduleID:               scheduleID,
		UpdateTeamOnCallSchedule: *updateTeamOnCallSchedule,
	}

	return &out, diags
}

func (r *SignalsAPIOnCallScheduleResourceModel) ToSharedCreateTeamOnCallSchedule(ctx context.Context) (*shared.CreateTeamOnCallSchedule, diag.Diagnostics) {
	var diags diag.Diagnostics

	color := new(string)
	if !r.Color.IsUnknown() && !r.Color.IsNull() {
		*color = r.Color.ValueString()
	} else {
		color = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var memberIds []string
	if r.MemberIds != nil {
		memberIds = make([]string, 0, len(r.MemberIds))
		for _, memberIdsItem := range r.MemberIds {
			memberIds = append(memberIds, memberIdsItem.ValueString())
		}
	}
	var membersInput []shared.CreateTeamOnCallScheduleMembersInput
	if r.MembersInput != nil {
		membersInput = make([]shared.CreateTeamOnCallScheduleMembersInput, 0, len(r.MembersInput))
		for _, membersInputItem := range r.MembersInput {
			userID := new(string)
			if !membersInputItem.UserID.IsUnknown() && !membersInputItem.UserID.IsNull() {
				*userID = membersInputItem.UserID.ValueString()
			} else {
				userID = nil
			}
			membersInput = append(membersInput, shared.CreateTeamOnCallScheduleMembersInput{
				UserID: userID,
			})
		}
	}
	var name string
	name = r.Name.ValueString()

	var restrictionsInput []shared.CreateTeamOnCallScheduleRestrictionsInput
	if r.RestrictionsInput != nil {
		restrictionsInput = make([]shared.CreateTeamOnCallScheduleRestrictionsInput, 0, len(r.RestrictionsInput))
		for _, restrictionsInputItem := range r.RestrictionsInput {
			var endDay string
			endDay = restrictionsInputItem.EndDay.ValueString()

			var endTime string
			endTime = restrictionsInputItem.EndTime.ValueString()

			var startDay string
			startDay = restrictionsInputItem.StartDay.ValueString()

			var startTime string
			startTime = restrictionsInputItem.StartTime.ValueString()

			restrictionsInput = append(restrictionsInput, shared.CreateTeamOnCallScheduleRestrictionsInput{
				EndDay:    endDay,
				EndTime:   endTime,
				StartDay:  startDay,
				StartTime: startTime,
			})
		}
	}
	rotationDescription := new(string)
	if !r.RotationDescription.IsUnknown() && !r.RotationDescription.IsNull() {
		*rotationDescription = r.RotationDescription.ValueString()
	} else {
		rotationDescription = nil
	}
	rotationName := new(string)
	if !r.RotationName.IsUnknown() && !r.RotationName.IsNull() {
		*rotationName = r.RotationName.ValueString()
	} else {
		rotationName = nil
	}
	slackUserGroupID := new(string)
	if !r.SlackUserGroupID.IsUnknown() && !r.SlackUserGroupID.IsNull() {
		*slackUserGroupID = r.SlackUserGroupID.ValueString()
	} else {
		slackUserGroupID = nil
	}
	startTime1 := new(string)
	if !r.StartTime.IsUnknown() && !r.StartTime.IsNull() {
		*startTime1 = r.StartTime.ValueString()
	} else {
		startTime1 = nil
	}
	var strategyInput *shared.CreateTeamOnCallScheduleStrategyInput
	if r.StrategyInput != nil {
		handoffDay := new(string)
		if !r.StrategyInput.HandoffDay.IsUnknown() && !r.StrategyInput.HandoffDay.IsNull() {
			*handoffDay = r.StrategyInput.HandoffDay.ValueString()
		} else {
			handoffDay = nil
		}
		handoffTime := new(string)
		if !r.StrategyInput.HandoffTime.IsUnknown() && !r.StrategyInput.HandoffTime.IsNull() {
			*handoffTime = r.StrategyInput.HandoffTime.ValueString()
		} else {
			handoffTime = nil
		}
		shiftDuration := new(string)
		if !r.StrategyInput.ShiftDuration.IsUnknown() && !r.StrategyInput.ShiftDuration.IsNull() {
			*shiftDuration = r.StrategyInput.ShiftDuration.ValueString()
		} else {
			shiftDuration = nil
		}
		var typeVar string
		typeVar = r.StrategyInput.Type.ValueString()

		strategyInput = &shared.CreateTeamOnCallScheduleStrategyInput{
			HandoffDay:    handoffDay,
			HandoffTime:   handoffTime,
			ShiftDuration: shiftDuration,
			Type:          typeVar,
		}
	}
	timeZone := new(string)
	if !r.TimeZone.IsUnknown() && !r.TimeZone.IsNull() {
		*timeZone = r.TimeZone.ValueString()
	} else {
		timeZone = nil
	}
	out := shared.CreateTeamOnCallSchedule{
		Color:               color,
		Description:         description,
		MemberIds:           memberIds,
		MembersInput:        membersInput,
		Name:                name,
		RestrictionsInput:   restrictionsInput,
		RotationDescription: rotationDescription,
		RotationName:        rotationName,
		SlackUserGroupID:    slackUserGroupID,
		StartTime:           startTime1,
		StrategyInput:       strategyInput,
		TimeZone:            timeZone,
	}

	return &out, diags
}

func (r *SignalsAPIOnCallScheduleResourceModel) ToSharedUpdateTeamOnCallSchedule(ctx context.Context) (*shared.UpdateTeamOnCallSchedule, diag.Diagnostics) {
	var diags diag.Diagnostics

	color := new(string)
	if !r.Color.IsUnknown() && !r.Color.IsNull() {
		*color = r.Color.ValueString()
	} else {
		color = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var memberIds []string
	if r.MemberIds != nil {
		memberIds = make([]string, 0, len(r.MemberIds))
		for _, memberIdsItem := range r.MemberIds {
			memberIds = append(memberIds, memberIdsItem.ValueString())
		}
	}
	var membersInput []shared.UpdateTeamOnCallScheduleMembersInput
	if r.MembersInput != nil {
		membersInput = make([]shared.UpdateTeamOnCallScheduleMembersInput, 0, len(r.MembersInput))
		for _, membersInputItem := range r.MembersInput {
			userID := new(string)
			if !membersInputItem.UserID.IsUnknown() && !membersInputItem.UserID.IsNull() {
				*userID = membersInputItem.UserID.ValueString()
			} else {
				userID = nil
			}
			membersInput = append(membersInput, shared.UpdateTeamOnCallScheduleMembersInput{
				UserID: userID,
			})
		}
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var restrictionsInput []shared.UpdateTeamOnCallScheduleRestrictionsInput
	if r.RestrictionsInput != nil {
		restrictionsInput = make([]shared.UpdateTeamOnCallScheduleRestrictionsInput, 0, len(r.RestrictionsInput))
		for _, restrictionsInputItem := range r.RestrictionsInput {
			var endDay string
			endDay = restrictionsInputItem.EndDay.ValueString()

			var endTime string
			endTime = restrictionsInputItem.EndTime.ValueString()

			var startDay string
			startDay = restrictionsInputItem.StartDay.ValueString()

			var startTime string
			startTime = restrictionsInputItem.StartTime.ValueString()

			restrictionsInput = append(restrictionsInput, shared.UpdateTeamOnCallScheduleRestrictionsInput{
				EndDay:    endDay,
				EndTime:   endTime,
				StartDay:  startDay,
				StartTime: startTime,
			})
		}
	}
	rotationDescription := new(string)
	if !r.RotationDescription.IsUnknown() && !r.RotationDescription.IsNull() {
		*rotationDescription = r.RotationDescription.ValueString()
	} else {
		rotationDescription = nil
	}
	rotationName := new(string)
	if !r.RotationName.IsUnknown() && !r.RotationName.IsNull() {
		*rotationName = r.RotationName.ValueString()
	} else {
		rotationName = nil
	}
	slackUserGroupID := new(string)
	if !r.SlackUserGroupID.IsUnknown() && !r.SlackUserGroupID.IsNull() {
		*slackUserGroupID = r.SlackUserGroupID.ValueString()
	} else {
		slackUserGroupID = nil
	}
	var strategyInput *shared.UpdateTeamOnCallScheduleStrategyInput
	if r.StrategyInput != nil {
		handoffDay := new(string)
		if !r.StrategyInput.HandoffDay.IsUnknown() && !r.StrategyInput.HandoffDay.IsNull() {
			*handoffDay = r.StrategyInput.HandoffDay.ValueString()
		} else {
			handoffDay = nil
		}
		handoffTime := new(string)
		if !r.StrategyInput.HandoffTime.IsUnknown() && !r.StrategyInput.HandoffTime.IsNull() {
			*handoffTime = r.StrategyInput.HandoffTime.ValueString()
		} else {
			handoffTime = nil
		}
		shiftDuration := new(string)
		if !r.StrategyInput.ShiftDuration.IsUnknown() && !r.StrategyInput.ShiftDuration.IsNull() {
			*shiftDuration = r.StrategyInput.ShiftDuration.ValueString()
		} else {
			shiftDuration = nil
		}
		var typeVar string
		typeVar = r.StrategyInput.Type.ValueString()

		strategyInput = &shared.UpdateTeamOnCallScheduleStrategyInput{
			HandoffDay:    handoffDay,
			HandoffTime:   handoffTime,
			ShiftDuration: shiftDuration,
			Type:          typeVar,
		}
	}
	timeZone := new(string)
	if !r.TimeZone.IsUnknown() && !r.TimeZone.IsNull() {
		*timeZone = r.TimeZone.ValueString()
	} else {
		timeZone = nil
	}
	out := shared.UpdateTeamOnCallSchedule{
		Color:               color,
		Description:         description,
		MemberIds:           memberIds,
		MembersInput:        membersInput,
		Name:                name,
		RestrictionsInput:   restrictionsInput,
		RotationDescription: rotationDescription,
		RotationName:        rotationName,
		SlackUserGroupID:    slackUserGroupID,
		StrategyInput:       strategyInput,
		TimeZone:            timeZone,
	}

	return &out, diags
}
