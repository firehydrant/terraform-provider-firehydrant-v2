// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NuncConnectionDataSource{}
var _ datasource.DataSourceWithConfigure = &NuncConnectionDataSource{}

func NewNuncConnectionDataSource() datasource.DataSource {
	return &NuncConnectionDataSource{}
}

// NuncConnectionDataSource is the data source implementation.
type NuncConnectionDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// NuncConnectionDataSourceModel describes the data model.
type NuncConnectionDataSourceModel struct {
	ButtonBackgroundColor types.String                        `tfsdk:"button_background_color"`
	ButtonTextColor       types.String                        `tfsdk:"button_text_color"`
	Cname                 types.String                        `tfsdk:"cname"`
	CompanyName           types.String                        `tfsdk:"company_name"`
	CompanyTosURL         types.String                        `tfsdk:"company_tos_url"`
	CompanyWebsite        types.String                        `tfsdk:"company_website"`
	ComponentGroups       *tfTypes.NullableNuncComponentGroup `tfsdk:"component_groups"`
	Components            *tfTypes.NullableNuncComponent      `tfsdk:"components"`
	Conditions            *tfTypes.NullableNuncCondition      `tfsdk:"conditions"`
	CoverImage            *tfTypes.NullableMediaImage         `tfsdk:"cover_image"`
	DarkLogo              *tfTypes.NullableMediaImage         `tfsdk:"dark_logo"`
	Domain                types.String                        `tfsdk:"domain"`
	EnableHistogram       types.Bool                          `tfsdk:"enable_histogram"`
	ExposedFields         []types.String                      `tfsdk:"exposed_fields"`
	Favicon               *tfTypes.NullableMediaImage         `tfsdk:"favicon"`
	GreetingBody          types.String                        `tfsdk:"greeting_body"`
	GreetingTitle         types.String                        `tfsdk:"greeting_title"`
	ID                    types.String                        `tfsdk:"id"`
	LinkColor             types.String                        `tfsdk:"link_color"`
	Links                 []tfTypes.Links                     `tfsdk:"links"`
	Logo                  *tfTypes.NullableMediaImage         `tfsdk:"logo"`
	OpenGraphImage        *tfTypes.NullableMediaImage         `tfsdk:"open_graph_image"`
	OperationalMessage    types.String                        `tfsdk:"operational_message"`
	PrimaryColor          types.String                        `tfsdk:"primary_color"`
	SecondaryColor        types.String                        `tfsdk:"secondary_color"`
	Title                 types.String                        `tfsdk:"title"`
	UIVersion             types.Int32                         `tfsdk:"ui_version"`
}

// Metadata returns the data source type name.
func (r *NuncConnectionDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_nunc_connection"
}

// Schema defines the schema for the data source.
func (r *NuncConnectionDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NuncConnection DataSource",

		Attributes: map[string]schema.Attribute{
			"button_background_color": schema.StringAttribute{
				Computed: true,
			},
			"button_text_color": schema.StringAttribute{
				Computed: true,
			},
			"cname": schema.StringAttribute{
				Computed: true,
			},
			"company_name": schema.StringAttribute{
				Computed: true,
			},
			"company_tos_url": schema.StringAttribute{
				Computed: true,
			},
			"company_website": schema.StringAttribute{
				Computed: true,
			},
			"component_groups": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"component_group_id": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"position": schema.Int32Attribute{
						Computed: true,
					},
				},
			},
			"components": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"component_group_id": schema.StringAttribute{
						Computed: true,
					},
					"infrastructure_id": schema.StringAttribute{
						Computed: true,
					},
					"infrastructure_type": schema.StringAttribute{
						Computed: true,
					},
					"label": schema.StringAttribute{
						Computed: true,
					},
					"position": schema.Int32Attribute{
						Computed: true,
					},
				},
			},
			"conditions": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"condition_id": schema.StringAttribute{
						Computed: true,
					},
					"condition_name": schema.StringAttribute{
						Computed: true,
					},
					"nunc_condition": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"cover_image": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"original_url": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"dark_logo": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"original_url": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"domain": schema.StringAttribute{
				Computed: true,
			},
			"enable_histogram": schema.BoolAttribute{
				Computed: true,
			},
			"exposed_fields": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"favicon": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"original_url": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"greeting_body": schema.StringAttribute{
				Computed: true,
			},
			"greeting_title": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"link_color": schema.StringAttribute{
				Computed: true,
			},
			"links": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"href_url": schema.StringAttribute{
							Computed: true,
						},
						"icon_url": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
					},
				},
				Description: `List of links attached to this status page.`,
			},
			"logo": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"original_url": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"open_graph_image": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"original_url": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"operational_message": schema.StringAttribute{
				Computed: true,
			},
			"primary_color": schema.StringAttribute{
				Computed: true,
			},
			"secondary_color": schema.StringAttribute{
				Computed: true,
			},
			"title": schema.StringAttribute{
				Computed: true,
			},
			"ui_version": schema.Int32Attribute{
				Computed: true,
			},
		},
	}
}

func (r *NuncConnectionDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NuncConnectionDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *NuncConnectionDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetNuncConnectionRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.StatusPages.GetNuncConnection(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.NuncConnection != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedNuncConnection(ctx, res.NuncConnection)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
