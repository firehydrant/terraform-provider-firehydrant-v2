// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AlertsDataSourceModel) RefreshFromSharedAlerts(ctx context.Context, resp *shared.Alerts) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.ChildAlerts != nil {
			r.ChildAlerts = []tfTypes.AlertsSirenAlert{}
			if len(r.ChildAlerts) > len(resp.ChildAlerts) {
				r.ChildAlerts = r.ChildAlerts[:len(resp.ChildAlerts)]
			}
			for childAlertsCount, childAlertsItem := range resp.ChildAlerts {
				var childAlerts tfTypes.AlertsSirenAlert
				childAlerts.Description = types.StringPointerValue(childAlertsItem.Description)
				childAlerts.EndsAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(childAlertsItem.EndsAt))
				childAlerts.ID = types.StringPointerValue(childAlertsItem.ID)
				if childAlertsItem.Labels == nil {
					childAlerts.Labels = nil
				} else {
					childAlerts.Labels = &tfTypes.AlertsSirenAlertLabels{}
				}
				childAlerts.RemoteID = types.StringPointerValue(childAlertsItem.RemoteID)
				childAlerts.RemoteURL = types.StringPointerValue(childAlertsItem.RemoteURL)
				childAlerts.SignalID = types.StringPointerValue(childAlertsItem.SignalID)
				if childAlertsItem.SignalRule == nil {
					childAlerts.SignalRule = nil
				} else {
					childAlerts.SignalRule = &tfTypes.NullableSignalsAPIRule{}
					childAlerts.SignalRule.CreateIncidentConditionWhen = types.StringPointerValue(childAlertsItem.SignalRule.CreateIncidentConditionWhen)
					childAlerts.SignalRule.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(childAlertsItem.SignalRule.CreatedAt))
					if childAlertsItem.SignalRule.CreatedBy == nil {
						childAlerts.SignalRule.CreatedBy = nil
					} else {
						childAlerts.SignalRule.CreatedBy = &tfTypes.NullableAuthor{}
						childAlerts.SignalRule.CreatedBy.Email = types.StringPointerValue(childAlertsItem.SignalRule.CreatedBy.Email)
						childAlerts.SignalRule.CreatedBy.ID = types.StringPointerValue(childAlertsItem.SignalRule.CreatedBy.ID)
						childAlerts.SignalRule.CreatedBy.Name = types.StringPointerValue(childAlertsItem.SignalRule.CreatedBy.Name)
						childAlerts.SignalRule.CreatedBy.Source = types.StringPointerValue(childAlertsItem.SignalRule.CreatedBy.Source)
					}
					childAlerts.SignalRule.DeduplicationExpiry = types.StringPointerValue(childAlertsItem.SignalRule.DeduplicationExpiry)
					childAlerts.SignalRule.Expression = types.StringPointerValue(childAlertsItem.SignalRule.Expression)
					childAlerts.SignalRule.ID = types.StringPointerValue(childAlertsItem.SignalRule.ID)
					if childAlertsItem.SignalRule.IncidentType == nil {
						childAlerts.SignalRule.IncidentType = nil
					} else {
						childAlerts.SignalRule.IncidentType = &tfTypes.NullableSuccinct{}
						childAlerts.SignalRule.IncidentType.ID = types.StringPointerValue(childAlertsItem.SignalRule.IncidentType.ID)
						childAlerts.SignalRule.IncidentType.Name = types.StringPointerValue(childAlertsItem.SignalRule.IncidentType.Name)
					}
					childAlerts.SignalRule.Name = types.StringPointerValue(childAlertsItem.SignalRule.Name)
					childAlerts.SignalRule.NotificationPriorityOverride = types.StringPointerValue(childAlertsItem.SignalRule.NotificationPriorityOverride)
					if childAlertsItem.SignalRule.Target == nil {
						childAlerts.SignalRule.Target = nil
					} else {
						childAlerts.SignalRule.Target = &tfTypes.NullableSignalsAPITarget{}
						childAlerts.SignalRule.Target.ID = types.StringPointerValue(childAlertsItem.SignalRule.Target.ID)
						childAlerts.SignalRule.Target.IsPageable = types.BoolPointerValue(childAlertsItem.SignalRule.Target.IsPageable)
						childAlerts.SignalRule.Target.Name = types.StringPointerValue(childAlertsItem.SignalRule.Target.Name)
						childAlerts.SignalRule.Target.TeamID = types.StringPointerValue(childAlertsItem.SignalRule.Target.TeamID)
						childAlerts.SignalRule.Target.Type = types.StringPointerValue(childAlertsItem.SignalRule.Target.Type)
					}
					childAlerts.SignalRule.TeamID = types.StringPointerValue(childAlertsItem.SignalRule.TeamID)
					childAlerts.SignalRule.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(childAlertsItem.SignalRule.UpdatedAt))
				}
				childAlerts.StartsAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(childAlertsItem.StartsAt))
				childAlerts.Status = types.StringPointerValue(childAlertsItem.Status)
				childAlerts.Summary = types.StringPointerValue(childAlertsItem.Summary)
				if childAlertsItem.Tags != nil {
					childAlerts.Tags = make([]types.String, 0, len(childAlertsItem.Tags))
					for _, v := range childAlertsItem.Tags {
						childAlerts.Tags = append(childAlerts.Tags, types.StringValue(v))
					}
				}
				if childAlertsCount+1 > len(r.ChildAlerts) {
					r.ChildAlerts = append(r.ChildAlerts, childAlerts)
				} else {
					r.ChildAlerts[childAlertsCount].Description = childAlerts.Description
					r.ChildAlerts[childAlertsCount].EndsAt = childAlerts.EndsAt
					r.ChildAlerts[childAlertsCount].ID = childAlerts.ID
					r.ChildAlerts[childAlertsCount].Labels = childAlerts.Labels
					r.ChildAlerts[childAlertsCount].RemoteID = childAlerts.RemoteID
					r.ChildAlerts[childAlertsCount].RemoteURL = childAlerts.RemoteURL
					r.ChildAlerts[childAlertsCount].SignalID = childAlerts.SignalID
					r.ChildAlerts[childAlertsCount].SignalRule = childAlerts.SignalRule
					r.ChildAlerts[childAlertsCount].StartsAt = childAlerts.StartsAt
					r.ChildAlerts[childAlertsCount].Status = childAlerts.Status
					r.ChildAlerts[childAlertsCount].Summary = childAlerts.Summary
					r.ChildAlerts[childAlertsCount].Tags = childAlerts.Tags
				}
			}
		}
		if resp.Conversations != nil {
			r.Conversations = []tfTypes.ConversationsAPIReference{}
			if len(r.Conversations) > len(resp.Conversations) {
				r.Conversations = r.Conversations[:len(resp.Conversations)]
			}
			for conversationsCount, conversationsItem := range resp.Conversations {
				var conversations tfTypes.ConversationsAPIReference
				if conversationsItem.Channel == nil {
					conversations.Channel = nil
				} else {
					conversations.Channel = &tfTypes.NullableConversationsAPIChannel{}
					conversations.Channel.Name = types.StringPointerValue(conversationsItem.Channel.Name)
				}
				conversations.CommentsURL = types.StringPointerValue(conversationsItem.CommentsURL)
				conversations.Field = types.StringPointerValue(conversationsItem.Field)
				conversations.ID = types.StringPointerValue(conversationsItem.ID)
				conversations.ResourceClass = types.StringPointerValue(conversationsItem.ResourceClass)
				conversations.ResourceID = types.StringPointerValue(conversationsItem.ResourceID)
				if conversationsCount+1 > len(r.Conversations) {
					r.Conversations = append(r.Conversations, conversations)
				} else {
					r.Conversations[conversationsCount].Channel = conversations.Channel
					r.Conversations[conversationsCount].CommentsURL = conversations.CommentsURL
					r.Conversations[conversationsCount].Field = conversations.Field
					r.Conversations[conversationsCount].ID = conversations.ID
					r.Conversations[conversationsCount].ResourceClass = conversations.ResourceClass
					r.Conversations[conversationsCount].ResourceID = conversations.ResourceID
				}
			}
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.DurationIso8601 = types.StringPointerValue(resp.DurationIso8601)
		r.DurationMs = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.DurationMs))
		r.EndsAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.EndsAt))
		if resp.Environments != nil {
			r.Environments = []tfTypes.Succinct{}
			if len(r.Environments) > len(resp.Environments) {
				r.Environments = r.Environments[:len(resp.Environments)]
			}
			for environmentsCount, environmentsItem := range resp.Environments {
				var environments tfTypes.Succinct
				environments.ID = types.StringPointerValue(environmentsItem.ID)
				environments.Name = types.StringPointerValue(environmentsItem.Name)
				if environmentsCount+1 > len(r.Environments) {
					r.Environments = append(r.Environments, environments)
				} else {
					r.Environments[environmentsCount].ID = environments.ID
					r.Environments[environmentsCount].Name = environments.Name
				}
			}
		}
		if resp.Events != nil {
			r.Events = []tfTypes.AlertsSirenEvent{}
			if len(r.Events) > len(resp.Events) {
				r.Events = r.Events[:len(resp.Events)]
			}
			for eventsCount, eventsItem := range resp.Events {
				var events tfTypes.AlertsSirenEvent
				events.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(eventsItem.CreatedAt))
				if eventsItem.Data == nil {
					events.Data = nil
				} else {
					events.Data = &tfTypes.AlertsSirenEventData{}
				}
				events.ID = types.StringPointerValue(eventsItem.ID)
				events.Type = types.StringPointerValue(eventsItem.Type)
				if eventsCount+1 > len(r.Events) {
					r.Events = append(r.Events, events)
				} else {
					r.Events[eventsCount].CreatedAt = events.CreatedAt
					r.Events[eventsCount].Data = events.Data
					r.Events[eventsCount].ID = events.ID
					r.Events[eventsCount].Type = events.Type
				}
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Incidents != nil {
			r.Incidents = []tfTypes.PublicAPIV1IncidentsSuccinct{}
			if len(r.Incidents) > len(resp.Incidents) {
				r.Incidents = r.Incidents[:len(resp.Incidents)]
			}
			for incidentsCount, incidentsItem := range resp.Incidents {
				var incidents tfTypes.PublicAPIV1IncidentsSuccinct
				incidents.ID = types.StringPointerValue(incidentsItem.ID)
				incidents.Name = types.StringPointerValue(incidentsItem.Name)
				incidents.Number = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(incidentsItem.Number))
				if incidentsCount+1 > len(r.Incidents) {
					r.Incidents = append(r.Incidents, incidents)
				} else {
					r.Incidents[incidentsCount].ID = incidents.ID
					r.Incidents[incidentsCount].Name = incidents.Name
					r.Incidents[incidentsCount].Number = incidents.Number
				}
			}
		}
		r.IntegrationName = types.StringPointerValue(resp.IntegrationName)
		r.IsExpired = types.BoolPointerValue(resp.IsExpired)
		r.IsNoise = types.BoolPointerValue(resp.IsNoise)
		if resp.Labels == nil {
			r.Labels = nil
		} else {
			r.Labels = &tfTypes.AlertsLabels{}
		}
		if resp.ParentAlerts != nil {
			r.ParentAlerts = []tfTypes.AlertsSirenAlert{}
			if len(r.ParentAlerts) > len(resp.ParentAlerts) {
				r.ParentAlerts = r.ParentAlerts[:len(resp.ParentAlerts)]
			}
			for parentAlertsCount, parentAlertsItem := range resp.ParentAlerts {
				var parentAlerts tfTypes.AlertsSirenAlert
				parentAlerts.Description = types.StringPointerValue(parentAlertsItem.Description)
				parentAlerts.EndsAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(parentAlertsItem.EndsAt))
				parentAlerts.ID = types.StringPointerValue(parentAlertsItem.ID)
				if parentAlertsItem.Labels == nil {
					parentAlerts.Labels = nil
				} else {
					parentAlerts.Labels = &tfTypes.AlertsSirenAlertLabels{}
				}
				parentAlerts.RemoteID = types.StringPointerValue(parentAlertsItem.RemoteID)
				parentAlerts.RemoteURL = types.StringPointerValue(parentAlertsItem.RemoteURL)
				parentAlerts.SignalID = types.StringPointerValue(parentAlertsItem.SignalID)
				if parentAlertsItem.SignalRule == nil {
					parentAlerts.SignalRule = nil
				} else {
					parentAlerts.SignalRule = &tfTypes.NullableSignalsAPIRule{}
					parentAlerts.SignalRule.CreateIncidentConditionWhen = types.StringPointerValue(parentAlertsItem.SignalRule.CreateIncidentConditionWhen)
					parentAlerts.SignalRule.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(parentAlertsItem.SignalRule.CreatedAt))
					if parentAlertsItem.SignalRule.CreatedBy == nil {
						parentAlerts.SignalRule.CreatedBy = nil
					} else {
						parentAlerts.SignalRule.CreatedBy = &tfTypes.NullableAuthor{}
						parentAlerts.SignalRule.CreatedBy.Email = types.StringPointerValue(parentAlertsItem.SignalRule.CreatedBy.Email)
						parentAlerts.SignalRule.CreatedBy.ID = types.StringPointerValue(parentAlertsItem.SignalRule.CreatedBy.ID)
						parentAlerts.SignalRule.CreatedBy.Name = types.StringPointerValue(parentAlertsItem.SignalRule.CreatedBy.Name)
						parentAlerts.SignalRule.CreatedBy.Source = types.StringPointerValue(parentAlertsItem.SignalRule.CreatedBy.Source)
					}
					parentAlerts.SignalRule.DeduplicationExpiry = types.StringPointerValue(parentAlertsItem.SignalRule.DeduplicationExpiry)
					parentAlerts.SignalRule.Expression = types.StringPointerValue(parentAlertsItem.SignalRule.Expression)
					parentAlerts.SignalRule.ID = types.StringPointerValue(parentAlertsItem.SignalRule.ID)
					if parentAlertsItem.SignalRule.IncidentType == nil {
						parentAlerts.SignalRule.IncidentType = nil
					} else {
						parentAlerts.SignalRule.IncidentType = &tfTypes.NullableSuccinct{}
						parentAlerts.SignalRule.IncidentType.ID = types.StringPointerValue(parentAlertsItem.SignalRule.IncidentType.ID)
						parentAlerts.SignalRule.IncidentType.Name = types.StringPointerValue(parentAlertsItem.SignalRule.IncidentType.Name)
					}
					parentAlerts.SignalRule.Name = types.StringPointerValue(parentAlertsItem.SignalRule.Name)
					parentAlerts.SignalRule.NotificationPriorityOverride = types.StringPointerValue(parentAlertsItem.SignalRule.NotificationPriorityOverride)
					if parentAlertsItem.SignalRule.Target == nil {
						parentAlerts.SignalRule.Target = nil
					} else {
						parentAlerts.SignalRule.Target = &tfTypes.NullableSignalsAPITarget{}
						parentAlerts.SignalRule.Target.ID = types.StringPointerValue(parentAlertsItem.SignalRule.Target.ID)
						parentAlerts.SignalRule.Target.IsPageable = types.BoolPointerValue(parentAlertsItem.SignalRule.Target.IsPageable)
						parentAlerts.SignalRule.Target.Name = types.StringPointerValue(parentAlertsItem.SignalRule.Target.Name)
						parentAlerts.SignalRule.Target.TeamID = types.StringPointerValue(parentAlertsItem.SignalRule.Target.TeamID)
						parentAlerts.SignalRule.Target.Type = types.StringPointerValue(parentAlertsItem.SignalRule.Target.Type)
					}
					parentAlerts.SignalRule.TeamID = types.StringPointerValue(parentAlertsItem.SignalRule.TeamID)
					parentAlerts.SignalRule.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(parentAlertsItem.SignalRule.UpdatedAt))
				}
				parentAlerts.StartsAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(parentAlertsItem.StartsAt))
				parentAlerts.Status = types.StringPointerValue(parentAlertsItem.Status)
				parentAlerts.Summary = types.StringPointerValue(parentAlertsItem.Summary)
				if parentAlertsItem.Tags != nil {
					parentAlerts.Tags = make([]types.String, 0, len(parentAlertsItem.Tags))
					for _, v := range parentAlertsItem.Tags {
						parentAlerts.Tags = append(parentAlerts.Tags, types.StringValue(v))
					}
				}
				if parentAlertsCount+1 > len(r.ParentAlerts) {
					r.ParentAlerts = append(r.ParentAlerts, parentAlerts)
				} else {
					r.ParentAlerts[parentAlertsCount].Description = parentAlerts.Description
					r.ParentAlerts[parentAlertsCount].EndsAt = parentAlerts.EndsAt
					r.ParentAlerts[parentAlertsCount].ID = parentAlerts.ID
					r.ParentAlerts[parentAlertsCount].Labels = parentAlerts.Labels
					r.ParentAlerts[parentAlertsCount].RemoteID = parentAlerts.RemoteID
					r.ParentAlerts[parentAlertsCount].RemoteURL = parentAlerts.RemoteURL
					r.ParentAlerts[parentAlertsCount].SignalID = parentAlerts.SignalID
					r.ParentAlerts[parentAlertsCount].SignalRule = parentAlerts.SignalRule
					r.ParentAlerts[parentAlertsCount].StartsAt = parentAlerts.StartsAt
					r.ParentAlerts[parentAlertsCount].Status = parentAlerts.Status
					r.ParentAlerts[parentAlertsCount].Summary = parentAlerts.Summary
					r.ParentAlerts[parentAlertsCount].Tags = parentAlerts.Tags
				}
			}
		}
		r.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Position))
		r.Priority = types.StringPointerValue(resp.Priority)
		r.RemoteID = types.StringPointerValue(resp.RemoteID)
		r.RemoteURL = types.StringPointerValue(resp.RemoteURL)
		if resp.Services != nil {
			r.Services = []tfTypes.Succinct{}
			if len(r.Services) > len(resp.Services) {
				r.Services = r.Services[:len(resp.Services)]
			}
			for servicesCount, servicesItem := range resp.Services {
				var services tfTypes.Succinct
				services.ID = types.StringPointerValue(servicesItem.ID)
				services.Name = types.StringPointerValue(servicesItem.Name)
				if servicesCount+1 > len(r.Services) {
					r.Services = append(r.Services, services)
				} else {
					r.Services[servicesCount].ID = services.ID
					r.Services[servicesCount].Name = services.Name
				}
			}
		}
		r.SignalID = types.StringPointerValue(resp.SignalID)
		if resp.SignalRule == nil {
			r.SignalRule = nil
		} else {
			r.SignalRule = &tfTypes.NullableSignalsAPIRule{}
			r.SignalRule.CreateIncidentConditionWhen = types.StringPointerValue(resp.SignalRule.CreateIncidentConditionWhen)
			r.SignalRule.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.SignalRule.CreatedAt))
			if resp.SignalRule.CreatedBy == nil {
				r.SignalRule.CreatedBy = nil
			} else {
				r.SignalRule.CreatedBy = &tfTypes.NullableAuthor{}
				r.SignalRule.CreatedBy.Email = types.StringPointerValue(resp.SignalRule.CreatedBy.Email)
				r.SignalRule.CreatedBy.ID = types.StringPointerValue(resp.SignalRule.CreatedBy.ID)
				r.SignalRule.CreatedBy.Name = types.StringPointerValue(resp.SignalRule.CreatedBy.Name)
				r.SignalRule.CreatedBy.Source = types.StringPointerValue(resp.SignalRule.CreatedBy.Source)
			}
			r.SignalRule.DeduplicationExpiry = types.StringPointerValue(resp.SignalRule.DeduplicationExpiry)
			r.SignalRule.Expression = types.StringPointerValue(resp.SignalRule.Expression)
			r.SignalRule.ID = types.StringPointerValue(resp.SignalRule.ID)
			if resp.SignalRule.IncidentType == nil {
				r.SignalRule.IncidentType = nil
			} else {
				r.SignalRule.IncidentType = &tfTypes.NullableSuccinct{}
				r.SignalRule.IncidentType.ID = types.StringPointerValue(resp.SignalRule.IncidentType.ID)
				r.SignalRule.IncidentType.Name = types.StringPointerValue(resp.SignalRule.IncidentType.Name)
			}
			r.SignalRule.Name = types.StringPointerValue(resp.SignalRule.Name)
			r.SignalRule.NotificationPriorityOverride = types.StringPointerValue(resp.SignalRule.NotificationPriorityOverride)
			if resp.SignalRule.Target == nil {
				r.SignalRule.Target = nil
			} else {
				r.SignalRule.Target = &tfTypes.NullableSignalsAPITarget{}
				r.SignalRule.Target.ID = types.StringPointerValue(resp.SignalRule.Target.ID)
				r.SignalRule.Target.IsPageable = types.BoolPointerValue(resp.SignalRule.Target.IsPageable)
				r.SignalRule.Target.Name = types.StringPointerValue(resp.SignalRule.Target.Name)
				r.SignalRule.Target.TeamID = types.StringPointerValue(resp.SignalRule.Target.TeamID)
				r.SignalRule.Target.Type = types.StringPointerValue(resp.SignalRule.Target.Type)
			}
			r.SignalRule.TeamID = types.StringPointerValue(resp.SignalRule.TeamID)
			r.SignalRule.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.SignalRule.UpdatedAt))
		}
		if resp.SignalTarget == nil {
			r.SignalTarget = nil
		} else {
			r.SignalTarget = &tfTypes.NullableSignalsAPITarget{}
			r.SignalTarget.ID = types.StringPointerValue(resp.SignalTarget.ID)
			r.SignalTarget.IsPageable = types.BoolPointerValue(resp.SignalTarget.IsPageable)
			r.SignalTarget.Name = types.StringPointerValue(resp.SignalTarget.Name)
			r.SignalTarget.TeamID = types.StringPointerValue(resp.SignalTarget.TeamID)
			r.SignalTarget.Type = types.StringPointerValue(resp.SignalTarget.Type)
		}
		r.SourceIcon = types.StringPointerValue(resp.SourceIcon)
		r.StartsAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.StartsAt))
		r.Status = types.StringPointerValue(resp.Status)
		r.Summary = types.StringPointerValue(resp.Summary)
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.TeamID = types.StringPointerValue(resp.TeamID)
		r.TeamName = types.StringPointerValue(resp.TeamName)
	}

	return diags
}

func (r *AlertsDataSourceModel) ToOperationsGetAlertRequest(ctx context.Context) (*operations.GetAlertRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var alertID string
	alertID = r.AlertID.ValueString()

	out := operations.GetAlertRequest{
		AlertID: alertID,
	}

	return &out, diags
}
