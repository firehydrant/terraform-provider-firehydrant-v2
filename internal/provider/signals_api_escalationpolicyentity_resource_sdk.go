// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SignalsAPIEscalationPolicyEntityResourceModel) ToSharedCreateTeamEscalationPolicy(ctx context.Context) (*shared.CreateTeamEscalationPolicy, diag.Diagnostics) {
	var diags diag.Diagnostics

	defaultVar := new(bool)
	if !r.Default.IsUnknown() && !r.Default.IsNull() {
		*defaultVar = r.Default.ValueBool()
	} else {
		defaultVar = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var handoffStepInput *shared.CreateTeamEscalationPolicyHandoffStepInput
	if r.HandoffStepInput != nil {
		var targetID string
		targetID = r.HandoffStepInput.TargetID.ValueString()

		var targetType string
		targetType = r.HandoffStepInput.TargetType.ValueString()

		handoffStepInput = &shared.CreateTeamEscalationPolicyHandoffStepInput{
			TargetID:   targetID,
			TargetType: targetType,
		}
	}
	var name string
	name = r.Name.ValueString()

	var prioritizedSettings *shared.CreateTeamEscalationPolicyPrioritizedSettings
	if r.PrioritizedSettings != nil {
		var high *shared.CreateTeamEscalationPolicyHigh
		if r.PrioritizedSettings.High != nil {
			var handoffStep *shared.CreateTeamEscalationPolicyHighHandoffStep
			if r.PrioritizedSettings.High.HandoffStep != nil {
				var targetId1 string
				targetId1 = r.PrioritizedSettings.High.HandoffStep.TargetID.ValueString()

				var targetType1 string
				targetType1 = r.PrioritizedSettings.High.HandoffStep.TargetType.ValueString()

				handoffStep = &shared.CreateTeamEscalationPolicyHighHandoffStep{
					TargetID:   targetId1,
					TargetType: targetType1,
				}
			}
			repetitions := new(int)
			if !r.PrioritizedSettings.High.Repetitions.IsUnknown() && !r.PrioritizedSettings.High.Repetitions.IsNull() {
				*repetitions = int(r.PrioritizedSettings.High.Repetitions.ValueInt32())
			} else {
				repetitions = nil
			}
			high = &shared.CreateTeamEscalationPolicyHigh{
				HandoffStep: handoffStep,
				Repetitions: repetitions,
			}
		}
		var low *shared.CreateTeamEscalationPolicyLow
		if r.PrioritizedSettings.Low != nil {
			var handoffStep1 *shared.CreateTeamEscalationPolicyLowHandoffStep
			if r.PrioritizedSettings.Low.HandoffStep != nil {
				var targetId2 string
				targetId2 = r.PrioritizedSettings.Low.HandoffStep.TargetID.ValueString()

				var targetType2 string
				targetType2 = r.PrioritizedSettings.Low.HandoffStep.TargetType.ValueString()

				handoffStep1 = &shared.CreateTeamEscalationPolicyLowHandoffStep{
					TargetID:   targetId2,
					TargetType: targetType2,
				}
			}
			repetitions1 := new(int)
			if !r.PrioritizedSettings.Low.Repetitions.IsUnknown() && !r.PrioritizedSettings.Low.Repetitions.IsNull() {
				*repetitions1 = int(r.PrioritizedSettings.Low.Repetitions.ValueInt32())
			} else {
				repetitions1 = nil
			}
			low = &shared.CreateTeamEscalationPolicyLow{
				HandoffStep: handoffStep1,
				Repetitions: repetitions1,
			}
		}
		var medium *shared.CreateTeamEscalationPolicyMedium
		if r.PrioritizedSettings.Medium != nil {
			var handoffStep2 *shared.CreateTeamEscalationPolicyMediumHandoffStep
			if r.PrioritizedSettings.Medium.HandoffStep != nil {
				var targetId3 string
				targetId3 = r.PrioritizedSettings.Medium.HandoffStep.TargetID.ValueString()

				var targetType3 string
				targetType3 = r.PrioritizedSettings.Medium.HandoffStep.TargetType.ValueString()

				handoffStep2 = &shared.CreateTeamEscalationPolicyMediumHandoffStep{
					TargetID:   targetId3,
					TargetType: targetType3,
				}
			}
			repetitions2 := new(int)
			if !r.PrioritizedSettings.Medium.Repetitions.IsUnknown() && !r.PrioritizedSettings.Medium.Repetitions.IsNull() {
				*repetitions2 = int(r.PrioritizedSettings.Medium.Repetitions.ValueInt32())
			} else {
				repetitions2 = nil
			}
			medium = &shared.CreateTeamEscalationPolicyMedium{
				HandoffStep: handoffStep2,
				Repetitions: repetitions2,
			}
		}
		prioritizedSettings = &shared.CreateTeamEscalationPolicyPrioritizedSettings{
			High:   high,
			Low:    low,
			Medium: medium,
		}
	}
	repetitions3 := new(int)
	if !r.Repetitions.IsUnknown() && !r.Repetitions.IsNull() {
		*repetitions3 = int(r.Repetitions.ValueInt32())
	} else {
		repetitions3 = nil
	}
	stepStrategy := new(string)
	if !r.StepStrategy.IsUnknown() && !r.StepStrategy.IsNull() {
		*stepStrategy = r.StepStrategy.ValueString()
	} else {
		stepStrategy = nil
	}
	steps := make([]shared.CreateTeamEscalationPolicyStep, 0, len(r.Steps))
	for _, stepsItem := range r.Steps {
		distributionType := new(string)
		if !stepsItem.DistributionType.IsUnknown() && !stepsItem.DistributionType.IsNull() {
			*distributionType = stepsItem.DistributionType.ValueString()
		} else {
			distributionType = nil
		}
		var priorities []string
		if stepsItem.Priorities != nil {
			priorities = make([]string, 0, len(stepsItem.Priorities))
			for _, prioritiesItem := range stepsItem.Priorities {
				priorities = append(priorities, prioritiesItem.ValueString())
			}
		}
		targets := make([]shared.CreateTeamEscalationPolicyTarget, 0, len(stepsItem.Targets))
		for _, targetsItem := range stepsItem.Targets {
			var id string
			id = targetsItem.ID.ValueString()

			var typeVar string
			typeVar = targetsItem.Type.ValueString()

			targets = append(targets, shared.CreateTeamEscalationPolicyTarget{
				ID:   id,
				Type: typeVar,
			})
		}
		var timeout string
		timeout = stepsItem.Timeout.ValueString()

		steps = append(steps, shared.CreateTeamEscalationPolicyStep{
			DistributionType: distributionType,
			Priorities:       priorities,
			Targets:          targets,
			Timeout:          timeout,
		})
	}
	out := shared.CreateTeamEscalationPolicy{
		Default:             defaultVar,
		Description:         description,
		HandoffStepInput:    handoffStepInput,
		Name:                name,
		PrioritizedSettings: prioritizedSettings,
		Repetitions:         repetitions3,
		StepStrategy:        stepStrategy,
		Steps:               steps,
	}

	return &out, diags
}

func (r *SignalsAPIEscalationPolicyEntityResourceModel) ToOperationsCreateTeamEscalationPolicyRequest(ctx context.Context) (*operations.CreateTeamEscalationPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.TeamID.ValueString()

	createTeamEscalationPolicy, createTeamEscalationPolicyDiags := r.ToSharedCreateTeamEscalationPolicy(ctx)
	diags.Append(createTeamEscalationPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateTeamEscalationPolicyRequest{
		TeamID:                     teamID,
		CreateTeamEscalationPolicy: *createTeamEscalationPolicy,
	}

	return &out, diags
}

func (r *SignalsAPIEscalationPolicyEntityResourceModel) ToSharedUpdateTeamEscalationPolicy(ctx context.Context) (*shared.UpdateTeamEscalationPolicy, diag.Diagnostics) {
	var diags diag.Diagnostics

	defaultVar := new(bool)
	if !r.Default.IsUnknown() && !r.Default.IsNull() {
		*defaultVar = r.Default.ValueBool()
	} else {
		defaultVar = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var handoffStepInput *shared.UpdateTeamEscalationPolicyHandoffStepInput
	if r.HandoffStepInput != nil {
		var targetID string
		targetID = r.HandoffStepInput.TargetID.ValueString()

		var targetType string
		targetType = r.HandoffStepInput.TargetType.ValueString()

		handoffStepInput = &shared.UpdateTeamEscalationPolicyHandoffStepInput{
			TargetID:   targetID,
			TargetType: targetType,
		}
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var prioritizedSettings *shared.UpdateTeamEscalationPolicyPrioritizedSettings
	if r.PrioritizedSettings != nil {
		var high *shared.UpdateTeamEscalationPolicyHigh
		if r.PrioritizedSettings.High != nil {
			var handoffStep *shared.UpdateTeamEscalationPolicyHighHandoffStep
			if r.PrioritizedSettings.High.HandoffStep != nil {
				var targetId1 string
				targetId1 = r.PrioritizedSettings.High.HandoffStep.TargetID.ValueString()

				var targetType1 string
				targetType1 = r.PrioritizedSettings.High.HandoffStep.TargetType.ValueString()

				handoffStep = &shared.UpdateTeamEscalationPolicyHighHandoffStep{
					TargetID:   targetId1,
					TargetType: targetType1,
				}
			}
			repetitions := new(int)
			if !r.PrioritizedSettings.High.Repetitions.IsUnknown() && !r.PrioritizedSettings.High.Repetitions.IsNull() {
				*repetitions = int(r.PrioritizedSettings.High.Repetitions.ValueInt32())
			} else {
				repetitions = nil
			}
			high = &shared.UpdateTeamEscalationPolicyHigh{
				HandoffStep: handoffStep,
				Repetitions: repetitions,
			}
		}
		var low *shared.UpdateTeamEscalationPolicyLow
		if r.PrioritizedSettings.Low != nil {
			var handoffStep1 *shared.UpdateTeamEscalationPolicyLowHandoffStep
			if r.PrioritizedSettings.Low.HandoffStep != nil {
				var targetId2 string
				targetId2 = r.PrioritizedSettings.Low.HandoffStep.TargetID.ValueString()

				var targetType2 string
				targetType2 = r.PrioritizedSettings.Low.HandoffStep.TargetType.ValueString()

				handoffStep1 = &shared.UpdateTeamEscalationPolicyLowHandoffStep{
					TargetID:   targetId2,
					TargetType: targetType2,
				}
			}
			repetitions1 := new(int)
			if !r.PrioritizedSettings.Low.Repetitions.IsUnknown() && !r.PrioritizedSettings.Low.Repetitions.IsNull() {
				*repetitions1 = int(r.PrioritizedSettings.Low.Repetitions.ValueInt32())
			} else {
				repetitions1 = nil
			}
			low = &shared.UpdateTeamEscalationPolicyLow{
				HandoffStep: handoffStep1,
				Repetitions: repetitions1,
			}
		}
		var medium *shared.UpdateTeamEscalationPolicyMedium
		if r.PrioritizedSettings.Medium != nil {
			var handoffStep2 *shared.UpdateTeamEscalationPolicyMediumHandoffStep
			if r.PrioritizedSettings.Medium.HandoffStep != nil {
				var targetId3 string
				targetId3 = r.PrioritizedSettings.Medium.HandoffStep.TargetID.ValueString()

				var targetType3 string
				targetType3 = r.PrioritizedSettings.Medium.HandoffStep.TargetType.ValueString()

				handoffStep2 = &shared.UpdateTeamEscalationPolicyMediumHandoffStep{
					TargetID:   targetId3,
					TargetType: targetType3,
				}
			}
			repetitions2 := new(int)
			if !r.PrioritizedSettings.Medium.Repetitions.IsUnknown() && !r.PrioritizedSettings.Medium.Repetitions.IsNull() {
				*repetitions2 = int(r.PrioritizedSettings.Medium.Repetitions.ValueInt32())
			} else {
				repetitions2 = nil
			}
			medium = &shared.UpdateTeamEscalationPolicyMedium{
				HandoffStep: handoffStep2,
				Repetitions: repetitions2,
			}
		}
		prioritizedSettings = &shared.UpdateTeamEscalationPolicyPrioritizedSettings{
			High:   high,
			Low:    low,
			Medium: medium,
		}
	}
	repetitions3 := new(int)
	if !r.Repetitions.IsUnknown() && !r.Repetitions.IsNull() {
		*repetitions3 = int(r.Repetitions.ValueInt32())
	} else {
		repetitions3 = nil
	}
	stepStrategy := new(string)
	if !r.StepStrategy.IsUnknown() && !r.StepStrategy.IsNull() {
		*stepStrategy = r.StepStrategy.ValueString()
	} else {
		stepStrategy = nil
	}
	var steps []shared.UpdateTeamEscalationPolicyStep
	if r.Steps != nil {
		steps = make([]shared.UpdateTeamEscalationPolicyStep, 0, len(r.Steps))
		for _, stepsItem := range r.Steps {
			distributionType := new(string)
			if !stepsItem.DistributionType.IsUnknown() && !stepsItem.DistributionType.IsNull() {
				*distributionType = stepsItem.DistributionType.ValueString()
			} else {
				distributionType = nil
			}
			var priorities []string
			if stepsItem.Priorities != nil {
				priorities = make([]string, 0, len(stepsItem.Priorities))
				for _, prioritiesItem := range stepsItem.Priorities {
					priorities = append(priorities, prioritiesItem.ValueString())
				}
			}
			var targets []shared.UpdateTeamEscalationPolicyTarget
			if stepsItem.Targets != nil {
				targets = make([]shared.UpdateTeamEscalationPolicyTarget, 0, len(stepsItem.Targets))
				for _, targetsItem := range stepsItem.Targets {
					var id string
					id = targetsItem.ID.ValueString()

					var typeVar string
					typeVar = targetsItem.Type.ValueString()

					targets = append(targets, shared.UpdateTeamEscalationPolicyTarget{
						ID:   id,
						Type: typeVar,
					})
				}
			}
			var timeout string
			timeout = stepsItem.Timeout.ValueString()

			steps = append(steps, shared.UpdateTeamEscalationPolicyStep{
				DistributionType: distributionType,
				Priorities:       priorities,
				Targets:          targets,
				Timeout:          timeout,
			})
		}
	}
	out := shared.UpdateTeamEscalationPolicy{
		Default:             defaultVar,
		Description:         description,
		HandoffStepInput:    handoffStepInput,
		Name:                name,
		PrioritizedSettings: prioritizedSettings,
		Repetitions:         repetitions3,
		StepStrategy:        stepStrategy,
		Steps:               steps,
	}

	return &out, diags
}

func (r *SignalsAPIEscalationPolicyEntityResourceModel) ToOperationsUpdateTeamEscalationPolicyRequest(ctx context.Context) (*operations.UpdateTeamEscalationPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.TeamID.ValueString()

	var id string
	id = r.ID.ValueString()

	updateTeamEscalationPolicy, updateTeamEscalationPolicyDiags := r.ToSharedUpdateTeamEscalationPolicy(ctx)
	diags.Append(updateTeamEscalationPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateTeamEscalationPolicyRequest{
		TeamID:                     teamID,
		ID:                         id,
		UpdateTeamEscalationPolicy: *updateTeamEscalationPolicy,
	}

	return &out, diags
}

func (r *SignalsAPIEscalationPolicyEntityResourceModel) ToOperationsGetTeamEscalationPolicyRequest(ctx context.Context) (*operations.GetTeamEscalationPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.TeamID.ValueString()

	var id string
	id = r.ID.ValueString()

	out := operations.GetTeamEscalationPolicyRequest{
		TeamID: teamID,
		ID:     id,
	}

	return &out, diags
}

func (r *SignalsAPIEscalationPolicyEntityResourceModel) RefreshFromSharedSignalsAPIEscalationPolicyEntity(ctx context.Context, resp *shared.SignalsAPIEscalationPolicyEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.CreatedBy == nil {
			r.CreatedBy = nil
		} else {
			r.CreatedBy = &tfTypes.NullableAuthorEntity{}
			r.CreatedBy.Email = types.StringPointerValue(resp.CreatedBy.Email)
			r.CreatedBy.ID = types.StringPointerValue(resp.CreatedBy.ID)
			r.CreatedBy.Name = types.StringPointerValue(resp.CreatedBy.Name)
			r.CreatedBy.Source = types.StringPointerValue(resp.CreatedBy.Source)
		}
		r.Default = types.BoolPointerValue(resp.Default)
		r.Description = types.StringPointerValue(resp.Description)
		if resp.HandoffStep == nil {
			r.HandoffStep = nil
		} else {
			r.HandoffStep = &tfTypes.NullableSignalsAPIEscalationPolicyHandoffStepEntity{}
			r.HandoffStep.ID = types.StringPointerValue(resp.HandoffStep.ID)
			if resp.HandoffStep.Target == nil {
				r.HandoffStep.Target = nil
			} else {
				r.HandoffStep.Target = &tfTypes.NullableSignalsAPITargetEntity{}
				r.HandoffStep.Target.ID = types.StringPointerValue(resp.HandoffStep.Target.ID)
				r.HandoffStep.Target.IsPageable = types.BoolPointerValue(resp.HandoffStep.Target.IsPageable)
				r.HandoffStep.Target.Name = types.StringPointerValue(resp.HandoffStep.Target.Name)
				r.HandoffStep.Target.TeamID = types.StringPointerValue(resp.HandoffStep.Target.TeamID)
				r.HandoffStep.Target.Type = types.StringPointerValue(resp.HandoffStep.Target.Type)
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.NotificationPriorityPolicies != nil {
			r.NotificationPriorityPolicies = []tfTypes.SignalsAPINotificationPriorityPolicyEntity{}
			if len(r.NotificationPriorityPolicies) > len(resp.NotificationPriorityPolicies) {
				r.NotificationPriorityPolicies = r.NotificationPriorityPolicies[:len(resp.NotificationPriorityPolicies)]
			}
			for notificationPriorityPoliciesCount, notificationPriorityPoliciesItem := range resp.NotificationPriorityPolicies {
				var notificationPriorityPolicies tfTypes.SignalsAPINotificationPriorityPolicyEntity
				if notificationPriorityPoliciesItem.HandoffStep == nil {
					notificationPriorityPolicies.HandoffStep = nil
				} else {
					notificationPriorityPolicies.HandoffStep = &tfTypes.NullableSignalsAPIEscalationPolicyHandoffStepEntity{}
					notificationPriorityPolicies.HandoffStep.ID = types.StringPointerValue(notificationPriorityPoliciesItem.HandoffStep.ID)
					if notificationPriorityPoliciesItem.HandoffStep.Target == nil {
						notificationPriorityPolicies.HandoffStep.Target = nil
					} else {
						notificationPriorityPolicies.HandoffStep.Target = &tfTypes.NullableSignalsAPITargetEntity{}
						notificationPriorityPolicies.HandoffStep.Target.ID = types.StringPointerValue(notificationPriorityPoliciesItem.HandoffStep.Target.ID)
						notificationPriorityPolicies.HandoffStep.Target.IsPageable = types.BoolPointerValue(notificationPriorityPoliciesItem.HandoffStep.Target.IsPageable)
						notificationPriorityPolicies.HandoffStep.Target.Name = types.StringPointerValue(notificationPriorityPoliciesItem.HandoffStep.Target.Name)
						notificationPriorityPolicies.HandoffStep.Target.TeamID = types.StringPointerValue(notificationPriorityPoliciesItem.HandoffStep.Target.TeamID)
						notificationPriorityPolicies.HandoffStep.Target.Type = types.StringPointerValue(notificationPriorityPoliciesItem.HandoffStep.Target.Type)
					}
				}
				notificationPriorityPolicies.NotificationPriority = types.StringPointerValue(notificationPriorityPoliciesItem.NotificationPriority)
				notificationPriorityPolicies.Repetitions = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(notificationPriorityPoliciesItem.Repetitions))
				if notificationPriorityPoliciesItem.Steps != nil {
					notificationPriorityPolicies.Steps = []tfTypes.SignalsAPIEscalationPolicyStepEntity{}
					for stepsCount, stepsItem := range notificationPriorityPoliciesItem.Steps {
						var steps tfTypes.SignalsAPIEscalationPolicyStepEntity
						steps.DistributionType = types.StringPointerValue(stepsItem.DistributionType)
						steps.ID = types.StringPointerValue(stepsItem.ID)
						if stepsItem.NextTargetForRoundRobin == nil {
							steps.NextTargetForRoundRobin = nil
						} else {
							steps.NextTargetForRoundRobin = &tfTypes.NullableSignalsAPITargetEntity{}
							steps.NextTargetForRoundRobin.ID = types.StringPointerValue(stepsItem.NextTargetForRoundRobin.ID)
							steps.NextTargetForRoundRobin.IsPageable = types.BoolPointerValue(stepsItem.NextTargetForRoundRobin.IsPageable)
							steps.NextTargetForRoundRobin.Name = types.StringPointerValue(stepsItem.NextTargetForRoundRobin.Name)
							steps.NextTargetForRoundRobin.TeamID = types.StringPointerValue(stepsItem.NextTargetForRoundRobin.TeamID)
							steps.NextTargetForRoundRobin.Type = types.StringPointerValue(stepsItem.NextTargetForRoundRobin.Type)
						}
						steps.ParentPosition = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(stepsItem.ParentPosition))
						steps.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(stepsItem.Position))
						if stepsItem.Priorities != nil {
							steps.Priorities = make([]types.String, 0, len(stepsItem.Priorities))
							for _, v := range stepsItem.Priorities {
								steps.Priorities = append(steps.Priorities, types.StringValue(v))
							}
						}
						if stepsItem.Targets != nil {
							steps.Targets = []tfTypes.SignalsAPITargetEntity{}
							for targetsCount, targetsItem := range stepsItem.Targets {
								var targets tfTypes.SignalsAPITargetEntity
								targets.ID = types.StringPointerValue(targetsItem.ID)
								targets.IsPageable = types.BoolPointerValue(targetsItem.IsPageable)
								targets.Name = types.StringPointerValue(targetsItem.Name)
								targets.TeamID = types.StringPointerValue(targetsItem.TeamID)
								targets.Type = types.StringPointerValue(targetsItem.Type)
								if targetsCount+1 > len(steps.Targets) {
									steps.Targets = append(steps.Targets, targets)
								} else {
									steps.Targets[targetsCount].ID = targets.ID
									steps.Targets[targetsCount].IsPageable = targets.IsPageable
									steps.Targets[targetsCount].Name = targets.Name
									steps.Targets[targetsCount].TeamID = targets.TeamID
									steps.Targets[targetsCount].Type = targets.Type
								}
							}
						}
						steps.Timeout = types.StringPointerValue(stepsItem.Timeout)
						if stepsCount+1 > len(notificationPriorityPolicies.Steps) {
							notificationPriorityPolicies.Steps = append(notificationPriorityPolicies.Steps, steps)
						} else {
							notificationPriorityPolicies.Steps[stepsCount].DistributionType = steps.DistributionType
							notificationPriorityPolicies.Steps[stepsCount].ID = steps.ID
							notificationPriorityPolicies.Steps[stepsCount].NextTargetForRoundRobin = steps.NextTargetForRoundRobin
							notificationPriorityPolicies.Steps[stepsCount].ParentPosition = steps.ParentPosition
							notificationPriorityPolicies.Steps[stepsCount].Position = steps.Position
							notificationPriorityPolicies.Steps[stepsCount].Priorities = steps.Priorities
							notificationPriorityPolicies.Steps[stepsCount].Targets = steps.Targets
							notificationPriorityPolicies.Steps[stepsCount].Timeout = steps.Timeout
						}
					}
				}
				if notificationPriorityPoliciesCount+1 > len(r.NotificationPriorityPolicies) {
					r.NotificationPriorityPolicies = append(r.NotificationPriorityPolicies, notificationPriorityPolicies)
				} else {
					r.NotificationPriorityPolicies[notificationPriorityPoliciesCount].HandoffStep = notificationPriorityPolicies.HandoffStep
					r.NotificationPriorityPolicies[notificationPriorityPoliciesCount].NotificationPriority = notificationPriorityPolicies.NotificationPriority
					r.NotificationPriorityPolicies[notificationPriorityPoliciesCount].Repetitions = notificationPriorityPolicies.Repetitions
					r.NotificationPriorityPolicies[notificationPriorityPoliciesCount].Steps = notificationPriorityPolicies.Steps
				}
			}
		}
		r.Repetitions = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Repetitions))
		r.StepStrategy = types.StringPointerValue(resp.StepStrategy)
		r.Steps = []tfTypes.CreateTeamEscalationPolicyStep{}
		if len(r.Steps) > len(resp.Steps) {
			r.Steps = r.Steps[:len(resp.Steps)]
		}
		for stepsCount1, stepsItem1 := range resp.Steps {
			var steps1 tfTypes.CreateTeamEscalationPolicyStep
			steps1.DistributionType = types.StringPointerValue(stepsItem1.DistributionType)
			steps1.ID = types.StringPointerValue(stepsItem1.ID)
			if stepsItem1.NextTargetForRoundRobin == nil {
				steps1.NextTargetForRoundRobin = nil
			} else {
				steps1.NextTargetForRoundRobin = &tfTypes.NullableSignalsAPITargetEntity{}
				steps1.NextTargetForRoundRobin.ID = types.StringPointerValue(stepsItem1.NextTargetForRoundRobin.ID)
				steps1.NextTargetForRoundRobin.IsPageable = types.BoolPointerValue(stepsItem1.NextTargetForRoundRobin.IsPageable)
				steps1.NextTargetForRoundRobin.Name = types.StringPointerValue(stepsItem1.NextTargetForRoundRobin.Name)
				steps1.NextTargetForRoundRobin.TeamID = types.StringPointerValue(stepsItem1.NextTargetForRoundRobin.TeamID)
				steps1.NextTargetForRoundRobin.Type = types.StringPointerValue(stepsItem1.NextTargetForRoundRobin.Type)
			}
			steps1.ParentPosition = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(stepsItem1.ParentPosition))
			steps1.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(stepsItem1.Position))
			if stepsItem1.Priorities != nil {
				steps1.Priorities = make([]types.String, 0, len(stepsItem1.Priorities))
				for _, v := range stepsItem1.Priorities {
					steps1.Priorities = append(steps1.Priorities, types.StringValue(v))
				}
			}
			steps1.Targets = []tfTypes.SignalsAPITargetEntity1{}
			for targetsCount1, targetsItem1 := range stepsItem1.Targets {
				var targets1 tfTypes.SignalsAPITargetEntity1
				targets1.ID = types.StringPointerValue(targetsItem1.ID)
				targets1.IsPageable = types.BoolPointerValue(targetsItem1.IsPageable)
				targets1.Name = types.StringPointerValue(targetsItem1.Name)
				targets1.TeamID = types.StringPointerValue(targetsItem1.TeamID)
				targets1.Type = types.StringPointerValue(targetsItem1.Type)
				if targetsCount1+1 > len(steps1.Targets) {
					steps1.Targets = append(steps1.Targets, targets1)
				} else {
					steps1.Targets[targetsCount1].ID = targets1.ID
					steps1.Targets[targetsCount1].IsPageable = targets1.IsPageable
					steps1.Targets[targetsCount1].Name = targets1.Name
					steps1.Targets[targetsCount1].TeamID = targets1.TeamID
					steps1.Targets[targetsCount1].Type = targets1.Type
				}
			}
			steps1.Timeout = types.StringPointerValue(stepsItem1.Timeout)
			if stepsCount1+1 > len(r.Steps) {
				r.Steps = append(r.Steps, steps1)
			} else {
				r.Steps[stepsCount1].DistributionType = steps1.DistributionType
				r.Steps[stepsCount1].ID = steps1.ID
				r.Steps[stepsCount1].NextTargetForRoundRobin = steps1.NextTargetForRoundRobin
				r.Steps[stepsCount1].ParentPosition = steps1.ParentPosition
				r.Steps[stepsCount1].Position = steps1.Position
				r.Steps[stepsCount1].Priorities = steps1.Priorities
				r.Steps[stepsCount1].Targets = steps1.Targets
				r.Steps[stepsCount1].Timeout = steps1.Timeout
			}
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}
