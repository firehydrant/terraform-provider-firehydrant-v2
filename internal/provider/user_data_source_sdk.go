// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *UserDataSourceModel) RefreshFromSharedUser(ctx context.Context, resp *shared.User) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.Email = types.StringPointerValue(resp.Email)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.SignalsEnabledNotificationTypes != nil {
			r.SignalsEnabledNotificationTypes = make([]types.String, 0, len(resp.SignalsEnabledNotificationTypes))
			for _, v := range resp.SignalsEnabledNotificationTypes {
				r.SignalsEnabledNotificationTypes = append(r.SignalsEnabledNotificationTypes, types.StringValue(v))
			}
		}
		if resp.SignalsNotificationPolicyCompliance != nil {
			r.SignalsNotificationPolicyCompliance = []tfTypes.SignalsAPINotificationPolicyItemCompliance{}
			if len(r.SignalsNotificationPolicyCompliance) > len(resp.SignalsNotificationPolicyCompliance) {
				r.SignalsNotificationPolicyCompliance = r.SignalsNotificationPolicyCompliance[:len(resp.SignalsNotificationPolicyCompliance)]
			}
			for signalsNotificationPolicyComplianceCount, signalsNotificationPolicyComplianceItem := range resp.SignalsNotificationPolicyCompliance {
				var signalsNotificationPolicyCompliance tfTypes.SignalsAPINotificationPolicyItemCompliance
				signalsNotificationPolicyCompliance.IsCompliant = types.BoolPointerValue(signalsNotificationPolicyComplianceItem.IsCompliant)
				signalsNotificationPolicyCompliance.NotificationPolicyItemID = types.StringPointerValue(signalsNotificationPolicyComplianceItem.NotificationPolicyItemID)
				if signalsNotificationPolicyComplianceCount+1 > len(r.SignalsNotificationPolicyCompliance) {
					r.SignalsNotificationPolicyCompliance = append(r.SignalsNotificationPolicyCompliance, signalsNotificationPolicyCompliance)
				} else {
					r.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount].IsCompliant = signalsNotificationPolicyCompliance.IsCompliant
					r.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount].NotificationPolicyItemID = signalsNotificationPolicyCompliance.NotificationPolicyItemID
				}
			}
		}
		r.SlackLinked = types.BoolPointerValue(resp.SlackLinked)
		r.SlackUserID = types.StringPointerValue(resp.SlackUserID)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *UserDataSourceModel) ToOperationsGetUserRequest(ctx context.Context) (*operations.GetUserRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetUserRequest{
		ID: id,
	}

	return &out, diags
}
