// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
)

func (r *SeverityMatrixConditionResourceModel) ToOperationsDeleteSeverityMatrixConditionRequest(ctx context.Context) (*operations.DeleteSeverityMatrixConditionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var conditionID string
	conditionID = r.ID.ValueString()

	out := operations.DeleteSeverityMatrixConditionRequest{
		ConditionID: conditionID,
	}

	return &out, diags
}

func (r *SeverityMatrixConditionResourceModel) ToOperationsGetSeverityMatrixConditionRequest(ctx context.Context) (*operations.GetSeverityMatrixConditionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var conditionID string
	conditionID = r.ID.ValueString()

	out := operations.GetSeverityMatrixConditionRequest{
		ConditionID: conditionID,
	}

	return &out, diags
}

func (r *SeverityMatrixConditionResourceModel) ToOperationsUpdateSeverityMatrixConditionRequest(ctx context.Context) (*operations.UpdateSeverityMatrixConditionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var conditionID string
	conditionID = r.ID.ValueString()

	updateSeverityMatrixCondition, updateSeverityMatrixConditionDiags := r.ToSharedUpdateSeverityMatrixCondition(ctx)
	diags.Append(updateSeverityMatrixConditionDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateSeverityMatrixConditionRequest{
		ConditionID:                   conditionID,
		UpdateSeverityMatrixCondition: *updateSeverityMatrixCondition,
	}

	return &out, diags
}

func (r *SeverityMatrixConditionResourceModel) ToSharedCreateSeverityMatrixCondition(ctx context.Context) (*shared.CreateSeverityMatrixCondition, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	position := new(int)
	if !r.Position.IsUnknown() && !r.Position.IsNull() {
		*position = int(r.Position.ValueInt32())
	} else {
		position = nil
	}
	out := shared.CreateSeverityMatrixCondition{
		Name:     name,
		Position: position,
	}

	return &out, diags
}

func (r *SeverityMatrixConditionResourceModel) ToSharedUpdateSeverityMatrixCondition(ctx context.Context) (*shared.UpdateSeverityMatrixCondition, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	position := new(int)
	if !r.Position.IsUnknown() && !r.Position.IsNull() {
		*position = int(r.Position.ValueInt32())
	} else {
		position = nil
	}
	out := shared.UpdateSeverityMatrixCondition{
		Name:     name,
		Position: position,
	}

	return &out, diags
}
