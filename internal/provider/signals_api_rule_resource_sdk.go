// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SignalsAPIRuleResourceModel) RefreshFromSharedSignalsAPIRule(ctx context.Context, resp *shared.SignalsAPIRule) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreateIncidentConditionWhen = types.StringPointerValue(resp.CreateIncidentConditionWhen)
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.CreatedBy == nil {
			r.CreatedBy = nil
		} else {
			r.CreatedBy = &tfTypes.NullableAuthor{}
			r.CreatedBy.Email = types.StringPointerValue(resp.CreatedBy.Email)
			r.CreatedBy.ID = types.StringPointerValue(resp.CreatedBy.ID)
			r.CreatedBy.Name = types.StringPointerValue(resp.CreatedBy.Name)
			r.CreatedBy.Source = types.StringPointerValue(resp.CreatedBy.Source)
		}
		r.DeduplicationExpiry = types.StringPointerValue(resp.DeduplicationExpiry)
		r.Expression = types.StringPointerValue(resp.Expression)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.IncidentType == nil {
			r.IncidentType = nil
		} else {
			r.IncidentType = &tfTypes.NullableSuccinct{}
			r.IncidentType.ID = types.StringPointerValue(resp.IncidentType.ID)
			r.IncidentType.Name = types.StringPointerValue(resp.IncidentType.Name)
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.NotificationPriorityOverride = types.StringPointerValue(resp.NotificationPriorityOverride)
		if resp.Target == nil {
			r.Target = nil
		} else {
			r.Target = &tfTypes.NullableSignalsAPITarget{}
			r.Target.ID = types.StringPointerValue(resp.Target.ID)
			r.Target.IsPageable = types.BoolPointerValue(resp.Target.IsPageable)
			r.Target.Name = types.StringPointerValue(resp.Target.Name)
			r.Target.TeamID = types.StringPointerValue(resp.Target.TeamID)
			r.Target.Type = types.StringPointerValue(resp.Target.Type)
		}
		r.TeamID = types.StringPointerValue(resp.TeamID)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *SignalsAPIRuleResourceModel) ToOperationsCreateTeamSignalRuleRequest(ctx context.Context) (*operations.CreateTeamSignalRuleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.TeamID.ValueString()

	createTeamSignalRule, createTeamSignalRuleDiags := r.ToSharedCreateTeamSignalRule(ctx)
	diags.Append(createTeamSignalRuleDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateTeamSignalRuleRequest{
		TeamID:               teamID,
		CreateTeamSignalRule: *createTeamSignalRule,
	}

	return &out, diags
}

func (r *SignalsAPIRuleResourceModel) ToOperationsGetTeamSignalRuleRequest(ctx context.Context) (*operations.GetTeamSignalRuleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.TeamID.ValueString()

	var id string
	id = r.ID.ValueString()

	out := operations.GetTeamSignalRuleRequest{
		TeamID: teamID,
		ID:     id,
	}

	return &out, diags
}

func (r *SignalsAPIRuleResourceModel) ToOperationsUpdateTeamSignalRuleRequest(ctx context.Context) (*operations.UpdateTeamSignalRuleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.TeamID.ValueString()

	var id string
	id = r.ID.ValueString()

	updateTeamSignalRule, updateTeamSignalRuleDiags := r.ToSharedUpdateTeamSignalRule(ctx)
	diags.Append(updateTeamSignalRuleDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateTeamSignalRuleRequest{
		TeamID:               teamID,
		ID:                   id,
		UpdateTeamSignalRule: *updateTeamSignalRule,
	}

	return &out, diags
}

func (r *SignalsAPIRuleResourceModel) ToSharedCreateTeamSignalRule(ctx context.Context) (*shared.CreateTeamSignalRule, diag.Diagnostics) {
	var diags diag.Diagnostics

	createIncidentConditionWhen := new(string)
	if !r.CreateIncidentConditionWhen.IsUnknown() && !r.CreateIncidentConditionWhen.IsNull() {
		*createIncidentConditionWhen = r.CreateIncidentConditionWhen.ValueString()
	} else {
		createIncidentConditionWhen = nil
	}
	deduplicationExpiry := new(string)
	if !r.DeduplicationExpiry.IsUnknown() && !r.DeduplicationExpiry.IsNull() {
		*deduplicationExpiry = r.DeduplicationExpiry.ValueString()
	} else {
		deduplicationExpiry = nil
	}
	var expression string
	expression = r.Expression.ValueString()

	incidentTypeID := new(string)
	if !r.IncidentTypeID.IsUnknown() && !r.IncidentTypeID.IsNull() {
		*incidentTypeID = r.IncidentTypeID.ValueString()
	} else {
		incidentTypeID = nil
	}
	var name string
	name = r.Name.ValueString()

	notificationPriorityOverride := new(string)
	if !r.NotificationPriorityOverride.IsUnknown() && !r.NotificationPriorityOverride.IsNull() {
		*notificationPriorityOverride = r.NotificationPriorityOverride.ValueString()
	} else {
		notificationPriorityOverride = nil
	}
	var targetID string
	targetID = r.TargetID.ValueString()

	var targetType string
	targetType = r.TargetType.ValueString()

	out := shared.CreateTeamSignalRule{
		CreateIncidentConditionWhen:  createIncidentConditionWhen,
		DeduplicationExpiry:          deduplicationExpiry,
		Expression:                   expression,
		IncidentTypeID:               incidentTypeID,
		Name:                         name,
		NotificationPriorityOverride: notificationPriorityOverride,
		TargetID:                     targetID,
		TargetType:                   targetType,
	}

	return &out, diags
}

func (r *SignalsAPIRuleResourceModel) ToSharedUpdateTeamSignalRule(ctx context.Context) (*shared.UpdateTeamSignalRule, diag.Diagnostics) {
	var diags diag.Diagnostics

	createIncidentConditionWhen := new(string)
	if !r.CreateIncidentConditionWhen.IsUnknown() && !r.CreateIncidentConditionWhen.IsNull() {
		*createIncidentConditionWhen = r.CreateIncidentConditionWhen.ValueString()
	} else {
		createIncidentConditionWhen = nil
	}
	deduplicationExpiry := new(string)
	if !r.DeduplicationExpiry.IsUnknown() && !r.DeduplicationExpiry.IsNull() {
		*deduplicationExpiry = r.DeduplicationExpiry.ValueString()
	} else {
		deduplicationExpiry = nil
	}
	expression := new(string)
	if !r.Expression.IsUnknown() && !r.Expression.IsNull() {
		*expression = r.Expression.ValueString()
	} else {
		expression = nil
	}
	incidentTypeID := new(string)
	if !r.IncidentTypeID.IsUnknown() && !r.IncidentTypeID.IsNull() {
		*incidentTypeID = r.IncidentTypeID.ValueString()
	} else {
		incidentTypeID = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	notificationPriorityOverride := new(string)
	if !r.NotificationPriorityOverride.IsUnknown() && !r.NotificationPriorityOverride.IsNull() {
		*notificationPriorityOverride = r.NotificationPriorityOverride.ValueString()
	} else {
		notificationPriorityOverride = nil
	}
	targetID := new(string)
	if !r.TargetID.IsUnknown() && !r.TargetID.IsNull() {
		*targetID = r.TargetID.ValueString()
	} else {
		targetID = nil
	}
	targetType := new(string)
	if !r.TargetType.IsUnknown() && !r.TargetType.IsNull() {
		*targetType = r.TargetType.ValueString()
	} else {
		targetType = nil
	}
	out := shared.UpdateTeamSignalRule{
		CreateIncidentConditionWhen:  createIncidentConditionWhen,
		DeduplicationExpiry:          deduplicationExpiry,
		Expression:                   expression,
		IncidentTypeID:               incidentTypeID,
		Name:                         name,
		NotificationPriorityOverride: notificationPriorityOverride,
		TargetID:                     targetID,
		TargetType:                   targetType,
	}

	return &out, diags
}
