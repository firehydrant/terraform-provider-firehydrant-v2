// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SignalsAPIEmailTargetEntityDataSource{}
var _ datasource.DataSourceWithConfigure = &SignalsAPIEmailTargetEntityDataSource{}

func NewSignalsAPIEmailTargetEntityDataSource() datasource.DataSource {
	return &SignalsAPIEmailTargetEntityDataSource{}
}

// SignalsAPIEmailTargetEntityDataSource is the data source implementation.
type SignalsAPIEmailTargetEntityDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// SignalsAPIEmailTargetEntityDataSourceModel describes the data model.
type SignalsAPIEmailTargetEntityDataSourceModel struct {
	AllowedSenders       []types.String                          `tfsdk:"allowed_senders"`
	CreatedAt            types.String                            `tfsdk:"created_at"`
	CreatedBy            *tfTypes.NullableAuthorEntity           `tfsdk:"created_by"`
	Description          types.String                            `tfsdk:"description"`
	Email                types.String                            `tfsdk:"email"`
	ID                   types.String                            `tfsdk:"id"`
	LevelCel             types.String                            `tfsdk:"level_cel"`
	Name                 types.String                            `tfsdk:"name"`
	RuleMatchingStrategy types.String                            `tfsdk:"rule_matching_strategy"`
	Rules                []types.String                          `tfsdk:"rules"`
	Slug                 types.String                            `tfsdk:"slug"`
	StatusCel            types.String                            `tfsdk:"status_cel"`
	Target               *tfTypes.NullableSignalsAPITargetEntity `tfsdk:"target"`
	TeamID               types.String                            `tfsdk:"team_id"`
	UpdatedAt            types.String                            `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *SignalsAPIEmailTargetEntityDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_signals_api_email_target_entity"
}

// Schema defines the schema for the data source.
func (r *SignalsAPIEmailTargetEntityDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SignalsAPIEmailTargetEntity DataSource",

		Attributes: map[string]schema.Attribute{
			"allowed_senders": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"created_by": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"email": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"source": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"email": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Required: true,
			},
			"level_cel": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"rule_matching_strategy": schema.StringAttribute{
				Computed: true,
			},
			"rules": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"slug": schema.StringAttribute{
				Computed: true,
			},
			"status_cel": schema.StringAttribute{
				Computed: true,
			},
			"target": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"is_pageable": schema.BoolAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"team_id": schema.StringAttribute{
						Computed: true,
					},
					"type": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"team_id": schema.StringAttribute{
				Computed:    true,
				Description: `The team ID that the email target belongs to, if applicable`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *SignalsAPIEmailTargetEntityDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SignalsAPIEmailTargetEntityDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SignalsAPIEmailTargetEntityDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetSignalsEmailTargetRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Signals.GetSignalsEmailTarget(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SignalsAPIEmailTargetEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSignalsAPIEmailTargetEntity(ctx, res.SignalsAPIEmailTargetEntity)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
