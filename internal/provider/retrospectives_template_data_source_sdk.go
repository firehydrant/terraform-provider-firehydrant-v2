// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *RetrospectivesTemplateDataSourceModel) RefreshFromSharedRetrospectivesTemplate(ctx context.Context, resp *shared.RetrospectivesTemplate) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Description = types.StringPointerValue(resp.Description)
		if resp.Fields != nil {
			r.Fields = []tfTypes.RetrospectivesField{}
			if len(r.Fields) > len(resp.Fields) {
				r.Fields = r.Fields[:len(resp.Fields)]
			}
			for fieldsCount, fieldsItem := range resp.Fields {
				var fields tfTypes.RetrospectivesField
				fields.HelpText = types.StringPointerValue(fieldsItem.HelpText)
				fields.ID = types.StringPointerValue(fieldsItem.ID)
				fields.IsRequired = types.BoolPointerValue(fieldsItem.IsRequired)
				fields.Label = types.StringPointerValue(fieldsItem.Label)
				if fieldsItem.PermissibleValues != nil {
					fields.PermissibleValues = make([]types.String, 0, len(fieldsItem.PermissibleValues))
					for _, v := range fieldsItem.PermissibleValues {
						fields.PermissibleValues = append(fields.PermissibleValues, types.StringValue(v))
					}
				}
				if fieldsItem.Schema != nil {
					fields.Schema = make([]types.String, 0, len(fieldsItem.Schema))
					for _, v := range fieldsItem.Schema {
						fields.Schema = append(fields.Schema, types.StringValue(v))
					}
				}
				fields.Type = types.StringPointerValue(fieldsItem.Type)
				if fieldsCount+1 > len(r.Fields) {
					r.Fields = append(r.Fields, fields)
				} else {
					r.Fields[fieldsCount].HelpText = fields.HelpText
					r.Fields[fieldsCount].ID = fields.ID
					r.Fields[fieldsCount].IsRequired = fields.IsRequired
					r.Fields[fieldsCount].Label = fields.Label
					r.Fields[fieldsCount].PermissibleValues = fields.PermissibleValues
					r.Fields[fieldsCount].Schema = fields.Schema
					r.Fields[fieldsCount].Type = fields.Type
				}
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.IsDefault = types.BoolPointerValue(resp.IsDefault)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Sections != nil {
			r.Sections = []tfTypes.RetrospectivesTemplateIncidentSection{}
			if len(r.Sections) > len(resp.Sections) {
				r.Sections = r.Sections[:len(resp.Sections)]
			}
			for sectionsCount, sectionsItem := range resp.Sections {
				var sections tfTypes.RetrospectivesTemplateIncidentSection
				if sectionsItem.Elements != nil {
					sections.Elements = make([]types.String, 0, len(sectionsItem.Elements))
					for _, v := range sectionsItem.Elements {
						sections.Elements = append(sections.Elements, types.StringValue(v))
					}
				}
				sections.Slug = types.StringPointerValue(sectionsItem.Slug)
				if sectionsCount+1 > len(r.Sections) {
					r.Sections = append(r.Sections, sections)
				} else {
					r.Sections[sectionsCount].Elements = sections.Elements
					r.Sections[sectionsCount].Slug = sections.Slug
				}
			}
		}
	}

	return diags
}

func (r *RetrospectivesTemplateDataSourceModel) ToOperationsGetRetrospectiveTemplateRequest(ctx context.Context) (*operations.GetRetrospectiveTemplateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var retrospectiveTemplateID string
	retrospectiveTemplateID = r.ID.ValueString()

	out := operations.GetRetrospectiveTemplateRequest{
		RetrospectiveTemplateID: retrospectiveTemplateID,
	}

	return &out, diags
}
