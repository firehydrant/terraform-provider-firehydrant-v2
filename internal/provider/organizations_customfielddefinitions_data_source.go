// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &OrganizationsCustomFieldDefinitionsDataSource{}
var _ datasource.DataSourceWithConfigure = &OrganizationsCustomFieldDefinitionsDataSource{}

func NewOrganizationsCustomFieldDefinitionsDataSource() datasource.DataSource {
	return &OrganizationsCustomFieldDefinitionsDataSource{}
}

// OrganizationsCustomFieldDefinitionsDataSource is the data source implementation.
type OrganizationsCustomFieldDefinitionsDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// OrganizationsCustomFieldDefinitionsDataSourceModel describes the data model.
type OrganizationsCustomFieldDefinitionsDataSourceModel struct {
	Description           types.String   `tfsdk:"description"`
	DisplayName           types.String   `tfsdk:"display_name"`
	FieldID               types.String   `tfsdk:"field_id"`
	FieldType             types.String   `tfsdk:"field_type"`
	PermissibleValues     []types.String `tfsdk:"permissible_values"`
	Required              types.Bool     `tfsdk:"required"`
	RequiredAtMilestoneID types.String   `tfsdk:"required_at_milestone_id"`
	Slug                  types.String   `tfsdk:"slug"`
}

// Metadata returns the data source type name.
func (r *OrganizationsCustomFieldDefinitionsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_organizations_custom_field_definitions"
}

// Schema defines the schema for the data source.
func (r *OrganizationsCustomFieldDefinitionsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "OrganizationsCustomFieldDefinitions DataSource",

		Attributes: map[string]schema.Attribute{
			"description": schema.StringAttribute{
				Computed: true,
			},
			"display_name": schema.StringAttribute{
				Computed: true,
			},
			"field_id": schema.StringAttribute{
				Computed: true,
			},
			"field_type": schema.StringAttribute{
				Computed: true,
			},
			"permissible_values": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"required": schema.BoolAttribute{
				Computed: true,
			},
			"required_at_milestone_id": schema.StringAttribute{
				Computed:    true,
				Description: `The milestone at which this field is required, if ` + "`" + `required` + "`" + ` is set to ` + "`" + `true` + "`" + `. When null, a required field is always required.`,
			},
			"slug": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *OrganizationsCustomFieldDefinitionsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *OrganizationsCustomFieldDefinitionsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *OrganizationsCustomFieldDefinitionsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	res, err := r.client.IncidentSettings.ListCustomFieldDefinitions(ctx)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
