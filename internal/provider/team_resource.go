// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &TeamResource{}
var _ resource.ResourceWithImportState = &TeamResource{}

func NewTeamResource() resource.Resource {
	return &TeamResource{}
}

// TeamResource defines the resource implementation.
type TeamResource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// TeamResourceModel describes the resource data model.
type TeamResourceModel struct {
	CreatedAt                      types.String                                         `tfsdk:"created_at"`
	CreatedBy                      *tfTypes.NullableAuthor                              `tfsdk:"created_by"`
	DefaultSignalsEscalationPolicy *tfTypes.NullableSuccinct                            `tfsdk:"default_signals_escalation_policy"`
	Description                    types.String                                         `tfsdk:"description"`
	Functionalities                []tfTypes.FunctionalityLite                          `tfsdk:"functionalities"`
	ID                             types.String                                         `tfsdk:"id"`
	InSupportHours                 types.Bool                                           `tfsdk:"in_support_hours"`
	InviteEmails                   []types.String                                       `tfsdk:"invite_emails"`
	Memberships                    []tfTypes.Membership                                 `tfsdk:"memberships"`
	MembershipsInput               []tfTypes.CreateTeamMembershipsInput                 `tfsdk:"memberships_input"`
	MsTeamsChannel                 *tfTypes.NullableIntegrationsMicrosoftTeamsV2Channel `tfsdk:"ms_teams_channel"`
	MsTeamsChannelInput            *tfTypes.CreateTeamMsTeamsChannelInput               `tfsdk:"ms_teams_channel_input"`
	Name                           types.String                                         `tfsdk:"name"`
	OwnedChecklistTemplates        []tfTypes.ChecklistTemplate                          `tfsdk:"owned_checklist_templates"`
	OwnedFunctionalities           []tfTypes.FunctionalityLite                          `tfsdk:"owned_functionalities"`
	OwnedRunbooks                  []tfTypes.SlimRunbook                                `tfsdk:"owned_runbooks"`
	OwnedServices                  []tfTypes.ServiceLite                                `tfsdk:"owned_services"`
	RespondingServices             []tfTypes.ServiceLite                                `tfsdk:"responding_services"`
	Services                       []tfTypes.ServiceLite                                `tfsdk:"services"`
	SignalsIcalURL                 types.String                                         `tfsdk:"signals_ical_url"`
	SlackChannel                   *tfTypes.NullableIntegrationsSlackSlackChannel       `tfsdk:"slack_channel"`
	SlackChannelID                 types.String                                         `tfsdk:"slack_channel_id"`
	Slug                           types.String                                         `tfsdk:"slug"`
	UpdatedAt                      types.String                                         `tfsdk:"updated_at"`
}

func (r *TeamResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_team"
}

func (r *TeamResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Team Resource",
		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"created_by": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"email": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"source": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"default_signals_escalation_policy": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"description": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"functionalities": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"active_incidents": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `List of active incident guids`,
						},
						"alert_on_add": schema.BoolAttribute{
							Computed: true,
						},
						"auto_add_responding_team": schema.BoolAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"labels": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `An object of label key and values`,
						},
						"links": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"href_url": schema.StringAttribute{
										Computed: true,
									},
									"icon_url": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							Description: `List of links attached to this functionality.`,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"owner": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"created_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"in_support_hours": schema.BoolAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"signals_ical_url": schema.StringAttribute{
									Computed: true,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
						},
						"slug": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"updated_by": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"email": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"source": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"in_support_hours": schema.BoolAttribute{
				Computed: true,
			},
			"invite_emails": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `A list of email addresses to invite to join the organization and automatically add to this team. If an email already has a pending invitation, the team will be added to their existing invitation.`,
			},
			"memberships": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"default_incident_role": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"discarded_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"summary": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
							Description: `IncidentRole model`,
						},
						"schedule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"discarded": schema.BoolAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"integration": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"signals_on_call_schedule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"user": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"email": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"signals_enabled_notification_types": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"signals_notification_policy_compliance": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"is_compliant": schema.BoolAttribute{
												Computed: true,
											},
											"notification_policy_item_id": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
								"slack_linked": schema.BoolAttribute{
									Computed: true,
								},
								"slack_user_id": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
							Description: `User model`,
						},
					},
				},
			},
			"memberships_input": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"incident_role_id": schema.StringAttribute{
							Optional:    true,
							Description: `An incident role ID that the user will automatically assigned if this team is assigned to an incident`,
						},
						"schedule_id": schema.StringAttribute{
							Optional:    true,
							Description: `The ID of a third-party on-call schedule to add to the team, allowing you to specify that whoever is on call for this schedule when the team is assigned to an incident gets added to the incident and optionally assigned to the configured incident role. This parameter is mutually exclusive with user_id and signals_on_call_schedule_id.`,
						},
						"signals_on_call_schedule_id": schema.StringAttribute{
							Optional:    true,
							Description: `The ID of a Signals on-call schedule to add to the team, allowing you to specify that whoever is on call for this schedule when the team is assigned to an incident gets added to the incident and optionally assigned to the configured incident role.. This parameter is mutually exclusive with user_id and schedule_id.`,
						},
						"user_id": schema.StringAttribute{
							Optional:    true,
							Description: `The ID of a user to add to the team. This parameter is mutually exclusive with schedule_id and signals_on_call_schedule_id.`,
						},
					},
				},
			},
			"ms_teams_channel": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"channel_id": schema.StringAttribute{
						Computed: true,
					},
					"channel_name": schema.StringAttribute{
						Computed: true,
					},
					"channel_url": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"incident": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"active": schema.BoolAttribute{
								Computed: true,
							},
							"ai_incident_summary": schema.StringAttribute{
								Computed: true,
							},
							"channel_id": schema.StringAttribute{
								Computed: true,
							},
							"channel_name": schema.StringAttribute{
								Computed: true,
							},
							"channel_reference": schema.StringAttribute{
								Computed: true,
							},
							"channel_status": schema.StringAttribute{
								Computed:    true,
								Description: `inoperative: 0, operational: 1, archived: 2`,
							},
							"conference_bridges": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"attachments": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{},
											},
											Description: `A list of objects attached to this item. Can be one of: Link, CustomerSupportIssue, or GenericAttachment`,
										},
										"has_translated_transcripts": schema.BoolAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"language_codes": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `A list of language codes that have translated transcripts for this conference bridge`,
										},
										"previous_host_assignment": schema.StringAttribute{
											Computed: true,
										},
										"transcription_status": schema.StringAttribute{
											Computed: true,
										},
										"transcription_sub_code": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"context_object": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"context_description": schema.StringAttribute{
										Computed: true,
									},
									"context_tag": schema.StringAttribute{
										Computed: true,
									},
									"object_id": schema.StringAttribute{
										Computed: true,
									},
									"object_type": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"conversations": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"channel": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"name": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"comments_url": schema.StringAttribute{
											Computed: true,
										},
										"field": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"resource_class": schema.StringAttribute{
											Computed: true,
										},
										"resource_id": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"created_at": schema.StringAttribute{
								Computed:    true,
								Description: `The time the incident was opened`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"created_by": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"email": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"source": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"current_milestone": schema.StringAttribute{
								Computed:    true,
								Description: `The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.`,
							},
							"custom_fields": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"description": schema.StringAttribute{
											Computed: true,
										},
										"display_name": schema.StringAttribute{
											Computed: true,
										},
										"field_id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
										"value": schema.StringAttribute{
											Computed: true,
										},
										"value_array": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
										"value_string": schema.StringAttribute{
											Computed: true,
										},
										"value_type": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"customer_impact_summary": schema.StringAttribute{
								Computed: true,
							},
							"customers_impacted": schema.Int32Attribute{
								Computed: true,
							},
							"description": schema.StringAttribute{
								Computed: true,
							},
							"discarded_at": schema.StringAttribute{
								Computed:    true,
								Description: `The time the incident was archived`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"environments": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"field_requirements": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"field_id": schema.StringAttribute{
											Computed:    true,
											Description: `A unique identifier for the field.`,
										},
										"required_at_milestone_id": schema.StringAttribute{
											Computed:    true,
											Description: `The milestone at which this field is required. If null, this field is always required.`,
										},
									},
								},
							},
							"functionalities": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"id": schema.StringAttribute{
								Computed:    true,
								Description: `UUID of the Incident`,
							},
							"impacts": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"condition": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"position": schema.Int32Attribute{
													Computed:    true,
													Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
												},
											},
											Description: `SeverityMatrix_Condition model`,
										},
										"conversations": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"channel": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"name": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"comments_url": schema.StringAttribute{
														Computed: true,
													},
													"field": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"resource_class": schema.StringAttribute{
														Computed: true,
													},
													"resource_id": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"impact": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"incident_channels": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"icon_url": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
										"source_id": schema.StringAttribute{
											Computed: true,
										},
										"source_name": schema.StringAttribute{
											Computed: true,
										},
										"status": schema.StringAttribute{
											Computed: true,
										},
										"url": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"incident_tickets": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"assignees": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"source": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
										"attachments": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{},
											},
											Description: `A list of objects attached to this item. Can be one of: Link, CustomerSupportIssue, or GenericAttachment`,
										},
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"created_by": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"due_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"incident_current_milestone": schema.StringAttribute{
											Computed:    true,
											Description: `Milestone of incident that this ticket is related to`,
										},
										"incident_id": schema.StringAttribute{
											Computed:    true,
											Description: `ID of incident that this ticket is related to`,
										},
										"incident_name": schema.StringAttribute{
											Computed:    true,
											Description: `Name of incident that this ticket is related to`,
										},
										"link": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"deletable": schema.BoolAttribute{
													Computed:    true,
													Description: `Link can be deleted`,
												},
												"display_text": schema.StringAttribute{
													Computed: true,
												},
												"editable": schema.BoolAttribute{
													Computed:    true,
													Description: `Link can be edited`,
												},
												"href_url": schema.StringAttribute{
													Computed: true,
												},
												"icon_url": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"type": schema.StringAttribute{
													Computed: true,
												},
											},
											Description: `Attachments_Link model`,
										},
										"priority": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"created_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"position": schema.Int32Attribute{
													Computed: true,
												},
												"updated_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
											},
											Description: `Ticketing_Priority model`,
										},
										"state": schema.StringAttribute{
											Computed: true,
										},
										"summary": schema.StringAttribute{
											Computed: true,
										},
										"sync_error_message": schema.StringAttribute{
											Computed:    true,
											Description: `Error message from syncing this ticket to integrations`,
										},
										"tag_list": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
										"task_id": schema.StringAttribute{
											Computed:    true,
											Description: `ID of task that this ticket is related to`,
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
									},
								},
							},
							"incident_type": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"incident_url": schema.StringAttribute{
								Computed: true,
							},
							"labels": schema.SingleNestedAttribute{
								Computed:    true,
								Description: `A key/value of labels`,
							},
							"last_note": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"body": schema.StringAttribute{
										Computed: true,
									},
									"conversations": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"channel": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"comments_url": schema.StringAttribute{
													Computed: true,
												},
												"field": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"resource_class": schema.StringAttribute{
													Computed: true,
												},
												"resource_id": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"created_at": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"status_pages": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"display_name": schema.StringAttribute{
													Computed: true,
												},
												"external_id": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"integration": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"display_name": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"integration_name": schema.StringAttribute{
															Computed: true,
														},
														"integration_slug": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"url": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
								},
								Description: `Event_Note model`,
							},
							"last_update": schema.StringAttribute{
								Computed: true,
							},
							"lifecycle_measurements": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"calculated_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"ends_at_milestone": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
										"starts_at_milestone": schema.StringAttribute{
											Computed: true,
										},
										"value": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"lifecycle_phases": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"description": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"milestones": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"description": schema.StringAttribute{
														Computed: true,
													},
													"duration": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"occurred_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"position": schema.Int32Attribute{
														Computed: true,
													},
													"slug": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"updated_by": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"email": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"source": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
											},
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"position": schema.Int32Attribute{
											Computed: true,
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"milestones": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"duration": schema.StringAttribute{
											Computed:    true,
											Description: `How long the incident spent in this milestones, in ISO 8601 Duration Format. This will be null if the milestone is the incident's current milestone.`,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"occurred_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"type": schema.StringAttribute{
											Computed:    true,
											Description: `The milestone's type. This will be one of the currently configured milestones for the given incident.`,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
									},
								},
								Description: `DEPRECATED: Please use lifecycle phases instead`,
							},
							"monetary_impact": schema.Int32Attribute{
								Computed: true,
							},
							"monetary_impact_cents": schema.Int32Attribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed:    true,
								Description: `Name of the incident`,
							},
							"number": schema.Int32Attribute{
								Computed:    true,
								Description: `Incident number`,
							},
							"organization": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"organization_id": schema.StringAttribute{
								Computed: true,
							},
							"priority": schema.StringAttribute{
								Computed: true,
							},
							"private_id": schema.StringAttribute{
								Computed: true,
							},
							"private_status_page_url": schema.StringAttribute{
								Computed: true,
							},
							"report_id": schema.StringAttribute{
								Computed: true,
							},
							"retro_exports": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{},
								},
								Description: `A list of objects attached to this item. Can be one of: Link, CustomerSupportIssue, or GenericAttachment`,
							},
							"role_assignments": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"incident_role": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"created_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"description": schema.StringAttribute{
													Computed: true,
												},
												"discarded_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"summary": schema.StringAttribute{
													Computed: true,
												},
												"updated_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
											},
											Description: `IncidentRole model`,
										},
										"status": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"user": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"created_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"signals_enabled_notification_types": schema.ListAttribute{
													Computed:    true,
													ElementType: types.StringType,
												},
												"signals_notification_policy_compliance": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"is_compliant": schema.BoolAttribute{
																Computed: true,
															},
															"notification_policy_item_id": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"slack_linked": schema.BoolAttribute{
													Computed: true,
												},
												"slack_user_id": schema.StringAttribute{
													Computed: true,
												},
												"updated_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
											},
											Description: `User model`,
										},
									},
								},
							},
							"services": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"severity": schema.StringAttribute{
								Computed: true,
							},
							"severity_color": schema.StringAttribute{
								Computed: true,
							},
							"severity_condition": schema.StringAttribute{
								Computed: true,
							},
							"severity_condition_object": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"position": schema.Int32Attribute{
										Computed:    true,
										Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
									},
								},
								Description: `SeverityMatrix_Condition model`,
							},
							"severity_impact": schema.StringAttribute{
								Computed: true,
							},
							"severity_impact_object": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"affects_id": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"position": schema.Int32Attribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
								},
								Description: `SeverityMatrix_Impact model`,
							},
							"started_at": schema.StringAttribute{
								Computed:    true,
								Description: `The time the incident started`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"status_pages": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"display_name": schema.StringAttribute{
											Computed: true,
										},
										"external_id": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"integration": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"created_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"display_name": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"integration_name": schema.StringAttribute{
													Computed: true,
												},
												"integration_slug": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"url": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"summary": schema.StringAttribute{
								Computed: true,
							},
							"tag_list": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"team_assignments": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"status": schema.StringAttribute{
											Computed: true,
										},
										"team": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"created_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"created_by": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"email": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"source": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"description": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"in_support_hours": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"signals_ical_url": schema.StringAttribute{
													Computed: true,
												},
												"slug": schema.StringAttribute{
													Computed: true,
												},
												"updated_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
											},
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
									},
								},
							},
							"ticket": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"assignees": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"attachments": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{},
										},
										Description: `A list of objects attached to this item. Can be one of: Link, CustomerSupportIssue, or GenericAttachment`,
									},
									"created_at": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"created_by": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"email": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"source": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"description": schema.StringAttribute{
										Computed: true,
									},
									"due_at": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"incident_current_milestone": schema.StringAttribute{
										Computed:    true,
										Description: `Milestone of incident that this ticket is related to`,
									},
									"incident_id": schema.StringAttribute{
										Computed:    true,
										Description: `ID of incident that this ticket is related to`,
									},
									"incident_name": schema.StringAttribute{
										Computed:    true,
										Description: `Name of incident that this ticket is related to`,
									},
									"link": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"deletable": schema.BoolAttribute{
												Computed:    true,
												Description: `Link can be deleted`,
											},
											"display_text": schema.StringAttribute{
												Computed: true,
											},
											"editable": schema.BoolAttribute{
												Computed:    true,
												Description: `Link can be edited`,
											},
											"href_url": schema.StringAttribute{
												Computed: true,
											},
											"icon_url": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Attachments_Link model`,
									},
									"priority": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"created_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"position": schema.Int32Attribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
										},
										Description: `Ticketing_Priority model`,
									},
									"state": schema.StringAttribute{
										Computed: true,
									},
									"summary": schema.StringAttribute{
										Computed: true,
									},
									"sync_error_message": schema.StringAttribute{
										Computed:    true,
										Description: `Error message from syncing this ticket to integrations`,
									},
									"tag_list": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"task_id": schema.StringAttribute{
										Computed:    true,
										Description: `ID of task that this ticket is related to`,
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
									"updated_at": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
								},
								Description: `Ticketing_Ticket model`,
							},
						},
						Description: `Incident model`,
					},
					"ms_team_id": schema.StringAttribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed: true,
					},
					"team_name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"ms_teams_channel_input": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"channel_id": schema.StringAttribute{
						Required: true,
					},
					"ms_team_id": schema.StringAttribute{
						Required: true,
					},
				},
				Description: `MS Teams channel identity for channel associated with this team`,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"owned_checklist_templates": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"checks": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"description": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"status": schema.BoolAttribute{
										Computed: true,
									},
								},
							},
						},
						"connected_services": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"alert_on_add": schema.BoolAttribute{
										Computed: true,
									},
									"allowed_params": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"auto_add_responding_team": schema.BoolAttribute{
										Computed: true,
									},
									"completed_checks": schema.Int32Attribute{
										Computed: true,
									},
									"created_at": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"description": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"labels": schema.SingleNestedAttribute{
										Computed:    true,
										Description: `An object of label key and values`,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"owner": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"created_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"created_by": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"source": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"in_support_hours": schema.BoolAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"signals_ical_url": schema.StringAttribute{
												Computed: true,
											},
											"slug": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
										},
									},
									"service_checklist_updated_at": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"service_tier": schema.Int32Attribute{
										Computed: true,
									},
									"slug": schema.StringAttribute{
										Computed: true,
									},
									"updated_at": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
								},
							},
							Description: `List of services that use this checklist`,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"owner": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"created_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"in_support_hours": schema.BoolAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"signals_ical_url": schema.StringAttribute{
									Computed: true,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
					},
				},
			},
			"owned_functionalities": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"active_incidents": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `List of active incident guids`,
						},
						"alert_on_add": schema.BoolAttribute{
							Computed: true,
						},
						"auto_add_responding_team": schema.BoolAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"labels": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `An object of label key and values`,
						},
						"links": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"href_url": schema.StringAttribute{
										Computed: true,
									},
									"icon_url": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							Description: `List of links attached to this functionality.`,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"owner": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"created_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"in_support_hours": schema.BoolAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"signals_ical_url": schema.StringAttribute{
									Computed: true,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
						},
						"slug": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"updated_by": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"email": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"source": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
			"owned_runbooks": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"attachment_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"logic": schema.StringAttribute{
									Computed:    true,
									Description: `JSON stringified object of key/value pairs describing the logic for applying the rule.`,
								},
								"user_data": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"label": schema.StringAttribute{
											Computed: true,
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
										"value": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
						"categories": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `categories the runbook applies to`,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"owner": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"created_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"in_support_hours": schema.BoolAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"signals_ical_url": schema.StringAttribute{
									Computed: true,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
						},
						"summary": schema.StringAttribute{
							Computed: true,
						},
						"type": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
					},
				},
			},
			"owned_services": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"alert_on_add": schema.BoolAttribute{
							Computed: true,
						},
						"allowed_params": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"auto_add_responding_team": schema.BoolAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"labels": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `An object of label key and values`,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"service_tier": schema.Int32Attribute{
							Computed: true,
						},
						"slug": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
					},
				},
			},
			"responding_services": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"alert_on_add": schema.BoolAttribute{
							Computed: true,
						},
						"allowed_params": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"auto_add_responding_team": schema.BoolAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"labels": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `An object of label key and values`,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"service_tier": schema.Int32Attribute{
							Computed: true,
						},
						"slug": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
					},
				},
			},
			"services": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"alert_on_add": schema.BoolAttribute{
							Computed: true,
						},
						"allowed_params": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"auto_add_responding_team": schema.BoolAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"labels": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `An object of label key and values`,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"service_tier": schema.Int32Attribute{
							Computed: true,
						},
						"slug": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
					},
				},
			},
			"signals_ical_url": schema.StringAttribute{
				Computed: true,
			},
			"slack_channel": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"slack_channel_id": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"slack_channel_id": schema.StringAttribute{
				Optional:    true,
				Description: `The Slack channel ID associated with this team. This may be the reference in FireHydrant's system (i.e. UUID) or the ID value from Slack (e.g. C1234567890).`,
			},
			"slug": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
		},
	}
}

func (r *TeamResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *TeamResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *TeamResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedCreateTeam(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Teams.CreateTeam(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Team != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedTeam(ctx, res.Team)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetTeamRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Teams.GetTeam(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Team != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedTeam(ctx, res1.Team)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TeamResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *TeamResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetTeamRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Teams.GetTeam(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Team != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedTeam(ctx, res.Team)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TeamResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *TeamResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateTeamRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Teams.UpdateTeam(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Team != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedTeam(ctx, res.Team)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetTeamRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Teams.GetTeam(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Team != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedTeam(ctx, res1.Team)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TeamResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *TeamResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteTeamRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Teams.DeleteTeam(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *TeamResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
