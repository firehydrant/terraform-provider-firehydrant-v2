// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
)

func (r *TaskListEntityResourceModel) ToSharedCreateTaskList(ctx context.Context) (*shared.CreateTaskList, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var name string
	name = r.Name.ValueString()

	taskListItems := make([]shared.CreateTaskListTaskListItem, 0, len(r.TaskListItems))
	for _, taskListItemsItem := range r.TaskListItems {
		description1 := new(string)
		if !taskListItemsItem.Description.IsUnknown() && !taskListItemsItem.Description.IsNull() {
			*description1 = taskListItemsItem.Description.ValueString()
		} else {
			description1 = nil
		}
		var summary string
		summary = taskListItemsItem.Summary.ValueString()

		taskListItems = append(taskListItems, shared.CreateTaskListTaskListItem{
			Description: description1,
			Summary:     summary,
		})
	}
	out := shared.CreateTaskList{
		Description:   description,
		Name:          name,
		TaskListItems: taskListItems,
	}

	return &out, diags
}

func (r *TaskListEntityResourceModel) ToSharedUpdateTaskList(ctx context.Context) (*shared.UpdateTaskList, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var taskListItems []shared.UpdateTaskListTaskListItem
	if r.TaskListItems != nil {
		taskListItems = make([]shared.UpdateTaskListTaskListItem, 0, len(r.TaskListItems))
		for _, taskListItemsItem := range r.TaskListItems {
			description1 := new(string)
			if !taskListItemsItem.Description.IsUnknown() && !taskListItemsItem.Description.IsNull() {
				*description1 = taskListItemsItem.Description.ValueString()
			} else {
				description1 = nil
			}
			var summary string
			summary = taskListItemsItem.Summary.ValueString()

			taskListItems = append(taskListItems, shared.UpdateTaskListTaskListItem{
				Description: description1,
				Summary:     summary,
			})
		}
	}
	out := shared.UpdateTaskList{
		Description:   description,
		Name:          name,
		TaskListItems: taskListItems,
	}

	return &out, diags
}

func (r *TaskListEntityResourceModel) ToOperationsUpdateTaskListRequest(ctx context.Context) (*operations.UpdateTaskListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var taskListID string
	taskListID = r.ID.ValueString()

	updateTaskList, updateTaskListDiags := r.ToSharedUpdateTaskList(ctx)
	diags.Append(updateTaskListDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateTaskListRequest{
		TaskListID:     taskListID,
		UpdateTaskList: *updateTaskList,
	}

	return &out, diags
}

func (r *TaskListEntityResourceModel) ToOperationsGetTaskListRequest(ctx context.Context) (*operations.GetTaskListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var taskListID string
	taskListID = r.ID.ValueString()

	out := operations.GetTaskListRequest{
		TaskListID: taskListID,
	}

	return &out, diags
}

func (r *TaskListEntityResourceModel) ToOperationsDeleteTaskListRequest(ctx context.Context) (*operations.DeleteTaskListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var taskListID string
	taskListID = r.ID.ValueString()

	out := operations.DeleteTaskListRequest{
		TaskListID: taskListID,
	}

	return &out, diags
}
