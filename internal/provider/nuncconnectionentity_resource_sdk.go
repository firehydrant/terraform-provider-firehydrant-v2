// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *NuncConnectionEntityResourceModel) ToSharedCreateNuncConnection(ctx context.Context) (*shared.CreateNuncConnection, diag.Diagnostics) {
	var diags diag.Diagnostics

	companyName := new(string)
	if !r.CompanyName.IsUnknown() && !r.CompanyName.IsNull() {
		*companyName = r.CompanyName.ValueString()
	} else {
		companyName = nil
	}
	companyTosURL := new(string)
	if !r.CompanyTosURL.IsUnknown() && !r.CompanyTosURL.IsNull() {
		*companyTosURL = r.CompanyTosURL.ValueString()
	} else {
		companyTosURL = nil
	}
	companyWebsite := new(string)
	if !r.CompanyWebsite.IsUnknown() && !r.CompanyWebsite.IsNull() {
		*companyWebsite = r.CompanyWebsite.ValueString()
	} else {
		companyWebsite = nil
	}
	componentsInfrastructureID := make([]string, 0, len(r.ComponentsInfrastructureID))
	for _, componentsInfrastructureIDItem := range r.ComponentsInfrastructureID {
		componentsInfrastructureID = append(componentsInfrastructureID, componentsInfrastructureIDItem.ValueString())
	}
	componentsInfrastructureType := make([]string, 0, len(r.ComponentsInfrastructureType))
	for _, componentsInfrastructureTypeItem := range r.ComponentsInfrastructureType {
		componentsInfrastructureType = append(componentsInfrastructureType, componentsInfrastructureTypeItem.ValueString())
	}
	conditionsConditionID := make([]string, 0, len(r.ConditionsConditionID))
	for _, conditionsConditionIDItem := range r.ConditionsConditionID {
		conditionsConditionID = append(conditionsConditionID, conditionsConditionIDItem.ValueString())
	}
	conditionsNuncCondition := make([]string, 0, len(r.ConditionsNuncCondition))
	for _, conditionsNuncConditionItem := range r.ConditionsNuncCondition {
		conditionsNuncCondition = append(conditionsNuncCondition, conditionsNuncConditionItem.ValueString())
	}
	var domain string
	domain = r.Domain.ValueString()

	enableHistogram := new(bool)
	if !r.EnableHistogram.IsUnknown() && !r.EnableHistogram.IsNull() {
		*enableHistogram = r.EnableHistogram.ValueBool()
	} else {
		enableHistogram = nil
	}
	var exposedFields []string
	if r.ExposedFields != nil {
		exposedFields = make([]string, 0, len(r.ExposedFields))
		for _, exposedFieldsItem := range r.ExposedFields {
			exposedFields = append(exposedFields, exposedFieldsItem.ValueString())
		}
	}
	greetingBody := new(string)
	if !r.GreetingBody.IsUnknown() && !r.GreetingBody.IsNull() {
		*greetingBody = r.GreetingBody.ValueString()
	} else {
		greetingBody = nil
	}
	greetingTitle := new(string)
	if !r.GreetingTitle.IsUnknown() && !r.GreetingTitle.IsNull() {
		*greetingTitle = r.GreetingTitle.ValueString()
	} else {
		greetingTitle = nil
	}
	operationalMessage := new(string)
	if !r.OperationalMessage.IsUnknown() && !r.OperationalMessage.IsNull() {
		*operationalMessage = r.OperationalMessage.ValueString()
	} else {
		operationalMessage = nil
	}
	primaryColor := new(string)
	if !r.PrimaryColor.IsUnknown() && !r.PrimaryColor.IsNull() {
		*primaryColor = r.PrimaryColor.ValueString()
	} else {
		primaryColor = nil
	}
	secondaryColor := new(string)
	if !r.SecondaryColor.IsUnknown() && !r.SecondaryColor.IsNull() {
		*secondaryColor = r.SecondaryColor.ValueString()
	} else {
		secondaryColor = nil
	}
	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	uiVersion := new(int)
	if !r.UIVersion.IsUnknown() && !r.UIVersion.IsNull() {
		*uiVersion = int(r.UIVersion.ValueInt32())
	} else {
		uiVersion = nil
	}
	out := shared.CreateNuncConnection{
		CompanyName:                  companyName,
		CompanyTosURL:                companyTosURL,
		CompanyWebsite:               companyWebsite,
		ComponentsInfrastructureID:   componentsInfrastructureID,
		ComponentsInfrastructureType: componentsInfrastructureType,
		ConditionsConditionID:        conditionsConditionID,
		ConditionsNuncCondition:      conditionsNuncCondition,
		Domain:                       domain,
		EnableHistogram:              enableHistogram,
		ExposedFields:                exposedFields,
		GreetingBody:                 greetingBody,
		GreetingTitle:                greetingTitle,
		OperationalMessage:           operationalMessage,
		PrimaryColor:                 primaryColor,
		SecondaryColor:               secondaryColor,
		Title:                        title,
		UIVersion:                    uiVersion,
	}

	return &out, diags
}

func (r *NuncConnectionEntityResourceModel) ToSharedUpdateNuncConnection(ctx context.Context) (*shared.UpdateNuncConnection, diag.Diagnostics) {
	var diags diag.Diagnostics

	companyName := new(string)
	if !r.CompanyName.IsUnknown() && !r.CompanyName.IsNull() {
		*companyName = r.CompanyName.ValueString()
	} else {
		companyName = nil
	}
	companyTosURL := new(string)
	if !r.CompanyTosURL.IsUnknown() && !r.CompanyTosURL.IsNull() {
		*companyTosURL = r.CompanyTosURL.ValueString()
	} else {
		companyTosURL = nil
	}
	companyWebsite := new(string)
	if !r.CompanyWebsite.IsUnknown() && !r.CompanyWebsite.IsNull() {
		*companyWebsite = r.CompanyWebsite.ValueString()
	} else {
		companyWebsite = nil
	}
	componentsInfrastructureID := make([]string, 0, len(r.ComponentsInfrastructureID))
	for _, componentsInfrastructureIDItem := range r.ComponentsInfrastructureID {
		componentsInfrastructureID = append(componentsInfrastructureID, componentsInfrastructureIDItem.ValueString())
	}
	componentsInfrastructureType := make([]string, 0, len(r.ComponentsInfrastructureType))
	for _, componentsInfrastructureTypeItem := range r.ComponentsInfrastructureType {
		componentsInfrastructureType = append(componentsInfrastructureType, componentsInfrastructureTypeItem.ValueString())
	}
	conditionsConditionID := make([]string, 0, len(r.ConditionsConditionID))
	for _, conditionsConditionIDItem := range r.ConditionsConditionID {
		conditionsConditionID = append(conditionsConditionID, conditionsConditionIDItem.ValueString())
	}
	conditionsNuncCondition := make([]string, 0, len(r.ConditionsNuncCondition))
	for _, conditionsNuncConditionItem := range r.ConditionsNuncCondition {
		conditionsNuncCondition = append(conditionsNuncCondition, conditionsNuncConditionItem.ValueString())
	}
	enableHistogram := new(bool)
	if !r.EnableHistogram.IsUnknown() && !r.EnableHistogram.IsNull() {
		*enableHistogram = r.EnableHistogram.ValueBool()
	} else {
		enableHistogram = nil
	}
	var exposedFields []string
	if r.ExposedFields != nil {
		exposedFields = make([]string, 0, len(r.ExposedFields))
		for _, exposedFieldsItem := range r.ExposedFields {
			exposedFields = append(exposedFields, exposedFieldsItem.ValueString())
		}
	}
	greetingBody := new(string)
	if !r.GreetingBody.IsUnknown() && !r.GreetingBody.IsNull() {
		*greetingBody = r.GreetingBody.ValueString()
	} else {
		greetingBody = nil
	}
	greetingTitle := new(string)
	if !r.GreetingTitle.IsUnknown() && !r.GreetingTitle.IsNull() {
		*greetingTitle = r.GreetingTitle.ValueString()
	} else {
		greetingTitle = nil
	}
	operationalMessage := new(string)
	if !r.OperationalMessage.IsUnknown() && !r.OperationalMessage.IsNull() {
		*operationalMessage = r.OperationalMessage.ValueString()
	} else {
		operationalMessage = nil
	}
	primaryColor := new(string)
	if !r.PrimaryColor.IsUnknown() && !r.PrimaryColor.IsNull() {
		*primaryColor = r.PrimaryColor.ValueString()
	} else {
		primaryColor = nil
	}
	secondaryColor := new(string)
	if !r.SecondaryColor.IsUnknown() && !r.SecondaryColor.IsNull() {
		*secondaryColor = r.SecondaryColor.ValueString()
	} else {
		secondaryColor = nil
	}
	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	uiVersion := new(int)
	if !r.UIVersion.IsUnknown() && !r.UIVersion.IsNull() {
		*uiVersion = int(r.UIVersion.ValueInt32())
	} else {
		uiVersion = nil
	}
	out := shared.UpdateNuncConnection{
		CompanyName:                  companyName,
		CompanyTosURL:                companyTosURL,
		CompanyWebsite:               companyWebsite,
		ComponentsInfrastructureID:   componentsInfrastructureID,
		ComponentsInfrastructureType: componentsInfrastructureType,
		ConditionsConditionID:        conditionsConditionID,
		ConditionsNuncCondition:      conditionsNuncCondition,
		EnableHistogram:              enableHistogram,
		ExposedFields:                exposedFields,
		GreetingBody:                 greetingBody,
		GreetingTitle:                greetingTitle,
		OperationalMessage:           operationalMessage,
		PrimaryColor:                 primaryColor,
		SecondaryColor:               secondaryColor,
		Title:                        title,
		UIVersion:                    uiVersion,
	}

	return &out, diags
}

func (r *NuncConnectionEntityResourceModel) ToOperationsUpdateNuncConnectionRequest(ctx context.Context) (*operations.UpdateNuncConnectionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var nuncConnectionID string
	nuncConnectionID = r.ID.ValueString()

	updateNuncConnection, updateNuncConnectionDiags := r.ToSharedUpdateNuncConnection(ctx)
	diags.Append(updateNuncConnectionDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateNuncConnectionRequest{
		NuncConnectionID:     nuncConnectionID,
		UpdateNuncConnection: *updateNuncConnection,
	}

	return &out, diags
}

func (r *NuncConnectionEntityResourceModel) ToOperationsGetNuncConnectionRequest(ctx context.Context) (*operations.GetNuncConnectionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var nuncConnectionID string
	nuncConnectionID = r.ID.ValueString()

	out := operations.GetNuncConnectionRequest{
		NuncConnectionID: nuncConnectionID,
	}

	return &out, diags
}

func (r *NuncConnectionEntityResourceModel) ToOperationsDeleteNuncConnectionRequest(ctx context.Context) (*operations.DeleteNuncConnectionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var nuncConnectionID string
	nuncConnectionID = r.ID.ValueString()

	out := operations.DeleteNuncConnectionRequest{
		NuncConnectionID: nuncConnectionID,
	}

	return &out, diags
}

func (r *NuncConnectionEntityResourceModel) RefreshFromSharedNuncConnectionEntity(ctx context.Context, resp *shared.NuncConnectionEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ButtonBackgroundColor = types.StringPointerValue(resp.ButtonBackgroundColor)
		r.ButtonTextColor = types.StringPointerValue(resp.ButtonTextColor)
		r.Cname = types.StringPointerValue(resp.Cname)
		r.CompanyName = types.StringPointerValue(resp.CompanyName)
		r.CompanyTosURL = types.StringPointerValue(resp.CompanyTosURL)
		r.CompanyWebsite = types.StringPointerValue(resp.CompanyWebsite)
		if resp.ComponentGroups == nil {
			r.ComponentGroups = nil
		} else {
			r.ComponentGroups = &tfTypes.NullableNuncComponentGroupEntity{}
			r.ComponentGroups.ComponentGroupID = types.StringPointerValue(resp.ComponentGroups.ComponentGroupID)
			r.ComponentGroups.ID = types.StringPointerValue(resp.ComponentGroups.ID)
			r.ComponentGroups.Name = types.StringPointerValue(resp.ComponentGroups.Name)
			r.ComponentGroups.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.ComponentGroups.Position))
		}
		if resp.Components == nil {
			r.Components = nil
		} else {
			r.Components = &tfTypes.NullableNuncComponentEntity{}
			r.Components.ComponentGroupID = types.StringPointerValue(resp.Components.ComponentGroupID)
			r.Components.InfrastructureID = types.StringPointerValue(resp.Components.InfrastructureID)
			r.Components.InfrastructureType = types.StringPointerValue(resp.Components.InfrastructureType)
			r.Components.Label = types.StringPointerValue(resp.Components.Label)
			r.Components.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Components.Position))
		}
		if resp.Conditions == nil {
			r.Conditions = nil
		} else {
			r.Conditions = &tfTypes.NullableNuncConditionEntity{}
			r.Conditions.ConditionID = types.StringPointerValue(resp.Conditions.ConditionID)
			r.Conditions.ConditionName = types.StringPointerValue(resp.Conditions.ConditionName)
			r.Conditions.NuncCondition = types.StringPointerValue(resp.Conditions.NuncCondition)
		}
		if resp.CoverImage == nil {
			r.CoverImage = nil
		} else {
			r.CoverImage = &tfTypes.NullableMediaImageEntity{}
			r.CoverImage.OriginalURL = types.StringPointerValue(resp.CoverImage.OriginalURL)
		}
		if resp.DarkLogo == nil {
			r.DarkLogo = nil
		} else {
			r.DarkLogo = &tfTypes.NullableMediaImageEntity{}
			r.DarkLogo.OriginalURL = types.StringPointerValue(resp.DarkLogo.OriginalURL)
		}
		r.Domain = types.StringPointerValue(resp.Domain)
		r.EnableHistogram = types.BoolPointerValue(resp.EnableHistogram)
		if resp.ExposedFields != nil {
			r.ExposedFields = make([]types.String, 0, len(resp.ExposedFields))
			for _, v := range resp.ExposedFields {
				r.ExposedFields = append(r.ExposedFields, types.StringValue(v))
			}
		}
		if resp.Favicon == nil {
			r.Favicon = nil
		} else {
			r.Favicon = &tfTypes.NullableMediaImageEntity{}
			r.Favicon.OriginalURL = types.StringPointerValue(resp.Favicon.OriginalURL)
		}
		r.GreetingBody = types.StringPointerValue(resp.GreetingBody)
		r.GreetingTitle = types.StringPointerValue(resp.GreetingTitle)
		r.ID = types.StringPointerValue(resp.ID)
		r.LinkColor = types.StringPointerValue(resp.LinkColor)
		if resp.Links != nil {
			r.Links = []tfTypes.LinksEntity{}
			if len(r.Links) > len(resp.Links) {
				r.Links = r.Links[:len(resp.Links)]
			}
			for linksCount, linksItem := range resp.Links {
				var links tfTypes.LinksEntity
				links.HrefURL = types.StringPointerValue(linksItem.HrefURL)
				links.IconURL = types.StringPointerValue(linksItem.IconURL)
				links.ID = types.StringPointerValue(linksItem.ID)
				links.Name = types.StringPointerValue(linksItem.Name)
				if linksCount+1 > len(r.Links) {
					r.Links = append(r.Links, links)
				} else {
					r.Links[linksCount].HrefURL = links.HrefURL
					r.Links[linksCount].IconURL = links.IconURL
					r.Links[linksCount].ID = links.ID
					r.Links[linksCount].Name = links.Name
				}
			}
		}
		if resp.Logo == nil {
			r.Logo = nil
		} else {
			r.Logo = &tfTypes.NullableMediaImageEntity{}
			r.Logo.OriginalURL = types.StringPointerValue(resp.Logo.OriginalURL)
		}
		if resp.OpenGraphImage == nil {
			r.OpenGraphImage = nil
		} else {
			r.OpenGraphImage = &tfTypes.NullableMediaImageEntity{}
			r.OpenGraphImage.OriginalURL = types.StringPointerValue(resp.OpenGraphImage.OriginalURL)
		}
		r.OperationalMessage = types.StringPointerValue(resp.OperationalMessage)
		r.PrimaryColor = types.StringPointerValue(resp.PrimaryColor)
		r.SecondaryColor = types.StringPointerValue(resp.SecondaryColor)
		r.Title = types.StringPointerValue(resp.Title)
		r.UIVersion = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.UIVersion))
	}

	return diags
}
