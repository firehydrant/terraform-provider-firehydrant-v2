// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SignalsAPIGroupingEntityDataSourceModel) ToOperationsGetSignalsAlertGroupingConfigurationRequest(ctx context.Context) (*operations.GetSignalsAlertGroupingConfigurationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetSignalsAlertGroupingConfigurationRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SignalsAPIGroupingEntityDataSourceModel) RefreshFromSharedSignalsAPIGroupingEntity(ctx context.Context, resp *shared.SignalsAPIGroupingEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Action == nil {
			r.Action = nil
		} else {
			r.Action = &tfTypes.NullableSignalsAPIGroupingEntityActionEntity{}
			if resp.Action.Fyi == nil {
				r.Action.Fyi = nil
			} else {
				r.Action.Fyi = &tfTypes.NullableSignalsAPIGroupingEntityActionEntityFyiEntity{}
				if resp.Action.Fyi.SlackChannels != nil {
					r.Action.Fyi.SlackChannels = []tfTypes.IntegrationsSlackSlackChannelEntity{}
					if len(r.Action.Fyi.SlackChannels) > len(resp.Action.Fyi.SlackChannels) {
						r.Action.Fyi.SlackChannels = r.Action.Fyi.SlackChannels[:len(resp.Action.Fyi.SlackChannels)]
					}
					for slackChannelsCount, slackChannelsItem := range resp.Action.Fyi.SlackChannels {
						var slackChannels tfTypes.IntegrationsSlackSlackChannelEntity
						slackChannels.ID = types.StringPointerValue(slackChannelsItem.ID)
						slackChannels.Name = types.StringPointerValue(slackChannelsItem.Name)
						slackChannels.SlackChannelID = types.StringPointerValue(slackChannelsItem.SlackChannelID)
						if slackChannelsCount+1 > len(r.Action.Fyi.SlackChannels) {
							r.Action.Fyi.SlackChannels = append(r.Action.Fyi.SlackChannels, slackChannels)
						} else {
							r.Action.Fyi.SlackChannels[slackChannelsCount].ID = slackChannels.ID
							r.Action.Fyi.SlackChannels[slackChannelsCount].Name = slackChannels.Name
							r.Action.Fyi.SlackChannels[slackChannelsCount].SlackChannelID = slackChannels.SlackChannelID
						}
					}
				}
			}
			r.Action.Link = types.BoolPointerValue(resp.Action.Link)
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.ReferenceAlertTimePeriod = types.StringPointerValue(resp.ReferenceAlertTimePeriod)
		if resp.Strategy == nil {
			r.Strategy = nil
		} else {
			r.Strategy = &tfTypes.NullableSignalsAPIGroupingEntityStrategyEntity{}
			if resp.Strategy.Substring == nil {
				r.Strategy.Substring = nil
			} else {
				r.Strategy.Substring = &tfTypes.NullableSignalsAPIGroupingEntityStrategyEntitySubstringEntity{}
				r.Strategy.Substring.FieldName = types.StringPointerValue(resp.Strategy.Substring.FieldName)
				r.Strategy.Substring.Value = types.StringPointerValue(resp.Strategy.Substring.Value)
			}
		}
	}

	return diags
}
