// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ServiceDependencyDataSource{}
var _ datasource.DataSourceWithConfigure = &ServiceDependencyDataSource{}

func NewServiceDependencyDataSource() datasource.DataSource {
	return &ServiceDependencyDataSource{}
}

// ServiceDependencyDataSource is the data source implementation.
type ServiceDependencyDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// ServiceDependencyDataSourceModel describes the data model.
type ServiceDependencyDataSourceModel struct {
	ConnectedService *tfTypes.NullableService `tfsdk:"connected_service"`
	CreatedAt        types.String             `tfsdk:"created_at"`
	ID               types.String             `tfsdk:"id"`
	Notes            types.String             `tfsdk:"notes"`
	Service          *tfTypes.NullableService `tfsdk:"service"`
	UpdatedAt        types.String             `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *ServiceDependencyDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service_dependency"
}

// Schema defines the schema for the data source.
func (r *ServiceDependencyDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "ServiceDependency DataSource",

		Attributes: map[string]schema.Attribute{
			"connected_service": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active_incidents": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `List of active incident guids`,
					},
					"alert_on_add": schema.BoolAttribute{
						Computed: true,
					},
					"allowed_params": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"auto_add_responding_team": schema.BoolAttribute{
						Computed: true,
					},
					"checklists": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"checks": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"status": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
								},
								"connected_services": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"alert_on_add": schema.BoolAttribute{
												Computed: true,
											},
											"allowed_params": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"auto_add_responding_team": schema.BoolAttribute{
												Computed: true,
											},
											"completed_checks": schema.Int32Attribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"labels": schema.SingleNestedAttribute{
												Computed:    true,
												Description: `An object of label key and values`,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"owner": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.StringAttribute{
														Computed: true,
													},
													"created_by": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"email": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"source": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"description": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"in_support_hours": schema.BoolAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"signals_ical_url": schema.StringAttribute{
														Computed: true,
													},
													"slug": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"service_checklist_updated_at": schema.StringAttribute{
												Computed: true,
											},
											"service_tier": schema.Int32Attribute{
												Computed: true,
											},
											"slug": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `List of services that use this checklist`,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"owner": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
										},
										"created_by": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"in_support_hours": schema.BoolAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"signals_ical_url": schema.StringAttribute{
											Computed: true,
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `List of checklists associated with a service`,
					},
					"completed_checks": schema.Int32Attribute{
						Computed: true,
					},
					"created_at": schema.StringAttribute{
						Computed: true,
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"external_resources": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"connection_full_favicon_url": schema.StringAttribute{
									Computed: true,
								},
								"connection_id": schema.StringAttribute{
									Computed: true,
								},
								"connection_name": schema.StringAttribute{
									Computed: true,
								},
								"connection_type": schema.StringAttribute{
									Computed: true,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"remote_id": schema.StringAttribute{
									Computed: true,
								},
								"remote_url": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `Information about known linkages to representations of services outside of FireHydrant.`,
					},
					"functionalities": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"active_incidents": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `List of active incident guids`,
								},
								"alert_on_add": schema.BoolAttribute{
									Computed: true,
								},
								"auto_add_responding_team": schema.BoolAttribute{
									Computed: true,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"external_resources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"connection_full_favicon_url": schema.StringAttribute{
												Computed: true,
											},
											"connection_id": schema.StringAttribute{
												Computed: true,
											},
											"connection_name": schema.StringAttribute{
												Computed: true,
											},
											"connection_type": schema.StringAttribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"remote_id": schema.StringAttribute{
												Computed: true,
											},
											"remote_url": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `Information about known linkages to representations of services outside of FireHydrant.`,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"labels": schema.MapAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `An object of label key and values`,
								},
								"links": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"href_url": schema.StringAttribute{
												Computed: true,
											},
											"icon_url": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `List of links attached to this functionality.`,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"owner": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
										},
										"created_by": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"in_support_hours": schema.BoolAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"signals_ical_url": schema.StringAttribute{
											Computed: true,
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"services": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"alert_on_add": schema.BoolAttribute{
												Computed: true,
											},
											"allowed_params": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"auto_add_responding_team": schema.BoolAttribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"labels": schema.SingleNestedAttribute{
												Computed:    true,
												Description: `An object of label key and values`,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"service_tier": schema.Int32Attribute{
												Computed: true,
											},
											"slug": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `Services this functionality provides`,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"teams": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"created_at": schema.StringAttribute{
												Computed: true,
											},
											"created_by": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"source": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"in_support_hours": schema.BoolAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"signals_ical_url": schema.StringAttribute{
												Computed: true,
											},
											"slug": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `List of teams attached to the functionality`,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
								"updated_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
						Description: `List of functionalities attached to the service`,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"labels": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `An object of label key and values`,
					},
					"last_import": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"import_errors": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
										},
										"data": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `Additional error data`,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"message": schema.StringAttribute{
											Computed: true,
										},
										"resource": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"name": schema.StringAttribute{
													Computed: true,
												},
												"resource_id": schema.StringAttribute{
													Computed: true,
												},
												"resource_type": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
								},
							},
							"imported_at": schema.StringAttribute{
								Computed: true,
							},
							"remote_id": schema.StringAttribute{
								Computed: true,
							},
							"state": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"links": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"href_url": schema.StringAttribute{
									Computed: true,
								},
								"icon_url": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `List of links attached to this service.`,
					},
					"managed_by": schema.StringAttribute{
						Computed:    true,
						Description: `If set, this field indicates that the service is managed by an integration and thus cannot be set manually`,
					},
					"managed_by_settings": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `Indicates the settings of the catalog that manages this service`,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"owner": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"created_at": schema.StringAttribute{
								Computed: true,
							},
							"created_by": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"email": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"source": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"description": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"in_support_hours": schema.BoolAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"signals_ical_url": schema.StringAttribute{
								Computed: true,
							},
							"slug": schema.StringAttribute{
								Computed: true,
							},
							"updated_at": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"service_checklist_updated_at": schema.StringAttribute{
						Computed: true,
					},
					"service_tier": schema.Int32Attribute{
						Computed: true,
					},
					"slug": schema.StringAttribute{
						Computed: true,
					},
					"teams": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"created_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"in_support_hours": schema.BoolAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"signals_ical_url": schema.StringAttribute{
									Computed: true,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `List of teams attached to the service`,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
					},
					"updated_by": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"source": schema.StringAttribute{
								Computed: true,
							},
						},
					},
				},
				Description: `Service model`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"notes": schema.StringAttribute{
				Computed: true,
			},
			"service": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active_incidents": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `List of active incident guids`,
					},
					"alert_on_add": schema.BoolAttribute{
						Computed: true,
					},
					"allowed_params": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"auto_add_responding_team": schema.BoolAttribute{
						Computed: true,
					},
					"checklists": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"checks": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"status": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
								},
								"connected_services": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"alert_on_add": schema.BoolAttribute{
												Computed: true,
											},
											"allowed_params": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"auto_add_responding_team": schema.BoolAttribute{
												Computed: true,
											},
											"completed_checks": schema.Int32Attribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"labels": schema.SingleNestedAttribute{
												Computed:    true,
												Description: `An object of label key and values`,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"owner": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.StringAttribute{
														Computed: true,
													},
													"created_by": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"email": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"source": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"description": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"in_support_hours": schema.BoolAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"signals_ical_url": schema.StringAttribute{
														Computed: true,
													},
													"slug": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"service_checklist_updated_at": schema.StringAttribute{
												Computed: true,
											},
											"service_tier": schema.Int32Attribute{
												Computed: true,
											},
											"slug": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `List of services that use this checklist`,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"owner": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
										},
										"created_by": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"in_support_hours": schema.BoolAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"signals_ical_url": schema.StringAttribute{
											Computed: true,
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `List of checklists associated with a service`,
					},
					"completed_checks": schema.Int32Attribute{
						Computed: true,
					},
					"created_at": schema.StringAttribute{
						Computed: true,
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"external_resources": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"connection_full_favicon_url": schema.StringAttribute{
									Computed: true,
								},
								"connection_id": schema.StringAttribute{
									Computed: true,
								},
								"connection_name": schema.StringAttribute{
									Computed: true,
								},
								"connection_type": schema.StringAttribute{
									Computed: true,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"remote_id": schema.StringAttribute{
									Computed: true,
								},
								"remote_url": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `Information about known linkages to representations of services outside of FireHydrant.`,
					},
					"functionalities": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"active_incidents": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `List of active incident guids`,
								},
								"alert_on_add": schema.BoolAttribute{
									Computed: true,
								},
								"auto_add_responding_team": schema.BoolAttribute{
									Computed: true,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"external_resources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"connection_full_favicon_url": schema.StringAttribute{
												Computed: true,
											},
											"connection_id": schema.StringAttribute{
												Computed: true,
											},
											"connection_name": schema.StringAttribute{
												Computed: true,
											},
											"connection_type": schema.StringAttribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"remote_id": schema.StringAttribute{
												Computed: true,
											},
											"remote_url": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `Information about known linkages to representations of services outside of FireHydrant.`,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"labels": schema.MapAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `An object of label key and values`,
								},
								"links": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"href_url": schema.StringAttribute{
												Computed: true,
											},
											"icon_url": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `List of links attached to this functionality.`,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"owner": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
										},
										"created_by": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"in_support_hours": schema.BoolAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"signals_ical_url": schema.StringAttribute{
											Computed: true,
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"services": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"alert_on_add": schema.BoolAttribute{
												Computed: true,
											},
											"allowed_params": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"auto_add_responding_team": schema.BoolAttribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"labels": schema.SingleNestedAttribute{
												Computed:    true,
												Description: `An object of label key and values`,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"service_tier": schema.Int32Attribute{
												Computed: true,
											},
											"slug": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `Services this functionality provides`,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"teams": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"created_at": schema.StringAttribute{
												Computed: true,
											},
											"created_by": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"source": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"in_support_hours": schema.BoolAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"signals_ical_url": schema.StringAttribute{
												Computed: true,
											},
											"slug": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `List of teams attached to the functionality`,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
								"updated_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
						Description: `List of functionalities attached to the service`,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"labels": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `An object of label key and values`,
					},
					"last_import": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"import_errors": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
										},
										"data": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `Additional error data`,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"message": schema.StringAttribute{
											Computed: true,
										},
										"resource": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"name": schema.StringAttribute{
													Computed: true,
												},
												"resource_id": schema.StringAttribute{
													Computed: true,
												},
												"resource_type": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
								},
							},
							"imported_at": schema.StringAttribute{
								Computed: true,
							},
							"remote_id": schema.StringAttribute{
								Computed: true,
							},
							"state": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"links": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"href_url": schema.StringAttribute{
									Computed: true,
								},
								"icon_url": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `List of links attached to this service.`,
					},
					"managed_by": schema.StringAttribute{
						Computed:    true,
						Description: `If set, this field indicates that the service is managed by an integration and thus cannot be set manually`,
					},
					"managed_by_settings": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `Indicates the settings of the catalog that manages this service`,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"owner": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"created_at": schema.StringAttribute{
								Computed: true,
							},
							"created_by": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"email": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"source": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"description": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"in_support_hours": schema.BoolAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"signals_ical_url": schema.StringAttribute{
								Computed: true,
							},
							"slug": schema.StringAttribute{
								Computed: true,
							},
							"updated_at": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"service_checklist_updated_at": schema.StringAttribute{
						Computed: true,
					},
					"service_tier": schema.Int32Attribute{
						Computed: true,
					},
					"slug": schema.StringAttribute{
						Computed: true,
					},
					"teams": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"created_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"in_support_hours": schema.BoolAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"signals_ical_url": schema.StringAttribute{
									Computed: true,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `List of teams attached to the service`,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
					},
					"updated_by": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"source": schema.StringAttribute{
								Computed: true,
							},
						},
					},
				},
				Description: `Service model`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *ServiceDependencyDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ServiceDependencyDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ServiceDependencyDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetServiceDependencyRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.CatalogEntries.GetServiceDependency(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ServiceDependency != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedServiceDependency(ctx, res.ServiceDependency)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
