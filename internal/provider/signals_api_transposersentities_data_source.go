// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SignalsAPITransposersEntitiesDataSource{}
var _ datasource.DataSourceWithConfigure = &SignalsAPITransposersEntitiesDataSource{}

func NewSignalsAPITransposersEntitiesDataSource() datasource.DataSource {
	return &SignalsAPITransposersEntitiesDataSource{}
}

// SignalsAPITransposersEntitiesDataSource is the data source implementation.
type SignalsAPITransposersEntitiesDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// SignalsAPITransposersEntitiesDataSourceModel describes the data model.
type SignalsAPITransposersEntitiesDataSourceModel struct {
	Data               *tfTypes.NullableSignalsAPITransposerEntity `tfsdk:"data"`
	EscalationPolicyID types.String                                `queryParam:"style=form,explode=true,name=escalation_policy_id" tfsdk:"escalation_policy_id"`
	OnCallScheduleID   types.String                                `queryParam:"style=form,explode=true,name=on_call_schedule_id" tfsdk:"on_call_schedule_id"`
	TeamID             types.String                                `queryParam:"style=form,explode=true,name=team_id" tfsdk:"team_id"`
	UserID             types.String                                `queryParam:"style=form,explode=true,name=user_id" tfsdk:"user_id"`
}

// Metadata returns the data source type name.
func (r *SignalsAPITransposersEntitiesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_signals_api_transposers_entities"
}

// Schema defines the schema for the data source.
func (r *SignalsAPITransposersEntitiesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SignalsAPITransposersEntities DataSource",

		Attributes: map[string]schema.Attribute{
			"data": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"created_by": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"source": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"editable": schema.BoolAttribute{
						Computed: true,
					},
					"example_payload": schema.SingleNestedAttribute{
						Computed: true,
					},
					"expected": schema.StringAttribute{
						Computed: true,
					},
					"expression": schema.StringAttribute{
						Computed: true,
					},
					"ingest_url": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"slug": schema.StringAttribute{
						Computed: true,
					},
					"tags": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"updated_by": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"source": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"website": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `Signals_API_TransposerEntity model`,
			},
			"escalation_policy_id": schema.StringAttribute{
				Optional:    true,
				Description: `Escalation policy ID to send signals to directly. ` + "`" + `team_id` + "`" + ` is required if this is provided.`,
			},
			"on_call_schedule_id": schema.StringAttribute{
				Optional:    true,
				Description: `On-call schedule ID to send signals to directly. ` + "`" + `team_id` + "`" + ` is required if this is provided.`,
			},
			"team_id": schema.StringAttribute{
				Optional:    true,
				Description: `Team ID to send signals to directly`,
			},
			"user_id": schema.StringAttribute{
				Optional:    true,
				Description: `User ID to send signals to directly`,
			},
		},
	}
}

func (r *SignalsAPITransposersEntitiesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SignalsAPITransposersEntitiesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SignalsAPITransposersEntitiesDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListSignalsEventSourcesRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Signals.ListSignalsEventSources(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SignalsAPITransposerListEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSignalsAPITransposerListEntity(ctx, res.SignalsAPITransposerListEntity)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
