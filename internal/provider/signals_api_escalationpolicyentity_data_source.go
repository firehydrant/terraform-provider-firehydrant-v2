// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SignalsAPIEscalationPolicyEntityDataSource{}
var _ datasource.DataSourceWithConfigure = &SignalsAPIEscalationPolicyEntityDataSource{}

func NewSignalsAPIEscalationPolicyEntityDataSource() datasource.DataSource {
	return &SignalsAPIEscalationPolicyEntityDataSource{}
}

// SignalsAPIEscalationPolicyEntityDataSource is the data source implementation.
type SignalsAPIEscalationPolicyEntityDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// SignalsAPIEscalationPolicyEntityDataSourceModel describes the data model.
type SignalsAPIEscalationPolicyEntityDataSourceModel struct {
	CreatedAt                    types.String                                                 `tfsdk:"created_at"`
	CreatedBy                    *tfTypes.NullableAuthorEntity                                `tfsdk:"created_by"`
	Default                      types.Bool                                                   `tfsdk:"default"`
	Description                  types.String                                                 `tfsdk:"description"`
	HandoffStep                  *tfTypes.NullableSignalsAPIEscalationPolicyHandoffStepEntity `tfsdk:"handoff_step"`
	ID                           types.String                                                 `tfsdk:"id"`
	Name                         types.String                                                 `tfsdk:"name"`
	NotificationPriorityPolicies []tfTypes.SignalsAPINotificationPriorityPolicyEntity         `tfsdk:"notification_priority_policies"`
	Repetitions                  types.Int32                                                  `tfsdk:"repetitions"`
	StepStrategy                 types.String                                                 `tfsdk:"step_strategy"`
	Steps                        []tfTypes.SignalsAPIEscalationPolicyStepEntity               `tfsdk:"steps"`
	TeamID                       types.String                                                 `tfsdk:"team_id"`
	UpdatedAt                    types.String                                                 `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *SignalsAPIEscalationPolicyEntityDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_signals_api_escalation_policy_entity"
}

// Schema defines the schema for the data source.
func (r *SignalsAPIEscalationPolicyEntityDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SignalsAPIEscalationPolicyEntity DataSource",

		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"created_by": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"email": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"source": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"default": schema.BoolAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"handoff_step": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"target": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.StringAttribute{
								Computed: true,
							},
							"is_pageable": schema.BoolAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"team_id": schema.StringAttribute{
								Computed: true,
							},
							"type": schema.StringAttribute{
								Computed: true,
							},
						},
					},
				},
			},
			"id": schema.StringAttribute{
				Required: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"notification_priority_policies": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"handoff_step": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"target": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
										},
										"is_pageable": schema.BoolAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"team_id": schema.StringAttribute{
											Computed: true,
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
						"notification_priority": schema.StringAttribute{
							Computed:    true,
							Description: `The notification priority this policy handles (HIGH, MEDIUM, or LOW)`,
						},
						"repetitions": schema.Int32Attribute{
							Computed:    true,
							Description: `Number of repetitions for this priority`,
						},
						"steps": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"distribution_type": schema.StringAttribute{
										Computed:    true,
										Description: `The distribution type for the step`,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"next_target_for_round_robin": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"is_pageable": schema.BoolAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"team_id": schema.StringAttribute{
												Computed: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"parent_position": schema.Int32Attribute{
										Computed: true,
									},
									"position": schema.Int32Attribute{
										Computed: true,
									},
									"priorities": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `The notification priorities that this step is assigned to. Valid values are HIGH, MEDIUM, and LOW.`,
									},
									"targets": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
												},
												"is_pageable": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"team_id": schema.StringAttribute{
													Computed: true,
												},
												"type": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"timeout": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							Description: `Steps for this priority`,
						},
					},
				},
				Description: `Priority-specific policies for dynamic escalation policies`,
			},
			"repetitions": schema.Int32Attribute{
				Computed: true,
			},
			"step_strategy": schema.StringAttribute{
				Computed: true,
			},
			"steps": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"distribution_type": schema.StringAttribute{
							Computed:    true,
							Description: `The distribution type for the step`,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"next_target_for_round_robin": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"is_pageable": schema.BoolAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"team_id": schema.StringAttribute{
									Computed: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"parent_position": schema.Int32Attribute{
							Computed: true,
						},
						"position": schema.Int32Attribute{
							Computed: true,
						},
						"priorities": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `The notification priorities that this step is assigned to. Valid values are HIGH, MEDIUM, and LOW.`,
						},
						"targets": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed: true,
									},
									"is_pageable": schema.BoolAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"team_id": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"timeout": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"team_id": schema.StringAttribute{
				Required: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *SignalsAPIEscalationPolicyEntityDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SignalsAPIEscalationPolicyEntityDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SignalsAPIEscalationPolicyEntityDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetTeamEscalationPolicyRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Signals.GetTeamEscalationPolicy(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SignalsAPIEscalationPolicyEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSignalsAPIEscalationPolicyEntity(ctx, res.SignalsAPIEscalationPolicyEntity)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
