// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *PostMortemsPostMortemReportDataSourceModel) RefreshFromSharedPostMortemsPostMortemReport(ctx context.Context, resp *shared.PostMortemsPostMortemReport) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.AdditionalDetails != nil {
			r.AdditionalDetails = make([]types.String, 0, len(resp.AdditionalDetails))
			for _, v := range resp.AdditionalDetails {
				r.AdditionalDetails = append(r.AdditionalDetails, types.StringValue(v))
			}
		}
		if resp.CalendarEvents == nil {
			r.CalendarEvents = nil
		} else {
			r.CalendarEvents = &tfTypes.NullableCalendarsEvent{}
			r.CalendarEvents.CreatedAt = types.StringPointerValue(resp.CalendarEvents.CreatedAt)
			r.CalendarEvents.Description = types.StringPointerValue(resp.CalendarEvents.Description)
			r.CalendarEvents.EndsAt = types.StringPointerValue(resp.CalendarEvents.EndsAt)
			r.CalendarEvents.ID = types.StringPointerValue(resp.CalendarEvents.ID)
			r.CalendarEvents.ProviderIconURL = types.StringPointerValue(resp.CalendarEvents.ProviderIconURL)
			r.CalendarEvents.ProviderURL = types.StringPointerValue(resp.CalendarEvents.ProviderURL)
			r.CalendarEvents.StartsAt = types.StringPointerValue(resp.CalendarEvents.StartsAt)
			r.CalendarEvents.Summary = types.StringPointerValue(resp.CalendarEvents.Summary)
			r.CalendarEvents.UpdatedAt = types.StringPointerValue(resp.CalendarEvents.UpdatedAt)
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Incident == nil {
			r.Incident = nil
		} else {
			r.Incident = &tfTypes.NullableIncident{}
			r.Incident.Active = types.BoolPointerValue(resp.Incident.Active)
			r.Incident.AiIncidentSummary = types.StringPointerValue(resp.Incident.AiIncidentSummary)
			r.Incident.ChannelID = types.StringPointerValue(resp.Incident.ChannelID)
			r.Incident.ChannelName = types.StringPointerValue(resp.Incident.ChannelName)
			r.Incident.ChannelReference = types.StringPointerValue(resp.Incident.ChannelReference)
			r.Incident.ChannelStatus = types.StringPointerValue(resp.Incident.ChannelStatus)
			if resp.Incident.ConferenceBridges != nil {
				r.Incident.ConferenceBridges = []tfTypes.IncidentsConferenceBridge{}
				if len(r.Incident.ConferenceBridges) > len(resp.Incident.ConferenceBridges) {
					r.Incident.ConferenceBridges = r.Incident.ConferenceBridges[:len(resp.Incident.ConferenceBridges)]
				}
				for conferenceBridgesCount, conferenceBridgesItem := range resp.Incident.ConferenceBridges {
					var conferenceBridges tfTypes.IncidentsConferenceBridge
					if conferenceBridgesItem.Attachments != nil {
					}
					conferenceBridges.HasTranslatedTranscripts = types.BoolPointerValue(conferenceBridgesItem.HasTranslatedTranscripts)
					conferenceBridges.ID = types.StringPointerValue(conferenceBridgesItem.ID)
					if conferenceBridgesItem.LanguageCodes != nil {
						conferenceBridges.LanguageCodes = make([]types.String, 0, len(conferenceBridgesItem.LanguageCodes))
						for _, v := range conferenceBridgesItem.LanguageCodes {
							conferenceBridges.LanguageCodes = append(conferenceBridges.LanguageCodes, types.StringValue(v))
						}
					}
					conferenceBridges.PreviousHostAssignment = types.StringPointerValue(conferenceBridgesItem.PreviousHostAssignment)
					conferenceBridges.TranscriptionStatus = types.StringPointerValue(conferenceBridgesItem.TranscriptionStatus)
					conferenceBridges.TranscriptionSubCode = types.StringPointerValue(conferenceBridgesItem.TranscriptionSubCode)
					if conferenceBridgesCount+1 > len(r.Incident.ConferenceBridges) {
						r.Incident.ConferenceBridges = append(r.Incident.ConferenceBridges, conferenceBridges)
					} else {
						r.Incident.ConferenceBridges[conferenceBridgesCount].Attachments = conferenceBridges.Attachments
						r.Incident.ConferenceBridges[conferenceBridgesCount].HasTranslatedTranscripts = conferenceBridges.HasTranslatedTranscripts
						r.Incident.ConferenceBridges[conferenceBridgesCount].ID = conferenceBridges.ID
						r.Incident.ConferenceBridges[conferenceBridgesCount].LanguageCodes = conferenceBridges.LanguageCodes
						r.Incident.ConferenceBridges[conferenceBridgesCount].PreviousHostAssignment = conferenceBridges.PreviousHostAssignment
						r.Incident.ConferenceBridges[conferenceBridgesCount].TranscriptionStatus = conferenceBridges.TranscriptionStatus
						r.Incident.ConferenceBridges[conferenceBridgesCount].TranscriptionSubCode = conferenceBridges.TranscriptionSubCode
					}
				}
			}
			if resp.Incident.ContextObject == nil {
				r.Incident.ContextObject = nil
			} else {
				r.Incident.ContextObject = &tfTypes.NullableIncidentsContextObject{}
				r.Incident.ContextObject.ContextDescription = types.StringPointerValue(resp.Incident.ContextObject.ContextDescription)
				r.Incident.ContextObject.ContextTag = types.StringPointerValue(resp.Incident.ContextObject.ContextTag)
				r.Incident.ContextObject.ObjectID = types.StringPointerValue(resp.Incident.ContextObject.ObjectID)
				r.Incident.ContextObject.ObjectType = types.StringPointerValue(resp.Incident.ContextObject.ObjectType)
			}
			if resp.Incident.Conversations != nil {
				r.Incident.Conversations = []tfTypes.ConversationsAPIReference{}
				if len(r.Incident.Conversations) > len(resp.Incident.Conversations) {
					r.Incident.Conversations = r.Incident.Conversations[:len(resp.Incident.Conversations)]
				}
				for conversationsCount, conversationsItem := range resp.Incident.Conversations {
					var conversations tfTypes.ConversationsAPIReference
					if conversationsItem.Channel == nil {
						conversations.Channel = nil
					} else {
						conversations.Channel = &tfTypes.NullableConversationsAPIChannel{}
						conversations.Channel.Name = types.StringPointerValue(conversationsItem.Channel.Name)
					}
					conversations.CommentsURL = types.StringPointerValue(conversationsItem.CommentsURL)
					conversations.Field = types.StringPointerValue(conversationsItem.Field)
					conversations.ID = types.StringPointerValue(conversationsItem.ID)
					conversations.ResourceClass = types.StringPointerValue(conversationsItem.ResourceClass)
					conversations.ResourceID = types.StringPointerValue(conversationsItem.ResourceID)
					if conversationsCount+1 > len(r.Incident.Conversations) {
						r.Incident.Conversations = append(r.Incident.Conversations, conversations)
					} else {
						r.Incident.Conversations[conversationsCount].Channel = conversations.Channel
						r.Incident.Conversations[conversationsCount].CommentsURL = conversations.CommentsURL
						r.Incident.Conversations[conversationsCount].Field = conversations.Field
						r.Incident.Conversations[conversationsCount].ID = conversations.ID
						r.Incident.Conversations[conversationsCount].ResourceClass = conversations.ResourceClass
						r.Incident.Conversations[conversationsCount].ResourceID = conversations.ResourceID
					}
				}
			}
			r.Incident.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Incident.CreatedAt))
			if resp.Incident.CreatedBy == nil {
				r.Incident.CreatedBy = nil
			} else {
				r.Incident.CreatedBy = &tfTypes.NullableAuthor{}
				r.Incident.CreatedBy.Email = types.StringPointerValue(resp.Incident.CreatedBy.Email)
				r.Incident.CreatedBy.ID = types.StringPointerValue(resp.Incident.CreatedBy.ID)
				r.Incident.CreatedBy.Name = types.StringPointerValue(resp.Incident.CreatedBy.Name)
				r.Incident.CreatedBy.Source = types.StringPointerValue(resp.Incident.CreatedBy.Source)
			}
			r.Incident.CurrentMilestone = types.StringPointerValue(resp.Incident.CurrentMilestone)
			if resp.Incident.CustomFields != nil {
				r.Incident.CustomFields = []tfTypes.CustomFieldsFieldValue{}
				if len(r.Incident.CustomFields) > len(resp.Incident.CustomFields) {
					r.Incident.CustomFields = r.Incident.CustomFields[:len(resp.Incident.CustomFields)]
				}
				for customFieldsCount, customFieldsItem := range resp.Incident.CustomFields {
					var customFields tfTypes.CustomFieldsFieldValue
					customFields.Description = types.StringPointerValue(customFieldsItem.Description)
					customFields.DisplayName = types.StringPointerValue(customFieldsItem.DisplayName)
					customFields.FieldID = types.StringPointerValue(customFieldsItem.FieldID)
					customFields.Name = types.StringPointerValue(customFieldsItem.Name)
					customFields.Slug = types.StringPointerValue(customFieldsItem.Slug)
					customFields.Value = types.StringPointerValue(customFieldsItem.Value)
					if customFieldsItem.ValueArray != nil {
						customFields.ValueArray = make([]types.String, 0, len(customFieldsItem.ValueArray))
						for _, v := range customFieldsItem.ValueArray {
							customFields.ValueArray = append(customFields.ValueArray, types.StringValue(v))
						}
					}
					customFields.ValueString = types.StringPointerValue(customFieldsItem.ValueString)
					customFields.ValueType = types.StringPointerValue(customFieldsItem.ValueType)
					if customFieldsCount+1 > len(r.Incident.CustomFields) {
						r.Incident.CustomFields = append(r.Incident.CustomFields, customFields)
					} else {
						r.Incident.CustomFields[customFieldsCount].Description = customFields.Description
						r.Incident.CustomFields[customFieldsCount].DisplayName = customFields.DisplayName
						r.Incident.CustomFields[customFieldsCount].FieldID = customFields.FieldID
						r.Incident.CustomFields[customFieldsCount].Name = customFields.Name
						r.Incident.CustomFields[customFieldsCount].Slug = customFields.Slug
						r.Incident.CustomFields[customFieldsCount].Value = customFields.Value
						r.Incident.CustomFields[customFieldsCount].ValueArray = customFields.ValueArray
						r.Incident.CustomFields[customFieldsCount].ValueString = customFields.ValueString
						r.Incident.CustomFields[customFieldsCount].ValueType = customFields.ValueType
					}
				}
			}
			r.Incident.CustomerImpactSummary = types.StringPointerValue(resp.Incident.CustomerImpactSummary)
			r.Incident.CustomersImpacted = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Incident.CustomersImpacted))
			r.Incident.Description = types.StringPointerValue(resp.Incident.Description)
			r.Incident.DiscardedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Incident.DiscardedAt))
			if resp.Incident.Environments != nil {
				r.Incident.Environments = []tfTypes.Succinct{}
				if len(r.Incident.Environments) > len(resp.Incident.Environments) {
					r.Incident.Environments = r.Incident.Environments[:len(resp.Incident.Environments)]
				}
				for environmentsCount, environmentsItem := range resp.Incident.Environments {
					var environments tfTypes.Succinct
					environments.ID = types.StringPointerValue(environmentsItem.ID)
					environments.Name = types.StringPointerValue(environmentsItem.Name)
					if environmentsCount+1 > len(r.Incident.Environments) {
						r.Incident.Environments = append(r.Incident.Environments, environments)
					} else {
						r.Incident.Environments[environmentsCount].ID = environments.ID
						r.Incident.Environments[environmentsCount].Name = environments.Name
					}
				}
			}
			if resp.Incident.FieldRequirements != nil {
				r.Incident.FieldRequirements = []tfTypes.IncidentFieldRequirement{}
				if len(r.Incident.FieldRequirements) > len(resp.Incident.FieldRequirements) {
					r.Incident.FieldRequirements = r.Incident.FieldRequirements[:len(resp.Incident.FieldRequirements)]
				}
				for fieldRequirementsCount, fieldRequirementsItem := range resp.Incident.FieldRequirements {
					var fieldRequirements tfTypes.IncidentFieldRequirement
					fieldRequirements.FieldID = types.StringPointerValue(fieldRequirementsItem.FieldID)
					fieldRequirements.RequiredAtMilestoneID = types.StringPointerValue(fieldRequirementsItem.RequiredAtMilestoneID)
					if fieldRequirementsCount+1 > len(r.Incident.FieldRequirements) {
						r.Incident.FieldRequirements = append(r.Incident.FieldRequirements, fieldRequirements)
					} else {
						r.Incident.FieldRequirements[fieldRequirementsCount].FieldID = fieldRequirements.FieldID
						r.Incident.FieldRequirements[fieldRequirementsCount].RequiredAtMilestoneID = fieldRequirements.RequiredAtMilestoneID
					}
				}
			}
			if resp.Incident.Functionalities != nil {
				r.Incident.Functionalities = []tfTypes.Succinct{}
				if len(r.Incident.Functionalities) > len(resp.Incident.Functionalities) {
					r.Incident.Functionalities = r.Incident.Functionalities[:len(resp.Incident.Functionalities)]
				}
				for functionalitiesCount, functionalitiesItem := range resp.Incident.Functionalities {
					var functionalities tfTypes.Succinct
					functionalities.ID = types.StringPointerValue(functionalitiesItem.ID)
					functionalities.Name = types.StringPointerValue(functionalitiesItem.Name)
					if functionalitiesCount+1 > len(r.Incident.Functionalities) {
						r.Incident.Functionalities = append(r.Incident.Functionalities, functionalities)
					} else {
						r.Incident.Functionalities[functionalitiesCount].ID = functionalities.ID
						r.Incident.Functionalities[functionalitiesCount].Name = functionalities.Name
					}
				}
			}
			r.Incident.ID = types.StringPointerValue(resp.Incident.ID)
			if resp.Incident.Impacts != nil {
				r.Incident.Impacts = []tfTypes.IncidentsImpact{}
				if len(r.Incident.Impacts) > len(resp.Incident.Impacts) {
					r.Incident.Impacts = r.Incident.Impacts[:len(resp.Incident.Impacts)]
				}
				for impactsCount, impactsItem := range resp.Incident.Impacts {
					var impacts tfTypes.IncidentsImpact
					if impactsItem.Condition == nil {
						impacts.Condition = nil
					} else {
						impacts.Condition = &tfTypes.NullableSeverityMatrixCondition{}
						impacts.Condition.ID = types.StringPointerValue(impactsItem.Condition.ID)
						impacts.Condition.Name = types.StringPointerValue(impactsItem.Condition.Name)
						impacts.Condition.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(impactsItem.Condition.Position))
					}
					if impactsItem.Conversations != nil {
						impacts.Conversations = []tfTypes.ConversationsAPIReference{}
						for conversationsCount1, conversationsItem1 := range impactsItem.Conversations {
							var conversations1 tfTypes.ConversationsAPIReference
							if conversationsItem1.Channel == nil {
								conversations1.Channel = nil
							} else {
								conversations1.Channel = &tfTypes.NullableConversationsAPIChannel{}
								conversations1.Channel.Name = types.StringPointerValue(conversationsItem1.Channel.Name)
							}
							conversations1.CommentsURL = types.StringPointerValue(conversationsItem1.CommentsURL)
							conversations1.Field = types.StringPointerValue(conversationsItem1.Field)
							conversations1.ID = types.StringPointerValue(conversationsItem1.ID)
							conversations1.ResourceClass = types.StringPointerValue(conversationsItem1.ResourceClass)
							conversations1.ResourceID = types.StringPointerValue(conversationsItem1.ResourceID)
							if conversationsCount1+1 > len(impacts.Conversations) {
								impacts.Conversations = append(impacts.Conversations, conversations1)
							} else {
								impacts.Conversations[conversationsCount1].Channel = conversations1.Channel
								impacts.Conversations[conversationsCount1].CommentsURL = conversations1.CommentsURL
								impacts.Conversations[conversationsCount1].Field = conversations1.Field
								impacts.Conversations[conversationsCount1].ID = conversations1.ID
								impacts.Conversations[conversationsCount1].ResourceClass = conversations1.ResourceClass
								impacts.Conversations[conversationsCount1].ResourceID = conversations1.ResourceID
							}
						}
					}
					impacts.ID = types.StringPointerValue(impactsItem.ID)
					if impactsItem.Impact == nil {
						impacts.Impact = nil
					} else {
						impacts.Impact = &tfTypes.NullableSuccinct{}
						impacts.Impact.ID = types.StringPointerValue(impactsItem.Impact.ID)
						impacts.Impact.Name = types.StringPointerValue(impactsItem.Impact.Name)
					}
					impacts.Type = types.StringPointerValue(impactsItem.Type)
					if impactsCount+1 > len(r.Incident.Impacts) {
						r.Incident.Impacts = append(r.Incident.Impacts, impacts)
					} else {
						r.Incident.Impacts[impactsCount].Condition = impacts.Condition
						r.Incident.Impacts[impactsCount].Conversations = impacts.Conversations
						r.Incident.Impacts[impactsCount].ID = impacts.ID
						r.Incident.Impacts[impactsCount].Impact = impacts.Impact
						r.Incident.Impacts[impactsCount].Type = impacts.Type
					}
				}
			}
			if resp.Incident.IncidentChannels != nil {
				r.Incident.IncidentChannels = []tfTypes.IncidentsChannel{}
				if len(r.Incident.IncidentChannels) > len(resp.Incident.IncidentChannels) {
					r.Incident.IncidentChannels = r.Incident.IncidentChannels[:len(resp.Incident.IncidentChannels)]
				}
				for incidentChannelsCount, incidentChannelsItem := range resp.Incident.IncidentChannels {
					var incidentChannels tfTypes.IncidentsChannel
					incidentChannels.IconURL = types.StringPointerValue(incidentChannelsItem.IconURL)
					incidentChannels.ID = types.StringPointerValue(incidentChannelsItem.ID)
					incidentChannels.Name = types.StringPointerValue(incidentChannelsItem.Name)
					incidentChannels.Source = types.StringPointerValue(incidentChannelsItem.Source)
					incidentChannels.SourceID = types.StringPointerValue(incidentChannelsItem.SourceID)
					incidentChannels.SourceName = types.StringPointerValue(incidentChannelsItem.SourceName)
					incidentChannels.Status = types.StringPointerValue(incidentChannelsItem.Status)
					incidentChannels.URL = types.StringPointerValue(incidentChannelsItem.URL)
					if incidentChannelsCount+1 > len(r.Incident.IncidentChannels) {
						r.Incident.IncidentChannels = append(r.Incident.IncidentChannels, incidentChannels)
					} else {
						r.Incident.IncidentChannels[incidentChannelsCount].IconURL = incidentChannels.IconURL
						r.Incident.IncidentChannels[incidentChannelsCount].ID = incidentChannels.ID
						r.Incident.IncidentChannels[incidentChannelsCount].Name = incidentChannels.Name
						r.Incident.IncidentChannels[incidentChannelsCount].Source = incidentChannels.Source
						r.Incident.IncidentChannels[incidentChannelsCount].SourceID = incidentChannels.SourceID
						r.Incident.IncidentChannels[incidentChannelsCount].SourceName = incidentChannels.SourceName
						r.Incident.IncidentChannels[incidentChannelsCount].Status = incidentChannels.Status
						r.Incident.IncidentChannels[incidentChannelsCount].URL = incidentChannels.URL
					}
				}
			}
			if resp.Incident.IncidentTickets != nil {
				r.Incident.IncidentTickets = []tfTypes.TicketingTicket{}
				if len(r.Incident.IncidentTickets) > len(resp.Incident.IncidentTickets) {
					r.Incident.IncidentTickets = r.Incident.IncidentTickets[:len(resp.Incident.IncidentTickets)]
				}
				for incidentTicketsCount, incidentTicketsItem := range resp.Incident.IncidentTickets {
					var incidentTickets tfTypes.TicketingTicket
					if incidentTicketsItem.Assignees != nil {
						incidentTickets.Assignees = []tfTypes.Author{}
						for assigneesCount, assigneesItem := range incidentTicketsItem.Assignees {
							var assignees tfTypes.Author
							assignees.Email = types.StringPointerValue(assigneesItem.Email)
							assignees.ID = types.StringPointerValue(assigneesItem.ID)
							assignees.Name = types.StringPointerValue(assigneesItem.Name)
							assignees.Source = types.StringPointerValue(assigneesItem.Source)
							if assigneesCount+1 > len(incidentTickets.Assignees) {
								incidentTickets.Assignees = append(incidentTickets.Assignees, assignees)
							} else {
								incidentTickets.Assignees[assigneesCount].Email = assignees.Email
								incidentTickets.Assignees[assigneesCount].ID = assignees.ID
								incidentTickets.Assignees[assigneesCount].Name = assignees.Name
								incidentTickets.Assignees[assigneesCount].Source = assignees.Source
							}
						}
					}
					if incidentTicketsItem.Attachments != nil {
					}
					incidentTickets.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.CreatedAt))
					if incidentTicketsItem.CreatedBy == nil {
						incidentTickets.CreatedBy = nil
					} else {
						incidentTickets.CreatedBy = &tfTypes.NullableAuthor{}
						incidentTickets.CreatedBy.Email = types.StringPointerValue(incidentTicketsItem.CreatedBy.Email)
						incidentTickets.CreatedBy.ID = types.StringPointerValue(incidentTicketsItem.CreatedBy.ID)
						incidentTickets.CreatedBy.Name = types.StringPointerValue(incidentTicketsItem.CreatedBy.Name)
						incidentTickets.CreatedBy.Source = types.StringPointerValue(incidentTicketsItem.CreatedBy.Source)
					}
					incidentTickets.Description = types.StringPointerValue(incidentTicketsItem.Description)
					incidentTickets.DueAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.DueAt))
					incidentTickets.ID = types.StringPointerValue(incidentTicketsItem.ID)
					incidentTickets.IncidentCurrentMilestone = types.StringPointerValue(incidentTicketsItem.IncidentCurrentMilestone)
					incidentTickets.IncidentID = types.StringPointerValue(incidentTicketsItem.IncidentID)
					incidentTickets.IncidentName = types.StringPointerValue(incidentTicketsItem.IncidentName)
					if incidentTicketsItem.Link == nil {
						incidentTickets.Link = nil
					} else {
						incidentTickets.Link = &tfTypes.NullableAttachmentsLink{}
						incidentTickets.Link.Deletable = types.BoolPointerValue(incidentTicketsItem.Link.Deletable)
						incidentTickets.Link.DisplayText = types.StringPointerValue(incidentTicketsItem.Link.DisplayText)
						incidentTickets.Link.Editable = types.BoolPointerValue(incidentTicketsItem.Link.Editable)
						incidentTickets.Link.HrefURL = types.StringPointerValue(incidentTicketsItem.Link.HrefURL)
						incidentTickets.Link.IconURL = types.StringPointerValue(incidentTicketsItem.Link.IconURL)
						incidentTickets.Link.ID = types.StringPointerValue(incidentTicketsItem.Link.ID)
						incidentTickets.Link.Type = types.StringPointerValue(incidentTicketsItem.Link.Type)
					}
					if incidentTicketsItem.Priority == nil {
						incidentTickets.Priority = nil
					} else {
						incidentTickets.Priority = &tfTypes.NullableTicketingPriority{}
						incidentTickets.Priority.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.Priority.CreatedAt))
						incidentTickets.Priority.ID = types.StringPointerValue(incidentTicketsItem.Priority.ID)
						incidentTickets.Priority.Name = types.StringPointerValue(incidentTicketsItem.Priority.Name)
						incidentTickets.Priority.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(incidentTicketsItem.Priority.Position))
						incidentTickets.Priority.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.Priority.UpdatedAt))
					}
					incidentTickets.State = types.StringPointerValue(incidentTicketsItem.State)
					incidentTickets.Summary = types.StringPointerValue(incidentTicketsItem.Summary)
					incidentTickets.SyncErrorMessage = types.StringPointerValue(incidentTicketsItem.SyncErrorMessage)
					if incidentTicketsItem.TagList != nil {
						incidentTickets.TagList = make([]types.String, 0, len(incidentTicketsItem.TagList))
						for _, v := range incidentTicketsItem.TagList {
							incidentTickets.TagList = append(incidentTickets.TagList, types.StringValue(v))
						}
					}
					incidentTickets.TaskID = types.StringPointerValue(incidentTicketsItem.TaskID)
					incidentTickets.Type = types.StringPointerValue(incidentTicketsItem.Type)
					incidentTickets.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.UpdatedAt))
					if incidentTicketsCount+1 > len(r.Incident.IncidentTickets) {
						r.Incident.IncidentTickets = append(r.Incident.IncidentTickets, incidentTickets)
					} else {
						r.Incident.IncidentTickets[incidentTicketsCount].Assignees = incidentTickets.Assignees
						r.Incident.IncidentTickets[incidentTicketsCount].Attachments = incidentTickets.Attachments
						r.Incident.IncidentTickets[incidentTicketsCount].CreatedAt = incidentTickets.CreatedAt
						r.Incident.IncidentTickets[incidentTicketsCount].CreatedBy = incidentTickets.CreatedBy
						r.Incident.IncidentTickets[incidentTicketsCount].Description = incidentTickets.Description
						r.Incident.IncidentTickets[incidentTicketsCount].DueAt = incidentTickets.DueAt
						r.Incident.IncidentTickets[incidentTicketsCount].ID = incidentTickets.ID
						r.Incident.IncidentTickets[incidentTicketsCount].IncidentCurrentMilestone = incidentTickets.IncidentCurrentMilestone
						r.Incident.IncidentTickets[incidentTicketsCount].IncidentID = incidentTickets.IncidentID
						r.Incident.IncidentTickets[incidentTicketsCount].IncidentName = incidentTickets.IncidentName
						r.Incident.IncidentTickets[incidentTicketsCount].Link = incidentTickets.Link
						r.Incident.IncidentTickets[incidentTicketsCount].Priority = incidentTickets.Priority
						r.Incident.IncidentTickets[incidentTicketsCount].State = incidentTickets.State
						r.Incident.IncidentTickets[incidentTicketsCount].Summary = incidentTickets.Summary
						r.Incident.IncidentTickets[incidentTicketsCount].SyncErrorMessage = incidentTickets.SyncErrorMessage
						r.Incident.IncidentTickets[incidentTicketsCount].TagList = incidentTickets.TagList
						r.Incident.IncidentTickets[incidentTicketsCount].TaskID = incidentTickets.TaskID
						r.Incident.IncidentTickets[incidentTicketsCount].Type = incidentTickets.Type
						r.Incident.IncidentTickets[incidentTicketsCount].UpdatedAt = incidentTickets.UpdatedAt
					}
				}
			}
			if resp.Incident.IncidentType == nil {
				r.Incident.IncidentType = nil
			} else {
				r.Incident.IncidentType = &tfTypes.NullableSuccinct{}
				r.Incident.IncidentType.ID = types.StringPointerValue(resp.Incident.IncidentType.ID)
				r.Incident.IncidentType.Name = types.StringPointerValue(resp.Incident.IncidentType.Name)
			}
			r.Incident.IncidentURL = types.StringPointerValue(resp.Incident.IncidentURL)
			if resp.Incident.Labels == nil {
				r.Incident.Labels = nil
			} else {
				r.Incident.Labels = &tfTypes.NullableIncidentLabels{}
			}
			if resp.Incident.LastNote == nil {
				r.Incident.LastNote = nil
			} else {
				r.Incident.LastNote = &tfTypes.NullableEventNote{}
				r.Incident.LastNote.Body = types.StringPointerValue(resp.Incident.LastNote.Body)
				if resp.Incident.LastNote.Conversations != nil {
					r.Incident.LastNote.Conversations = []tfTypes.ConversationsAPIReference{}
					if len(r.Incident.LastNote.Conversations) > len(resp.Incident.LastNote.Conversations) {
						r.Incident.LastNote.Conversations = r.Incident.LastNote.Conversations[:len(resp.Incident.LastNote.Conversations)]
					}
					for conversationsCount2, conversationsItem2 := range resp.Incident.LastNote.Conversations {
						var conversations2 tfTypes.ConversationsAPIReference
						if conversationsItem2.Channel == nil {
							conversations2.Channel = nil
						} else {
							conversations2.Channel = &tfTypes.NullableConversationsAPIChannel{}
							conversations2.Channel.Name = types.StringPointerValue(conversationsItem2.Channel.Name)
						}
						conversations2.CommentsURL = types.StringPointerValue(conversationsItem2.CommentsURL)
						conversations2.Field = types.StringPointerValue(conversationsItem2.Field)
						conversations2.ID = types.StringPointerValue(conversationsItem2.ID)
						conversations2.ResourceClass = types.StringPointerValue(conversationsItem2.ResourceClass)
						conversations2.ResourceID = types.StringPointerValue(conversationsItem2.ResourceID)
						if conversationsCount2+1 > len(r.Incident.LastNote.Conversations) {
							r.Incident.LastNote.Conversations = append(r.Incident.LastNote.Conversations, conversations2)
						} else {
							r.Incident.LastNote.Conversations[conversationsCount2].Channel = conversations2.Channel
							r.Incident.LastNote.Conversations[conversationsCount2].CommentsURL = conversations2.CommentsURL
							r.Incident.LastNote.Conversations[conversationsCount2].Field = conversations2.Field
							r.Incident.LastNote.Conversations[conversationsCount2].ID = conversations2.ID
							r.Incident.LastNote.Conversations[conversationsCount2].ResourceClass = conversations2.ResourceClass
							r.Incident.LastNote.Conversations[conversationsCount2].ResourceID = conversations2.ResourceID
						}
					}
				}
				r.Incident.LastNote.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Incident.LastNote.CreatedAt))
				r.Incident.LastNote.ID = types.StringPointerValue(resp.Incident.LastNote.ID)
				if resp.Incident.LastNote.StatusPages != nil {
					r.Incident.LastNote.StatusPages = []tfTypes.IncidentsStatusPage{}
					if len(r.Incident.LastNote.StatusPages) > len(resp.Incident.LastNote.StatusPages) {
						r.Incident.LastNote.StatusPages = r.Incident.LastNote.StatusPages[:len(resp.Incident.LastNote.StatusPages)]
					}
					for statusPagesCount, statusPagesItem := range resp.Incident.LastNote.StatusPages {
						var statusPages tfTypes.IncidentsStatusPage
						statusPages.DisplayName = types.StringPointerValue(statusPagesItem.DisplayName)
						statusPages.ExternalID = types.StringPointerValue(statusPagesItem.ExternalID)
						statusPages.ID = types.StringPointerValue(statusPagesItem.ID)
						if statusPagesItem.Integration == nil {
							statusPages.Integration = nil
						} else {
							statusPages.Integration = &tfTypes.NullableIntegration{}
							statusPages.Integration.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(statusPagesItem.Integration.CreatedAt))
							statusPages.Integration.DisplayName = types.StringPointerValue(statusPagesItem.Integration.DisplayName)
							statusPages.Integration.ID = types.StringPointerValue(statusPagesItem.Integration.ID)
							statusPages.Integration.IntegrationName = types.StringPointerValue(statusPagesItem.Integration.IntegrationName)
							statusPages.Integration.IntegrationSlug = types.StringPointerValue(statusPagesItem.Integration.IntegrationSlug)
						}
						statusPages.Name = types.StringPointerValue(statusPagesItem.Name)
						statusPages.URL = types.StringPointerValue(statusPagesItem.URL)
						if statusPagesCount+1 > len(r.Incident.LastNote.StatusPages) {
							r.Incident.LastNote.StatusPages = append(r.Incident.LastNote.StatusPages, statusPages)
						} else {
							r.Incident.LastNote.StatusPages[statusPagesCount].DisplayName = statusPages.DisplayName
							r.Incident.LastNote.StatusPages[statusPagesCount].ExternalID = statusPages.ExternalID
							r.Incident.LastNote.StatusPages[statusPagesCount].ID = statusPages.ID
							r.Incident.LastNote.StatusPages[statusPagesCount].Integration = statusPages.Integration
							r.Incident.LastNote.StatusPages[statusPagesCount].Name = statusPages.Name
							r.Incident.LastNote.StatusPages[statusPagesCount].URL = statusPages.URL
						}
					}
				}
			}
			r.Incident.LastUpdate = types.StringPointerValue(resp.Incident.LastUpdate)
			if resp.Incident.LifecycleMeasurements != nil {
				r.Incident.LifecycleMeasurements = []tfTypes.IncidentsLifecycleMeasurement{}
				if len(r.Incident.LifecycleMeasurements) > len(resp.Incident.LifecycleMeasurements) {
					r.Incident.LifecycleMeasurements = r.Incident.LifecycleMeasurements[:len(resp.Incident.LifecycleMeasurements)]
				}
				for lifecycleMeasurementsCount, lifecycleMeasurementsItem := range resp.Incident.LifecycleMeasurements {
					var lifecycleMeasurements tfTypes.IncidentsLifecycleMeasurement
					lifecycleMeasurements.CalculatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(lifecycleMeasurementsItem.CalculatedAt))
					lifecycleMeasurements.Description = types.StringPointerValue(lifecycleMeasurementsItem.Description)
					lifecycleMeasurements.EndsAtMilestone = types.StringPointerValue(lifecycleMeasurementsItem.EndsAtMilestone)
					lifecycleMeasurements.ID = types.StringPointerValue(lifecycleMeasurementsItem.ID)
					lifecycleMeasurements.Name = types.StringPointerValue(lifecycleMeasurementsItem.Name)
					lifecycleMeasurements.Slug = types.StringPointerValue(lifecycleMeasurementsItem.Slug)
					lifecycleMeasurements.StartsAtMilestone = types.StringPointerValue(lifecycleMeasurementsItem.StartsAtMilestone)
					lifecycleMeasurements.Value = types.StringPointerValue(lifecycleMeasurementsItem.Value)
					if lifecycleMeasurementsCount+1 > len(r.Incident.LifecycleMeasurements) {
						r.Incident.LifecycleMeasurements = append(r.Incident.LifecycleMeasurements, lifecycleMeasurements)
					} else {
						r.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].CalculatedAt = lifecycleMeasurements.CalculatedAt
						r.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Description = lifecycleMeasurements.Description
						r.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].EndsAtMilestone = lifecycleMeasurements.EndsAtMilestone
						r.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].ID = lifecycleMeasurements.ID
						r.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Name = lifecycleMeasurements.Name
						r.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Slug = lifecycleMeasurements.Slug
						r.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].StartsAtMilestone = lifecycleMeasurements.StartsAtMilestone
						r.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Value = lifecycleMeasurements.Value
					}
				}
			}
			if resp.Incident.LifecyclePhases != nil {
				r.Incident.LifecyclePhases = []tfTypes.IncidentsLifecyclePhase{}
				if len(r.Incident.LifecyclePhases) > len(resp.Incident.LifecyclePhases) {
					r.Incident.LifecyclePhases = r.Incident.LifecyclePhases[:len(resp.Incident.LifecyclePhases)]
				}
				for lifecyclePhasesCount, lifecyclePhasesItem := range resp.Incident.LifecyclePhases {
					var lifecyclePhases tfTypes.IncidentsLifecyclePhase
					lifecyclePhases.Description = types.StringPointerValue(lifecyclePhasesItem.Description)
					lifecyclePhases.ID = types.StringPointerValue(lifecyclePhasesItem.ID)
					if lifecyclePhasesItem.Milestones != nil {
						lifecyclePhases.Milestones = []tfTypes.IncidentsLifecycleMilestone{}
						for milestonesCount, milestonesItem := range lifecyclePhasesItem.Milestones {
							var milestones tfTypes.IncidentsLifecycleMilestone
							milestones.Description = types.StringPointerValue(milestonesItem.Description)
							milestones.Duration = types.StringPointerValue(milestonesItem.Duration)
							milestones.ID = types.StringPointerValue(milestonesItem.ID)
							milestones.Name = types.StringPointerValue(milestonesItem.Name)
							milestones.OccurredAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem.OccurredAt))
							milestones.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(milestonesItem.Position))
							milestones.Slug = types.StringPointerValue(milestonesItem.Slug)
							milestones.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem.UpdatedAt))
							if milestonesItem.UpdatedBy == nil {
								milestones.UpdatedBy = nil
							} else {
								milestones.UpdatedBy = &tfTypes.NullableAuthor{}
								milestones.UpdatedBy.Email = types.StringPointerValue(milestonesItem.UpdatedBy.Email)
								milestones.UpdatedBy.ID = types.StringPointerValue(milestonesItem.UpdatedBy.ID)
								milestones.UpdatedBy.Name = types.StringPointerValue(milestonesItem.UpdatedBy.Name)
								milestones.UpdatedBy.Source = types.StringPointerValue(milestonesItem.UpdatedBy.Source)
							}
							if milestonesCount+1 > len(lifecyclePhases.Milestones) {
								lifecyclePhases.Milestones = append(lifecyclePhases.Milestones, milestones)
							} else {
								lifecyclePhases.Milestones[milestonesCount].Description = milestones.Description
								lifecyclePhases.Milestones[milestonesCount].Duration = milestones.Duration
								lifecyclePhases.Milestones[milestonesCount].ID = milestones.ID
								lifecyclePhases.Milestones[milestonesCount].Name = milestones.Name
								lifecyclePhases.Milestones[milestonesCount].OccurredAt = milestones.OccurredAt
								lifecyclePhases.Milestones[milestonesCount].Position = milestones.Position
								lifecyclePhases.Milestones[milestonesCount].Slug = milestones.Slug
								lifecyclePhases.Milestones[milestonesCount].UpdatedAt = milestones.UpdatedAt
								lifecyclePhases.Milestones[milestonesCount].UpdatedBy = milestones.UpdatedBy
							}
						}
					}
					lifecyclePhases.Name = types.StringPointerValue(lifecyclePhasesItem.Name)
					lifecyclePhases.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(lifecyclePhasesItem.Position))
					lifecyclePhases.Type = types.StringPointerValue(lifecyclePhasesItem.Type)
					if lifecyclePhasesCount+1 > len(r.Incident.LifecyclePhases) {
						r.Incident.LifecyclePhases = append(r.Incident.LifecyclePhases, lifecyclePhases)
					} else {
						r.Incident.LifecyclePhases[lifecyclePhasesCount].Description = lifecyclePhases.Description
						r.Incident.LifecyclePhases[lifecyclePhasesCount].ID = lifecyclePhases.ID
						r.Incident.LifecyclePhases[lifecyclePhasesCount].Milestones = lifecyclePhases.Milestones
						r.Incident.LifecyclePhases[lifecyclePhasesCount].Name = lifecyclePhases.Name
						r.Incident.LifecyclePhases[lifecyclePhasesCount].Position = lifecyclePhases.Position
						r.Incident.LifecyclePhases[lifecyclePhasesCount].Type = lifecyclePhases.Type
					}
				}
			}
			if resp.Incident.Milestones != nil {
				r.Incident.Milestones = []tfTypes.IncidentsMilestone{}
				if len(r.Incident.Milestones) > len(resp.Incident.Milestones) {
					r.Incident.Milestones = r.Incident.Milestones[:len(resp.Incident.Milestones)]
				}
				for milestonesCount1, milestonesItem1 := range resp.Incident.Milestones {
					var milestones1 tfTypes.IncidentsMilestone
					milestones1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem1.CreatedAt))
					milestones1.Duration = types.StringPointerValue(milestonesItem1.Duration)
					milestones1.ID = types.StringPointerValue(milestonesItem1.ID)
					milestones1.OccurredAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem1.OccurredAt))
					milestones1.Type = types.StringPointerValue(milestonesItem1.Type)
					milestones1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem1.UpdatedAt))
					if milestonesCount1+1 > len(r.Incident.Milestones) {
						r.Incident.Milestones = append(r.Incident.Milestones, milestones1)
					} else {
						r.Incident.Milestones[milestonesCount1].CreatedAt = milestones1.CreatedAt
						r.Incident.Milestones[milestonesCount1].Duration = milestones1.Duration
						r.Incident.Milestones[milestonesCount1].ID = milestones1.ID
						r.Incident.Milestones[milestonesCount1].OccurredAt = milestones1.OccurredAt
						r.Incident.Milestones[milestonesCount1].Type = milestones1.Type
						r.Incident.Milestones[milestonesCount1].UpdatedAt = milestones1.UpdatedAt
					}
				}
			}
			r.Incident.MonetaryImpact = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Incident.MonetaryImpact))
			r.Incident.MonetaryImpactCents = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Incident.MonetaryImpactCents))
			r.Incident.Name = types.StringPointerValue(resp.Incident.Name)
			r.Incident.Number = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Incident.Number))
			if resp.Incident.Organization == nil {
				r.Incident.Organization = nil
			} else {
				r.Incident.Organization = &tfTypes.NullableOrganization{}
				r.Incident.Organization.ID = types.StringPointerValue(resp.Incident.Organization.ID)
				r.Incident.Organization.Name = types.StringPointerValue(resp.Incident.Organization.Name)
			}
			r.Incident.OrganizationID = types.StringPointerValue(resp.Incident.OrganizationID)
			r.Incident.Priority = types.StringPointerValue(resp.Incident.Priority)
			r.Incident.PrivateID = types.StringPointerValue(resp.Incident.PrivateID)
			r.Incident.PrivateStatusPageURL = types.StringPointerValue(resp.Incident.PrivateStatusPageURL)
			r.Incident.ReportID = types.StringPointerValue(resp.Incident.ReportID)
			if resp.Incident.RetroExports != nil {
			}
			if resp.Incident.RoleAssignments != nil {
				r.Incident.RoleAssignments = []tfTypes.IncidentsRoleAssignment{}
				if len(r.Incident.RoleAssignments) > len(resp.Incident.RoleAssignments) {
					r.Incident.RoleAssignments = r.Incident.RoleAssignments[:len(resp.Incident.RoleAssignments)]
				}
				for roleAssignmentsCount, roleAssignmentsItem := range resp.Incident.RoleAssignments {
					var roleAssignments tfTypes.IncidentsRoleAssignment
					roleAssignments.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.CreatedAt))
					roleAssignments.ID = types.StringPointerValue(roleAssignmentsItem.ID)
					if roleAssignmentsItem.IncidentRole == nil {
						roleAssignments.IncidentRole = nil
					} else {
						roleAssignments.IncidentRole = &tfTypes.NullableIncidentRole{}
						roleAssignments.IncidentRole.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.IncidentRole.CreatedAt))
						roleAssignments.IncidentRole.Description = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Description)
						roleAssignments.IncidentRole.DiscardedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.IncidentRole.DiscardedAt))
						roleAssignments.IncidentRole.ID = types.StringPointerValue(roleAssignmentsItem.IncidentRole.ID)
						roleAssignments.IncidentRole.Name = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Name)
						roleAssignments.IncidentRole.Summary = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Summary)
						roleAssignments.IncidentRole.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.IncidentRole.UpdatedAt))
					}
					roleAssignments.Status = types.StringPointerValue(roleAssignmentsItem.Status)
					roleAssignments.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.UpdatedAt))
					if roleAssignmentsItem.User == nil {
						roleAssignments.User = nil
					} else {
						roleAssignments.User = &tfTypes.NullableUser{}
						roleAssignments.User.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.User.CreatedAt))
						roleAssignments.User.Email = types.StringPointerValue(roleAssignmentsItem.User.Email)
						roleAssignments.User.ID = types.StringPointerValue(roleAssignmentsItem.User.ID)
						roleAssignments.User.Name = types.StringPointerValue(roleAssignmentsItem.User.Name)
						if roleAssignmentsItem.User.SignalsEnabledNotificationTypes != nil {
							roleAssignments.User.SignalsEnabledNotificationTypes = make([]types.String, 0, len(roleAssignmentsItem.User.SignalsEnabledNotificationTypes))
							for _, v := range roleAssignmentsItem.User.SignalsEnabledNotificationTypes {
								roleAssignments.User.SignalsEnabledNotificationTypes = append(roleAssignments.User.SignalsEnabledNotificationTypes, types.StringValue(v))
							}
						}
						if roleAssignmentsItem.User.SignalsNotificationPolicyCompliance != nil {
							roleAssignments.User.SignalsNotificationPolicyCompliance = []tfTypes.SignalsAPINotificationPolicyItemCompliance{}
							for signalsNotificationPolicyComplianceCount, signalsNotificationPolicyComplianceItem := range roleAssignmentsItem.User.SignalsNotificationPolicyCompliance {
								var signalsNotificationPolicyCompliance tfTypes.SignalsAPINotificationPolicyItemCompliance
								signalsNotificationPolicyCompliance.IsCompliant = types.BoolPointerValue(signalsNotificationPolicyComplianceItem.IsCompliant)
								signalsNotificationPolicyCompliance.NotificationPolicyItemID = types.StringPointerValue(signalsNotificationPolicyComplianceItem.NotificationPolicyItemID)
								if signalsNotificationPolicyComplianceCount+1 > len(roleAssignments.User.SignalsNotificationPolicyCompliance) {
									roleAssignments.User.SignalsNotificationPolicyCompliance = append(roleAssignments.User.SignalsNotificationPolicyCompliance, signalsNotificationPolicyCompliance)
								} else {
									roleAssignments.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount].IsCompliant = signalsNotificationPolicyCompliance.IsCompliant
									roleAssignments.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount].NotificationPolicyItemID = signalsNotificationPolicyCompliance.NotificationPolicyItemID
								}
							}
						}
						roleAssignments.User.SlackLinked = types.BoolPointerValue(roleAssignmentsItem.User.SlackLinked)
						roleAssignments.User.SlackUserID = types.StringPointerValue(roleAssignmentsItem.User.SlackUserID)
						roleAssignments.User.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.User.UpdatedAt))
					}
					if roleAssignmentsCount+1 > len(r.Incident.RoleAssignments) {
						r.Incident.RoleAssignments = append(r.Incident.RoleAssignments, roleAssignments)
					} else {
						r.Incident.RoleAssignments[roleAssignmentsCount].CreatedAt = roleAssignments.CreatedAt
						r.Incident.RoleAssignments[roleAssignmentsCount].ID = roleAssignments.ID
						r.Incident.RoleAssignments[roleAssignmentsCount].IncidentRole = roleAssignments.IncidentRole
						r.Incident.RoleAssignments[roleAssignmentsCount].Status = roleAssignments.Status
						r.Incident.RoleAssignments[roleAssignmentsCount].UpdatedAt = roleAssignments.UpdatedAt
						r.Incident.RoleAssignments[roleAssignmentsCount].User = roleAssignments.User
					}
				}
			}
			if resp.Incident.Services != nil {
				r.Incident.Services = []tfTypes.Succinct{}
				if len(r.Incident.Services) > len(resp.Incident.Services) {
					r.Incident.Services = r.Incident.Services[:len(resp.Incident.Services)]
				}
				for servicesCount, servicesItem := range resp.Incident.Services {
					var services tfTypes.Succinct
					services.ID = types.StringPointerValue(servicesItem.ID)
					services.Name = types.StringPointerValue(servicesItem.Name)
					if servicesCount+1 > len(r.Incident.Services) {
						r.Incident.Services = append(r.Incident.Services, services)
					} else {
						r.Incident.Services[servicesCount].ID = services.ID
						r.Incident.Services[servicesCount].Name = services.Name
					}
				}
			}
			r.Incident.Severity = types.StringPointerValue(resp.Incident.Severity)
			r.Incident.SeverityColor = types.StringPointerValue(resp.Incident.SeverityColor)
			r.Incident.SeverityCondition = types.StringPointerValue(resp.Incident.SeverityCondition)
			if resp.Incident.SeverityConditionObject == nil {
				r.Incident.SeverityConditionObject = nil
			} else {
				r.Incident.SeverityConditionObject = &tfTypes.NullableSeverityMatrixCondition{}
				r.Incident.SeverityConditionObject.ID = types.StringPointerValue(resp.Incident.SeverityConditionObject.ID)
				r.Incident.SeverityConditionObject.Name = types.StringPointerValue(resp.Incident.SeverityConditionObject.Name)
				r.Incident.SeverityConditionObject.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Incident.SeverityConditionObject.Position))
			}
			r.Incident.SeverityImpact = types.StringPointerValue(resp.Incident.SeverityImpact)
			if resp.Incident.SeverityImpactObject == nil {
				r.Incident.SeverityImpactObject = nil
			} else {
				r.Incident.SeverityImpactObject = &tfTypes.NullableSeverityMatrixImpact{}
				r.Incident.SeverityImpactObject.AffectsID = types.StringPointerValue(resp.Incident.SeverityImpactObject.AffectsID)
				r.Incident.SeverityImpactObject.ID = types.StringPointerValue(resp.Incident.SeverityImpactObject.ID)
				r.Incident.SeverityImpactObject.Name = types.StringPointerValue(resp.Incident.SeverityImpactObject.Name)
				r.Incident.SeverityImpactObject.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Incident.SeverityImpactObject.Position))
				r.Incident.SeverityImpactObject.Type = types.StringPointerValue(resp.Incident.SeverityImpactObject.Type)
			}
			r.Incident.StartedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Incident.StartedAt))
			if resp.Incident.StatusPages != nil {
				r.Incident.StatusPages = []tfTypes.IncidentsStatusPage{}
				if len(r.Incident.StatusPages) > len(resp.Incident.StatusPages) {
					r.Incident.StatusPages = r.Incident.StatusPages[:len(resp.Incident.StatusPages)]
				}
				for statusPagesCount1, statusPagesItem1 := range resp.Incident.StatusPages {
					var statusPages1 tfTypes.IncidentsStatusPage
					statusPages1.DisplayName = types.StringPointerValue(statusPagesItem1.DisplayName)
					statusPages1.ExternalID = types.StringPointerValue(statusPagesItem1.ExternalID)
					statusPages1.ID = types.StringPointerValue(statusPagesItem1.ID)
					if statusPagesItem1.Integration == nil {
						statusPages1.Integration = nil
					} else {
						statusPages1.Integration = &tfTypes.NullableIntegration{}
						statusPages1.Integration.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(statusPagesItem1.Integration.CreatedAt))
						statusPages1.Integration.DisplayName = types.StringPointerValue(statusPagesItem1.Integration.DisplayName)
						statusPages1.Integration.ID = types.StringPointerValue(statusPagesItem1.Integration.ID)
						statusPages1.Integration.IntegrationName = types.StringPointerValue(statusPagesItem1.Integration.IntegrationName)
						statusPages1.Integration.IntegrationSlug = types.StringPointerValue(statusPagesItem1.Integration.IntegrationSlug)
					}
					statusPages1.Name = types.StringPointerValue(statusPagesItem1.Name)
					statusPages1.URL = types.StringPointerValue(statusPagesItem1.URL)
					if statusPagesCount1+1 > len(r.Incident.StatusPages) {
						r.Incident.StatusPages = append(r.Incident.StatusPages, statusPages1)
					} else {
						r.Incident.StatusPages[statusPagesCount1].DisplayName = statusPages1.DisplayName
						r.Incident.StatusPages[statusPagesCount1].ExternalID = statusPages1.ExternalID
						r.Incident.StatusPages[statusPagesCount1].ID = statusPages1.ID
						r.Incident.StatusPages[statusPagesCount1].Integration = statusPages1.Integration
						r.Incident.StatusPages[statusPagesCount1].Name = statusPages1.Name
						r.Incident.StatusPages[statusPagesCount1].URL = statusPages1.URL
					}
				}
			}
			r.Incident.Summary = types.StringPointerValue(resp.Incident.Summary)
			if resp.Incident.TagList != nil {
				r.Incident.TagList = make([]types.String, 0, len(resp.Incident.TagList))
				for _, v := range resp.Incident.TagList {
					r.Incident.TagList = append(r.Incident.TagList, types.StringValue(v))
				}
			}
			if resp.Incident.TeamAssignments != nil {
				r.Incident.TeamAssignments = []tfTypes.IncidentsTeamAssignmentLite{}
				if len(r.Incident.TeamAssignments) > len(resp.Incident.TeamAssignments) {
					r.Incident.TeamAssignments = r.Incident.TeamAssignments[:len(resp.Incident.TeamAssignments)]
				}
				for teamAssignmentsCount, teamAssignmentsItem := range resp.Incident.TeamAssignments {
					var teamAssignments tfTypes.IncidentsTeamAssignmentLite
					teamAssignments.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.CreatedAt))
					teamAssignments.ID = types.StringPointerValue(teamAssignmentsItem.ID)
					teamAssignments.Status = types.StringPointerValue(teamAssignmentsItem.Status)
					if teamAssignmentsItem.Team == nil {
						teamAssignments.Team = nil
					} else {
						teamAssignments.Team = &tfTypes.NullableTeamLite{}
						teamAssignments.Team.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.Team.CreatedAt))
						if teamAssignmentsItem.Team.CreatedBy == nil {
							teamAssignments.Team.CreatedBy = nil
						} else {
							teamAssignments.Team.CreatedBy = &tfTypes.NullableAuthor{}
							teamAssignments.Team.CreatedBy.Email = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.Email)
							teamAssignments.Team.CreatedBy.ID = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.ID)
							teamAssignments.Team.CreatedBy.Name = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.Name)
							teamAssignments.Team.CreatedBy.Source = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.Source)
						}
						teamAssignments.Team.Description = types.StringPointerValue(teamAssignmentsItem.Team.Description)
						teamAssignments.Team.ID = types.StringPointerValue(teamAssignmentsItem.Team.ID)
						teamAssignments.Team.InSupportHours = types.BoolPointerValue(teamAssignmentsItem.Team.InSupportHours)
						teamAssignments.Team.Name = types.StringPointerValue(teamAssignmentsItem.Team.Name)
						teamAssignments.Team.SignalsIcalURL = types.StringPointerValue(teamAssignmentsItem.Team.SignalsIcalURL)
						teamAssignments.Team.Slug = types.StringPointerValue(teamAssignmentsItem.Team.Slug)
						teamAssignments.Team.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.Team.UpdatedAt))
					}
					teamAssignments.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.UpdatedAt))
					if teamAssignmentsCount+1 > len(r.Incident.TeamAssignments) {
						r.Incident.TeamAssignments = append(r.Incident.TeamAssignments, teamAssignments)
					} else {
						r.Incident.TeamAssignments[teamAssignmentsCount].CreatedAt = teamAssignments.CreatedAt
						r.Incident.TeamAssignments[teamAssignmentsCount].ID = teamAssignments.ID
						r.Incident.TeamAssignments[teamAssignmentsCount].Status = teamAssignments.Status
						r.Incident.TeamAssignments[teamAssignmentsCount].Team = teamAssignments.Team
						r.Incident.TeamAssignments[teamAssignmentsCount].UpdatedAt = teamAssignments.UpdatedAt
					}
				}
			}
			if resp.Incident.Ticket == nil {
				r.Incident.Ticket = nil
			} else {
				r.Incident.Ticket = &tfTypes.NullableTicketingTicket{}
				if resp.Incident.Ticket.Assignees != nil {
					r.Incident.Ticket.Assignees = []tfTypes.Author{}
					if len(r.Incident.Ticket.Assignees) > len(resp.Incident.Ticket.Assignees) {
						r.Incident.Ticket.Assignees = r.Incident.Ticket.Assignees[:len(resp.Incident.Ticket.Assignees)]
					}
					for assigneesCount1, assigneesItem1 := range resp.Incident.Ticket.Assignees {
						var assignees1 tfTypes.Author
						assignees1.Email = types.StringPointerValue(assigneesItem1.Email)
						assignees1.ID = types.StringPointerValue(assigneesItem1.ID)
						assignees1.Name = types.StringPointerValue(assigneesItem1.Name)
						assignees1.Source = types.StringPointerValue(assigneesItem1.Source)
						if assigneesCount1+1 > len(r.Incident.Ticket.Assignees) {
							r.Incident.Ticket.Assignees = append(r.Incident.Ticket.Assignees, assignees1)
						} else {
							r.Incident.Ticket.Assignees[assigneesCount1].Email = assignees1.Email
							r.Incident.Ticket.Assignees[assigneesCount1].ID = assignees1.ID
							r.Incident.Ticket.Assignees[assigneesCount1].Name = assignees1.Name
							r.Incident.Ticket.Assignees[assigneesCount1].Source = assignees1.Source
						}
					}
				}
				if resp.Incident.Ticket.Attachments != nil {
				}
				r.Incident.Ticket.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Incident.Ticket.CreatedAt))
				if resp.Incident.Ticket.CreatedBy == nil {
					r.Incident.Ticket.CreatedBy = nil
				} else {
					r.Incident.Ticket.CreatedBy = &tfTypes.NullableAuthor{}
					r.Incident.Ticket.CreatedBy.Email = types.StringPointerValue(resp.Incident.Ticket.CreatedBy.Email)
					r.Incident.Ticket.CreatedBy.ID = types.StringPointerValue(resp.Incident.Ticket.CreatedBy.ID)
					r.Incident.Ticket.CreatedBy.Name = types.StringPointerValue(resp.Incident.Ticket.CreatedBy.Name)
					r.Incident.Ticket.CreatedBy.Source = types.StringPointerValue(resp.Incident.Ticket.CreatedBy.Source)
				}
				r.Incident.Ticket.Description = types.StringPointerValue(resp.Incident.Ticket.Description)
				r.Incident.Ticket.DueAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Incident.Ticket.DueAt))
				r.Incident.Ticket.ID = types.StringPointerValue(resp.Incident.Ticket.ID)
				r.Incident.Ticket.IncidentCurrentMilestone = types.StringPointerValue(resp.Incident.Ticket.IncidentCurrentMilestone)
				r.Incident.Ticket.IncidentID = types.StringPointerValue(resp.Incident.Ticket.IncidentID)
				r.Incident.Ticket.IncidentName = types.StringPointerValue(resp.Incident.Ticket.IncidentName)
				if resp.Incident.Ticket.Link == nil {
					r.Incident.Ticket.Link = nil
				} else {
					r.Incident.Ticket.Link = &tfTypes.NullableAttachmentsLink{}
					r.Incident.Ticket.Link.Deletable = types.BoolPointerValue(resp.Incident.Ticket.Link.Deletable)
					r.Incident.Ticket.Link.DisplayText = types.StringPointerValue(resp.Incident.Ticket.Link.DisplayText)
					r.Incident.Ticket.Link.Editable = types.BoolPointerValue(resp.Incident.Ticket.Link.Editable)
					r.Incident.Ticket.Link.HrefURL = types.StringPointerValue(resp.Incident.Ticket.Link.HrefURL)
					r.Incident.Ticket.Link.IconURL = types.StringPointerValue(resp.Incident.Ticket.Link.IconURL)
					r.Incident.Ticket.Link.ID = types.StringPointerValue(resp.Incident.Ticket.Link.ID)
					r.Incident.Ticket.Link.Type = types.StringPointerValue(resp.Incident.Ticket.Link.Type)
				}
				if resp.Incident.Ticket.Priority == nil {
					r.Incident.Ticket.Priority = nil
				} else {
					r.Incident.Ticket.Priority = &tfTypes.NullableTicketingPriority{}
					r.Incident.Ticket.Priority.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Incident.Ticket.Priority.CreatedAt))
					r.Incident.Ticket.Priority.ID = types.StringPointerValue(resp.Incident.Ticket.Priority.ID)
					r.Incident.Ticket.Priority.Name = types.StringPointerValue(resp.Incident.Ticket.Priority.Name)
					r.Incident.Ticket.Priority.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Incident.Ticket.Priority.Position))
					r.Incident.Ticket.Priority.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Incident.Ticket.Priority.UpdatedAt))
				}
				r.Incident.Ticket.State = types.StringPointerValue(resp.Incident.Ticket.State)
				r.Incident.Ticket.Summary = types.StringPointerValue(resp.Incident.Ticket.Summary)
				r.Incident.Ticket.SyncErrorMessage = types.StringPointerValue(resp.Incident.Ticket.SyncErrorMessage)
				if resp.Incident.Ticket.TagList != nil {
					r.Incident.Ticket.TagList = make([]types.String, 0, len(resp.Incident.Ticket.TagList))
					for _, v := range resp.Incident.Ticket.TagList {
						r.Incident.Ticket.TagList = append(r.Incident.Ticket.TagList, types.StringValue(v))
					}
				}
				r.Incident.Ticket.TaskID = types.StringPointerValue(resp.Incident.Ticket.TaskID)
				r.Incident.Ticket.Type = types.StringPointerValue(resp.Incident.Ticket.Type)
				r.Incident.Ticket.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Incident.Ticket.UpdatedAt))
			}
		}
		r.IncidentID = types.StringPointerValue(resp.IncidentID)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Questions == nil {
			r.Questions = nil
		} else {
			r.Questions = &tfTypes.NullablePostMortemsQuestion{}
			if resp.Questions.AvailableOptions != nil {
				r.Questions.AvailableOptions = make([]types.String, 0, len(resp.Questions.AvailableOptions))
				for _, v := range resp.Questions.AvailableOptions {
					r.Questions.AvailableOptions = append(r.Questions.AvailableOptions, types.StringValue(v))
				}
			}
			r.Questions.Body = types.StringPointerValue(resp.Questions.Body)
			if resp.Questions.Conversations != nil {
				r.Questions.Conversations = []tfTypes.ConversationsAPIReference{}
				if len(r.Questions.Conversations) > len(resp.Questions.Conversations) {
					r.Questions.Conversations = r.Questions.Conversations[:len(resp.Questions.Conversations)]
				}
				for conversationsCount3, conversationsItem3 := range resp.Questions.Conversations {
					var conversations3 tfTypes.ConversationsAPIReference
					if conversationsItem3.Channel == nil {
						conversations3.Channel = nil
					} else {
						conversations3.Channel = &tfTypes.NullableConversationsAPIChannel{}
						conversations3.Channel.Name = types.StringPointerValue(conversationsItem3.Channel.Name)
					}
					conversations3.CommentsURL = types.StringPointerValue(conversationsItem3.CommentsURL)
					conversations3.Field = types.StringPointerValue(conversationsItem3.Field)
					conversations3.ID = types.StringPointerValue(conversationsItem3.ID)
					conversations3.ResourceClass = types.StringPointerValue(conversationsItem3.ResourceClass)
					conversations3.ResourceID = types.StringPointerValue(conversationsItem3.ResourceID)
					if conversationsCount3+1 > len(r.Questions.Conversations) {
						r.Questions.Conversations = append(r.Questions.Conversations, conversations3)
					} else {
						r.Questions.Conversations[conversationsCount3].Channel = conversations3.Channel
						r.Questions.Conversations[conversationsCount3].CommentsURL = conversations3.CommentsURL
						r.Questions.Conversations[conversationsCount3].Field = conversations3.Field
						r.Questions.Conversations[conversationsCount3].ID = conversations3.ID
						r.Questions.Conversations[conversationsCount3].ResourceClass = conversations3.ResourceClass
						r.Questions.Conversations[conversationsCount3].ResourceID = conversations3.ResourceID
					}
				}
			}
			r.Questions.ID = types.StringPointerValue(resp.Questions.ID)
			r.Questions.IsRequired = types.BoolPointerValue(resp.Questions.IsRequired)
			r.Questions.Kind = types.StringPointerValue(resp.Questions.Kind)
			r.Questions.QuestionTypeID = types.StringPointerValue(resp.Questions.QuestionTypeID)
			r.Questions.Title = types.StringPointerValue(resp.Questions.Title)
			r.Questions.Tooltip = types.StringPointerValue(resp.Questions.Tooltip)
		}
		r.RetrospectiveID = types.StringPointerValue(resp.RetrospectiveID)
		r.RetrospectiveNote = types.StringPointerValue(resp.RetrospectiveNote)
		r.RetrospectiveShim = types.BoolPointerValue(resp.RetrospectiveShim)
		r.Summary = types.StringPointerValue(resp.Summary)
		if resp.TagList != nil {
			r.TagList = make([]types.String, 0, len(resp.TagList))
			for _, v := range resp.TagList {
				r.TagList = append(r.TagList, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *PostMortemsPostMortemReportDataSourceModel) ToOperationsGetPostMortemReportRequest(ctx context.Context) (*operations.GetPostMortemReportRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var reportID string
	reportID = r.ID.ValueString()

	out := operations.GetPostMortemReportRequest{
		ReportID: reportID,
	}

	return &out, diags
}
