// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &IncidentsRetrospectiveFieldEntityDataSource{}
var _ datasource.DataSourceWithConfigure = &IncidentsRetrospectiveFieldEntityDataSource{}

func NewIncidentsRetrospectiveFieldEntityDataSource() datasource.DataSource {
	return &IncidentsRetrospectiveFieldEntityDataSource{}
}

// IncidentsRetrospectiveFieldEntityDataSource is the data source implementation.
type IncidentsRetrospectiveFieldEntityDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// IncidentsRetrospectiveFieldEntityDataSourceModel describes the data model.
type IncidentsRetrospectiveFieldEntityDataSourceModel struct {
	FieldID           types.String   `tfsdk:"field_id"`
	HelpText          types.String   `tfsdk:"help_text"`
	ID                types.String   `tfsdk:"id"`
	IncidentID        types.String   `tfsdk:"incident_id"`
	IsRequired        types.Bool     `tfsdk:"is_required"`
	Label             types.String   `tfsdk:"label"`
	PermissibleValues []types.String `tfsdk:"permissible_values"`
	RetrospectiveID   types.String   `tfsdk:"retrospective_id"`
	Schema            []types.String `tfsdk:"schema"`
	Type              types.String   `tfsdk:"type"`
	Value             types.String   `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (r *IncidentsRetrospectiveFieldEntityDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_incidents_retrospective_field_entity"
}

// Schema defines the schema for the data source.
func (r *IncidentsRetrospectiveFieldEntityDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "IncidentsRetrospectiveFieldEntity DataSource",

		Attributes: map[string]schema.Attribute{
			"field_id": schema.StringAttribute{
				Required: true,
			},
			"help_text": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"incident_id": schema.StringAttribute{
				Required: true,
			},
			"is_required": schema.BoolAttribute{
				Computed: true,
			},
			"label": schema.StringAttribute{
				Computed: true,
			},
			"permissible_values": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"retrospective_id": schema.StringAttribute{
				Required: true,
			},
			"schema": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"type": schema.StringAttribute{
				Computed: true,
			},
			"value": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *IncidentsRetrospectiveFieldEntityDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *IncidentsRetrospectiveFieldEntityDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *IncidentsRetrospectiveFieldEntityDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetIncidentRetrospectiveFieldRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Retrospectives.GetIncidentRetrospectiveField(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.IncidentsRetrospectiveFieldEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedIncidentsRetrospectiveFieldEntity(ctx, res.IncidentsRetrospectiveFieldEntity)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
