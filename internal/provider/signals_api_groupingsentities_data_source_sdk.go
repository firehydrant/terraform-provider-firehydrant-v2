// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SignalsAPIGroupingsEntitiesDataSourceModel) RefreshFromSharedSignalsAPIGroupingEntityPaginated(ctx context.Context, resp *shared.SignalsAPIGroupingEntityPaginated) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Data != nil {
			r.Data = []tfTypes.SignalsAPIGroupingEntity{}
			if len(r.Data) > len(resp.Data) {
				r.Data = r.Data[:len(resp.Data)]
			}
			for dataCount, dataItem := range resp.Data {
				var data tfTypes.SignalsAPIGroupingEntity
				if dataItem.Action == nil {
					data.Action = nil
				} else {
					data.Action = &tfTypes.NullableSignalsAPIGroupingEntityActionEntity{}
					if dataItem.Action.Fyi == nil {
						data.Action.Fyi = nil
					} else {
						data.Action.Fyi = &tfTypes.NullableSignalsAPIGroupingEntityActionEntityFyiEntity{}
						if dataItem.Action.Fyi.SlackChannels != nil {
							data.Action.Fyi.SlackChannels = []tfTypes.IntegrationsSlackSlackChannelEntity{}
							for slackChannelsCount, slackChannelsItem := range dataItem.Action.Fyi.SlackChannels {
								var slackChannels tfTypes.IntegrationsSlackSlackChannelEntity
								slackChannels.ID = types.StringPointerValue(slackChannelsItem.ID)
								slackChannels.Name = types.StringPointerValue(slackChannelsItem.Name)
								slackChannels.SlackChannelID = types.StringPointerValue(slackChannelsItem.SlackChannelID)
								if slackChannelsCount+1 > len(data.Action.Fyi.SlackChannels) {
									data.Action.Fyi.SlackChannels = append(data.Action.Fyi.SlackChannels, slackChannels)
								} else {
									data.Action.Fyi.SlackChannels[slackChannelsCount].ID = slackChannels.ID
									data.Action.Fyi.SlackChannels[slackChannelsCount].Name = slackChannels.Name
									data.Action.Fyi.SlackChannels[slackChannelsCount].SlackChannelID = slackChannels.SlackChannelID
								}
							}
						}
					}
					data.Action.Link = types.BoolPointerValue(dataItem.Action.Link)
				}
				data.ID = types.StringPointerValue(dataItem.ID)
				data.ReferenceAlertTimePeriod = types.StringPointerValue(dataItem.ReferenceAlertTimePeriod)
				if dataItem.Strategy == nil {
					data.Strategy = nil
				} else {
					data.Strategy = &tfTypes.NullableSignalsAPIGroupingEntityStrategyEntity{}
					if dataItem.Strategy.Substring == nil {
						data.Strategy.Substring = nil
					} else {
						data.Strategy.Substring = &tfTypes.NullableSignalsAPIGroupingEntityStrategyEntitySubstringEntity{}
						data.Strategy.Substring.FieldName = types.StringPointerValue(dataItem.Strategy.Substring.FieldName)
						data.Strategy.Substring.Value = types.StringPointerValue(dataItem.Strategy.Substring.Value)
					}
				}
				if dataCount+1 > len(r.Data) {
					r.Data = append(r.Data, data)
				} else {
					r.Data[dataCount].Action = data.Action
					r.Data[dataCount].ID = data.ID
					r.Data[dataCount].ReferenceAlertTimePeriod = data.ReferenceAlertTimePeriod
					r.Data[dataCount].Strategy = data.Strategy
				}
			}
		}
		if resp.Pagination == nil {
			r.Pagination = nil
		} else {
			r.Pagination = &tfTypes.NullablePaginationEntity{}
			r.Pagination.Count = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Pagination.Count))
			r.Pagination.Items = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Pagination.Items))
			r.Pagination.Last = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Pagination.Last))
			r.Pagination.Next = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Pagination.Next))
			r.Pagination.Page = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Pagination.Page))
			r.Pagination.Pages = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Pagination.Pages))
			r.Pagination.Prev = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Pagination.Prev))
		}
	}

	return diags
}
