// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SignalsAPIGroupingsDataSource{}
var _ datasource.DataSourceWithConfigure = &SignalsAPIGroupingsDataSource{}

func NewSignalsAPIGroupingsDataSource() datasource.DataSource {
	return &SignalsAPIGroupingsDataSource{}
}

// SignalsAPIGroupingsDataSource is the data source implementation.
type SignalsAPIGroupingsDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// SignalsAPIGroupingsDataSourceModel describes the data model.
type SignalsAPIGroupingsDataSourceModel struct {
	Data       []tfTypes.SignalsAPIGrouping `tfsdk:"data"`
	Pagination *tfTypes.NullablePagination  `tfsdk:"pagination"`
}

// Metadata returns the data source type name.
func (r *SignalsAPIGroupingsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_signals_api_groupings"
}

// Schema defines the schema for the data source.
func (r *SignalsAPIGroupingsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SignalsAPIGroupings DataSource",

		Attributes: map[string]schema.Attribute{
			"data": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"action": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"fyi": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"slack_channels": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"slack_channel_id": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
									},
								},
								"link": schema.BoolAttribute{
									Computed: true,
								},
							},
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"reference_alert_time_period": schema.StringAttribute{
							Computed: true,
						},
						"strategy": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"substring": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"field_name": schema.StringAttribute{
											Computed: true,
										},
										"value": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
					},
				},
			},
			"pagination": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"count": schema.Int32Attribute{
						Computed: true,
					},
					"items": schema.Int32Attribute{
						Computed: true,
					},
					"last": schema.Int32Attribute{
						Computed: true,
					},
					"next": schema.Int32Attribute{
						Computed: true,
					},
					"page": schema.Int32Attribute{
						Computed: true,
					},
					"pages": schema.Int32Attribute{
						Computed: true,
					},
					"prev": schema.Int32Attribute{
						Computed: true,
					},
				},
			},
		},
	}
}

func (r *SignalsAPIGroupingsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SignalsAPIGroupingsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SignalsAPIGroupingsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	res, err := r.client.Signals.ListSignalsAlertGroupingConfigurations(ctx)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SignalsAPIGroupingPaginated != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSignalsAPIGroupingPaginated(ctx, res.SignalsAPIGroupingPaginated)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
