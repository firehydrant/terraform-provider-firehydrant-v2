// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *TeamDataSourceModel) RefreshFromSharedTeam(ctx context.Context, resp *shared.Team) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.CreatedBy == nil {
			r.CreatedBy = nil
		} else {
			r.CreatedBy = &tfTypes.NullableAuthor{}
			r.CreatedBy.Email = types.StringPointerValue(resp.CreatedBy.Email)
			r.CreatedBy.ID = types.StringPointerValue(resp.CreatedBy.ID)
			r.CreatedBy.Name = types.StringPointerValue(resp.CreatedBy.Name)
			r.CreatedBy.Source = types.StringPointerValue(resp.CreatedBy.Source)
		}
		if resp.DefaultSignalsEscalationPolicy == nil {
			r.DefaultSignalsEscalationPolicy = nil
		} else {
			r.DefaultSignalsEscalationPolicy = &tfTypes.NullableSuccinct{}
			r.DefaultSignalsEscalationPolicy.ID = types.StringPointerValue(resp.DefaultSignalsEscalationPolicy.ID)
			r.DefaultSignalsEscalationPolicy.Name = types.StringPointerValue(resp.DefaultSignalsEscalationPolicy.Name)
		}
		r.Description = types.StringPointerValue(resp.Description)
		if resp.Functionalities != nil {
			r.Functionalities = []tfTypes.FunctionalityLite{}
			if len(r.Functionalities) > len(resp.Functionalities) {
				r.Functionalities = r.Functionalities[:len(resp.Functionalities)]
			}
			for functionalitiesCount, functionalitiesItem := range resp.Functionalities {
				var functionalities tfTypes.FunctionalityLite
				if functionalitiesItem.ActiveIncidents != nil {
					functionalities.ActiveIncidents = make([]types.String, 0, len(functionalitiesItem.ActiveIncidents))
					for _, v := range functionalitiesItem.ActiveIncidents {
						functionalities.ActiveIncidents = append(functionalities.ActiveIncidents, types.StringValue(v))
					}
				}
				functionalities.AlertOnAdd = types.BoolPointerValue(functionalitiesItem.AlertOnAdd)
				functionalities.AutoAddRespondingTeam = types.BoolPointerValue(functionalitiesItem.AutoAddRespondingTeam)
				functionalities.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem.CreatedAt))
				functionalities.Description = types.StringPointerValue(functionalitiesItem.Description)
				functionalities.ID = types.StringPointerValue(functionalitiesItem.ID)
				if functionalitiesItem.Labels == nil {
					functionalities.Labels = nil
				} else {
					functionalities.Labels = &tfTypes.FunctionalityLiteLabels{}
				}
				if functionalitiesItem.Links != nil {
					functionalities.Links = []tfTypes.Links{}
					for linksCount, linksItem := range functionalitiesItem.Links {
						var links tfTypes.Links
						links.HrefURL = types.StringPointerValue(linksItem.HrefURL)
						links.IconURL = types.StringPointerValue(linksItem.IconURL)
						links.ID = types.StringPointerValue(linksItem.ID)
						links.Name = types.StringPointerValue(linksItem.Name)
						if linksCount+1 > len(functionalities.Links) {
							functionalities.Links = append(functionalities.Links, links)
						} else {
							functionalities.Links[linksCount].HrefURL = links.HrefURL
							functionalities.Links[linksCount].IconURL = links.IconURL
							functionalities.Links[linksCount].ID = links.ID
							functionalities.Links[linksCount].Name = links.Name
						}
					}
				}
				functionalities.Name = types.StringPointerValue(functionalitiesItem.Name)
				if functionalitiesItem.Owner == nil {
					functionalities.Owner = nil
				} else {
					functionalities.Owner = &tfTypes.NullableTeamLite{}
					functionalities.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem.Owner.CreatedAt))
					if functionalitiesItem.Owner.CreatedBy == nil {
						functionalities.Owner.CreatedBy = nil
					} else {
						functionalities.Owner.CreatedBy = &tfTypes.NullableAuthor{}
						functionalities.Owner.CreatedBy.Email = types.StringPointerValue(functionalitiesItem.Owner.CreatedBy.Email)
						functionalities.Owner.CreatedBy.ID = types.StringPointerValue(functionalitiesItem.Owner.CreatedBy.ID)
						functionalities.Owner.CreatedBy.Name = types.StringPointerValue(functionalitiesItem.Owner.CreatedBy.Name)
						functionalities.Owner.CreatedBy.Source = types.StringPointerValue(functionalitiesItem.Owner.CreatedBy.Source)
					}
					functionalities.Owner.Description = types.StringPointerValue(functionalitiesItem.Owner.Description)
					functionalities.Owner.ID = types.StringPointerValue(functionalitiesItem.Owner.ID)
					functionalities.Owner.InSupportHours = types.BoolPointerValue(functionalitiesItem.Owner.InSupportHours)
					functionalities.Owner.Name = types.StringPointerValue(functionalitiesItem.Owner.Name)
					functionalities.Owner.SignalsIcalURL = types.StringPointerValue(functionalitiesItem.Owner.SignalsIcalURL)
					functionalities.Owner.Slug = types.StringPointerValue(functionalitiesItem.Owner.Slug)
					functionalities.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem.Owner.UpdatedAt))
				}
				functionalities.Slug = types.StringPointerValue(functionalitiesItem.Slug)
				functionalities.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionalitiesItem.UpdatedAt))
				if functionalitiesItem.UpdatedBy == nil {
					functionalities.UpdatedBy = nil
				} else {
					functionalities.UpdatedBy = &tfTypes.NullableAuthor{}
					functionalities.UpdatedBy.Email = types.StringPointerValue(functionalitiesItem.UpdatedBy.Email)
					functionalities.UpdatedBy.ID = types.StringPointerValue(functionalitiesItem.UpdatedBy.ID)
					functionalities.UpdatedBy.Name = types.StringPointerValue(functionalitiesItem.UpdatedBy.Name)
					functionalities.UpdatedBy.Source = types.StringPointerValue(functionalitiesItem.UpdatedBy.Source)
				}
				if functionalitiesCount+1 > len(r.Functionalities) {
					r.Functionalities = append(r.Functionalities, functionalities)
				} else {
					r.Functionalities[functionalitiesCount].ActiveIncidents = functionalities.ActiveIncidents
					r.Functionalities[functionalitiesCount].AlertOnAdd = functionalities.AlertOnAdd
					r.Functionalities[functionalitiesCount].AutoAddRespondingTeam = functionalities.AutoAddRespondingTeam
					r.Functionalities[functionalitiesCount].CreatedAt = functionalities.CreatedAt
					r.Functionalities[functionalitiesCount].Description = functionalities.Description
					r.Functionalities[functionalitiesCount].ID = functionalities.ID
					r.Functionalities[functionalitiesCount].Labels = functionalities.Labels
					r.Functionalities[functionalitiesCount].Links = functionalities.Links
					r.Functionalities[functionalitiesCount].Name = functionalities.Name
					r.Functionalities[functionalitiesCount].Owner = functionalities.Owner
					r.Functionalities[functionalitiesCount].Slug = functionalities.Slug
					r.Functionalities[functionalitiesCount].UpdatedAt = functionalities.UpdatedAt
					r.Functionalities[functionalitiesCount].UpdatedBy = functionalities.UpdatedBy
				}
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.InSupportHours = types.BoolPointerValue(resp.InSupportHours)
		if resp.Memberships != nil {
			r.Memberships = []tfTypes.Membership{}
			if len(r.Memberships) > len(resp.Memberships) {
				r.Memberships = r.Memberships[:len(resp.Memberships)]
			}
			for membershipsCount, membershipsItem := range resp.Memberships {
				var memberships tfTypes.Membership
				if membershipsItem.DefaultIncidentRole == nil {
					memberships.DefaultIncidentRole = nil
				} else {
					memberships.DefaultIncidentRole = &tfTypes.NullableIncidentRole{}
					memberships.DefaultIncidentRole.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(membershipsItem.DefaultIncidentRole.CreatedAt))
					memberships.DefaultIncidentRole.Description = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Description)
					memberships.DefaultIncidentRole.DiscardedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(membershipsItem.DefaultIncidentRole.DiscardedAt))
					memberships.DefaultIncidentRole.ID = types.StringPointerValue(membershipsItem.DefaultIncidentRole.ID)
					memberships.DefaultIncidentRole.Name = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Name)
					memberships.DefaultIncidentRole.Summary = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Summary)
					memberships.DefaultIncidentRole.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(membershipsItem.DefaultIncidentRole.UpdatedAt))
				}
				if membershipsItem.Schedule == nil {
					memberships.Schedule = nil
				} else {
					memberships.Schedule = &tfTypes.NullableSchedule{}
					memberships.Schedule.Discarded = types.BoolPointerValue(membershipsItem.Schedule.Discarded)
					memberships.Schedule.ID = types.StringPointerValue(membershipsItem.Schedule.ID)
					memberships.Schedule.Integration = types.StringPointerValue(membershipsItem.Schedule.Integration)
					memberships.Schedule.Name = types.StringPointerValue(membershipsItem.Schedule.Name)
				}
				if membershipsItem.SignalsOnCallSchedule == nil {
					memberships.SignalsOnCallSchedule = nil
				} else {
					memberships.SignalsOnCallSchedule = &tfTypes.NullableSuccinct{}
					memberships.SignalsOnCallSchedule.ID = types.StringPointerValue(membershipsItem.SignalsOnCallSchedule.ID)
					memberships.SignalsOnCallSchedule.Name = types.StringPointerValue(membershipsItem.SignalsOnCallSchedule.Name)
				}
				if membershipsItem.User == nil {
					memberships.User = nil
				} else {
					memberships.User = &tfTypes.NullableUser{}
					memberships.User.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(membershipsItem.User.CreatedAt))
					memberships.User.Email = types.StringPointerValue(membershipsItem.User.Email)
					memberships.User.ID = types.StringPointerValue(membershipsItem.User.ID)
					memberships.User.Name = types.StringPointerValue(membershipsItem.User.Name)
					if membershipsItem.User.SignalsEnabledNotificationTypes != nil {
						memberships.User.SignalsEnabledNotificationTypes = make([]types.String, 0, len(membershipsItem.User.SignalsEnabledNotificationTypes))
						for _, v := range membershipsItem.User.SignalsEnabledNotificationTypes {
							memberships.User.SignalsEnabledNotificationTypes = append(memberships.User.SignalsEnabledNotificationTypes, types.StringValue(v))
						}
					}
					if membershipsItem.User.SignalsNotificationPolicyCompliance != nil {
						memberships.User.SignalsNotificationPolicyCompliance = []tfTypes.SignalsAPINotificationPolicyItemCompliance{}
						for signalsNotificationPolicyComplianceCount, signalsNotificationPolicyComplianceItem := range membershipsItem.User.SignalsNotificationPolicyCompliance {
							var signalsNotificationPolicyCompliance tfTypes.SignalsAPINotificationPolicyItemCompliance
							signalsNotificationPolicyCompliance.IsCompliant = types.BoolPointerValue(signalsNotificationPolicyComplianceItem.IsCompliant)
							signalsNotificationPolicyCompliance.NotificationPolicyItemID = types.StringPointerValue(signalsNotificationPolicyComplianceItem.NotificationPolicyItemID)
							if signalsNotificationPolicyComplianceCount+1 > len(memberships.User.SignalsNotificationPolicyCompliance) {
								memberships.User.SignalsNotificationPolicyCompliance = append(memberships.User.SignalsNotificationPolicyCompliance, signalsNotificationPolicyCompliance)
							} else {
								memberships.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount].IsCompliant = signalsNotificationPolicyCompliance.IsCompliant
								memberships.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount].NotificationPolicyItemID = signalsNotificationPolicyCompliance.NotificationPolicyItemID
							}
						}
					}
					memberships.User.SlackLinked = types.BoolPointerValue(membershipsItem.User.SlackLinked)
					memberships.User.SlackUserID = types.StringPointerValue(membershipsItem.User.SlackUserID)
					memberships.User.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(membershipsItem.User.UpdatedAt))
				}
				if membershipsCount+1 > len(r.Memberships) {
					r.Memberships = append(r.Memberships, memberships)
				} else {
					r.Memberships[membershipsCount].DefaultIncidentRole = memberships.DefaultIncidentRole
					r.Memberships[membershipsCount].Schedule = memberships.Schedule
					r.Memberships[membershipsCount].SignalsOnCallSchedule = memberships.SignalsOnCallSchedule
					r.Memberships[membershipsCount].User = memberships.User
				}
			}
		}
		if resp.MsTeamsChannel == nil {
			r.MsTeamsChannel = nil
		} else {
			r.MsTeamsChannel = &tfTypes.NullableIntegrationsMicrosoftTeamsV2Channel{}
			r.MsTeamsChannel.ChannelID = types.StringPointerValue(resp.MsTeamsChannel.ChannelID)
			r.MsTeamsChannel.ChannelName = types.StringPointerValue(resp.MsTeamsChannel.ChannelName)
			r.MsTeamsChannel.ChannelURL = types.StringPointerValue(resp.MsTeamsChannel.ChannelURL)
			r.MsTeamsChannel.ID = types.StringPointerValue(resp.MsTeamsChannel.ID)
			if resp.MsTeamsChannel.Incident == nil {
				r.MsTeamsChannel.Incident = nil
			} else {
				r.MsTeamsChannel.Incident = &tfTypes.NullableIncident{}
				r.MsTeamsChannel.Incident.Active = types.BoolPointerValue(resp.MsTeamsChannel.Incident.Active)
				r.MsTeamsChannel.Incident.AiIncidentSummary = types.StringPointerValue(resp.MsTeamsChannel.Incident.AiIncidentSummary)
				r.MsTeamsChannel.Incident.ChannelID = types.StringPointerValue(resp.MsTeamsChannel.Incident.ChannelID)
				r.MsTeamsChannel.Incident.ChannelName = types.StringPointerValue(resp.MsTeamsChannel.Incident.ChannelName)
				r.MsTeamsChannel.Incident.ChannelReference = types.StringPointerValue(resp.MsTeamsChannel.Incident.ChannelReference)
				r.MsTeamsChannel.Incident.ChannelStatus = types.StringPointerValue(resp.MsTeamsChannel.Incident.ChannelStatus)
				if resp.MsTeamsChannel.Incident.ConferenceBridges != nil {
					r.MsTeamsChannel.Incident.ConferenceBridges = []tfTypes.IncidentsConferenceBridge{}
					if len(r.MsTeamsChannel.Incident.ConferenceBridges) > len(resp.MsTeamsChannel.Incident.ConferenceBridges) {
						r.MsTeamsChannel.Incident.ConferenceBridges = r.MsTeamsChannel.Incident.ConferenceBridges[:len(resp.MsTeamsChannel.Incident.ConferenceBridges)]
					}
					for conferenceBridgesCount, conferenceBridgesItem := range resp.MsTeamsChannel.Incident.ConferenceBridges {
						var conferenceBridges tfTypes.IncidentsConferenceBridge
						if conferenceBridgesItem.Attachments != nil {
						}
						conferenceBridges.HasTranslatedTranscripts = types.BoolPointerValue(conferenceBridgesItem.HasTranslatedTranscripts)
						conferenceBridges.ID = types.StringPointerValue(conferenceBridgesItem.ID)
						if conferenceBridgesItem.LanguageCodes != nil {
							conferenceBridges.LanguageCodes = make([]types.String, 0, len(conferenceBridgesItem.LanguageCodes))
							for _, v := range conferenceBridgesItem.LanguageCodes {
								conferenceBridges.LanguageCodes = append(conferenceBridges.LanguageCodes, types.StringValue(v))
							}
						}
						conferenceBridges.PreviousHostAssignment = types.StringPointerValue(conferenceBridgesItem.PreviousHostAssignment)
						conferenceBridges.TranscriptionStatus = types.StringPointerValue(conferenceBridgesItem.TranscriptionStatus)
						conferenceBridges.TranscriptionSubCode = types.StringPointerValue(conferenceBridgesItem.TranscriptionSubCode)
						if conferenceBridgesCount+1 > len(r.MsTeamsChannel.Incident.ConferenceBridges) {
							r.MsTeamsChannel.Incident.ConferenceBridges = append(r.MsTeamsChannel.Incident.ConferenceBridges, conferenceBridges)
						} else {
							r.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].Attachments = conferenceBridges.Attachments
							r.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].HasTranslatedTranscripts = conferenceBridges.HasTranslatedTranscripts
							r.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].ID = conferenceBridges.ID
							r.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].LanguageCodes = conferenceBridges.LanguageCodes
							r.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].PreviousHostAssignment = conferenceBridges.PreviousHostAssignment
							r.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].TranscriptionStatus = conferenceBridges.TranscriptionStatus
							r.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].TranscriptionSubCode = conferenceBridges.TranscriptionSubCode
						}
					}
				}
				if resp.MsTeamsChannel.Incident.ContextObject == nil {
					r.MsTeamsChannel.Incident.ContextObject = nil
				} else {
					r.MsTeamsChannel.Incident.ContextObject = &tfTypes.NullableIncidentsContextObject{}
					r.MsTeamsChannel.Incident.ContextObject.ContextDescription = types.StringPointerValue(resp.MsTeamsChannel.Incident.ContextObject.ContextDescription)
					r.MsTeamsChannel.Incident.ContextObject.ContextTag = types.StringPointerValue(resp.MsTeamsChannel.Incident.ContextObject.ContextTag)
					r.MsTeamsChannel.Incident.ContextObject.ObjectID = types.StringPointerValue(resp.MsTeamsChannel.Incident.ContextObject.ObjectID)
					r.MsTeamsChannel.Incident.ContextObject.ObjectType = types.StringPointerValue(resp.MsTeamsChannel.Incident.ContextObject.ObjectType)
				}
				if resp.MsTeamsChannel.Incident.Conversations != nil {
					r.MsTeamsChannel.Incident.Conversations = []tfTypes.ConversationsAPIReference{}
					if len(r.MsTeamsChannel.Incident.Conversations) > len(resp.MsTeamsChannel.Incident.Conversations) {
						r.MsTeamsChannel.Incident.Conversations = r.MsTeamsChannel.Incident.Conversations[:len(resp.MsTeamsChannel.Incident.Conversations)]
					}
					for conversationsCount, conversationsItem := range resp.MsTeamsChannel.Incident.Conversations {
						var conversations tfTypes.ConversationsAPIReference
						if conversationsItem.Channel == nil {
							conversations.Channel = nil
						} else {
							conversations.Channel = &tfTypes.NullableConversationsAPIChannel{}
							conversations.Channel.Name = types.StringPointerValue(conversationsItem.Channel.Name)
						}
						conversations.CommentsURL = types.StringPointerValue(conversationsItem.CommentsURL)
						conversations.Field = types.StringPointerValue(conversationsItem.Field)
						conversations.ID = types.StringPointerValue(conversationsItem.ID)
						conversations.ResourceClass = types.StringPointerValue(conversationsItem.ResourceClass)
						conversations.ResourceID = types.StringPointerValue(conversationsItem.ResourceID)
						if conversationsCount+1 > len(r.MsTeamsChannel.Incident.Conversations) {
							r.MsTeamsChannel.Incident.Conversations = append(r.MsTeamsChannel.Incident.Conversations, conversations)
						} else {
							r.MsTeamsChannel.Incident.Conversations[conversationsCount].Channel = conversations.Channel
							r.MsTeamsChannel.Incident.Conversations[conversationsCount].CommentsURL = conversations.CommentsURL
							r.MsTeamsChannel.Incident.Conversations[conversationsCount].Field = conversations.Field
							r.MsTeamsChannel.Incident.Conversations[conversationsCount].ID = conversations.ID
							r.MsTeamsChannel.Incident.Conversations[conversationsCount].ResourceClass = conversations.ResourceClass
							r.MsTeamsChannel.Incident.Conversations[conversationsCount].ResourceID = conversations.ResourceID
						}
					}
				}
				r.MsTeamsChannel.Incident.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MsTeamsChannel.Incident.CreatedAt))
				if resp.MsTeamsChannel.Incident.CreatedBy == nil {
					r.MsTeamsChannel.Incident.CreatedBy = nil
				} else {
					r.MsTeamsChannel.Incident.CreatedBy = &tfTypes.NullableAuthor{}
					r.MsTeamsChannel.Incident.CreatedBy.Email = types.StringPointerValue(resp.MsTeamsChannel.Incident.CreatedBy.Email)
					r.MsTeamsChannel.Incident.CreatedBy.ID = types.StringPointerValue(resp.MsTeamsChannel.Incident.CreatedBy.ID)
					r.MsTeamsChannel.Incident.CreatedBy.Name = types.StringPointerValue(resp.MsTeamsChannel.Incident.CreatedBy.Name)
					r.MsTeamsChannel.Incident.CreatedBy.Source = types.StringPointerValue(resp.MsTeamsChannel.Incident.CreatedBy.Source)
				}
				r.MsTeamsChannel.Incident.CurrentMilestone = types.StringPointerValue(resp.MsTeamsChannel.Incident.CurrentMilestone)
				if resp.MsTeamsChannel.Incident.CustomFields != nil {
					r.MsTeamsChannel.Incident.CustomFields = []tfTypes.CustomFieldsFieldValue{}
					if len(r.MsTeamsChannel.Incident.CustomFields) > len(resp.MsTeamsChannel.Incident.CustomFields) {
						r.MsTeamsChannel.Incident.CustomFields = r.MsTeamsChannel.Incident.CustomFields[:len(resp.MsTeamsChannel.Incident.CustomFields)]
					}
					for customFieldsCount, customFieldsItem := range resp.MsTeamsChannel.Incident.CustomFields {
						var customFields tfTypes.CustomFieldsFieldValue
						customFields.Description = types.StringPointerValue(customFieldsItem.Description)
						customFields.DisplayName = types.StringPointerValue(customFieldsItem.DisplayName)
						customFields.FieldID = types.StringPointerValue(customFieldsItem.FieldID)
						customFields.Name = types.StringPointerValue(customFieldsItem.Name)
						customFields.Slug = types.StringPointerValue(customFieldsItem.Slug)
						customFields.Value = types.StringPointerValue(customFieldsItem.Value)
						if customFieldsItem.ValueArray != nil {
							customFields.ValueArray = make([]types.String, 0, len(customFieldsItem.ValueArray))
							for _, v := range customFieldsItem.ValueArray {
								customFields.ValueArray = append(customFields.ValueArray, types.StringValue(v))
							}
						}
						customFields.ValueString = types.StringPointerValue(customFieldsItem.ValueString)
						customFields.ValueType = types.StringPointerValue(customFieldsItem.ValueType)
						if customFieldsCount+1 > len(r.MsTeamsChannel.Incident.CustomFields) {
							r.MsTeamsChannel.Incident.CustomFields = append(r.MsTeamsChannel.Incident.CustomFields, customFields)
						} else {
							r.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Description = customFields.Description
							r.MsTeamsChannel.Incident.CustomFields[customFieldsCount].DisplayName = customFields.DisplayName
							r.MsTeamsChannel.Incident.CustomFields[customFieldsCount].FieldID = customFields.FieldID
							r.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Name = customFields.Name
							r.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Slug = customFields.Slug
							r.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Value = customFields.Value
							r.MsTeamsChannel.Incident.CustomFields[customFieldsCount].ValueArray = customFields.ValueArray
							r.MsTeamsChannel.Incident.CustomFields[customFieldsCount].ValueString = customFields.ValueString
							r.MsTeamsChannel.Incident.CustomFields[customFieldsCount].ValueType = customFields.ValueType
						}
					}
				}
				r.MsTeamsChannel.Incident.CustomerImpactSummary = types.StringPointerValue(resp.MsTeamsChannel.Incident.CustomerImpactSummary)
				r.MsTeamsChannel.Incident.CustomersImpacted = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.MsTeamsChannel.Incident.CustomersImpacted))
				r.MsTeamsChannel.Incident.Description = types.StringPointerValue(resp.MsTeamsChannel.Incident.Description)
				r.MsTeamsChannel.Incident.DiscardedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MsTeamsChannel.Incident.DiscardedAt))
				if resp.MsTeamsChannel.Incident.Environments != nil {
					r.MsTeamsChannel.Incident.Environments = []tfTypes.Succinct{}
					if len(r.MsTeamsChannel.Incident.Environments) > len(resp.MsTeamsChannel.Incident.Environments) {
						r.MsTeamsChannel.Incident.Environments = r.MsTeamsChannel.Incident.Environments[:len(resp.MsTeamsChannel.Incident.Environments)]
					}
					for environmentsCount, environmentsItem := range resp.MsTeamsChannel.Incident.Environments {
						var environments tfTypes.Succinct
						environments.ID = types.StringPointerValue(environmentsItem.ID)
						environments.Name = types.StringPointerValue(environmentsItem.Name)
						if environmentsCount+1 > len(r.MsTeamsChannel.Incident.Environments) {
							r.MsTeamsChannel.Incident.Environments = append(r.MsTeamsChannel.Incident.Environments, environments)
						} else {
							r.MsTeamsChannel.Incident.Environments[environmentsCount].ID = environments.ID
							r.MsTeamsChannel.Incident.Environments[environmentsCount].Name = environments.Name
						}
					}
				}
				if resp.MsTeamsChannel.Incident.FieldRequirements != nil {
					r.MsTeamsChannel.Incident.FieldRequirements = []tfTypes.IncidentFieldRequirement{}
					if len(r.MsTeamsChannel.Incident.FieldRequirements) > len(resp.MsTeamsChannel.Incident.FieldRequirements) {
						r.MsTeamsChannel.Incident.FieldRequirements = r.MsTeamsChannel.Incident.FieldRequirements[:len(resp.MsTeamsChannel.Incident.FieldRequirements)]
					}
					for fieldRequirementsCount, fieldRequirementsItem := range resp.MsTeamsChannel.Incident.FieldRequirements {
						var fieldRequirements tfTypes.IncidentFieldRequirement
						fieldRequirements.FieldID = types.StringPointerValue(fieldRequirementsItem.FieldID)
						fieldRequirements.RequiredAtMilestoneID = types.StringPointerValue(fieldRequirementsItem.RequiredAtMilestoneID)
						if fieldRequirementsCount+1 > len(r.MsTeamsChannel.Incident.FieldRequirements) {
							r.MsTeamsChannel.Incident.FieldRequirements = append(r.MsTeamsChannel.Incident.FieldRequirements, fieldRequirements)
						} else {
							r.MsTeamsChannel.Incident.FieldRequirements[fieldRequirementsCount].FieldID = fieldRequirements.FieldID
							r.MsTeamsChannel.Incident.FieldRequirements[fieldRequirementsCount].RequiredAtMilestoneID = fieldRequirements.RequiredAtMilestoneID
						}
					}
				}
				if resp.MsTeamsChannel.Incident.Functionalities != nil {
					r.MsTeamsChannel.Incident.Functionalities = []tfTypes.Succinct{}
					if len(r.MsTeamsChannel.Incident.Functionalities) > len(resp.MsTeamsChannel.Incident.Functionalities) {
						r.MsTeamsChannel.Incident.Functionalities = r.MsTeamsChannel.Incident.Functionalities[:len(resp.MsTeamsChannel.Incident.Functionalities)]
					}
					for functionalitiesCount1, functionalitiesItem1 := range resp.MsTeamsChannel.Incident.Functionalities {
						var functionalities1 tfTypes.Succinct
						functionalities1.ID = types.StringPointerValue(functionalitiesItem1.ID)
						functionalities1.Name = types.StringPointerValue(functionalitiesItem1.Name)
						if functionalitiesCount1+1 > len(r.MsTeamsChannel.Incident.Functionalities) {
							r.MsTeamsChannel.Incident.Functionalities = append(r.MsTeamsChannel.Incident.Functionalities, functionalities1)
						} else {
							r.MsTeamsChannel.Incident.Functionalities[functionalitiesCount1].ID = functionalities1.ID
							r.MsTeamsChannel.Incident.Functionalities[functionalitiesCount1].Name = functionalities1.Name
						}
					}
				}
				r.MsTeamsChannel.Incident.ID = types.StringPointerValue(resp.MsTeamsChannel.Incident.ID)
				if resp.MsTeamsChannel.Incident.Impacts != nil {
					r.MsTeamsChannel.Incident.Impacts = []tfTypes.IncidentsImpact{}
					if len(r.MsTeamsChannel.Incident.Impacts) > len(resp.MsTeamsChannel.Incident.Impacts) {
						r.MsTeamsChannel.Incident.Impacts = r.MsTeamsChannel.Incident.Impacts[:len(resp.MsTeamsChannel.Incident.Impacts)]
					}
					for impactsCount, impactsItem := range resp.MsTeamsChannel.Incident.Impacts {
						var impacts tfTypes.IncidentsImpact
						if impactsItem.Condition == nil {
							impacts.Condition = nil
						} else {
							impacts.Condition = &tfTypes.NullableSeverityMatrixCondition{}
							impacts.Condition.ID = types.StringPointerValue(impactsItem.Condition.ID)
							impacts.Condition.Name = types.StringPointerValue(impactsItem.Condition.Name)
							impacts.Condition.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(impactsItem.Condition.Position))
						}
						if impactsItem.Conversations != nil {
							impacts.Conversations = []tfTypes.ConversationsAPIReference{}
							for conversationsCount1, conversationsItem1 := range impactsItem.Conversations {
								var conversations1 tfTypes.ConversationsAPIReference
								if conversationsItem1.Channel == nil {
									conversations1.Channel = nil
								} else {
									conversations1.Channel = &tfTypes.NullableConversationsAPIChannel{}
									conversations1.Channel.Name = types.StringPointerValue(conversationsItem1.Channel.Name)
								}
								conversations1.CommentsURL = types.StringPointerValue(conversationsItem1.CommentsURL)
								conversations1.Field = types.StringPointerValue(conversationsItem1.Field)
								conversations1.ID = types.StringPointerValue(conversationsItem1.ID)
								conversations1.ResourceClass = types.StringPointerValue(conversationsItem1.ResourceClass)
								conversations1.ResourceID = types.StringPointerValue(conversationsItem1.ResourceID)
								if conversationsCount1+1 > len(impacts.Conversations) {
									impacts.Conversations = append(impacts.Conversations, conversations1)
								} else {
									impacts.Conversations[conversationsCount1].Channel = conversations1.Channel
									impacts.Conversations[conversationsCount1].CommentsURL = conversations1.CommentsURL
									impacts.Conversations[conversationsCount1].Field = conversations1.Field
									impacts.Conversations[conversationsCount1].ID = conversations1.ID
									impacts.Conversations[conversationsCount1].ResourceClass = conversations1.ResourceClass
									impacts.Conversations[conversationsCount1].ResourceID = conversations1.ResourceID
								}
							}
						}
						impacts.ID = types.StringPointerValue(impactsItem.ID)
						if impactsItem.Impact == nil {
							impacts.Impact = nil
						} else {
							impacts.Impact = &tfTypes.NullableSuccinct{}
							impacts.Impact.ID = types.StringPointerValue(impactsItem.Impact.ID)
							impacts.Impact.Name = types.StringPointerValue(impactsItem.Impact.Name)
						}
						impacts.Type = types.StringPointerValue(impactsItem.Type)
						if impactsCount+1 > len(r.MsTeamsChannel.Incident.Impacts) {
							r.MsTeamsChannel.Incident.Impacts = append(r.MsTeamsChannel.Incident.Impacts, impacts)
						} else {
							r.MsTeamsChannel.Incident.Impacts[impactsCount].Condition = impacts.Condition
							r.MsTeamsChannel.Incident.Impacts[impactsCount].Conversations = impacts.Conversations
							r.MsTeamsChannel.Incident.Impacts[impactsCount].ID = impacts.ID
							r.MsTeamsChannel.Incident.Impacts[impactsCount].Impact = impacts.Impact
							r.MsTeamsChannel.Incident.Impacts[impactsCount].Type = impacts.Type
						}
					}
				}
				if resp.MsTeamsChannel.Incident.IncidentChannels != nil {
					r.MsTeamsChannel.Incident.IncidentChannels = []tfTypes.IncidentsChannel{}
					if len(r.MsTeamsChannel.Incident.IncidentChannels) > len(resp.MsTeamsChannel.Incident.IncidentChannels) {
						r.MsTeamsChannel.Incident.IncidentChannels = r.MsTeamsChannel.Incident.IncidentChannels[:len(resp.MsTeamsChannel.Incident.IncidentChannels)]
					}
					for incidentChannelsCount, incidentChannelsItem := range resp.MsTeamsChannel.Incident.IncidentChannels {
						var incidentChannels tfTypes.IncidentsChannel
						incidentChannels.IconURL = types.StringPointerValue(incidentChannelsItem.IconURL)
						incidentChannels.ID = types.StringPointerValue(incidentChannelsItem.ID)
						incidentChannels.Name = types.StringPointerValue(incidentChannelsItem.Name)
						incidentChannels.Source = types.StringPointerValue(incidentChannelsItem.Source)
						incidentChannels.SourceID = types.StringPointerValue(incidentChannelsItem.SourceID)
						incidentChannels.SourceName = types.StringPointerValue(incidentChannelsItem.SourceName)
						incidentChannels.Status = types.StringPointerValue(incidentChannelsItem.Status)
						incidentChannels.URL = types.StringPointerValue(incidentChannelsItem.URL)
						if incidentChannelsCount+1 > len(r.MsTeamsChannel.Incident.IncidentChannels) {
							r.MsTeamsChannel.Incident.IncidentChannels = append(r.MsTeamsChannel.Incident.IncidentChannels, incidentChannels)
						} else {
							r.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].IconURL = incidentChannels.IconURL
							r.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].ID = incidentChannels.ID
							r.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].Name = incidentChannels.Name
							r.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].Source = incidentChannels.Source
							r.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].SourceID = incidentChannels.SourceID
							r.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].SourceName = incidentChannels.SourceName
							r.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].Status = incidentChannels.Status
							r.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].URL = incidentChannels.URL
						}
					}
				}
				if resp.MsTeamsChannel.Incident.IncidentTickets != nil {
					r.MsTeamsChannel.Incident.IncidentTickets = []tfTypes.TicketingTicket{}
					if len(r.MsTeamsChannel.Incident.IncidentTickets) > len(resp.MsTeamsChannel.Incident.IncidentTickets) {
						r.MsTeamsChannel.Incident.IncidentTickets = r.MsTeamsChannel.Incident.IncidentTickets[:len(resp.MsTeamsChannel.Incident.IncidentTickets)]
					}
					for incidentTicketsCount, incidentTicketsItem := range resp.MsTeamsChannel.Incident.IncidentTickets {
						var incidentTickets tfTypes.TicketingTicket
						if incidentTicketsItem.Assignees != nil {
							incidentTickets.Assignees = []tfTypes.Author{}
							for assigneesCount, assigneesItem := range incidentTicketsItem.Assignees {
								var assignees tfTypes.Author
								assignees.Email = types.StringPointerValue(assigneesItem.Email)
								assignees.ID = types.StringPointerValue(assigneesItem.ID)
								assignees.Name = types.StringPointerValue(assigneesItem.Name)
								assignees.Source = types.StringPointerValue(assigneesItem.Source)
								if assigneesCount+1 > len(incidentTickets.Assignees) {
									incidentTickets.Assignees = append(incidentTickets.Assignees, assignees)
								} else {
									incidentTickets.Assignees[assigneesCount].Email = assignees.Email
									incidentTickets.Assignees[assigneesCount].ID = assignees.ID
									incidentTickets.Assignees[assigneesCount].Name = assignees.Name
									incidentTickets.Assignees[assigneesCount].Source = assignees.Source
								}
							}
						}
						if incidentTicketsItem.Attachments != nil {
						}
						incidentTickets.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.CreatedAt))
						if incidentTicketsItem.CreatedBy == nil {
							incidentTickets.CreatedBy = nil
						} else {
							incidentTickets.CreatedBy = &tfTypes.NullableAuthor{}
							incidentTickets.CreatedBy.Email = types.StringPointerValue(incidentTicketsItem.CreatedBy.Email)
							incidentTickets.CreatedBy.ID = types.StringPointerValue(incidentTicketsItem.CreatedBy.ID)
							incidentTickets.CreatedBy.Name = types.StringPointerValue(incidentTicketsItem.CreatedBy.Name)
							incidentTickets.CreatedBy.Source = types.StringPointerValue(incidentTicketsItem.CreatedBy.Source)
						}
						incidentTickets.Description = types.StringPointerValue(incidentTicketsItem.Description)
						incidentTickets.DueAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.DueAt))
						incidentTickets.ID = types.StringPointerValue(incidentTicketsItem.ID)
						incidentTickets.IncidentCurrentMilestone = types.StringPointerValue(incidentTicketsItem.IncidentCurrentMilestone)
						incidentTickets.IncidentID = types.StringPointerValue(incidentTicketsItem.IncidentID)
						incidentTickets.IncidentName = types.StringPointerValue(incidentTicketsItem.IncidentName)
						if incidentTicketsItem.Link == nil {
							incidentTickets.Link = nil
						} else {
							incidentTickets.Link = &tfTypes.NullableAttachmentsLink{}
							incidentTickets.Link.Deletable = types.BoolPointerValue(incidentTicketsItem.Link.Deletable)
							incidentTickets.Link.DisplayText = types.StringPointerValue(incidentTicketsItem.Link.DisplayText)
							incidentTickets.Link.Editable = types.BoolPointerValue(incidentTicketsItem.Link.Editable)
							incidentTickets.Link.HrefURL = types.StringPointerValue(incidentTicketsItem.Link.HrefURL)
							incidentTickets.Link.IconURL = types.StringPointerValue(incidentTicketsItem.Link.IconURL)
							incidentTickets.Link.ID = types.StringPointerValue(incidentTicketsItem.Link.ID)
							incidentTickets.Link.Type = types.StringPointerValue(incidentTicketsItem.Link.Type)
						}
						if incidentTicketsItem.Priority == nil {
							incidentTickets.Priority = nil
						} else {
							incidentTickets.Priority = &tfTypes.NullableTicketingPriority{}
							incidentTickets.Priority.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.Priority.CreatedAt))
							incidentTickets.Priority.ID = types.StringPointerValue(incidentTicketsItem.Priority.ID)
							incidentTickets.Priority.Name = types.StringPointerValue(incidentTicketsItem.Priority.Name)
							incidentTickets.Priority.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(incidentTicketsItem.Priority.Position))
							incidentTickets.Priority.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.Priority.UpdatedAt))
						}
						incidentTickets.State = types.StringPointerValue(incidentTicketsItem.State)
						incidentTickets.Summary = types.StringPointerValue(incidentTicketsItem.Summary)
						incidentTickets.SyncErrorMessage = types.StringPointerValue(incidentTicketsItem.SyncErrorMessage)
						if incidentTicketsItem.TagList != nil {
							incidentTickets.TagList = make([]types.String, 0, len(incidentTicketsItem.TagList))
							for _, v := range incidentTicketsItem.TagList {
								incidentTickets.TagList = append(incidentTickets.TagList, types.StringValue(v))
							}
						}
						incidentTickets.TaskID = types.StringPointerValue(incidentTicketsItem.TaskID)
						incidentTickets.Type = types.StringPointerValue(incidentTicketsItem.Type)
						incidentTickets.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(incidentTicketsItem.UpdatedAt))
						if incidentTicketsCount+1 > len(r.MsTeamsChannel.Incident.IncidentTickets) {
							r.MsTeamsChannel.Incident.IncidentTickets = append(r.MsTeamsChannel.Incident.IncidentTickets, incidentTickets)
						} else {
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Assignees = incidentTickets.Assignees
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Attachments = incidentTickets.Attachments
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].CreatedAt = incidentTickets.CreatedAt
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].CreatedBy = incidentTickets.CreatedBy
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Description = incidentTickets.Description
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].DueAt = incidentTickets.DueAt
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].ID = incidentTickets.ID
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].IncidentCurrentMilestone = incidentTickets.IncidentCurrentMilestone
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].IncidentID = incidentTickets.IncidentID
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].IncidentName = incidentTickets.IncidentName
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Link = incidentTickets.Link
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Priority = incidentTickets.Priority
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].State = incidentTickets.State
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Summary = incidentTickets.Summary
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].SyncErrorMessage = incidentTickets.SyncErrorMessage
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].TagList = incidentTickets.TagList
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].TaskID = incidentTickets.TaskID
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Type = incidentTickets.Type
							r.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].UpdatedAt = incidentTickets.UpdatedAt
						}
					}
				}
				if resp.MsTeamsChannel.Incident.IncidentType == nil {
					r.MsTeamsChannel.Incident.IncidentType = nil
				} else {
					r.MsTeamsChannel.Incident.IncidentType = &tfTypes.NullableSuccinct{}
					r.MsTeamsChannel.Incident.IncidentType.ID = types.StringPointerValue(resp.MsTeamsChannel.Incident.IncidentType.ID)
					r.MsTeamsChannel.Incident.IncidentType.Name = types.StringPointerValue(resp.MsTeamsChannel.Incident.IncidentType.Name)
				}
				r.MsTeamsChannel.Incident.IncidentURL = types.StringPointerValue(resp.MsTeamsChannel.Incident.IncidentURL)
				if resp.MsTeamsChannel.Incident.Labels == nil {
					r.MsTeamsChannel.Incident.Labels = nil
				} else {
					r.MsTeamsChannel.Incident.Labels = &tfTypes.NullableIncidentLabels{}
				}
				if resp.MsTeamsChannel.Incident.LastNote == nil {
					r.MsTeamsChannel.Incident.LastNote = nil
				} else {
					r.MsTeamsChannel.Incident.LastNote = &tfTypes.NullableEventNote{}
					r.MsTeamsChannel.Incident.LastNote.Body = types.StringPointerValue(resp.MsTeamsChannel.Incident.LastNote.Body)
					if resp.MsTeamsChannel.Incident.LastNote.Conversations != nil {
						r.MsTeamsChannel.Incident.LastNote.Conversations = []tfTypes.ConversationsAPIReference{}
						if len(r.MsTeamsChannel.Incident.LastNote.Conversations) > len(resp.MsTeamsChannel.Incident.LastNote.Conversations) {
							r.MsTeamsChannel.Incident.LastNote.Conversations = r.MsTeamsChannel.Incident.LastNote.Conversations[:len(resp.MsTeamsChannel.Incident.LastNote.Conversations)]
						}
						for conversationsCount2, conversationsItem2 := range resp.MsTeamsChannel.Incident.LastNote.Conversations {
							var conversations2 tfTypes.ConversationsAPIReference
							if conversationsItem2.Channel == nil {
								conversations2.Channel = nil
							} else {
								conversations2.Channel = &tfTypes.NullableConversationsAPIChannel{}
								conversations2.Channel.Name = types.StringPointerValue(conversationsItem2.Channel.Name)
							}
							conversations2.CommentsURL = types.StringPointerValue(conversationsItem2.CommentsURL)
							conversations2.Field = types.StringPointerValue(conversationsItem2.Field)
							conversations2.ID = types.StringPointerValue(conversationsItem2.ID)
							conversations2.ResourceClass = types.StringPointerValue(conversationsItem2.ResourceClass)
							conversations2.ResourceID = types.StringPointerValue(conversationsItem2.ResourceID)
							if conversationsCount2+1 > len(r.MsTeamsChannel.Incident.LastNote.Conversations) {
								r.MsTeamsChannel.Incident.LastNote.Conversations = append(r.MsTeamsChannel.Incident.LastNote.Conversations, conversations2)
							} else {
								r.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].Channel = conversations2.Channel
								r.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].CommentsURL = conversations2.CommentsURL
								r.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].Field = conversations2.Field
								r.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].ID = conversations2.ID
								r.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].ResourceClass = conversations2.ResourceClass
								r.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].ResourceID = conversations2.ResourceID
							}
						}
					}
					r.MsTeamsChannel.Incident.LastNote.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MsTeamsChannel.Incident.LastNote.CreatedAt))
					r.MsTeamsChannel.Incident.LastNote.ID = types.StringPointerValue(resp.MsTeamsChannel.Incident.LastNote.ID)
					if resp.MsTeamsChannel.Incident.LastNote.StatusPages != nil {
						r.MsTeamsChannel.Incident.LastNote.StatusPages = []tfTypes.IncidentsStatusPage{}
						if len(r.MsTeamsChannel.Incident.LastNote.StatusPages) > len(resp.MsTeamsChannel.Incident.LastNote.StatusPages) {
							r.MsTeamsChannel.Incident.LastNote.StatusPages = r.MsTeamsChannel.Incident.LastNote.StatusPages[:len(resp.MsTeamsChannel.Incident.LastNote.StatusPages)]
						}
						for statusPagesCount, statusPagesItem := range resp.MsTeamsChannel.Incident.LastNote.StatusPages {
							var statusPages tfTypes.IncidentsStatusPage
							statusPages.DisplayName = types.StringPointerValue(statusPagesItem.DisplayName)
							statusPages.ExternalID = types.StringPointerValue(statusPagesItem.ExternalID)
							statusPages.ID = types.StringPointerValue(statusPagesItem.ID)
							if statusPagesItem.Integration == nil {
								statusPages.Integration = nil
							} else {
								statusPages.Integration = &tfTypes.NullableIntegration{}
								statusPages.Integration.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(statusPagesItem.Integration.CreatedAt))
								statusPages.Integration.DisplayName = types.StringPointerValue(statusPagesItem.Integration.DisplayName)
								statusPages.Integration.ID = types.StringPointerValue(statusPagesItem.Integration.ID)
								statusPages.Integration.IntegrationName = types.StringPointerValue(statusPagesItem.Integration.IntegrationName)
								statusPages.Integration.IntegrationSlug = types.StringPointerValue(statusPagesItem.Integration.IntegrationSlug)
							}
							statusPages.Name = types.StringPointerValue(statusPagesItem.Name)
							statusPages.URL = types.StringPointerValue(statusPagesItem.URL)
							if statusPagesCount+1 > len(r.MsTeamsChannel.Incident.LastNote.StatusPages) {
								r.MsTeamsChannel.Incident.LastNote.StatusPages = append(r.MsTeamsChannel.Incident.LastNote.StatusPages, statusPages)
							} else {
								r.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].DisplayName = statusPages.DisplayName
								r.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].ExternalID = statusPages.ExternalID
								r.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].ID = statusPages.ID
								r.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].Integration = statusPages.Integration
								r.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].Name = statusPages.Name
								r.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].URL = statusPages.URL
							}
						}
					}
				}
				r.MsTeamsChannel.Incident.LastUpdate = types.StringPointerValue(resp.MsTeamsChannel.Incident.LastUpdate)
				if resp.MsTeamsChannel.Incident.LifecycleMeasurements != nil {
					r.MsTeamsChannel.Incident.LifecycleMeasurements = []tfTypes.IncidentsLifecycleMeasurement{}
					if len(r.MsTeamsChannel.Incident.LifecycleMeasurements) > len(resp.MsTeamsChannel.Incident.LifecycleMeasurements) {
						r.MsTeamsChannel.Incident.LifecycleMeasurements = r.MsTeamsChannel.Incident.LifecycleMeasurements[:len(resp.MsTeamsChannel.Incident.LifecycleMeasurements)]
					}
					for lifecycleMeasurementsCount, lifecycleMeasurementsItem := range resp.MsTeamsChannel.Incident.LifecycleMeasurements {
						var lifecycleMeasurements tfTypes.IncidentsLifecycleMeasurement
						lifecycleMeasurements.CalculatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(lifecycleMeasurementsItem.CalculatedAt))
						lifecycleMeasurements.Description = types.StringPointerValue(lifecycleMeasurementsItem.Description)
						lifecycleMeasurements.EndsAtMilestone = types.StringPointerValue(lifecycleMeasurementsItem.EndsAtMilestone)
						lifecycleMeasurements.ID = types.StringPointerValue(lifecycleMeasurementsItem.ID)
						lifecycleMeasurements.Name = types.StringPointerValue(lifecycleMeasurementsItem.Name)
						lifecycleMeasurements.Slug = types.StringPointerValue(lifecycleMeasurementsItem.Slug)
						lifecycleMeasurements.StartsAtMilestone = types.StringPointerValue(lifecycleMeasurementsItem.StartsAtMilestone)
						lifecycleMeasurements.Value = types.StringPointerValue(lifecycleMeasurementsItem.Value)
						if lifecycleMeasurementsCount+1 > len(r.MsTeamsChannel.Incident.LifecycleMeasurements) {
							r.MsTeamsChannel.Incident.LifecycleMeasurements = append(r.MsTeamsChannel.Incident.LifecycleMeasurements, lifecycleMeasurements)
						} else {
							r.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].CalculatedAt = lifecycleMeasurements.CalculatedAt
							r.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Description = lifecycleMeasurements.Description
							r.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].EndsAtMilestone = lifecycleMeasurements.EndsAtMilestone
							r.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].ID = lifecycleMeasurements.ID
							r.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Name = lifecycleMeasurements.Name
							r.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Slug = lifecycleMeasurements.Slug
							r.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].StartsAtMilestone = lifecycleMeasurements.StartsAtMilestone
							r.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Value = lifecycleMeasurements.Value
						}
					}
				}
				if resp.MsTeamsChannel.Incident.LifecyclePhases != nil {
					r.MsTeamsChannel.Incident.LifecyclePhases = []tfTypes.IncidentsLifecyclePhase{}
					if len(r.MsTeamsChannel.Incident.LifecyclePhases) > len(resp.MsTeamsChannel.Incident.LifecyclePhases) {
						r.MsTeamsChannel.Incident.LifecyclePhases = r.MsTeamsChannel.Incident.LifecyclePhases[:len(resp.MsTeamsChannel.Incident.LifecyclePhases)]
					}
					for lifecyclePhasesCount, lifecyclePhasesItem := range resp.MsTeamsChannel.Incident.LifecyclePhases {
						var lifecyclePhases tfTypes.IncidentsLifecyclePhase
						lifecyclePhases.Description = types.StringPointerValue(lifecyclePhasesItem.Description)
						lifecyclePhases.ID = types.StringPointerValue(lifecyclePhasesItem.ID)
						if lifecyclePhasesItem.Milestones != nil {
							lifecyclePhases.Milestones = []tfTypes.IncidentsLifecycleMilestone{}
							for milestonesCount, milestonesItem := range lifecyclePhasesItem.Milestones {
								var milestones tfTypes.IncidentsLifecycleMilestone
								milestones.Description = types.StringPointerValue(milestonesItem.Description)
								milestones.Duration = types.StringPointerValue(milestonesItem.Duration)
								milestones.ID = types.StringPointerValue(milestonesItem.ID)
								milestones.Name = types.StringPointerValue(milestonesItem.Name)
								milestones.OccurredAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem.OccurredAt))
								milestones.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(milestonesItem.Position))
								milestones.Slug = types.StringPointerValue(milestonesItem.Slug)
								milestones.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem.UpdatedAt))
								if milestonesItem.UpdatedBy == nil {
									milestones.UpdatedBy = nil
								} else {
									milestones.UpdatedBy = &tfTypes.NullableAuthor{}
									milestones.UpdatedBy.Email = types.StringPointerValue(milestonesItem.UpdatedBy.Email)
									milestones.UpdatedBy.ID = types.StringPointerValue(milestonesItem.UpdatedBy.ID)
									milestones.UpdatedBy.Name = types.StringPointerValue(milestonesItem.UpdatedBy.Name)
									milestones.UpdatedBy.Source = types.StringPointerValue(milestonesItem.UpdatedBy.Source)
								}
								if milestonesCount+1 > len(lifecyclePhases.Milestones) {
									lifecyclePhases.Milestones = append(lifecyclePhases.Milestones, milestones)
								} else {
									lifecyclePhases.Milestones[milestonesCount].Description = milestones.Description
									lifecyclePhases.Milestones[milestonesCount].Duration = milestones.Duration
									lifecyclePhases.Milestones[milestonesCount].ID = milestones.ID
									lifecyclePhases.Milestones[milestonesCount].Name = milestones.Name
									lifecyclePhases.Milestones[milestonesCount].OccurredAt = milestones.OccurredAt
									lifecyclePhases.Milestones[milestonesCount].Position = milestones.Position
									lifecyclePhases.Milestones[milestonesCount].Slug = milestones.Slug
									lifecyclePhases.Milestones[milestonesCount].UpdatedAt = milestones.UpdatedAt
									lifecyclePhases.Milestones[milestonesCount].UpdatedBy = milestones.UpdatedBy
								}
							}
						}
						lifecyclePhases.Name = types.StringPointerValue(lifecyclePhasesItem.Name)
						lifecyclePhases.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(lifecyclePhasesItem.Position))
						lifecyclePhases.Type = types.StringPointerValue(lifecyclePhasesItem.Type)
						if lifecyclePhasesCount+1 > len(r.MsTeamsChannel.Incident.LifecyclePhases) {
							r.MsTeamsChannel.Incident.LifecyclePhases = append(r.MsTeamsChannel.Incident.LifecyclePhases, lifecyclePhases)
						} else {
							r.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Description = lifecyclePhases.Description
							r.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].ID = lifecyclePhases.ID
							r.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Milestones = lifecyclePhases.Milestones
							r.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Name = lifecyclePhases.Name
							r.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Position = lifecyclePhases.Position
							r.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Type = lifecyclePhases.Type
						}
					}
				}
				if resp.MsTeamsChannel.Incident.Milestones != nil {
					r.MsTeamsChannel.Incident.Milestones = []tfTypes.IncidentsMilestone{}
					if len(r.MsTeamsChannel.Incident.Milestones) > len(resp.MsTeamsChannel.Incident.Milestones) {
						r.MsTeamsChannel.Incident.Milestones = r.MsTeamsChannel.Incident.Milestones[:len(resp.MsTeamsChannel.Incident.Milestones)]
					}
					for milestonesCount1, milestonesItem1 := range resp.MsTeamsChannel.Incident.Milestones {
						var milestones1 tfTypes.IncidentsMilestone
						milestones1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem1.CreatedAt))
						milestones1.Duration = types.StringPointerValue(milestonesItem1.Duration)
						milestones1.ID = types.StringPointerValue(milestonesItem1.ID)
						milestones1.OccurredAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem1.OccurredAt))
						milestones1.Type = types.StringPointerValue(milestonesItem1.Type)
						milestones1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(milestonesItem1.UpdatedAt))
						if milestonesCount1+1 > len(r.MsTeamsChannel.Incident.Milestones) {
							r.MsTeamsChannel.Incident.Milestones = append(r.MsTeamsChannel.Incident.Milestones, milestones1)
						} else {
							r.MsTeamsChannel.Incident.Milestones[milestonesCount1].CreatedAt = milestones1.CreatedAt
							r.MsTeamsChannel.Incident.Milestones[milestonesCount1].Duration = milestones1.Duration
							r.MsTeamsChannel.Incident.Milestones[milestonesCount1].ID = milestones1.ID
							r.MsTeamsChannel.Incident.Milestones[milestonesCount1].OccurredAt = milestones1.OccurredAt
							r.MsTeamsChannel.Incident.Milestones[milestonesCount1].Type = milestones1.Type
							r.MsTeamsChannel.Incident.Milestones[milestonesCount1].UpdatedAt = milestones1.UpdatedAt
						}
					}
				}
				r.MsTeamsChannel.Incident.MonetaryImpact = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.MsTeamsChannel.Incident.MonetaryImpact))
				r.MsTeamsChannel.Incident.MonetaryImpactCents = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.MsTeamsChannel.Incident.MonetaryImpactCents))
				r.MsTeamsChannel.Incident.Name = types.StringPointerValue(resp.MsTeamsChannel.Incident.Name)
				r.MsTeamsChannel.Incident.Number = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.MsTeamsChannel.Incident.Number))
				if resp.MsTeamsChannel.Incident.Organization == nil {
					r.MsTeamsChannel.Incident.Organization = nil
				} else {
					r.MsTeamsChannel.Incident.Organization = &tfTypes.NullableOrganization{}
					r.MsTeamsChannel.Incident.Organization.ID = types.StringPointerValue(resp.MsTeamsChannel.Incident.Organization.ID)
					r.MsTeamsChannel.Incident.Organization.Name = types.StringPointerValue(resp.MsTeamsChannel.Incident.Organization.Name)
				}
				r.MsTeamsChannel.Incident.OrganizationID = types.StringPointerValue(resp.MsTeamsChannel.Incident.OrganizationID)
				r.MsTeamsChannel.Incident.Priority = types.StringPointerValue(resp.MsTeamsChannel.Incident.Priority)
				r.MsTeamsChannel.Incident.PrivateID = types.StringPointerValue(resp.MsTeamsChannel.Incident.PrivateID)
				r.MsTeamsChannel.Incident.PrivateStatusPageURL = types.StringPointerValue(resp.MsTeamsChannel.Incident.PrivateStatusPageURL)
				r.MsTeamsChannel.Incident.ReportID = types.StringPointerValue(resp.MsTeamsChannel.Incident.ReportID)
				if resp.MsTeamsChannel.Incident.RetroExports != nil {
				}
				if resp.MsTeamsChannel.Incident.RoleAssignments != nil {
					r.MsTeamsChannel.Incident.RoleAssignments = []tfTypes.IncidentsRoleAssignment{}
					if len(r.MsTeamsChannel.Incident.RoleAssignments) > len(resp.MsTeamsChannel.Incident.RoleAssignments) {
						r.MsTeamsChannel.Incident.RoleAssignments = r.MsTeamsChannel.Incident.RoleAssignments[:len(resp.MsTeamsChannel.Incident.RoleAssignments)]
					}
					for roleAssignmentsCount, roleAssignmentsItem := range resp.MsTeamsChannel.Incident.RoleAssignments {
						var roleAssignments tfTypes.IncidentsRoleAssignment
						roleAssignments.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.CreatedAt))
						roleAssignments.ID = types.StringPointerValue(roleAssignmentsItem.ID)
						if roleAssignmentsItem.IncidentRole == nil {
							roleAssignments.IncidentRole = nil
						} else {
							roleAssignments.IncidentRole = &tfTypes.NullableIncidentRole{}
							roleAssignments.IncidentRole.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.IncidentRole.CreatedAt))
							roleAssignments.IncidentRole.Description = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Description)
							roleAssignments.IncidentRole.DiscardedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.IncidentRole.DiscardedAt))
							roleAssignments.IncidentRole.ID = types.StringPointerValue(roleAssignmentsItem.IncidentRole.ID)
							roleAssignments.IncidentRole.Name = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Name)
							roleAssignments.IncidentRole.Summary = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Summary)
							roleAssignments.IncidentRole.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.IncidentRole.UpdatedAt))
						}
						roleAssignments.Status = types.StringPointerValue(roleAssignmentsItem.Status)
						roleAssignments.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.UpdatedAt))
						if roleAssignmentsItem.User == nil {
							roleAssignments.User = nil
						} else {
							roleAssignments.User = &tfTypes.NullableUser{}
							roleAssignments.User.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.User.CreatedAt))
							roleAssignments.User.Email = types.StringPointerValue(roleAssignmentsItem.User.Email)
							roleAssignments.User.ID = types.StringPointerValue(roleAssignmentsItem.User.ID)
							roleAssignments.User.Name = types.StringPointerValue(roleAssignmentsItem.User.Name)
							if roleAssignmentsItem.User.SignalsEnabledNotificationTypes != nil {
								roleAssignments.User.SignalsEnabledNotificationTypes = make([]types.String, 0, len(roleAssignmentsItem.User.SignalsEnabledNotificationTypes))
								for _, v := range roleAssignmentsItem.User.SignalsEnabledNotificationTypes {
									roleAssignments.User.SignalsEnabledNotificationTypes = append(roleAssignments.User.SignalsEnabledNotificationTypes, types.StringValue(v))
								}
							}
							if roleAssignmentsItem.User.SignalsNotificationPolicyCompliance != nil {
								roleAssignments.User.SignalsNotificationPolicyCompliance = []tfTypes.SignalsAPINotificationPolicyItemCompliance{}
								for signalsNotificationPolicyComplianceCount1, signalsNotificationPolicyComplianceItem1 := range roleAssignmentsItem.User.SignalsNotificationPolicyCompliance {
									var signalsNotificationPolicyCompliance1 tfTypes.SignalsAPINotificationPolicyItemCompliance
									signalsNotificationPolicyCompliance1.IsCompliant = types.BoolPointerValue(signalsNotificationPolicyComplianceItem1.IsCompliant)
									signalsNotificationPolicyCompliance1.NotificationPolicyItemID = types.StringPointerValue(signalsNotificationPolicyComplianceItem1.NotificationPolicyItemID)
									if signalsNotificationPolicyComplianceCount1+1 > len(roleAssignments.User.SignalsNotificationPolicyCompliance) {
										roleAssignments.User.SignalsNotificationPolicyCompliance = append(roleAssignments.User.SignalsNotificationPolicyCompliance, signalsNotificationPolicyCompliance1)
									} else {
										roleAssignments.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount1].IsCompliant = signalsNotificationPolicyCompliance1.IsCompliant
										roleAssignments.User.SignalsNotificationPolicyCompliance[signalsNotificationPolicyComplianceCount1].NotificationPolicyItemID = signalsNotificationPolicyCompliance1.NotificationPolicyItemID
									}
								}
							}
							roleAssignments.User.SlackLinked = types.BoolPointerValue(roleAssignmentsItem.User.SlackLinked)
							roleAssignments.User.SlackUserID = types.StringPointerValue(roleAssignmentsItem.User.SlackUserID)
							roleAssignments.User.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(roleAssignmentsItem.User.UpdatedAt))
						}
						if roleAssignmentsCount+1 > len(r.MsTeamsChannel.Incident.RoleAssignments) {
							r.MsTeamsChannel.Incident.RoleAssignments = append(r.MsTeamsChannel.Incident.RoleAssignments, roleAssignments)
						} else {
							r.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].CreatedAt = roleAssignments.CreatedAt
							r.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].ID = roleAssignments.ID
							r.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].IncidentRole = roleAssignments.IncidentRole
							r.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].Status = roleAssignments.Status
							r.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].UpdatedAt = roleAssignments.UpdatedAt
							r.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].User = roleAssignments.User
						}
					}
				}
				if resp.MsTeamsChannel.Incident.Services != nil {
					r.MsTeamsChannel.Incident.Services = []tfTypes.Succinct{}
					if len(r.MsTeamsChannel.Incident.Services) > len(resp.MsTeamsChannel.Incident.Services) {
						r.MsTeamsChannel.Incident.Services = r.MsTeamsChannel.Incident.Services[:len(resp.MsTeamsChannel.Incident.Services)]
					}
					for servicesCount, servicesItem := range resp.MsTeamsChannel.Incident.Services {
						var services tfTypes.Succinct
						services.ID = types.StringPointerValue(servicesItem.ID)
						services.Name = types.StringPointerValue(servicesItem.Name)
						if servicesCount+1 > len(r.MsTeamsChannel.Incident.Services) {
							r.MsTeamsChannel.Incident.Services = append(r.MsTeamsChannel.Incident.Services, services)
						} else {
							r.MsTeamsChannel.Incident.Services[servicesCount].ID = services.ID
							r.MsTeamsChannel.Incident.Services[servicesCount].Name = services.Name
						}
					}
				}
				r.MsTeamsChannel.Incident.Severity = types.StringPointerValue(resp.MsTeamsChannel.Incident.Severity)
				r.MsTeamsChannel.Incident.SeverityColor = types.StringPointerValue(resp.MsTeamsChannel.Incident.SeverityColor)
				r.MsTeamsChannel.Incident.SeverityCondition = types.StringPointerValue(resp.MsTeamsChannel.Incident.SeverityCondition)
				if resp.MsTeamsChannel.Incident.SeverityConditionObject == nil {
					r.MsTeamsChannel.Incident.SeverityConditionObject = nil
				} else {
					r.MsTeamsChannel.Incident.SeverityConditionObject = &tfTypes.NullableSeverityMatrixCondition{}
					r.MsTeamsChannel.Incident.SeverityConditionObject.ID = types.StringPointerValue(resp.MsTeamsChannel.Incident.SeverityConditionObject.ID)
					r.MsTeamsChannel.Incident.SeverityConditionObject.Name = types.StringPointerValue(resp.MsTeamsChannel.Incident.SeverityConditionObject.Name)
					r.MsTeamsChannel.Incident.SeverityConditionObject.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.MsTeamsChannel.Incident.SeverityConditionObject.Position))
				}
				r.MsTeamsChannel.Incident.SeverityImpact = types.StringPointerValue(resp.MsTeamsChannel.Incident.SeverityImpact)
				if resp.MsTeamsChannel.Incident.SeverityImpactObject == nil {
					r.MsTeamsChannel.Incident.SeverityImpactObject = nil
				} else {
					r.MsTeamsChannel.Incident.SeverityImpactObject = &tfTypes.NullableSeverityMatrixImpact{}
					r.MsTeamsChannel.Incident.SeverityImpactObject.AffectsID = types.StringPointerValue(resp.MsTeamsChannel.Incident.SeverityImpactObject.AffectsID)
					r.MsTeamsChannel.Incident.SeverityImpactObject.ID = types.StringPointerValue(resp.MsTeamsChannel.Incident.SeverityImpactObject.ID)
					r.MsTeamsChannel.Incident.SeverityImpactObject.Name = types.StringPointerValue(resp.MsTeamsChannel.Incident.SeverityImpactObject.Name)
					r.MsTeamsChannel.Incident.SeverityImpactObject.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.MsTeamsChannel.Incident.SeverityImpactObject.Position))
					r.MsTeamsChannel.Incident.SeverityImpactObject.Type = types.StringPointerValue(resp.MsTeamsChannel.Incident.SeverityImpactObject.Type)
				}
				r.MsTeamsChannel.Incident.StartedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MsTeamsChannel.Incident.StartedAt))
				if resp.MsTeamsChannel.Incident.StatusPages != nil {
					r.MsTeamsChannel.Incident.StatusPages = []tfTypes.IncidentsStatusPage{}
					if len(r.MsTeamsChannel.Incident.StatusPages) > len(resp.MsTeamsChannel.Incident.StatusPages) {
						r.MsTeamsChannel.Incident.StatusPages = r.MsTeamsChannel.Incident.StatusPages[:len(resp.MsTeamsChannel.Incident.StatusPages)]
					}
					for statusPagesCount1, statusPagesItem1 := range resp.MsTeamsChannel.Incident.StatusPages {
						var statusPages1 tfTypes.IncidentsStatusPage
						statusPages1.DisplayName = types.StringPointerValue(statusPagesItem1.DisplayName)
						statusPages1.ExternalID = types.StringPointerValue(statusPagesItem1.ExternalID)
						statusPages1.ID = types.StringPointerValue(statusPagesItem1.ID)
						if statusPagesItem1.Integration == nil {
							statusPages1.Integration = nil
						} else {
							statusPages1.Integration = &tfTypes.NullableIntegration{}
							statusPages1.Integration.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(statusPagesItem1.Integration.CreatedAt))
							statusPages1.Integration.DisplayName = types.StringPointerValue(statusPagesItem1.Integration.DisplayName)
							statusPages1.Integration.ID = types.StringPointerValue(statusPagesItem1.Integration.ID)
							statusPages1.Integration.IntegrationName = types.StringPointerValue(statusPagesItem1.Integration.IntegrationName)
							statusPages1.Integration.IntegrationSlug = types.StringPointerValue(statusPagesItem1.Integration.IntegrationSlug)
						}
						statusPages1.Name = types.StringPointerValue(statusPagesItem1.Name)
						statusPages1.URL = types.StringPointerValue(statusPagesItem1.URL)
						if statusPagesCount1+1 > len(r.MsTeamsChannel.Incident.StatusPages) {
							r.MsTeamsChannel.Incident.StatusPages = append(r.MsTeamsChannel.Incident.StatusPages, statusPages1)
						} else {
							r.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].DisplayName = statusPages1.DisplayName
							r.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].ExternalID = statusPages1.ExternalID
							r.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].ID = statusPages1.ID
							r.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].Integration = statusPages1.Integration
							r.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].Name = statusPages1.Name
							r.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].URL = statusPages1.URL
						}
					}
				}
				r.MsTeamsChannel.Incident.Summary = types.StringPointerValue(resp.MsTeamsChannel.Incident.Summary)
				if resp.MsTeamsChannel.Incident.TagList != nil {
					r.MsTeamsChannel.Incident.TagList = make([]types.String, 0, len(resp.MsTeamsChannel.Incident.TagList))
					for _, v := range resp.MsTeamsChannel.Incident.TagList {
						r.MsTeamsChannel.Incident.TagList = append(r.MsTeamsChannel.Incident.TagList, types.StringValue(v))
					}
				}
				if resp.MsTeamsChannel.Incident.TeamAssignments != nil {
					r.MsTeamsChannel.Incident.TeamAssignments = []tfTypes.IncidentsTeamAssignmentLite{}
					if len(r.MsTeamsChannel.Incident.TeamAssignments) > len(resp.MsTeamsChannel.Incident.TeamAssignments) {
						r.MsTeamsChannel.Incident.TeamAssignments = r.MsTeamsChannel.Incident.TeamAssignments[:len(resp.MsTeamsChannel.Incident.TeamAssignments)]
					}
					for teamAssignmentsCount, teamAssignmentsItem := range resp.MsTeamsChannel.Incident.TeamAssignments {
						var teamAssignments tfTypes.IncidentsTeamAssignmentLite
						teamAssignments.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.CreatedAt))
						teamAssignments.ID = types.StringPointerValue(teamAssignmentsItem.ID)
						teamAssignments.Status = types.StringPointerValue(teamAssignmentsItem.Status)
						if teamAssignmentsItem.Team == nil {
							teamAssignments.Team = nil
						} else {
							teamAssignments.Team = &tfTypes.NullableTeamLite{}
							teamAssignments.Team.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.Team.CreatedAt))
							if teamAssignmentsItem.Team.CreatedBy == nil {
								teamAssignments.Team.CreatedBy = nil
							} else {
								teamAssignments.Team.CreatedBy = &tfTypes.NullableAuthor{}
								teamAssignments.Team.CreatedBy.Email = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.Email)
								teamAssignments.Team.CreatedBy.ID = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.ID)
								teamAssignments.Team.CreatedBy.Name = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.Name)
								teamAssignments.Team.CreatedBy.Source = types.StringPointerValue(teamAssignmentsItem.Team.CreatedBy.Source)
							}
							teamAssignments.Team.Description = types.StringPointerValue(teamAssignmentsItem.Team.Description)
							teamAssignments.Team.ID = types.StringPointerValue(teamAssignmentsItem.Team.ID)
							teamAssignments.Team.InSupportHours = types.BoolPointerValue(teamAssignmentsItem.Team.InSupportHours)
							teamAssignments.Team.Name = types.StringPointerValue(teamAssignmentsItem.Team.Name)
							teamAssignments.Team.SignalsIcalURL = types.StringPointerValue(teamAssignmentsItem.Team.SignalsIcalURL)
							teamAssignments.Team.Slug = types.StringPointerValue(teamAssignmentsItem.Team.Slug)
							teamAssignments.Team.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.Team.UpdatedAt))
						}
						teamAssignments.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(teamAssignmentsItem.UpdatedAt))
						if teamAssignmentsCount+1 > len(r.MsTeamsChannel.Incident.TeamAssignments) {
							r.MsTeamsChannel.Incident.TeamAssignments = append(r.MsTeamsChannel.Incident.TeamAssignments, teamAssignments)
						} else {
							r.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].CreatedAt = teamAssignments.CreatedAt
							r.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].ID = teamAssignments.ID
							r.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].Status = teamAssignments.Status
							r.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].Team = teamAssignments.Team
							r.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].UpdatedAt = teamAssignments.UpdatedAt
						}
					}
				}
				if resp.MsTeamsChannel.Incident.Ticket == nil {
					r.MsTeamsChannel.Incident.Ticket = nil
				} else {
					r.MsTeamsChannel.Incident.Ticket = &tfTypes.NullableTicketingTicket{}
					if resp.MsTeamsChannel.Incident.Ticket.Assignees != nil {
						r.MsTeamsChannel.Incident.Ticket.Assignees = []tfTypes.Author{}
						if len(r.MsTeamsChannel.Incident.Ticket.Assignees) > len(resp.MsTeamsChannel.Incident.Ticket.Assignees) {
							r.MsTeamsChannel.Incident.Ticket.Assignees = r.MsTeamsChannel.Incident.Ticket.Assignees[:len(resp.MsTeamsChannel.Incident.Ticket.Assignees)]
						}
						for assigneesCount1, assigneesItem1 := range resp.MsTeamsChannel.Incident.Ticket.Assignees {
							var assignees1 tfTypes.Author
							assignees1.Email = types.StringPointerValue(assigneesItem1.Email)
							assignees1.ID = types.StringPointerValue(assigneesItem1.ID)
							assignees1.Name = types.StringPointerValue(assigneesItem1.Name)
							assignees1.Source = types.StringPointerValue(assigneesItem1.Source)
							if assigneesCount1+1 > len(r.MsTeamsChannel.Incident.Ticket.Assignees) {
								r.MsTeamsChannel.Incident.Ticket.Assignees = append(r.MsTeamsChannel.Incident.Ticket.Assignees, assignees1)
							} else {
								r.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].Email = assignees1.Email
								r.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].ID = assignees1.ID
								r.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].Name = assignees1.Name
								r.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].Source = assignees1.Source
							}
						}
					}
					if resp.MsTeamsChannel.Incident.Ticket.Attachments != nil {
					}
					r.MsTeamsChannel.Incident.Ticket.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MsTeamsChannel.Incident.Ticket.CreatedAt))
					if resp.MsTeamsChannel.Incident.Ticket.CreatedBy == nil {
						r.MsTeamsChannel.Incident.Ticket.CreatedBy = nil
					} else {
						r.MsTeamsChannel.Incident.Ticket.CreatedBy = &tfTypes.NullableAuthor{}
						r.MsTeamsChannel.Incident.Ticket.CreatedBy.Email = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.CreatedBy.Email)
						r.MsTeamsChannel.Incident.Ticket.CreatedBy.ID = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.CreatedBy.ID)
						r.MsTeamsChannel.Incident.Ticket.CreatedBy.Name = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.CreatedBy.Name)
						r.MsTeamsChannel.Incident.Ticket.CreatedBy.Source = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.CreatedBy.Source)
					}
					r.MsTeamsChannel.Incident.Ticket.Description = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.Description)
					r.MsTeamsChannel.Incident.Ticket.DueAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MsTeamsChannel.Incident.Ticket.DueAt))
					r.MsTeamsChannel.Incident.Ticket.ID = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.ID)
					r.MsTeamsChannel.Incident.Ticket.IncidentCurrentMilestone = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.IncidentCurrentMilestone)
					r.MsTeamsChannel.Incident.Ticket.IncidentID = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.IncidentID)
					r.MsTeamsChannel.Incident.Ticket.IncidentName = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.IncidentName)
					if resp.MsTeamsChannel.Incident.Ticket.Link == nil {
						r.MsTeamsChannel.Incident.Ticket.Link = nil
					} else {
						r.MsTeamsChannel.Incident.Ticket.Link = &tfTypes.NullableAttachmentsLink{}
						r.MsTeamsChannel.Incident.Ticket.Link.Deletable = types.BoolPointerValue(resp.MsTeamsChannel.Incident.Ticket.Link.Deletable)
						r.MsTeamsChannel.Incident.Ticket.Link.DisplayText = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.Link.DisplayText)
						r.MsTeamsChannel.Incident.Ticket.Link.Editable = types.BoolPointerValue(resp.MsTeamsChannel.Incident.Ticket.Link.Editable)
						r.MsTeamsChannel.Incident.Ticket.Link.HrefURL = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.Link.HrefURL)
						r.MsTeamsChannel.Incident.Ticket.Link.IconURL = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.Link.IconURL)
						r.MsTeamsChannel.Incident.Ticket.Link.ID = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.Link.ID)
						r.MsTeamsChannel.Incident.Ticket.Link.Type = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.Link.Type)
					}
					if resp.MsTeamsChannel.Incident.Ticket.Priority == nil {
						r.MsTeamsChannel.Incident.Ticket.Priority = nil
					} else {
						r.MsTeamsChannel.Incident.Ticket.Priority = &tfTypes.NullableTicketingPriority{}
						r.MsTeamsChannel.Incident.Ticket.Priority.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MsTeamsChannel.Incident.Ticket.Priority.CreatedAt))
						r.MsTeamsChannel.Incident.Ticket.Priority.ID = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.Priority.ID)
						r.MsTeamsChannel.Incident.Ticket.Priority.Name = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.Priority.Name)
						r.MsTeamsChannel.Incident.Ticket.Priority.Position = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.MsTeamsChannel.Incident.Ticket.Priority.Position))
						r.MsTeamsChannel.Incident.Ticket.Priority.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MsTeamsChannel.Incident.Ticket.Priority.UpdatedAt))
					}
					r.MsTeamsChannel.Incident.Ticket.State = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.State)
					r.MsTeamsChannel.Incident.Ticket.Summary = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.Summary)
					r.MsTeamsChannel.Incident.Ticket.SyncErrorMessage = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.SyncErrorMessage)
					if resp.MsTeamsChannel.Incident.Ticket.TagList != nil {
						r.MsTeamsChannel.Incident.Ticket.TagList = make([]types.String, 0, len(resp.MsTeamsChannel.Incident.Ticket.TagList))
						for _, v := range resp.MsTeamsChannel.Incident.Ticket.TagList {
							r.MsTeamsChannel.Incident.Ticket.TagList = append(r.MsTeamsChannel.Incident.Ticket.TagList, types.StringValue(v))
						}
					}
					r.MsTeamsChannel.Incident.Ticket.TaskID = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.TaskID)
					r.MsTeamsChannel.Incident.Ticket.Type = types.StringPointerValue(resp.MsTeamsChannel.Incident.Ticket.Type)
					r.MsTeamsChannel.Incident.Ticket.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MsTeamsChannel.Incident.Ticket.UpdatedAt))
				}
			}
			r.MsTeamsChannel.MsTeamID = types.StringPointerValue(resp.MsTeamsChannel.MsTeamID)
			r.MsTeamsChannel.Status = types.StringPointerValue(resp.MsTeamsChannel.Status)
			r.MsTeamsChannel.TeamName = types.StringPointerValue(resp.MsTeamsChannel.TeamName)
		}
		r.Name = types.StringPointerValue(resp.Name)
		if resp.OwnedChecklistTemplates != nil {
			r.OwnedChecklistTemplates = []tfTypes.ChecklistTemplate{}
			if len(r.OwnedChecklistTemplates) > len(resp.OwnedChecklistTemplates) {
				r.OwnedChecklistTemplates = r.OwnedChecklistTemplates[:len(resp.OwnedChecklistTemplates)]
			}
			for ownedChecklistTemplatesCount, ownedChecklistTemplatesItem := range resp.OwnedChecklistTemplates {
				var ownedChecklistTemplates tfTypes.ChecklistTemplate
				if ownedChecklistTemplatesItem.Checks != nil {
					ownedChecklistTemplates.Checks = []tfTypes.ChecklistCheck1{}
					for checksCount, checksItem := range ownedChecklistTemplatesItem.Checks {
						var checks tfTypes.ChecklistCheck1
						checks.Description = types.StringPointerValue(checksItem.Description)
						checks.ID = types.StringPointerValue(checksItem.ID)
						checks.Name = types.StringPointerValue(checksItem.Name)
						checks.Status = types.BoolPointerValue(checksItem.Status)
						if checksCount+1 > len(ownedChecklistTemplates.Checks) {
							ownedChecklistTemplates.Checks = append(ownedChecklistTemplates.Checks, checks)
						} else {
							ownedChecklistTemplates.Checks[checksCount].Description = checks.Description
							ownedChecklistTemplates.Checks[checksCount].ID = checks.ID
							ownedChecklistTemplates.Checks[checksCount].Name = checks.Name
							ownedChecklistTemplates.Checks[checksCount].Status = checks.Status
						}
					}
				}
				if ownedChecklistTemplatesItem.ConnectedServices != nil {
					ownedChecklistTemplates.ConnectedServices = []tfTypes.ServiceChecklist{}
					for connectedServicesCount, connectedServicesItem := range ownedChecklistTemplatesItem.ConnectedServices {
						var connectedServices tfTypes.ServiceChecklist
						connectedServices.AlertOnAdd = types.BoolPointerValue(connectedServicesItem.AlertOnAdd)
						if connectedServicesItem.AllowedParams != nil {
							connectedServices.AllowedParams = make([]types.String, 0, len(connectedServicesItem.AllowedParams))
							for _, v := range connectedServicesItem.AllowedParams {
								connectedServices.AllowedParams = append(connectedServices.AllowedParams, types.StringValue(v))
							}
						}
						connectedServices.AutoAddRespondingTeam = types.BoolPointerValue(connectedServicesItem.AutoAddRespondingTeam)
						connectedServices.CompletedChecks = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(connectedServicesItem.CompletedChecks))
						connectedServices.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.CreatedAt))
						connectedServices.Description = types.StringPointerValue(connectedServicesItem.Description)
						connectedServices.ID = types.StringPointerValue(connectedServicesItem.ID)
						if connectedServicesItem.Labels == nil {
							connectedServices.Labels = nil
						} else {
							connectedServices.Labels = &tfTypes.ServiceChecklistLabels{}
						}
						connectedServices.Name = types.StringPointerValue(connectedServicesItem.Name)
						if connectedServicesItem.Owner == nil {
							connectedServices.Owner = nil
						} else {
							connectedServices.Owner = &tfTypes.NullableTeamLite{}
							connectedServices.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.Owner.CreatedAt))
							if connectedServicesItem.Owner.CreatedBy == nil {
								connectedServices.Owner.CreatedBy = nil
							} else {
								connectedServices.Owner.CreatedBy = &tfTypes.NullableAuthor{}
								connectedServices.Owner.CreatedBy.Email = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Email)
								connectedServices.Owner.CreatedBy.ID = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.ID)
								connectedServices.Owner.CreatedBy.Name = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Name)
								connectedServices.Owner.CreatedBy.Source = types.StringPointerValue(connectedServicesItem.Owner.CreatedBy.Source)
							}
							connectedServices.Owner.Description = types.StringPointerValue(connectedServicesItem.Owner.Description)
							connectedServices.Owner.ID = types.StringPointerValue(connectedServicesItem.Owner.ID)
							connectedServices.Owner.InSupportHours = types.BoolPointerValue(connectedServicesItem.Owner.InSupportHours)
							connectedServices.Owner.Name = types.StringPointerValue(connectedServicesItem.Owner.Name)
							connectedServices.Owner.SignalsIcalURL = types.StringPointerValue(connectedServicesItem.Owner.SignalsIcalURL)
							connectedServices.Owner.Slug = types.StringPointerValue(connectedServicesItem.Owner.Slug)
							connectedServices.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.Owner.UpdatedAt))
						}
						connectedServices.ServiceChecklistUpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.ServiceChecklistUpdatedAt))
						connectedServices.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(connectedServicesItem.ServiceTier))
						connectedServices.Slug = types.StringPointerValue(connectedServicesItem.Slug)
						connectedServices.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(connectedServicesItem.UpdatedAt))
						if connectedServicesCount+1 > len(ownedChecklistTemplates.ConnectedServices) {
							ownedChecklistTemplates.ConnectedServices = append(ownedChecklistTemplates.ConnectedServices, connectedServices)
						} else {
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].AlertOnAdd = connectedServices.AlertOnAdd
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].AllowedParams = connectedServices.AllowedParams
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].AutoAddRespondingTeam = connectedServices.AutoAddRespondingTeam
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].CompletedChecks = connectedServices.CompletedChecks
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].CreatedAt = connectedServices.CreatedAt
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].Description = connectedServices.Description
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].ID = connectedServices.ID
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].Labels = connectedServices.Labels
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].Name = connectedServices.Name
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].Owner = connectedServices.Owner
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].ServiceChecklistUpdatedAt = connectedServices.ServiceChecklistUpdatedAt
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].ServiceTier = connectedServices.ServiceTier
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].Slug = connectedServices.Slug
							ownedChecklistTemplates.ConnectedServices[connectedServicesCount].UpdatedAt = connectedServices.UpdatedAt
						}
					}
				}
				ownedChecklistTemplates.CreatedAt = types.StringPointerValue(ownedChecklistTemplatesItem.CreatedAt)
				ownedChecklistTemplates.Description = types.StringPointerValue(ownedChecklistTemplatesItem.Description)
				ownedChecklistTemplates.ID = types.StringPointerValue(ownedChecklistTemplatesItem.ID)
				ownedChecklistTemplates.Name = types.StringPointerValue(ownedChecklistTemplatesItem.Name)
				if ownedChecklistTemplatesItem.Owner == nil {
					ownedChecklistTemplates.Owner = nil
				} else {
					ownedChecklistTemplates.Owner = &tfTypes.NullableTeamLite{}
					ownedChecklistTemplates.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedChecklistTemplatesItem.Owner.CreatedAt))
					if ownedChecklistTemplatesItem.Owner.CreatedBy == nil {
						ownedChecklistTemplates.Owner.CreatedBy = nil
					} else {
						ownedChecklistTemplates.Owner.CreatedBy = &tfTypes.NullableAuthor{}
						ownedChecklistTemplates.Owner.CreatedBy.Email = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.CreatedBy.Email)
						ownedChecklistTemplates.Owner.CreatedBy.ID = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.CreatedBy.ID)
						ownedChecklistTemplates.Owner.CreatedBy.Name = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.CreatedBy.Name)
						ownedChecklistTemplates.Owner.CreatedBy.Source = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.CreatedBy.Source)
					}
					ownedChecklistTemplates.Owner.Description = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.Description)
					ownedChecklistTemplates.Owner.ID = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.ID)
					ownedChecklistTemplates.Owner.InSupportHours = types.BoolPointerValue(ownedChecklistTemplatesItem.Owner.InSupportHours)
					ownedChecklistTemplates.Owner.Name = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.Name)
					ownedChecklistTemplates.Owner.SignalsIcalURL = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.SignalsIcalURL)
					ownedChecklistTemplates.Owner.Slug = types.StringPointerValue(ownedChecklistTemplatesItem.Owner.Slug)
					ownedChecklistTemplates.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedChecklistTemplatesItem.Owner.UpdatedAt))
				}
				ownedChecklistTemplates.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedChecklistTemplatesItem.UpdatedAt))
				if ownedChecklistTemplatesCount+1 > len(r.OwnedChecklistTemplates) {
					r.OwnedChecklistTemplates = append(r.OwnedChecklistTemplates, ownedChecklistTemplates)
				} else {
					r.OwnedChecklistTemplates[ownedChecklistTemplatesCount].Checks = ownedChecklistTemplates.Checks
					r.OwnedChecklistTemplates[ownedChecklistTemplatesCount].ConnectedServices = ownedChecklistTemplates.ConnectedServices
					r.OwnedChecklistTemplates[ownedChecklistTemplatesCount].CreatedAt = ownedChecklistTemplates.CreatedAt
					r.OwnedChecklistTemplates[ownedChecklistTemplatesCount].Description = ownedChecklistTemplates.Description
					r.OwnedChecklistTemplates[ownedChecklistTemplatesCount].ID = ownedChecklistTemplates.ID
					r.OwnedChecklistTemplates[ownedChecklistTemplatesCount].Name = ownedChecklistTemplates.Name
					r.OwnedChecklistTemplates[ownedChecklistTemplatesCount].Owner = ownedChecklistTemplates.Owner
					r.OwnedChecklistTemplates[ownedChecklistTemplatesCount].UpdatedAt = ownedChecklistTemplates.UpdatedAt
				}
			}
		}
		if resp.OwnedFunctionalities != nil {
			r.OwnedFunctionalities = []tfTypes.FunctionalityLite{}
			if len(r.OwnedFunctionalities) > len(resp.OwnedFunctionalities) {
				r.OwnedFunctionalities = r.OwnedFunctionalities[:len(resp.OwnedFunctionalities)]
			}
			for ownedFunctionalitiesCount, ownedFunctionalitiesItem := range resp.OwnedFunctionalities {
				var ownedFunctionalities tfTypes.FunctionalityLite
				if ownedFunctionalitiesItem.ActiveIncidents != nil {
					ownedFunctionalities.ActiveIncidents = make([]types.String, 0, len(ownedFunctionalitiesItem.ActiveIncidents))
					for _, v := range ownedFunctionalitiesItem.ActiveIncidents {
						ownedFunctionalities.ActiveIncidents = append(ownedFunctionalities.ActiveIncidents, types.StringValue(v))
					}
				}
				ownedFunctionalities.AlertOnAdd = types.BoolPointerValue(ownedFunctionalitiesItem.AlertOnAdd)
				ownedFunctionalities.AutoAddRespondingTeam = types.BoolPointerValue(ownedFunctionalitiesItem.AutoAddRespondingTeam)
				ownedFunctionalities.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedFunctionalitiesItem.CreatedAt))
				ownedFunctionalities.Description = types.StringPointerValue(ownedFunctionalitiesItem.Description)
				ownedFunctionalities.ID = types.StringPointerValue(ownedFunctionalitiesItem.ID)
				if ownedFunctionalitiesItem.Labels == nil {
					ownedFunctionalities.Labels = nil
				} else {
					ownedFunctionalities.Labels = &tfTypes.FunctionalityLiteLabels{}
				}
				if ownedFunctionalitiesItem.Links != nil {
					ownedFunctionalities.Links = []tfTypes.Links{}
					for linksCount1, linksItem1 := range ownedFunctionalitiesItem.Links {
						var links1 tfTypes.Links
						links1.HrefURL = types.StringPointerValue(linksItem1.HrefURL)
						links1.IconURL = types.StringPointerValue(linksItem1.IconURL)
						links1.ID = types.StringPointerValue(linksItem1.ID)
						links1.Name = types.StringPointerValue(linksItem1.Name)
						if linksCount1+1 > len(ownedFunctionalities.Links) {
							ownedFunctionalities.Links = append(ownedFunctionalities.Links, links1)
						} else {
							ownedFunctionalities.Links[linksCount1].HrefURL = links1.HrefURL
							ownedFunctionalities.Links[linksCount1].IconURL = links1.IconURL
							ownedFunctionalities.Links[linksCount1].ID = links1.ID
							ownedFunctionalities.Links[linksCount1].Name = links1.Name
						}
					}
				}
				ownedFunctionalities.Name = types.StringPointerValue(ownedFunctionalitiesItem.Name)
				if ownedFunctionalitiesItem.Owner == nil {
					ownedFunctionalities.Owner = nil
				} else {
					ownedFunctionalities.Owner = &tfTypes.NullableTeamLite{}
					ownedFunctionalities.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedFunctionalitiesItem.Owner.CreatedAt))
					if ownedFunctionalitiesItem.Owner.CreatedBy == nil {
						ownedFunctionalities.Owner.CreatedBy = nil
					} else {
						ownedFunctionalities.Owner.CreatedBy = &tfTypes.NullableAuthor{}
						ownedFunctionalities.Owner.CreatedBy.Email = types.StringPointerValue(ownedFunctionalitiesItem.Owner.CreatedBy.Email)
						ownedFunctionalities.Owner.CreatedBy.ID = types.StringPointerValue(ownedFunctionalitiesItem.Owner.CreatedBy.ID)
						ownedFunctionalities.Owner.CreatedBy.Name = types.StringPointerValue(ownedFunctionalitiesItem.Owner.CreatedBy.Name)
						ownedFunctionalities.Owner.CreatedBy.Source = types.StringPointerValue(ownedFunctionalitiesItem.Owner.CreatedBy.Source)
					}
					ownedFunctionalities.Owner.Description = types.StringPointerValue(ownedFunctionalitiesItem.Owner.Description)
					ownedFunctionalities.Owner.ID = types.StringPointerValue(ownedFunctionalitiesItem.Owner.ID)
					ownedFunctionalities.Owner.InSupportHours = types.BoolPointerValue(ownedFunctionalitiesItem.Owner.InSupportHours)
					ownedFunctionalities.Owner.Name = types.StringPointerValue(ownedFunctionalitiesItem.Owner.Name)
					ownedFunctionalities.Owner.SignalsIcalURL = types.StringPointerValue(ownedFunctionalitiesItem.Owner.SignalsIcalURL)
					ownedFunctionalities.Owner.Slug = types.StringPointerValue(ownedFunctionalitiesItem.Owner.Slug)
					ownedFunctionalities.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedFunctionalitiesItem.Owner.UpdatedAt))
				}
				ownedFunctionalities.Slug = types.StringPointerValue(ownedFunctionalitiesItem.Slug)
				ownedFunctionalities.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedFunctionalitiesItem.UpdatedAt))
				if ownedFunctionalitiesItem.UpdatedBy == nil {
					ownedFunctionalities.UpdatedBy = nil
				} else {
					ownedFunctionalities.UpdatedBy = &tfTypes.NullableAuthor{}
					ownedFunctionalities.UpdatedBy.Email = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Email)
					ownedFunctionalities.UpdatedBy.ID = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.ID)
					ownedFunctionalities.UpdatedBy.Name = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Name)
					ownedFunctionalities.UpdatedBy.Source = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Source)
				}
				if ownedFunctionalitiesCount+1 > len(r.OwnedFunctionalities) {
					r.OwnedFunctionalities = append(r.OwnedFunctionalities, ownedFunctionalities)
				} else {
					r.OwnedFunctionalities[ownedFunctionalitiesCount].ActiveIncidents = ownedFunctionalities.ActiveIncidents
					r.OwnedFunctionalities[ownedFunctionalitiesCount].AlertOnAdd = ownedFunctionalities.AlertOnAdd
					r.OwnedFunctionalities[ownedFunctionalitiesCount].AutoAddRespondingTeam = ownedFunctionalities.AutoAddRespondingTeam
					r.OwnedFunctionalities[ownedFunctionalitiesCount].CreatedAt = ownedFunctionalities.CreatedAt
					r.OwnedFunctionalities[ownedFunctionalitiesCount].Description = ownedFunctionalities.Description
					r.OwnedFunctionalities[ownedFunctionalitiesCount].ID = ownedFunctionalities.ID
					r.OwnedFunctionalities[ownedFunctionalitiesCount].Labels = ownedFunctionalities.Labels
					r.OwnedFunctionalities[ownedFunctionalitiesCount].Links = ownedFunctionalities.Links
					r.OwnedFunctionalities[ownedFunctionalitiesCount].Name = ownedFunctionalities.Name
					r.OwnedFunctionalities[ownedFunctionalitiesCount].Owner = ownedFunctionalities.Owner
					r.OwnedFunctionalities[ownedFunctionalitiesCount].Slug = ownedFunctionalities.Slug
					r.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedAt = ownedFunctionalities.UpdatedAt
					r.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedBy = ownedFunctionalities.UpdatedBy
				}
			}
		}
		if resp.OwnedRunbooks != nil {
			r.OwnedRunbooks = []tfTypes.SlimRunbook{}
			if len(r.OwnedRunbooks) > len(resp.OwnedRunbooks) {
				r.OwnedRunbooks = r.OwnedRunbooks[:len(resp.OwnedRunbooks)]
			}
			for ownedRunbooksCount, ownedRunbooksItem := range resp.OwnedRunbooks {
				var ownedRunbooks tfTypes.SlimRunbook
				if ownedRunbooksItem.AttachmentRule == nil {
					ownedRunbooks.AttachmentRule = nil
				} else {
					ownedRunbooks.AttachmentRule = &tfTypes.NullableRules{}
					ownedRunbooks.AttachmentRule.Logic = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.Logic)
					if ownedRunbooksItem.AttachmentRule.UserData == nil {
						ownedRunbooks.AttachmentRule.UserData = nil
					} else {
						ownedRunbooks.AttachmentRule.UserData = &tfTypes.NullableFHTypesGeneric{}
						ownedRunbooks.AttachmentRule.UserData.Label = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Label)
						ownedRunbooks.AttachmentRule.UserData.Type = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Type)
						ownedRunbooks.AttachmentRule.UserData.Value = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Value)
					}
				}
				if ownedRunbooksItem.Categories != nil {
					ownedRunbooks.Categories = make([]types.String, 0, len(ownedRunbooksItem.Categories))
					for _, v := range ownedRunbooksItem.Categories {
						ownedRunbooks.Categories = append(ownedRunbooks.Categories, types.StringValue(v))
					}
				}
				ownedRunbooks.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedRunbooksItem.CreatedAt))
				ownedRunbooks.Description = types.StringPointerValue(ownedRunbooksItem.Description)
				ownedRunbooks.ID = types.StringPointerValue(ownedRunbooksItem.ID)
				ownedRunbooks.Name = types.StringPointerValue(ownedRunbooksItem.Name)
				if ownedRunbooksItem.Owner == nil {
					ownedRunbooks.Owner = nil
				} else {
					ownedRunbooks.Owner = &tfTypes.NullableTeamLite{}
					ownedRunbooks.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedRunbooksItem.Owner.CreatedAt))
					if ownedRunbooksItem.Owner.CreatedBy == nil {
						ownedRunbooks.Owner.CreatedBy = nil
					} else {
						ownedRunbooks.Owner.CreatedBy = &tfTypes.NullableAuthor{}
						ownedRunbooks.Owner.CreatedBy.Email = types.StringPointerValue(ownedRunbooksItem.Owner.CreatedBy.Email)
						ownedRunbooks.Owner.CreatedBy.ID = types.StringPointerValue(ownedRunbooksItem.Owner.CreatedBy.ID)
						ownedRunbooks.Owner.CreatedBy.Name = types.StringPointerValue(ownedRunbooksItem.Owner.CreatedBy.Name)
						ownedRunbooks.Owner.CreatedBy.Source = types.StringPointerValue(ownedRunbooksItem.Owner.CreatedBy.Source)
					}
					ownedRunbooks.Owner.Description = types.StringPointerValue(ownedRunbooksItem.Owner.Description)
					ownedRunbooks.Owner.ID = types.StringPointerValue(ownedRunbooksItem.Owner.ID)
					ownedRunbooks.Owner.InSupportHours = types.BoolPointerValue(ownedRunbooksItem.Owner.InSupportHours)
					ownedRunbooks.Owner.Name = types.StringPointerValue(ownedRunbooksItem.Owner.Name)
					ownedRunbooks.Owner.SignalsIcalURL = types.StringPointerValue(ownedRunbooksItem.Owner.SignalsIcalURL)
					ownedRunbooks.Owner.Slug = types.StringPointerValue(ownedRunbooksItem.Owner.Slug)
					ownedRunbooks.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedRunbooksItem.Owner.UpdatedAt))
				}
				ownedRunbooks.Summary = types.StringPointerValue(ownedRunbooksItem.Summary)
				ownedRunbooks.Type = types.StringPointerValue(ownedRunbooksItem.Type)
				ownedRunbooks.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedRunbooksItem.UpdatedAt))
				if ownedRunbooksCount+1 > len(r.OwnedRunbooks) {
					r.OwnedRunbooks = append(r.OwnedRunbooks, ownedRunbooks)
				} else {
					r.OwnedRunbooks[ownedRunbooksCount].AttachmentRule = ownedRunbooks.AttachmentRule
					r.OwnedRunbooks[ownedRunbooksCount].Categories = ownedRunbooks.Categories
					r.OwnedRunbooks[ownedRunbooksCount].CreatedAt = ownedRunbooks.CreatedAt
					r.OwnedRunbooks[ownedRunbooksCount].Description = ownedRunbooks.Description
					r.OwnedRunbooks[ownedRunbooksCount].ID = ownedRunbooks.ID
					r.OwnedRunbooks[ownedRunbooksCount].Name = ownedRunbooks.Name
					r.OwnedRunbooks[ownedRunbooksCount].Owner = ownedRunbooks.Owner
					r.OwnedRunbooks[ownedRunbooksCount].Summary = ownedRunbooks.Summary
					r.OwnedRunbooks[ownedRunbooksCount].Type = ownedRunbooks.Type
					r.OwnedRunbooks[ownedRunbooksCount].UpdatedAt = ownedRunbooks.UpdatedAt
				}
			}
		}
		if resp.OwnedServices != nil {
			r.OwnedServices = []tfTypes.ServiceLite{}
			if len(r.OwnedServices) > len(resp.OwnedServices) {
				r.OwnedServices = r.OwnedServices[:len(resp.OwnedServices)]
			}
			for ownedServicesCount, ownedServicesItem := range resp.OwnedServices {
				var ownedServices tfTypes.ServiceLite
				ownedServices.AlertOnAdd = types.BoolPointerValue(ownedServicesItem.AlertOnAdd)
				if ownedServicesItem.AllowedParams != nil {
					ownedServices.AllowedParams = make([]types.String, 0, len(ownedServicesItem.AllowedParams))
					for _, v := range ownedServicesItem.AllowedParams {
						ownedServices.AllowedParams = append(ownedServices.AllowedParams, types.StringValue(v))
					}
				}
				ownedServices.AutoAddRespondingTeam = types.BoolPointerValue(ownedServicesItem.AutoAddRespondingTeam)
				ownedServices.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedServicesItem.CreatedAt))
				ownedServices.Description = types.StringPointerValue(ownedServicesItem.Description)
				ownedServices.ID = types.StringPointerValue(ownedServicesItem.ID)
				if ownedServicesItem.Labels == nil {
					ownedServices.Labels = nil
				} else {
					ownedServices.Labels = &tfTypes.ServiceLiteLabels{}
				}
				ownedServices.Name = types.StringPointerValue(ownedServicesItem.Name)
				ownedServices.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(ownedServicesItem.ServiceTier))
				ownedServices.Slug = types.StringPointerValue(ownedServicesItem.Slug)
				ownedServices.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(ownedServicesItem.UpdatedAt))
				if ownedServicesCount+1 > len(r.OwnedServices) {
					r.OwnedServices = append(r.OwnedServices, ownedServices)
				} else {
					r.OwnedServices[ownedServicesCount].AlertOnAdd = ownedServices.AlertOnAdd
					r.OwnedServices[ownedServicesCount].AllowedParams = ownedServices.AllowedParams
					r.OwnedServices[ownedServicesCount].AutoAddRespondingTeam = ownedServices.AutoAddRespondingTeam
					r.OwnedServices[ownedServicesCount].CreatedAt = ownedServices.CreatedAt
					r.OwnedServices[ownedServicesCount].Description = ownedServices.Description
					r.OwnedServices[ownedServicesCount].ID = ownedServices.ID
					r.OwnedServices[ownedServicesCount].Labels = ownedServices.Labels
					r.OwnedServices[ownedServicesCount].Name = ownedServices.Name
					r.OwnedServices[ownedServicesCount].ServiceTier = ownedServices.ServiceTier
					r.OwnedServices[ownedServicesCount].Slug = ownedServices.Slug
					r.OwnedServices[ownedServicesCount].UpdatedAt = ownedServices.UpdatedAt
				}
			}
		}
		if resp.RespondingServices != nil {
			r.RespondingServices = []tfTypes.ServiceLite{}
			if len(r.RespondingServices) > len(resp.RespondingServices) {
				r.RespondingServices = r.RespondingServices[:len(resp.RespondingServices)]
			}
			for respondingServicesCount, respondingServicesItem := range resp.RespondingServices {
				var respondingServices tfTypes.ServiceLite
				respondingServices.AlertOnAdd = types.BoolPointerValue(respondingServicesItem.AlertOnAdd)
				if respondingServicesItem.AllowedParams != nil {
					respondingServices.AllowedParams = make([]types.String, 0, len(respondingServicesItem.AllowedParams))
					for _, v := range respondingServicesItem.AllowedParams {
						respondingServices.AllowedParams = append(respondingServices.AllowedParams, types.StringValue(v))
					}
				}
				respondingServices.AutoAddRespondingTeam = types.BoolPointerValue(respondingServicesItem.AutoAddRespondingTeam)
				respondingServices.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(respondingServicesItem.CreatedAt))
				respondingServices.Description = types.StringPointerValue(respondingServicesItem.Description)
				respondingServices.ID = types.StringPointerValue(respondingServicesItem.ID)
				if respondingServicesItem.Labels == nil {
					respondingServices.Labels = nil
				} else {
					respondingServices.Labels = &tfTypes.ServiceLiteLabels{}
				}
				respondingServices.Name = types.StringPointerValue(respondingServicesItem.Name)
				respondingServices.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(respondingServicesItem.ServiceTier))
				respondingServices.Slug = types.StringPointerValue(respondingServicesItem.Slug)
				respondingServices.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(respondingServicesItem.UpdatedAt))
				if respondingServicesCount+1 > len(r.RespondingServices) {
					r.RespondingServices = append(r.RespondingServices, respondingServices)
				} else {
					r.RespondingServices[respondingServicesCount].AlertOnAdd = respondingServices.AlertOnAdd
					r.RespondingServices[respondingServicesCount].AllowedParams = respondingServices.AllowedParams
					r.RespondingServices[respondingServicesCount].AutoAddRespondingTeam = respondingServices.AutoAddRespondingTeam
					r.RespondingServices[respondingServicesCount].CreatedAt = respondingServices.CreatedAt
					r.RespondingServices[respondingServicesCount].Description = respondingServices.Description
					r.RespondingServices[respondingServicesCount].ID = respondingServices.ID
					r.RespondingServices[respondingServicesCount].Labels = respondingServices.Labels
					r.RespondingServices[respondingServicesCount].Name = respondingServices.Name
					r.RespondingServices[respondingServicesCount].ServiceTier = respondingServices.ServiceTier
					r.RespondingServices[respondingServicesCount].Slug = respondingServices.Slug
					r.RespondingServices[respondingServicesCount].UpdatedAt = respondingServices.UpdatedAt
				}
			}
		}
		if resp.Services != nil {
			r.Services = []tfTypes.ServiceLite{}
			if len(r.Services) > len(resp.Services) {
				r.Services = r.Services[:len(resp.Services)]
			}
			for servicesCount1, servicesItem1 := range resp.Services {
				var services1 tfTypes.ServiceLite
				services1.AlertOnAdd = types.BoolPointerValue(servicesItem1.AlertOnAdd)
				if servicesItem1.AllowedParams != nil {
					services1.AllowedParams = make([]types.String, 0, len(servicesItem1.AllowedParams))
					for _, v := range servicesItem1.AllowedParams {
						services1.AllowedParams = append(services1.AllowedParams, types.StringValue(v))
					}
				}
				services1.AutoAddRespondingTeam = types.BoolPointerValue(servicesItem1.AutoAddRespondingTeam)
				services1.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem1.CreatedAt))
				services1.Description = types.StringPointerValue(servicesItem1.Description)
				services1.ID = types.StringPointerValue(servicesItem1.ID)
				if servicesItem1.Labels == nil {
					services1.Labels = nil
				} else {
					services1.Labels = &tfTypes.ServiceLiteLabels{}
				}
				services1.Name = types.StringPointerValue(servicesItem1.Name)
				services1.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(servicesItem1.ServiceTier))
				services1.Slug = types.StringPointerValue(servicesItem1.Slug)
				services1.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem1.UpdatedAt))
				if servicesCount1+1 > len(r.Services) {
					r.Services = append(r.Services, services1)
				} else {
					r.Services[servicesCount1].AlertOnAdd = services1.AlertOnAdd
					r.Services[servicesCount1].AllowedParams = services1.AllowedParams
					r.Services[servicesCount1].AutoAddRespondingTeam = services1.AutoAddRespondingTeam
					r.Services[servicesCount1].CreatedAt = services1.CreatedAt
					r.Services[servicesCount1].Description = services1.Description
					r.Services[servicesCount1].ID = services1.ID
					r.Services[servicesCount1].Labels = services1.Labels
					r.Services[servicesCount1].Name = services1.Name
					r.Services[servicesCount1].ServiceTier = services1.ServiceTier
					r.Services[servicesCount1].Slug = services1.Slug
					r.Services[servicesCount1].UpdatedAt = services1.UpdatedAt
				}
			}
		}
		r.SignalsIcalURL = types.StringPointerValue(resp.SignalsIcalURL)
		if resp.SlackChannel == nil {
			r.SlackChannel = nil
		} else {
			r.SlackChannel = &tfTypes.NullableIntegrationsSlackSlackChannel{}
			r.SlackChannel.ID = types.StringPointerValue(resp.SlackChannel.ID)
			r.SlackChannel.Name = types.StringPointerValue(resp.SlackChannel.Name)
			r.SlackChannel.SlackChannelID = types.StringPointerValue(resp.SlackChannel.SlackChannelID)
		}
		r.Slug = types.StringPointerValue(resp.Slug)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *TeamDataSourceModel) ToOperationsGetTeamRequest(ctx context.Context) (*operations.GetTeamRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.ID.ValueString()

	lite := new(bool)
	if !r.Lite.IsUnknown() && !r.Lite.IsNull() {
		*lite = r.Lite.ValueBool()
	} else {
		lite = nil
	}
	out := operations.GetTeamRequest{
		TeamID: teamID,
		Lite:   lite,
	}

	return &out, diags
}
