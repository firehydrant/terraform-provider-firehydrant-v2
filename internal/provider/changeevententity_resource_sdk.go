// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *ChangeEventEntityResourceModel) ToSharedCreateChangeEvent(ctx context.Context) (*shared.CreateChangeEvent, diag.Diagnostics) {
	var diags diag.Diagnostics

	var attachmentsInput []shared.CreateChangeEventAttachmentsInput
	if r.AttachmentsInput != nil {
		attachmentsInput = make([]shared.CreateChangeEventAttachmentsInput, 0, len(r.AttachmentsInput))
		for _, attachmentsInputItem := range r.AttachmentsInput {
			var typeVar string
			typeVar = attachmentsInputItem.Type.ValueString()

			attachmentsInput = append(attachmentsInput, shared.CreateChangeEventAttachmentsInput{
				Type: typeVar,
			})
		}
	}
	var authorsInput []shared.AuthorsInput
	if r.AuthorsInput != nil {
		authorsInput = make([]shared.AuthorsInput, 0, len(r.AuthorsInput))
		for _, authorsInputItem := range r.AuthorsInput {
			var name string
			name = authorsInputItem.Name.ValueString()

			var source string
			source = authorsInputItem.Source.ValueString()

			var sourceID string
			sourceID = authorsInputItem.SourceID.ValueString()

			authorsInput = append(authorsInput, shared.AuthorsInput{
				Name:     name,
				Source:   source,
				SourceID: sourceID,
			})
		}
	}
	var changeIdentities []shared.ChangeIdentity
	if r.ChangeIdentities != nil {
		changeIdentities = make([]shared.ChangeIdentity, 0, len(r.ChangeIdentities))
		for _, changeIdentitiesItem := range r.ChangeIdentities {
			var type1 string
			type1 = changeIdentitiesItem.Type.ValueString()

			var value string
			value = changeIdentitiesItem.Value.ValueString()

			changeIdentities = append(changeIdentities, shared.ChangeIdentity{
				Type:  type1,
				Value: value,
			})
		}
	}
	var changes []string
	if r.Changes != nil {
		changes = make([]string, 0, len(r.Changes))
		for _, changesItem := range r.Changes {
			changes = append(changes, changesItem.ValueString())
		}
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	endsAt := new(time.Time)
	if !r.EndsAt.IsUnknown() && !r.EndsAt.IsNull() {
		*endsAt, _ = time.Parse(time.RFC3339Nano, r.EndsAt.ValueString())
	} else {
		endsAt = nil
	}
	var environmentsInput []string
	if r.EnvironmentsInput != nil {
		environmentsInput = make([]string, 0, len(r.EnvironmentsInput))
		for _, environmentsInputItem := range r.EnvironmentsInput {
			environmentsInput = append(environmentsInput, environmentsInputItem.ValueString())
		}
	}
	externalID := new(string)
	if !r.ExternalID.IsUnknown() && !r.ExternalID.IsNull() {
		*externalID = r.ExternalID.ValueString()
	} else {
		externalID = nil
	}
	labels := make(map[string]interface{})
	for labelsKey, labelsValue := range r.Labels {
		var labelsInst interface{}
		_ = json.Unmarshal([]byte(labelsValue.ValueString()), &labelsInst)
		labels[labelsKey] = labelsInst
	}
	var servicesInput []string
	if r.ServicesInput != nil {
		servicesInput = make([]string, 0, len(r.ServicesInput))
		for _, servicesInputItem := range r.ServicesInput {
			servicesInput = append(servicesInput, servicesInputItem.ValueString())
		}
	}
	startsAt := new(time.Time)
	if !r.StartsAt.IsUnknown() && !r.StartsAt.IsNull() {
		*startsAt, _ = time.Parse(time.RFC3339Nano, r.StartsAt.ValueString())
	} else {
		startsAt = nil
	}
	var summary string
	summary = r.Summary.ValueString()

	out := shared.CreateChangeEvent{
		AttachmentsInput:  attachmentsInput,
		AuthorsInput:      authorsInput,
		ChangeIdentities:  changeIdentities,
		Changes:           changes,
		Description:       description,
		EndsAt:            endsAt,
		EnvironmentsInput: environmentsInput,
		ExternalID:        externalID,
		Labels:            labels,
		ServicesInput:     servicesInput,
		StartsAt:          startsAt,
		Summary:           summary,
	}

	return &out, diags
}

func (r *ChangeEventEntityResourceModel) ToSharedUpdateChangeEvent(ctx context.Context) (*shared.UpdateChangeEvent, diag.Diagnostics) {
	var diags diag.Diagnostics

	var attachmentsInput []shared.UpdateChangeEventAttachmentsInput
	if r.AttachmentsInput != nil {
		attachmentsInput = make([]shared.UpdateChangeEventAttachmentsInput, 0, len(r.AttachmentsInput))
		for _, attachmentsInputItem := range r.AttachmentsInput {
			var typeVar string
			typeVar = attachmentsInputItem.Type.ValueString()

			attachmentsInput = append(attachmentsInput, shared.UpdateChangeEventAttachmentsInput{
				Type: typeVar,
			})
		}
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	endsAt := new(time.Time)
	if !r.EndsAt.IsUnknown() && !r.EndsAt.IsNull() {
		*endsAt, _ = time.Parse(time.RFC3339Nano, r.EndsAt.ValueString())
	} else {
		endsAt = nil
	}
	var environmentsInput []string
	if r.EnvironmentsInput != nil {
		environmentsInput = make([]string, 0, len(r.EnvironmentsInput))
		for _, environmentsInputItem := range r.EnvironmentsInput {
			environmentsInput = append(environmentsInput, environmentsInputItem.ValueString())
		}
	}
	labels := make(map[string]interface{})
	for labelsKey, labelsValue := range r.Labels {
		var labelsInst interface{}
		_ = json.Unmarshal([]byte(labelsValue.ValueString()), &labelsInst)
		labels[labelsKey] = labelsInst
	}
	var servicesInput []string
	if r.ServicesInput != nil {
		servicesInput = make([]string, 0, len(r.ServicesInput))
		for _, servicesInputItem := range r.ServicesInput {
			servicesInput = append(servicesInput, servicesInputItem.ValueString())
		}
	}
	startsAt := new(time.Time)
	if !r.StartsAt.IsUnknown() && !r.StartsAt.IsNull() {
		*startsAt, _ = time.Parse(time.RFC3339Nano, r.StartsAt.ValueString())
	} else {
		startsAt = nil
	}
	summary := new(string)
	if !r.Summary.IsUnknown() && !r.Summary.IsNull() {
		*summary = r.Summary.ValueString()
	} else {
		summary = nil
	}
	out := shared.UpdateChangeEvent{
		AttachmentsInput:  attachmentsInput,
		Description:       description,
		EndsAt:            endsAt,
		EnvironmentsInput: environmentsInput,
		Labels:            labels,
		ServicesInput:     servicesInput,
		StartsAt:          startsAt,
		Summary:           summary,
	}

	return &out, diags
}

func (r *ChangeEventEntityResourceModel) ToOperationsUpdateChangeEventRequest(ctx context.Context) (*operations.UpdateChangeEventRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var changeEventID string
	changeEventID = r.ID.ValueString()

	updateChangeEvent, updateChangeEventDiags := r.ToSharedUpdateChangeEvent(ctx)
	diags.Append(updateChangeEventDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateChangeEventRequest{
		ChangeEventID:     changeEventID,
		UpdateChangeEvent: *updateChangeEvent,
	}

	return &out, diags
}

func (r *ChangeEventEntityResourceModel) ToOperationsGetChangeEventRequest(ctx context.Context) (*operations.GetChangeEventRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var changeEventID string
	changeEventID = r.ID.ValueString()

	out := operations.GetChangeEventRequest{
		ChangeEventID: changeEventID,
	}

	return &out, diags
}

func (r *ChangeEventEntityResourceModel) RefreshFromSharedChangeEventEntity(ctx context.Context, resp *shared.ChangeEventEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Attachments != nil {
		}
		if resp.Authors != nil {
			r.Authors = []tfTypes.AuthorEntity{}
			if len(r.Authors) > len(resp.Authors) {
				r.Authors = r.Authors[:len(resp.Authors)]
			}
			for authorsCount, authorsItem := range resp.Authors {
				var authors tfTypes.AuthorEntity
				authors.Email = types.StringPointerValue(authorsItem.Email)
				authors.ID = types.StringPointerValue(authorsItem.ID)
				authors.Name = types.StringPointerValue(authorsItem.Name)
				authors.Source = types.StringPointerValue(authorsItem.Source)
				if authorsCount+1 > len(r.Authors) {
					r.Authors = append(r.Authors, authors)
				} else {
					r.Authors[authorsCount].Email = authors.Email
					r.Authors[authorsCount].ID = authors.ID
					r.Authors[authorsCount].Name = authors.Name
					r.Authors[authorsCount].Source = authors.Source
				}
			}
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.DurationIso8601 = types.StringPointerValue(resp.DurationIso8601)
		r.DurationMs = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.DurationMs))
		r.EndsAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.EndsAt))
		if resp.Environments != nil {
			r.Environments = []tfTypes.EnvironmentEntryEntity{}
			if len(r.Environments) > len(resp.Environments) {
				r.Environments = r.Environments[:len(resp.Environments)]
			}
			for environmentsCount, environmentsItem := range resp.Environments {
				var environments tfTypes.EnvironmentEntryEntity
				if environmentsItem.ActiveIncidents != nil {
					environments.ActiveIncidents = make([]types.String, 0, len(environmentsItem.ActiveIncidents))
					for _, v := range environmentsItem.ActiveIncidents {
						environments.ActiveIncidents = append(environments.ActiveIncidents, types.StringValue(v))
					}
				}
				environments.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(environmentsItem.CreatedAt))
				environments.Description = types.StringPointerValue(environmentsItem.Description)
				if environmentsItem.ExternalResources != nil {
					environments.ExternalResources = []tfTypes.ExternalResourceEntity{}
					for externalResourcesCount, externalResourcesItem := range environmentsItem.ExternalResources {
						var externalResources tfTypes.ExternalResourceEntity
						externalResources.ConnectionFullFaviconURL = types.StringPointerValue(externalResourcesItem.ConnectionFullFaviconURL)
						externalResources.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
						externalResources.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
						externalResources.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
						externalResources.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem.CreatedAt))
						externalResources.Name = types.StringPointerValue(externalResourcesItem.Name)
						externalResources.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
						externalResources.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
						externalResources.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(externalResourcesItem.UpdatedAt))
						if externalResourcesCount+1 > len(environments.ExternalResources) {
							environments.ExternalResources = append(environments.ExternalResources, externalResources)
						} else {
							environments.ExternalResources[externalResourcesCount].ConnectionFullFaviconURL = externalResources.ConnectionFullFaviconURL
							environments.ExternalResources[externalResourcesCount].ConnectionID = externalResources.ConnectionID
							environments.ExternalResources[externalResourcesCount].ConnectionName = externalResources.ConnectionName
							environments.ExternalResources[externalResourcesCount].ConnectionType = externalResources.ConnectionType
							environments.ExternalResources[externalResourcesCount].CreatedAt = externalResources.CreatedAt
							environments.ExternalResources[externalResourcesCount].Name = externalResources.Name
							environments.ExternalResources[externalResourcesCount].RemoteID = externalResources.RemoteID
							environments.ExternalResources[externalResourcesCount].RemoteURL = externalResources.RemoteURL
							environments.ExternalResources[externalResourcesCount].UpdatedAt = externalResources.UpdatedAt
						}
					}
				}
				environments.ID = types.StringPointerValue(environmentsItem.ID)
				environments.Name = types.StringPointerValue(environmentsItem.Name)
				environments.Slug = types.StringPointerValue(environmentsItem.Slug)
				environments.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(environmentsItem.UpdatedAt))
				if environmentsCount+1 > len(r.Environments) {
					r.Environments = append(r.Environments, environments)
				} else {
					r.Environments[environmentsCount].ActiveIncidents = environments.ActiveIncidents
					r.Environments[environmentsCount].CreatedAt = environments.CreatedAt
					r.Environments[environmentsCount].Description = environments.Description
					r.Environments[environmentsCount].ExternalResources = environments.ExternalResources
					r.Environments[environmentsCount].ID = environments.ID
					r.Environments[environmentsCount].Name = environments.Name
					r.Environments[environmentsCount].Slug = environments.Slug
					r.Environments[environmentsCount].UpdatedAt = environments.UpdatedAt
				}
			}
		}
		r.ExternalID = types.StringPointerValue(resp.ExternalID)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Identities != nil {
			r.Identities = []tfTypes.ChangeIdentityEntity{}
			if len(r.Identities) > len(resp.Identities) {
				r.Identities = r.Identities[:len(resp.Identities)]
			}
			for identitiesCount, identitiesItem := range resp.Identities {
				var identities tfTypes.ChangeIdentityEntity
				identities.ChangeID = types.StringPointerValue(identitiesItem.ChangeID)
				identities.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(identitiesItem.CreatedAt))
				identities.ID = types.StringPointerValue(identitiesItem.ID)
				identities.Type = types.StringPointerValue(identitiesItem.Type)
				identities.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(identitiesItem.UpdatedAt))
				identities.Value = types.StringPointerValue(identitiesItem.Value)
				if identitiesCount+1 > len(r.Identities) {
					r.Identities = append(r.Identities, identities)
				} else {
					r.Identities[identitiesCount].ChangeID = identities.ChangeID
					r.Identities[identitiesCount].CreatedAt = identities.CreatedAt
					r.Identities[identitiesCount].ID = identities.ID
					r.Identities[identitiesCount].Type = identities.Type
					r.Identities[identitiesCount].UpdatedAt = identities.UpdatedAt
					r.Identities[identitiesCount].Value = identities.Value
				}
			}
		}
		if resp.Labels != nil {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				result, _ := json.Marshal(value)
				r.Labels[key] = types.StringValue(string(result))
			}
		}
		if resp.RelatedChanges != nil {
			r.RelatedChanges = []tfTypes.ChangeEntity{}
			if len(r.RelatedChanges) > len(resp.RelatedChanges) {
				r.RelatedChanges = r.RelatedChanges[:len(resp.RelatedChanges)]
			}
			for relatedChangesCount, relatedChangesItem := range resp.RelatedChanges {
				var relatedChanges tfTypes.ChangeEntity
				relatedChanges.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(relatedChangesItem.CreatedAt))
				relatedChanges.Description = types.StringPointerValue(relatedChangesItem.Description)
				relatedChanges.ID = types.StringPointerValue(relatedChangesItem.ID)
				if relatedChangesItem.Labels != nil {
					relatedChanges.Labels = make(map[string]types.String, len(relatedChangesItem.Labels))
					for key1, value1 := range relatedChangesItem.Labels {
						result1, _ := json.Marshal(value1)
						relatedChanges.Labels[key1] = types.StringValue(string(result1))
					}
				}
				relatedChanges.Summary = types.StringPointerValue(relatedChangesItem.Summary)
				relatedChanges.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(relatedChangesItem.UpdatedAt))
				if relatedChangesCount+1 > len(r.RelatedChanges) {
					r.RelatedChanges = append(r.RelatedChanges, relatedChanges)
				} else {
					r.RelatedChanges[relatedChangesCount].CreatedAt = relatedChanges.CreatedAt
					r.RelatedChanges[relatedChangesCount].Description = relatedChanges.Description
					r.RelatedChanges[relatedChangesCount].ID = relatedChanges.ID
					r.RelatedChanges[relatedChangesCount].Labels = relatedChanges.Labels
					r.RelatedChanges[relatedChangesCount].Summary = relatedChanges.Summary
					r.RelatedChanges[relatedChangesCount].UpdatedAt = relatedChanges.UpdatedAt
				}
			}
		}
		if resp.Services != nil {
			r.Services = []tfTypes.ServiceEntityLite{}
			if len(r.Services) > len(resp.Services) {
				r.Services = r.Services[:len(resp.Services)]
			}
			for servicesCount, servicesItem := range resp.Services {
				var services tfTypes.ServiceEntityLite
				services.AlertOnAdd = types.BoolPointerValue(servicesItem.AlertOnAdd)
				if servicesItem.AllowedParams != nil {
					services.AllowedParams = make([]types.String, 0, len(servicesItem.AllowedParams))
					for _, v := range servicesItem.AllowedParams {
						services.AllowedParams = append(services.AllowedParams, types.StringValue(v))
					}
				}
				services.AutoAddRespondingTeam = types.BoolPointerValue(servicesItem.AutoAddRespondingTeam)
				services.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem.CreatedAt))
				services.Description = types.StringPointerValue(servicesItem.Description)
				services.ID = types.StringPointerValue(servicesItem.ID)
				if servicesItem.Labels == nil {
					services.Labels = nil
				} else {
					services.Labels = &tfTypes.ServiceEntityLiteLabels{}
				}
				services.Name = types.StringPointerValue(servicesItem.Name)
				services.ServiceTier = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(servicesItem.ServiceTier))
				services.Slug = types.StringPointerValue(servicesItem.Slug)
				services.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(servicesItem.UpdatedAt))
				if servicesCount+1 > len(r.Services) {
					r.Services = append(r.Services, services)
				} else {
					r.Services[servicesCount].AlertOnAdd = services.AlertOnAdd
					r.Services[servicesCount].AllowedParams = services.AllowedParams
					r.Services[servicesCount].AutoAddRespondingTeam = services.AutoAddRespondingTeam
					r.Services[servicesCount].CreatedAt = services.CreatedAt
					r.Services[servicesCount].Description = services.Description
					r.Services[servicesCount].ID = services.ID
					r.Services[servicesCount].Labels = services.Labels
					r.Services[servicesCount].Name = services.Name
					r.Services[servicesCount].ServiceTier = services.ServiceTier
					r.Services[servicesCount].Slug = services.Slug
					r.Services[servicesCount].UpdatedAt = services.UpdatedAt
				}
			}
		}
		r.StartsAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.StartsAt))
		r.Summary = types.StringPointerValue(resp.Summary)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}
