// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SignalsAPIOnCallScheduleResource{}
var _ resource.ResourceWithImportState = &SignalsAPIOnCallScheduleResource{}

func NewSignalsAPIOnCallScheduleResource() resource.Resource {
	return &SignalsAPIOnCallScheduleResource{}
}

// SignalsAPIOnCallScheduleResource defines the resource implementation.
type SignalsAPIOnCallScheduleResource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// SignalsAPIOnCallScheduleResourceModel describes the resource data model.
type SignalsAPIOnCallScheduleResourceModel struct {
	Color               types.String                                        `tfsdk:"color"`
	CreatedAt           types.String                                        `tfsdk:"created_at"`
	CreatedBy           *tfTypes.NullableAuthor                             `tfsdk:"created_by"`
	Description         types.String                                        `tfsdk:"description"`
	ID                  types.String                                        `tfsdk:"id"`
	MemberIds           []types.String                                      `tfsdk:"member_ids"`
	Members             []tfTypes.Succinct                                  `tfsdk:"members"`
	MembersInput        []tfTypes.CreateTeamOnCallScheduleMembersInput      `tfsdk:"members_input"`
	Name                types.String                                        `tfsdk:"name"`
	Restrictions        []tfTypes.SignalsAPIOnCallRestriction               `tfsdk:"restrictions"`
	RestrictionsInput   []tfTypes.CreateTeamOnCallScheduleRestrictionsInput `tfsdk:"restrictions_input"`
	RotationDescription types.String                                        `tfsdk:"rotation_description"`
	RotationName        types.String                                        `tfsdk:"rotation_name"`
	Rotations           []tfTypes.SignalsAPIOnCallRotation                  `tfsdk:"rotations"`
	Shifts              []tfTypes.SignalsAPIOnCallShift                     `tfsdk:"shifts"`
	SignalsIcalURL      types.String                                        `tfsdk:"signals_ical_url"`
	SlackUserGroupID    types.String                                        `tfsdk:"slack_user_group_id"`
	StartTime           types.String                                        `tfsdk:"start_time"`
	Strategy            *tfTypes.NullableSignalsAPIOnCallStrategy           `tfsdk:"strategy"`
	StrategyInput       *tfTypes.CreateTeamOnCallScheduleStrategyInput      `tfsdk:"strategy_input"`
	Team                *tfTypes.NullableSuccinct                           `tfsdk:"team"`
	TeamID              types.String                                        `tfsdk:"team_id"`
	TimeZone            types.String                                        `tfsdk:"time_zone"`
	UpdatedAt           types.String                                        `tfsdk:"updated_at"`
}

func (r *SignalsAPIOnCallScheduleResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_signals_api_on_call_schedule"
}

func (r *SignalsAPIOnCallScheduleResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SignalsAPIOnCallSchedule Resource",
		Attributes: map[string]schema.Attribute{
			"color": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A hex color code that will be used to represent the initial rotation in FireHydrant's UI.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"created_by": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"email": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"source": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A detailed description of the on-call schedule.`,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"member_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `This parameter is deprecated; use ` + "`" + `members` + "`" + ` instead.`,
			},
			"members": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"members_input": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"user_id": schema.StringAttribute{
							Optional: true,
							MarkdownDescription: `The ID of a user who should be added to the schedule's initial rotation. You can add a user to the` + "\n" +
								`schedule multiple times to construct more complex rotations, and you can specify a ` + "`" + `null` + "`" + ` user ID` + "\n" +
								`to create unassigned slots in the rotation.`,
						},
					},
				},
				Description: `An ordered list of objects that specify members of the initial rotation.`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `The on-call schedule's name.`,
			},
			"restrictions": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"end_day": schema.StringAttribute{
							Computed: true,
						},
						"end_time": schema.StringAttribute{
							Computed: true,
						},
						"start_day": schema.StringAttribute{
							Computed: true,
						},
						"start_time": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"restrictions_input": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"end_day": schema.StringAttribute{
							Required:    true,
							Description: `The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).`,
						},
						"end_time": schema.StringAttribute{
							Required:    true,
							Description: `An ISO8601 time string specifying when the restriction should end.`,
						},
						"start_day": schema.StringAttribute{
							Required:    true,
							Description: `The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).`,
						},
						"start_time": schema.StringAttribute{
							Required:    true,
							Description: `An ISO8601 time string specifying when the restriction should start.`,
						},
					},
				},
				Description: `A list of objects that restrict the initial rotation to specific on-call periods.`,
			},
			"rotation_description": schema.StringAttribute{
				Optional:    true,
				Description: `An optional description for the initial rotation. If not provided, the schedule's description will be used.`,
			},
			"rotation_name": schema.StringAttribute{
				Optional:    true,
				Description: `An optional name for the initial rotation. If not provided, the schedule's name will be used.`,
			},
			"rotations": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"color": schema.StringAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"created_by": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"email": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"source": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"members": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"restrictions": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"end_day": schema.StringAttribute{
										Computed: true,
									},
									"end_time": schema.StringAttribute{
										Computed: true,
									},
									"start_day": schema.StringAttribute{
										Computed: true,
									},
									"start_time": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"shifts": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"color": schema.StringAttribute{
										Computed: true,
									},
									"coverage_request": schema.StringAttribute{
										Computed: true,
									},
									"end_time": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"on_call_rotation": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"on_call_schedule": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"start_time": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"team": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"time_zone": schema.StringAttribute{
										Computed: true,
									},
									"user": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
							},
						},
						"slack_user_group_id": schema.StringAttribute{
							Computed: true,
						},
						"strategy": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"handoff_day": schema.StringAttribute{
									Computed: true,
								},
								"handoff_time": schema.StringAttribute{
									Computed: true,
								},
								"shift_duration": schema.StringAttribute{
									Computed: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"team": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"time_zone": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
					},
				},
			},
			"shifts": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"color": schema.StringAttribute{
							Computed: true,
						},
						"coverage_request": schema.StringAttribute{
							Computed: true,
						},
						"end_time": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"on_call_rotation": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"on_call_schedule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"start_time": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"team": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"time_zone": schema.StringAttribute{
							Computed: true,
						},
						"user": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
			"signals_ical_url": schema.StringAttribute{
				Computed: true,
			},
			"slack_user_group_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The ID of a Slack user group to sync the initial rotation's on-call members to.`,
			},
			"start_time": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom". Requires replacement if changed.`,
			},
			"strategy": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"handoff_day": schema.StringAttribute{
						Computed: true,
					},
					"handoff_time": schema.StringAttribute{
						Computed: true,
					},
					"shift_duration": schema.StringAttribute{
						Computed: true,
					},
					"type": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"strategy_input": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"handoff_day": schema.StringAttribute{
						Optional:    true,
						Description: `The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".`,
					},
					"handoff_time": schema.StringAttribute{
						Optional:    true,
						Description: `An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".`,
					},
					"shift_duration": schema.StringAttribute{
						Optional:    true,
						Description: `An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".`,
					},
					"type": schema.StringAttribute{
						Required:    true,
						Description: `The type of strategy. Must be one of "daily", "weekly", or "custom".`,
					},
				},
				Description: `An object that specifies how the initial rotation's on-call shifts should be generated. This value must be provided if ` + "`" + `rotations` + "`" + ` is not.`,
			},
			"team": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"team_id": schema.StringAttribute{
				Required: true,
			},
			"time_zone": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The time zone in which the on-call schedule's rotation will operate. This value must be a valid IANA time zone name and must be provided if ` + "`" + `rotations` + "`" + ` is not.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
		},
	}
}

func (r *SignalsAPIOnCallScheduleResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SignalsAPIOnCallScheduleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SignalsAPIOnCallScheduleResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateTeamOnCallScheduleRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Signals.CreateTeamOnCallSchedule(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SignalsAPIOnCallSchedule != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSignalsAPIOnCallSchedule(ctx, res.SignalsAPIOnCallSchedule)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetTeamOnCallScheduleRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Signals.GetTeamOnCallSchedule(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.SignalsAPIOnCallSchedule != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSignalsAPIOnCallSchedule(ctx, res1.SignalsAPIOnCallSchedule)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SignalsAPIOnCallScheduleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SignalsAPIOnCallScheduleResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetTeamOnCallScheduleRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Signals.GetTeamOnCallSchedule(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SignalsAPIOnCallSchedule != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSignalsAPIOnCallSchedule(ctx, res.SignalsAPIOnCallSchedule)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SignalsAPIOnCallScheduleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SignalsAPIOnCallScheduleResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateTeamOnCallScheduleRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Signals.UpdateTeamOnCallSchedule(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SignalsAPIOnCallSchedule != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSignalsAPIOnCallSchedule(ctx, res.SignalsAPIOnCallSchedule)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetTeamOnCallScheduleRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Signals.GetTeamOnCallSchedule(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.SignalsAPIOnCallSchedule != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSignalsAPIOnCallSchedule(ctx, res1.SignalsAPIOnCallSchedule)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SignalsAPIOnCallScheduleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SignalsAPIOnCallScheduleResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *SignalsAPIOnCallScheduleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		ID     string `json:"id"`
		TeamID string `json:"team_id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"id": "", "team_id": ""}': `+err.Error())
		return
	}

	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)
	if len(data.TeamID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field team_id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("team_id"), data.TeamID)...)
}
