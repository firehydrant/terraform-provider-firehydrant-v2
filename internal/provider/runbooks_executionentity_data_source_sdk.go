// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *RunbooksExecutionEntityDataSourceModel) ToOperationsGetRunbookExecutionRequest(ctx context.Context) (*operations.GetRunbookExecutionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var executionID string
	executionID = r.ID.ValueString()

	out := operations.GetRunbookExecutionRequest{
		ExecutionID: executionID,
	}

	return &out, diags
}

func (r *RunbooksExecutionEntityDataSourceModel) RefreshFromSharedRunbooksExecutionEntity(ctx context.Context, resp *shared.RunbooksExecutionEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.CreatedBy = types.StringPointerValue(resp.CreatedBy)
		if resp.ExecutedFor == nil {
			r.ExecutedFor = nil
		} else {
			r.ExecutedFor = &tfTypes.NullableRunbooksExecutionEntityExecutedForEntity{}
			r.ExecutedFor.ID = types.StringPointerValue(resp.ExecutedFor.ID)
			r.ExecutedFor.Name = types.StringPointerValue(resp.ExecutedFor.Name)
			r.ExecutedFor.Type = types.StringPointerValue(resp.ExecutedFor.Type)
		}
		r.HasBeenRerun = types.BoolPointerValue(resp.HasBeenRerun)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Runbook == nil {
			r.Runbook = nil
		} else {
			r.Runbook = &tfTypes.NullableSlimRunbookEntity{}
			if resp.Runbook.AttachmentRule == nil {
				r.Runbook.AttachmentRule = nil
			} else {
				r.Runbook.AttachmentRule = &tfTypes.NullableRulesRuleEntity{}
				if resp.Runbook.AttachmentRule.Logic != nil {
					r.Runbook.AttachmentRule.Logic = make(map[string]types.String, len(resp.Runbook.AttachmentRule.Logic))
					for key, value := range resp.Runbook.AttachmentRule.Logic {
						result, _ := json.Marshal(value)
						r.Runbook.AttachmentRule.Logic[key] = types.StringValue(string(result))
					}
				}
				if resp.Runbook.AttachmentRule.UserData == nil {
					r.Runbook.AttachmentRule.UserData = nil
				} else {
					r.Runbook.AttachmentRule.UserData = &tfTypes.NullableFHTypesGenericEntity{}
					r.Runbook.AttachmentRule.UserData.Label = types.StringPointerValue(resp.Runbook.AttachmentRule.UserData.Label)
					r.Runbook.AttachmentRule.UserData.Type = types.StringPointerValue(resp.Runbook.AttachmentRule.UserData.Type)
					r.Runbook.AttachmentRule.UserData.Value = types.StringPointerValue(resp.Runbook.AttachmentRule.UserData.Value)
				}
			}
			if resp.Runbook.Categories != nil {
				r.Runbook.Categories = make([]types.String, 0, len(resp.Runbook.Categories))
				for _, v := range resp.Runbook.Categories {
					r.Runbook.Categories = append(r.Runbook.Categories, types.StringValue(v))
				}
			}
			r.Runbook.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Runbook.CreatedAt))
			r.Runbook.Description = types.StringPointerValue(resp.Runbook.Description)
			r.Runbook.ID = types.StringPointerValue(resp.Runbook.ID)
			r.Runbook.Name = types.StringPointerValue(resp.Runbook.Name)
			if resp.Runbook.Owner == nil {
				r.Runbook.Owner = nil
			} else {
				r.Runbook.Owner = &tfTypes.NullableTeamEntityLite{}
				r.Runbook.Owner.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Runbook.Owner.CreatedAt))
				if resp.Runbook.Owner.CreatedBy == nil {
					r.Runbook.Owner.CreatedBy = nil
				} else {
					r.Runbook.Owner.CreatedBy = &tfTypes.NullableAuthorEntity{}
					r.Runbook.Owner.CreatedBy.Email = types.StringPointerValue(resp.Runbook.Owner.CreatedBy.Email)
					r.Runbook.Owner.CreatedBy.ID = types.StringPointerValue(resp.Runbook.Owner.CreatedBy.ID)
					r.Runbook.Owner.CreatedBy.Name = types.StringPointerValue(resp.Runbook.Owner.CreatedBy.Name)
					r.Runbook.Owner.CreatedBy.Source = types.StringPointerValue(resp.Runbook.Owner.CreatedBy.Source)
				}
				r.Runbook.Owner.Description = types.StringPointerValue(resp.Runbook.Owner.Description)
				r.Runbook.Owner.ID = types.StringPointerValue(resp.Runbook.Owner.ID)
				r.Runbook.Owner.InSupportHours = types.BoolPointerValue(resp.Runbook.Owner.InSupportHours)
				r.Runbook.Owner.Name = types.StringPointerValue(resp.Runbook.Owner.Name)
				r.Runbook.Owner.SignalsIcalURL = types.StringPointerValue(resp.Runbook.Owner.SignalsIcalURL)
				r.Runbook.Owner.Slug = types.StringPointerValue(resp.Runbook.Owner.Slug)
				r.Runbook.Owner.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Runbook.Owner.UpdatedAt))
			}
			r.Runbook.Summary = types.StringPointerValue(resp.Runbook.Summary)
			r.Runbook.Type = types.StringPointerValue(resp.Runbook.Type)
			r.Runbook.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Runbook.UpdatedAt))
		}
		r.Status = types.StringPointerValue(resp.Status)
		r.StatusReason = types.StringPointerValue(resp.StatusReason)
		r.StatusReasonMessage = types.StringPointerValue(resp.StatusReasonMessage)
		if resp.Steps == nil {
			r.Steps = nil
		} else {
			r.Steps = &tfTypes.NullableRunbooksExecutionStepEntity{}
			r.Steps.ActionSlug = types.StringPointerValue(resp.Steps.ActionSlug)
			r.Steps.ActionType = types.StringPointerValue(resp.Steps.ActionType)
			r.Steps.Automatic = types.BoolPointerValue(resp.Steps.Automatic)
			if resp.Steps.ConferenceBridge == nil {
				r.Steps.ConferenceBridge = nil
			} else {
				r.Steps.ConferenceBridge = &tfTypes.NullableIncidentsConferenceBridgeEntity{}
				if resp.Steps.ConferenceBridge.Attachments != nil {
				}
				r.Steps.ConferenceBridge.HasTranslatedTranscripts = types.BoolPointerValue(resp.Steps.ConferenceBridge.HasTranslatedTranscripts)
				r.Steps.ConferenceBridge.ID = types.StringPointerValue(resp.Steps.ConferenceBridge.ID)
				if resp.Steps.ConferenceBridge.LanguageCodes != nil {
					r.Steps.ConferenceBridge.LanguageCodes = make([]types.String, 0, len(resp.Steps.ConferenceBridge.LanguageCodes))
					for _, v := range resp.Steps.ConferenceBridge.LanguageCodes {
						r.Steps.ConferenceBridge.LanguageCodes = append(r.Steps.ConferenceBridge.LanguageCodes, types.StringValue(v))
					}
				}
				r.Steps.ConferenceBridge.TranscriptionStatus = types.StringPointerValue(resp.Steps.ConferenceBridge.TranscriptionStatus)
				r.Steps.ConferenceBridge.TranscriptionSubCode = types.StringPointerValue(resp.Steps.ConferenceBridge.TranscriptionSubCode)
			}
			if resp.Steps.Config == nil {
				r.Steps.Config = nil
			} else {
				r.Steps.Config = &tfTypes.NullableRunbooksExecutionStepEntityConfig{}
			}
			r.Steps.Executable = types.BoolPointerValue(resp.Steps.Executable)
			if resp.Steps.Execution == nil {
				r.Steps.Execution = nil
			} else {
				r.Steps.Execution = &tfTypes.NullableRunbooksExecutionStepExecutionEntity{}
				if resp.Steps.Execution.Data == nil {
					r.Steps.Execution.Data = nil
				} else {
					r.Steps.Execution.Data = &tfTypes.NullableRunbooksExecutionStepExecutionEntityData{}
				}
				r.Steps.Execution.Error = types.StringPointerValue(resp.Steps.Execution.Error)
				r.Steps.Execution.PerformedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Steps.Execution.PerformedAt))
				if resp.Steps.Execution.PerformedBy == nil {
					r.Steps.Execution.PerformedBy = nil
				} else {
					r.Steps.Execution.PerformedBy = &tfTypes.NullableActorEntity{}
					r.Steps.Execution.PerformedBy.Email = types.StringPointerValue(resp.Steps.Execution.PerformedBy.Email)
					r.Steps.Execution.PerformedBy.ID = types.StringPointerValue(resp.Steps.Execution.PerformedBy.ID)
					r.Steps.Execution.PerformedBy.Name = types.StringPointerValue(resp.Steps.Execution.PerformedBy.Name)
					r.Steps.Execution.PerformedBy.Type = types.StringPointerValue(resp.Steps.Execution.PerformedBy.Type)
				}
				r.Steps.Execution.ScheduledFor = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Steps.Execution.ScheduledFor))
				r.Steps.Execution.State = types.StringPointerValue(resp.Steps.Execution.State)
				if resp.Steps.Execution.WebhookDelivery == nil {
					r.Steps.Execution.WebhookDelivery = nil
				} else {
					r.Steps.Execution.WebhookDelivery = &tfTypes.NullableRunbooksWebhookDeliveryEntity{}
					r.Steps.Execution.WebhookDelivery.Headers = types.StringPointerValue(resp.Steps.Execution.WebhookDelivery.Headers)
					r.Steps.Execution.WebhookDelivery.StatusCode = types.StringPointerValue(resp.Steps.Execution.WebhookDelivery.StatusCode)
				}
			}
			r.Steps.HasBeenRerun = types.BoolPointerValue(resp.Steps.HasBeenRerun)
			r.Steps.HasBeenRetried = types.BoolPointerValue(resp.Steps.HasBeenRetried)
			r.Steps.ID = types.StringPointerValue(resp.Steps.ID)
			r.Steps.IntegrationName = types.StringPointerValue(resp.Steps.IntegrationName)
			r.Steps.IntegrationSlug = types.StringPointerValue(resp.Steps.IntegrationSlug)
			r.Steps.Name = types.StringPointerValue(resp.Steps.Name)
			r.Steps.Repeatable = types.BoolPointerValue(resp.Steps.Repeatable)
			r.Steps.Repeats = types.BoolPointerValue(resp.Steps.Repeats)
			r.Steps.RepeatsAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Steps.RepeatsAt))
			r.Steps.RepeatsDuration = types.StringPointerValue(resp.Steps.RepeatsDuration)
			if resp.Steps.Rule == nil {
				r.Steps.Rule = nil
			} else {
				r.Steps.Rule = &tfTypes.NullableRulesRuleEntity{}
				if resp.Steps.Rule.Logic != nil {
					r.Steps.Rule.Logic = make(map[string]types.String, len(resp.Steps.Rule.Logic))
					for key1, value1 := range resp.Steps.Rule.Logic {
						result1, _ := json.Marshal(value1)
						r.Steps.Rule.Logic[key1] = types.StringValue(string(result1))
					}
				}
				if resp.Steps.Rule.UserData == nil {
					r.Steps.Rule.UserData = nil
				} else {
					r.Steps.Rule.UserData = &tfTypes.NullableFHTypesGenericEntity{}
					r.Steps.Rule.UserData.Label = types.StringPointerValue(resp.Steps.Rule.UserData.Label)
					r.Steps.Rule.UserData.Type = types.StringPointerValue(resp.Steps.Rule.UserData.Type)
					r.Steps.Rule.UserData.Value = types.StringPointerValue(resp.Steps.Rule.UserData.Value)
				}
			}
			if resp.Steps.StepElements != nil {
			}
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}
