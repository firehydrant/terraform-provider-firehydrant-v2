// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &PostMortemsPostMortemReportEntityDataSource{}
var _ datasource.DataSourceWithConfigure = &PostMortemsPostMortemReportEntityDataSource{}

func NewPostMortemsPostMortemReportEntityDataSource() datasource.DataSource {
	return &PostMortemsPostMortemReportEntityDataSource{}
}

// PostMortemsPostMortemReportEntityDataSource is the data source implementation.
type PostMortemsPostMortemReportEntityDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// PostMortemsPostMortemReportEntityDataSourceModel describes the data model.
type PostMortemsPostMortemReportEntityDataSourceModel struct {
	AdditionalDetails []types.String                             `tfsdk:"additional_details"`
	CalendarEvents    *tfTypes.NullableCalendarsEventEntity      `tfsdk:"calendar_events"`
	CreatedAt         types.String                               `tfsdk:"created_at"`
	ID                types.String                               `tfsdk:"id"`
	Incident          *tfTypes.NullableIncidentEntity            `tfsdk:"incident"`
	IncidentID        types.String                               `tfsdk:"incident_id"`
	Name              types.String                               `tfsdk:"name"`
	Questions         *tfTypes.NullablePostMortemsQuestionEntity `tfsdk:"questions"`
	RetrospectiveID   types.String                               `tfsdk:"retrospective_id"`
	RetrospectiveNote types.String                               `tfsdk:"retrospective_note"`
	RetrospectiveShim types.Bool                                 `tfsdk:"retrospective_shim"`
	Summary           types.String                               `tfsdk:"summary"`
	TagList           []types.String                             `tfsdk:"tag_list"`
	UpdatedAt         types.String                               `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *PostMortemsPostMortemReportEntityDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_post_mortems_post_mortem_report_entity"
}

// Schema defines the schema for the data source.
func (r *PostMortemsPostMortemReportEntityDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PostMortemsPostMortemReportEntity DataSource",

		Attributes: map[string]schema.Attribute{
			"additional_details": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"calendar_events": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Computed: true,
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"ends_at": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"provider_icon_url": schema.StringAttribute{
						Computed: true,
					},
					"provider_url": schema.StringAttribute{
						Computed: true,
					},
					"starts_at": schema.StringAttribute{
						Computed: true,
					},
					"summary": schema.StringAttribute{
						Computed: true,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"incident": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active": schema.BoolAttribute{
						Computed: true,
					},
					"ai_incident_summary": schema.StringAttribute{
						Computed: true,
					},
					"channel_id": schema.StringAttribute{
						Computed: true,
					},
					"channel_name": schema.StringAttribute{
						Computed: true,
					},
					"channel_reference": schema.StringAttribute{
						Computed: true,
					},
					"channel_status": schema.StringAttribute{
						Computed:    true,
						Description: `inoperative: 0, operational: 1, archived: 2`,
					},
					"conference_bridges": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"attachments": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{},
									},
									Description: `A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity`,
								},
								"has_translated_transcripts": schema.BoolAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"language_codes": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `A list of language codes that have translated transcripts for this conference bridge`,
								},
								"transcription_status": schema.StringAttribute{
									Computed: true,
								},
								"transcription_sub_code": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"context_object": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"context_description": schema.StringAttribute{
								Computed: true,
							},
							"context_tag": schema.StringAttribute{
								Computed: true,
							},
							"object_id": schema.StringAttribute{
								Computed: true,
							},
							"object_type": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"conversations": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"channel": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"comments_url": schema.StringAttribute{
									Computed: true,
								},
								"field": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"resource_class": schema.StringAttribute{
									Computed: true,
								},
								"resource_id": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"created_at": schema.StringAttribute{
						Computed:    true,
						Description: `The time the incident was opened`,
					},
					"created_by": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"source": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"current_milestone": schema.StringAttribute{
						Computed:    true,
						Description: `The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.`,
					},
					"custom_fields": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"description": schema.StringAttribute{
									Computed: true,
								},
								"display_name": schema.StringAttribute{
									Computed: true,
								},
								"field_id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"value": schema.StringAttribute{
									Computed: true,
								},
								"value_array": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"value_string": schema.StringAttribute{
									Computed: true,
								},
								"value_type": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"customer_impact_summary": schema.StringAttribute{
						Computed: true,
					},
					"customers_impacted": schema.Int32Attribute{
						Computed: true,
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"discarded_at": schema.StringAttribute{
						Computed:    true,
						Description: `The time the incident was archived`,
					},
					"environments": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"field_requirements": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"field_id": schema.StringAttribute{
									Computed:    true,
									Description: `A unique identifier for the field.`,
								},
								"required_at_milestone_id": schema.StringAttribute{
									Computed:    true,
									Description: `The milestone at which this field is required. If null, this field is always required.`,
								},
							},
						},
					},
					"functionalities": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `UUID of the Incident`,
					},
					"impacts": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"condition": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"position": schema.Int32Attribute{
											Computed:    true,
											Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
										},
									},
									Description: `SeverityMatrix_ConditionEntity model`,
								},
								"conversations": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"channel": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"name": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"comments_url": schema.StringAttribute{
												Computed: true,
											},
											"field": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"resource_class": schema.StringAttribute{
												Computed: true,
											},
											"resource_id": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"impact": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"type": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"incident_channels": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"icon_url": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"source": schema.StringAttribute{
									Computed: true,
								},
								"source_id": schema.StringAttribute{
									Computed: true,
								},
								"source_name": schema.StringAttribute{
									Computed: true,
								},
								"status": schema.StringAttribute{
									Computed: true,
								},
								"url": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"incident_tickets": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"assignees": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"email": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"source": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
								"attachments": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{},
									},
									Description: `A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity`,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"created_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"due_at": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"incident_current_milestone": schema.StringAttribute{
									Computed:    true,
									Description: `Milestone of incident that this ticket is related to`,
								},
								"incident_id": schema.StringAttribute{
									Computed:    true,
									Description: `ID of incident that this ticket is related to`,
								},
								"incident_name": schema.StringAttribute{
									Computed:    true,
									Description: `Name of incident that this ticket is related to`,
								},
								"link": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"deletable": schema.BoolAttribute{
											Computed:    true,
											Description: `Link can be deleted`,
										},
										"display_text": schema.StringAttribute{
											Computed: true,
										},
										"editable": schema.BoolAttribute{
											Computed:    true,
											Description: `Link can be edited`,
										},
										"href_url": schema.StringAttribute{
											Computed: true,
										},
										"icon_url": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
									},
									Description: `Attachments_LinkEntity model`,
								},
								"priority": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"position": schema.Int32Attribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
										},
									},
									Description: `Ticketing_PriorityEntity model`,
								},
								"state": schema.StringAttribute{
									Computed: true,
								},
								"summary": schema.StringAttribute{
									Computed: true,
								},
								"sync_error_message": schema.StringAttribute{
									Computed:    true,
									Description: `Error message from syncing this ticket to integrations`,
								},
								"tag_list": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"task_id": schema.StringAttribute{
									Computed:    true,
									Description: `ID of task that this ticket is related to`,
								},
								"type": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"incident_type": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"incident_url": schema.StringAttribute{
						Computed: true,
					},
					"labels": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `A key/value of labels`,
					},
					"last_note": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"body": schema.StringAttribute{
								Computed: true,
							},
							"conversations": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"channel": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"name": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"comments_url": schema.StringAttribute{
											Computed: true,
										},
										"field": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"resource_class": schema.StringAttribute{
											Computed: true,
										},
										"resource_id": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"created_at": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"status_pages": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"display_name": schema.StringAttribute{
											Computed: true,
										},
										"external_id": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"integration": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"created_at": schema.StringAttribute{
													Computed: true,
												},
												"display_name": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"integration_name": schema.StringAttribute{
													Computed: true,
												},
												"integration_slug": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"url": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
						Description: `Event_NoteEntity model`,
					},
					"last_update": schema.StringAttribute{
						Computed: true,
					},
					"lifecycle_measurements": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"calculated_at": schema.StringAttribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"ends_at_milestone": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"starts_at_milestone": schema.StringAttribute{
									Computed: true,
								},
								"value": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"lifecycle_phases": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"description": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"milestones": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
											},
											"duration": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"occurred_at": schema.StringAttribute{
												Computed: true,
											},
											"position": schema.Int32Attribute{
												Computed: true,
											},
											"slug": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
											},
											"updated_by": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"source": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
									},
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"position": schema.Int32Attribute{
									Computed: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"milestones": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"duration": schema.StringAttribute{
									Computed:    true,
									Description: `How long the incident spent in this milestones, in ISO 8601 Duration Format. This will be null if the milestone is the incident's current milestone.`,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"occurred_at": schema.StringAttribute{
									Computed: true,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `The milestone's type. This will be one of the currently configured milestones for the given incident.`,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `DEPRECATED: Please use lifecycle phases instead`,
					},
					"monetary_impact": schema.Int32Attribute{
						Computed: true,
					},
					"monetary_impact_cents": schema.Int32Attribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `Name of the incident`,
					},
					"number": schema.Int32Attribute{
						Computed:    true,
						Description: `Incident number`,
					},
					"organization": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"organization_id": schema.StringAttribute{
						Computed: true,
					},
					"priority": schema.StringAttribute{
						Computed: true,
					},
					"private_id": schema.StringAttribute{
						Computed: true,
					},
					"private_status_page_url": schema.StringAttribute{
						Computed: true,
					},
					"report_id": schema.StringAttribute{
						Computed: true,
					},
					"retro_exports": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{},
						},
						Description: `A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity`,
					},
					"role_assignments": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"incident_role": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"discarded_at": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"summary": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
										},
									},
									Description: `IncidentRoleEntity model`,
								},
								"status": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
								"user": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
										},
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"signals_enabled_notification_types": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
										"signals_notification_policy_compliance": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"is_compliant": schema.BoolAttribute{
														Computed: true,
													},
													"notification_policy_item_id": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
										"slack_linked": schema.BoolAttribute{
											Computed: true,
										},
										"slack_user_id": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
										},
									},
									Description: `UserEntity model`,
								},
							},
						},
					},
					"services": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"severity": schema.StringAttribute{
						Computed: true,
					},
					"severity_color": schema.StringAttribute{
						Computed: true,
					},
					"severity_condition": schema.StringAttribute{
						Computed: true,
					},
					"severity_condition_object": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"position": schema.Int32Attribute{
								Computed:    true,
								Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
							},
						},
						Description: `SeverityMatrix_ConditionEntity model`,
					},
					"severity_impact": schema.StringAttribute{
						Computed: true,
					},
					"severity_impact_object": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"affects_id": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"position": schema.Int32Attribute{
								Computed: true,
							},
							"type": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `SeverityMatrix_ImpactEntity model`,
					},
					"started_at": schema.StringAttribute{
						Computed:    true,
						Description: `The time the incident started`,
					},
					"status_pages": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"display_name": schema.StringAttribute{
									Computed: true,
								},
								"external_id": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"integration": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
										},
										"display_name": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"integration_name": schema.StringAttribute{
											Computed: true,
										},
										"integration_slug": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"url": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"summary": schema.StringAttribute{
						Computed: true,
					},
					"tag_list": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"team_assignments": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"status": schema.StringAttribute{
									Computed: true,
								},
								"team": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
										},
										"created_by": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"in_support_hours": schema.BoolAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"signals_ical_url": schema.StringAttribute{
											Computed: true,
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"ticket": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"assignees": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"attachments": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{},
								},
								Description: `A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity`,
							},
							"created_at": schema.StringAttribute{
								Computed: true,
							},
							"created_by": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"email": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"source": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"description": schema.StringAttribute{
								Computed: true,
							},
							"due_at": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"incident_current_milestone": schema.StringAttribute{
								Computed:    true,
								Description: `Milestone of incident that this ticket is related to`,
							},
							"incident_id": schema.StringAttribute{
								Computed:    true,
								Description: `ID of incident that this ticket is related to`,
							},
							"incident_name": schema.StringAttribute{
								Computed:    true,
								Description: `Name of incident that this ticket is related to`,
							},
							"link": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"deletable": schema.BoolAttribute{
										Computed:    true,
										Description: `Link can be deleted`,
									},
									"display_text": schema.StringAttribute{
										Computed: true,
									},
									"editable": schema.BoolAttribute{
										Computed:    true,
										Description: `Link can be edited`,
									},
									"href_url": schema.StringAttribute{
										Computed: true,
									},
									"icon_url": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
								},
								Description: `Attachments_LinkEntity model`,
							},
							"priority": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"created_at": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"position": schema.Int32Attribute{
										Computed: true,
									},
									"updated_at": schema.StringAttribute{
										Computed: true,
									},
								},
								Description: `Ticketing_PriorityEntity model`,
							},
							"state": schema.StringAttribute{
								Computed: true,
							},
							"summary": schema.StringAttribute{
								Computed: true,
							},
							"sync_error_message": schema.StringAttribute{
								Computed:    true,
								Description: `Error message from syncing this ticket to integrations`,
							},
							"tag_list": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"task_id": schema.StringAttribute{
								Computed:    true,
								Description: `ID of task that this ticket is related to`,
							},
							"type": schema.StringAttribute{
								Computed: true,
							},
							"updated_at": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `Ticketing_TicketEntity model`,
					},
				},
				Description: `IncidentEntity model`,
			},
			"incident_id": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"questions": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"available_options": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"body": schema.StringAttribute{
						Computed: true,
					},
					"conversations": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"channel": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"comments_url": schema.StringAttribute{
									Computed: true,
								},
								"field": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"resource_class": schema.StringAttribute{
									Computed: true,
								},
								"resource_id": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"is_required": schema.BoolAttribute{
						Computed: true,
					},
					"kind": schema.StringAttribute{
						Computed: true,
					},
					"question_type_id": schema.StringAttribute{
						Computed: true,
					},
					"title": schema.StringAttribute{
						Computed: true,
					},
					"tooltip": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"retrospective_id": schema.StringAttribute{
				Computed: true,
			},
			"retrospective_note": schema.StringAttribute{
				Computed: true,
			},
			"retrospective_shim": schema.BoolAttribute{
				Computed: true,
			},
			"summary": schema.StringAttribute{
				Computed: true,
			},
			"tag_list": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *PostMortemsPostMortemReportEntityDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PostMortemsPostMortemReportEntityDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *PostMortemsPostMortemReportEntityDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetPostMortemReportRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Retrospectives.GetPostMortemReport(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PostMortemsPostMortemReportEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPostMortemsPostMortemReportEntity(ctx, res.PostMortemsPostMortemReportEntity)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
