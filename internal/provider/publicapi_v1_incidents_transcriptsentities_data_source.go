// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &PublicAPIV1IncidentsTranscriptsEntitiesDataSource{}
var _ datasource.DataSourceWithConfigure = &PublicAPIV1IncidentsTranscriptsEntitiesDataSource{}

func NewPublicAPIV1IncidentsTranscriptsEntitiesDataSource() datasource.DataSource {
	return &PublicAPIV1IncidentsTranscriptsEntitiesDataSource{}
}

// PublicAPIV1IncidentsTranscriptsEntitiesDataSource is the data source implementation.
type PublicAPIV1IncidentsTranscriptsEntitiesDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// PublicAPIV1IncidentsTranscriptsEntitiesDataSourceModel describes the data model.
type PublicAPIV1IncidentsTranscriptsEntitiesDataSourceModel struct {
	After      types.String `queryParam:"style=form,explode=true,name=after" tfsdk:"after"`
	Before     types.String `queryParam:"style=form,explode=true,name=before" tfsdk:"before"`
	CreatedAt  types.String `tfsdk:"created_at"`
	Email      types.String `tfsdk:"email"`
	ID         types.String `tfsdk:"id"`
	IncidentID types.String `tfsdk:"incident_id"`
	Name       types.String `tfsdk:"name"`
	Sort       types.String `queryParam:"style=form,explode=true,name=sort" tfsdk:"sort"`
	Source     types.String `tfsdk:"source"`
	Speaker    types.String `tfsdk:"speaker"`
	Start      types.Int32  `tfsdk:"start"`
	Until      types.Int32  `tfsdk:"until"`
	UpdatedAt  types.String `tfsdk:"updated_at"`
	Words      types.String `tfsdk:"words"`
}

// Metadata returns the data source type name.
func (r *PublicAPIV1IncidentsTranscriptsEntitiesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_public_api_v1_incidents_transcripts_entities"
}

// Schema defines the schema for the data source.
func (r *PublicAPIV1IncidentsTranscriptsEntitiesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PublicAPIV1IncidentsTranscriptsEntities DataSource",

		Attributes: map[string]schema.Attribute{
			"after": schema.StringAttribute{
				Optional:    true,
				Description: `The ID of the transcript entry to start after.`,
			},
			"before": schema.StringAttribute{
				Optional:    true,
				Description: `The ID of the transcript entry to start before.`,
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `The time the transcript entry was created`,
			},
			"email": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"incident_id": schema.StringAttribute{
				Required: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"sort": schema.StringAttribute{
				Optional:    true,
				Description: `The order to sort the transcript entries.`,
			},
			"source": schema.StringAttribute{
				Computed: true,
			},
			"speaker": schema.StringAttribute{
				Computed:    true,
				Description: `The speaker for the transcript entry`,
			},
			"start": schema.Int32Attribute{
				Computed:    true,
				Description: `The start time for the transcript entry`,
			},
			"until": schema.Int32Attribute{
				Computed:    true,
				Description: `The end time for the transcript entry`,
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: `The time the transcript entry was last updated`,
			},
			"words": schema.StringAttribute{
				Computed:    true,
				Description: `The words spoken for the transcript entry`,
			},
		},
	}
}

func (r *PublicAPIV1IncidentsTranscriptsEntitiesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PublicAPIV1IncidentsTranscriptsEntitiesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *PublicAPIV1IncidentsTranscriptsEntitiesDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListTranscriptEntriesRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Incidents.ListTranscriptEntries(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
