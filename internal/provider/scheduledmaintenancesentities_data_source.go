// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ScheduledMaintenancesEntitiesDataSource{}
var _ datasource.DataSourceWithConfigure = &ScheduledMaintenancesEntitiesDataSource{}

func NewScheduledMaintenancesEntitiesDataSource() datasource.DataSource {
	return &ScheduledMaintenancesEntitiesDataSource{}
}

// ScheduledMaintenancesEntitiesDataSource is the data source implementation.
type ScheduledMaintenancesEntitiesDataSource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// ScheduledMaintenancesEntitiesDataSourceModel describes the data model.
type ScheduledMaintenancesEntitiesDataSourceModel struct {
	Active                          types.Bool                                  `tfsdk:"active"`
	AffectsID                       types.String                                `tfsdk:"affects_id"`
	AiIncidentSummary               types.String                                `tfsdk:"ai_incident_summary"`
	Attachments                     []tfTypes.TicketingTicketEntityAttachment   `tfsdk:"attachments"`
	Body                            types.String                                `tfsdk:"body"`
	CalculatedAt                    types.String                                `tfsdk:"calculated_at"`
	ChannelID                       types.String                                `tfsdk:"channel_id"`
	ChannelName                     types.String                                `tfsdk:"channel_name"`
	ChannelReference                types.String                                `tfsdk:"channel_reference"`
	ChannelStatus                   types.String                                `tfsdk:"channel_status"`
	CommentsURL                     types.String                                `tfsdk:"comments_url"`
	ContextDescription              types.String                                `tfsdk:"context_description"`
	ContextTag                      types.String                                `tfsdk:"context_tag"`
	CreatedAt                       types.String                                `tfsdk:"created_at"`
	CurrentMilestone                types.String                                `tfsdk:"current_milestone"`
	CustomerImpactSummary           types.String                                `tfsdk:"customer_impact_summary"`
	CustomersImpacted               types.Int32                                 `tfsdk:"customers_impacted"`
	Deletable                       types.Bool                                  `tfsdk:"deletable"`
	Description                     types.String                                `tfsdk:"description"`
	DiscardedAt                     types.String                                `tfsdk:"discarded_at"`
	DisplayName                     types.String                                `tfsdk:"display_name"`
	DisplayText                     types.String                                `tfsdk:"display_text"`
	DueAt                           types.String                                `tfsdk:"due_at"`
	Duration                        types.String                                `tfsdk:"duration"`
	Editable                        types.Bool                                  `tfsdk:"editable"`
	Email                           types.String                                `tfsdk:"email"`
	EndsAt                          types.String                                `tfsdk:"ends_at"`
	EndsAtMilestone                 types.String                                `tfsdk:"ends_at_milestone"`
	ExternalID                      types.String                                `tfsdk:"external_id"`
	Field                           types.String                                `tfsdk:"field"`
	FieldID                         types.String                                `tfsdk:"field_id"`
	HasTranslatedTranscripts        types.Bool                                  `tfsdk:"has_translated_transcripts"`
	HrefURL                         types.String                                `tfsdk:"href_url"`
	IconURL                         types.String                                `tfsdk:"icon_url"`
	ID                              types.String                                `tfsdk:"id"`
	InSupportHours                  types.Bool                                  `tfsdk:"in_support_hours"`
	IncidentCurrentMilestone        types.String                                `tfsdk:"incident_current_milestone"`
	IncidentID                      types.String                                `tfsdk:"incident_id"`
	IncidentName                    types.String                                `tfsdk:"incident_name"`
	IncidentURL                     types.String                                `tfsdk:"incident_url"`
	IntegrationID                   types.String                                `tfsdk:"integration_id"`
	IntegrationName                 types.String                                `tfsdk:"integration_name"`
	IntegrationSlug                 types.String                                `tfsdk:"integration_slug"`
	IsCompliant                     types.Bool                                  `tfsdk:"is_compliant"`
	Labels                          *tfTypes.NullableIncidentEntityLabels       `tfsdk:"labels"`
	LanguageCodes                   []types.String                              `tfsdk:"language_codes"`
	LastUpdate                      types.String                                `tfsdk:"last_update"`
	MonetaryImpact                  types.Int32                                 `tfsdk:"monetary_impact"`
	MonetaryImpactCents             types.Int32                                 `tfsdk:"monetary_impact_cents"`
	Name                            types.String                                `tfsdk:"name"`
	NotificationPolicyItemID        types.String                                `tfsdk:"notification_policy_item_id"`
	Number                          types.Int32                                 `tfsdk:"number"`
	ObjectID                        types.String                                `tfsdk:"object_id"`
	ObjectType                      types.String                                `tfsdk:"object_type"`
	OccurredAt                      types.String                                `tfsdk:"occurred_at"`
	OrganizationID                  types.String                                `tfsdk:"organization_id"`
	Page                            types.Int32                                 `queryParam:"style=form,explode=true,name=page" tfsdk:"page"`
	PerPage                         types.Int32                                 `queryParam:"style=form,explode=true,name=per_page" tfsdk:"per_page"`
	Position                        types.Int32                                 `tfsdk:"position"`
	PreviousHostAssignment          types.String                                `tfsdk:"previous_host_assignment"`
	Priority                        types.String                                `tfsdk:"priority"`
	PrivateID                       types.String                                `tfsdk:"private_id"`
	PrivateStatusPageURL            types.String                                `tfsdk:"private_status_page_url"`
	Query                           types.String                                `queryParam:"style=form,explode=true,name=query" tfsdk:"query"`
	ReportID                        types.String                                `tfsdk:"report_id"`
	RequiredAtMilestoneID           types.String                                `tfsdk:"required_at_milestone_id"`
	ResourceClass                   types.String                                `tfsdk:"resource_class"`
	ResourceID                      types.String                                `tfsdk:"resource_id"`
	RetroExports                    []tfTypes.NullableIncidentEntityRetroExport `tfsdk:"retro_exports"`
	Severity                        types.String                                `tfsdk:"severity"`
	SeverityColor                   types.String                                `tfsdk:"severity_color"`
	SeverityCondition               types.String                                `tfsdk:"severity_condition"`
	SeverityImpact                  types.String                                `tfsdk:"severity_impact"`
	SignalsEnabledNotificationTypes []types.String                              `tfsdk:"signals_enabled_notification_types"`
	SignalsIcalURL                  types.String                                `tfsdk:"signals_ical_url"`
	SlackLinked                     types.Bool                                  `tfsdk:"slack_linked"`
	SlackUserID                     types.String                                `tfsdk:"slack_user_id"`
	Slug                            types.String                                `tfsdk:"slug"`
	Source                          types.String                                `tfsdk:"source"`
	SourceID                        types.String                                `tfsdk:"source_id"`
	SourceName                      types.String                                `tfsdk:"source_name"`
	StartedAt                       types.String                                `tfsdk:"started_at"`
	StartsAt                        types.String                                `tfsdk:"starts_at"`
	StartsAtMilestone               types.String                                `tfsdk:"starts_at_milestone"`
	State                           types.String                                `tfsdk:"state"`
	Status                          types.String                                `tfsdk:"status"`
	Summary                         types.String                                `tfsdk:"summary"`
	SyncErrorMessage                types.String                                `tfsdk:"sync_error_message"`
	TagList                         []types.String                              `tfsdk:"tag_list"`
	TaskID                          types.String                                `tfsdk:"task_id"`
	TranscriptionStatus             types.String                                `tfsdk:"transcription_status"`
	TranscriptionSubCode            types.String                                `tfsdk:"transcription_sub_code"`
	Type                            types.String                                `tfsdk:"type"`
	UpdatedAt                       types.String                                `tfsdk:"updated_at"`
	URL                             types.String                                `tfsdk:"url"`
	Value                           types.String                                `tfsdk:"value"`
	ValueArray                      []types.String                              `tfsdk:"value_array"`
	ValueString                     types.String                                `tfsdk:"value_string"`
	ValueType                       types.String                                `tfsdk:"value_type"`
}

// Metadata returns the data source type name.
func (r *ScheduledMaintenancesEntitiesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_scheduled_maintenances_entities"
}

// Schema defines the schema for the data source.
func (r *ScheduledMaintenancesEntitiesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "ScheduledMaintenancesEntities DataSource",

		Attributes: map[string]schema.Attribute{
			"active": schema.BoolAttribute{
				Computed: true,
			},
			"affects_id": schema.StringAttribute{
				Computed: true,
			},
			"ai_incident_summary": schema.StringAttribute{
				Computed: true,
			},
			"attachments": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
				},
				Description: `A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity`,
			},
			"body": schema.StringAttribute{
				Computed: true,
			},
			"calculated_at": schema.StringAttribute{
				Computed: true,
			},
			"channel_id": schema.StringAttribute{
				Computed: true,
			},
			"channel_name": schema.StringAttribute{
				Computed: true,
			},
			"channel_reference": schema.StringAttribute{
				Computed: true,
			},
			"channel_status": schema.StringAttribute{
				Computed:    true,
				Description: `inoperative: 0, operational: 1, archived: 2`,
			},
			"comments_url": schema.StringAttribute{
				Computed: true,
			},
			"context_description": schema.StringAttribute{
				Computed: true,
			},
			"context_tag": schema.StringAttribute{
				Computed: true,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"current_milestone": schema.StringAttribute{
				Computed:    true,
				Description: `The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.`,
			},
			"customer_impact_summary": schema.StringAttribute{
				Computed: true,
			},
			"customers_impacted": schema.Int32Attribute{
				Computed: true,
			},
			"deletable": schema.BoolAttribute{
				Computed:    true,
				Description: `Link can be deleted`,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"discarded_at": schema.StringAttribute{
				Computed:    true,
				Description: `The time the incident was archived`,
			},
			"display_name": schema.StringAttribute{
				Computed: true,
			},
			"display_text": schema.StringAttribute{
				Computed: true,
			},
			"due_at": schema.StringAttribute{
				Computed: true,
			},
			"duration": schema.StringAttribute{
				Computed: true,
			},
			"editable": schema.BoolAttribute{
				Computed:    true,
				Description: `Link can be edited`,
			},
			"email": schema.StringAttribute{
				Computed: true,
			},
			"ends_at": schema.StringAttribute{
				Computed: true,
			},
			"ends_at_milestone": schema.StringAttribute{
				Computed: true,
			},
			"external_id": schema.StringAttribute{
				Computed: true,
			},
			"field": schema.StringAttribute{
				Computed: true,
			},
			"field_id": schema.StringAttribute{
				Computed: true,
			},
			"has_translated_transcripts": schema.BoolAttribute{
				Computed: true,
			},
			"href_url": schema.StringAttribute{
				Computed: true,
			},
			"icon_url": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"in_support_hours": schema.BoolAttribute{
				Computed: true,
			},
			"incident_current_milestone": schema.StringAttribute{
				Computed:    true,
				Description: `Milestone of incident that this ticket is related to`,
			},
			"incident_id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of incident that this ticket is related to`,
			},
			"incident_name": schema.StringAttribute{
				Computed:    true,
				Description: `Name of incident that this ticket is related to`,
			},
			"incident_url": schema.StringAttribute{
				Computed: true,
			},
			"integration_id": schema.StringAttribute{
				Computed: true,
			},
			"integration_name": schema.StringAttribute{
				Computed: true,
			},
			"integration_slug": schema.StringAttribute{
				Computed: true,
			},
			"is_compliant": schema.BoolAttribute{
				Computed: true,
			},
			"labels": schema.SingleNestedAttribute{
				Computed:    true,
				Description: `A key/value of labels`,
			},
			"language_codes": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `A list of language codes that have translated transcripts for this conference bridge`,
			},
			"last_update": schema.StringAttribute{
				Computed: true,
			},
			"monetary_impact": schema.Int32Attribute{
				Computed: true,
			},
			"monetary_impact_cents": schema.Int32Attribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"notification_policy_item_id": schema.StringAttribute{
				Computed: true,
			},
			"number": schema.Int32Attribute{
				Computed:    true,
				Description: `Incident number`,
			},
			"object_id": schema.StringAttribute{
				Computed: true,
			},
			"object_type": schema.StringAttribute{
				Computed: true,
			},
			"occurred_at": schema.StringAttribute{
				Computed: true,
			},
			"organization_id": schema.StringAttribute{
				Computed: true,
			},
			"page": schema.Int32Attribute{
				Optional: true,
			},
			"per_page": schema.Int32Attribute{
				Optional: true,
			},
			"position": schema.Int32Attribute{
				Computed:    true,
				Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
			},
			"previous_host_assignment": schema.StringAttribute{
				Computed: true,
			},
			"priority": schema.StringAttribute{
				Computed: true,
			},
			"private_id": schema.StringAttribute{
				Computed: true,
			},
			"private_status_page_url": schema.StringAttribute{
				Computed: true,
			},
			"query": schema.StringAttribute{
				Optional:    true,
				Description: `Filter scheduled_maintenances with a query on their name`,
			},
			"report_id": schema.StringAttribute{
				Computed: true,
			},
			"required_at_milestone_id": schema.StringAttribute{
				Computed:    true,
				Description: `The milestone at which this field is required. If null, this field is always required.`,
			},
			"resource_class": schema.StringAttribute{
				Computed: true,
			},
			"resource_id": schema.StringAttribute{
				Computed: true,
			},
			"retro_exports": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
				},
				Description: `A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity`,
			},
			"severity": schema.StringAttribute{
				Computed: true,
			},
			"severity_color": schema.StringAttribute{
				Computed: true,
			},
			"severity_condition": schema.StringAttribute{
				Computed: true,
			},
			"severity_impact": schema.StringAttribute{
				Computed: true,
			},
			"signals_enabled_notification_types": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"signals_ical_url": schema.StringAttribute{
				Computed: true,
			},
			"slack_linked": schema.BoolAttribute{
				Computed: true,
			},
			"slack_user_id": schema.StringAttribute{
				Computed: true,
			},
			"slug": schema.StringAttribute{
				Computed: true,
			},
			"source": schema.StringAttribute{
				Computed: true,
			},
			"source_id": schema.StringAttribute{
				Computed: true,
			},
			"source_name": schema.StringAttribute{
				Computed: true,
			},
			"started_at": schema.StringAttribute{
				Computed:    true,
				Description: `The time the incident started`,
			},
			"starts_at": schema.StringAttribute{
				Computed: true,
			},
			"starts_at_milestone": schema.StringAttribute{
				Computed: true,
			},
			"state": schema.StringAttribute{
				Computed: true,
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
			"summary": schema.StringAttribute{
				Computed: true,
			},
			"sync_error_message": schema.StringAttribute{
				Computed:    true,
				Description: `Error message from syncing this ticket to integrations`,
			},
			"tag_list": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"task_id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of task that this ticket is related to`,
			},
			"transcription_status": schema.StringAttribute{
				Computed: true,
			},
			"transcription_sub_code": schema.StringAttribute{
				Computed: true,
			},
			"type": schema.StringAttribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"url": schema.StringAttribute{
				Computed: true,
			},
			"value": schema.StringAttribute{
				Computed: true,
			},
			"value_array": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"value_string": schema.StringAttribute{
				Computed: true,
			},
			"value_type": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *ScheduledMaintenancesEntitiesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ScheduledMaintenancesEntitiesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ScheduledMaintenancesEntitiesDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListScheduledMaintenancesRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Incidents.ListScheduledMaintenances(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
