// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SignalsAPIWebhookTargetEntityResourceModel) ToSharedCreateSignalsWebhookTarget(ctx context.Context) (*shared.CreateSignalsWebhookTarget, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var name string
	name = r.Name.ValueString()

	signingKey := new(string)
	if !r.SigningKey.IsUnknown() && !r.SigningKey.IsNull() {
		*signingKey = r.SigningKey.ValueString()
	} else {
		signingKey = nil
	}
	var url string
	url = r.URL.ValueString()

	out := shared.CreateSignalsWebhookTarget{
		Description: description,
		Name:        name,
		SigningKey:  signingKey,
		URL:         url,
	}

	return &out, diags
}

func (r *SignalsAPIWebhookTargetEntityResourceModel) ToSharedUpdateSignalsWebhookTarget(ctx context.Context) (*shared.UpdateSignalsWebhookTarget, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	signingKey := new(string)
	if !r.SigningKey.IsUnknown() && !r.SigningKey.IsNull() {
		*signingKey = r.SigningKey.ValueString()
	} else {
		signingKey = nil
	}
	url := new(string)
	if !r.URL.IsUnknown() && !r.URL.IsNull() {
		*url = r.URL.ValueString()
	} else {
		url = nil
	}
	out := shared.UpdateSignalsWebhookTarget{
		Description: description,
		Name:        name,
		SigningKey:  signingKey,
		URL:         url,
	}

	return &out, diags
}

func (r *SignalsAPIWebhookTargetEntityResourceModel) ToOperationsUpdateSignalsWebhookTargetRequest(ctx context.Context) (*operations.UpdateSignalsWebhookTargetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	updateSignalsWebhookTarget, updateSignalsWebhookTargetDiags := r.ToSharedUpdateSignalsWebhookTarget(ctx)
	diags.Append(updateSignalsWebhookTargetDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateSignalsWebhookTargetRequest{
		ID:                         id,
		UpdateSignalsWebhookTarget: *updateSignalsWebhookTarget,
	}

	return &out, diags
}

func (r *SignalsAPIWebhookTargetEntityResourceModel) ToOperationsGetSignalsWebhookTargetRequest(ctx context.Context) (*operations.GetSignalsWebhookTargetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetSignalsWebhookTargetRequest{
		ID: id,
	}

	return &out, diags
}

func (r *SignalsAPIWebhookTargetEntityResourceModel) RefreshFromSharedSignalsAPIWebhookTargetEntity(ctx context.Context, resp *shared.SignalsAPIWebhookTargetEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.CreatedBy == nil {
			r.CreatedBy = nil
		} else {
			r.CreatedBy = &tfTypes.NullableAuthorEntity{}
			r.CreatedBy.Email = types.StringPointerValue(resp.CreatedBy.Email)
			r.CreatedBy.ID = types.StringPointerValue(resp.CreatedBy.ID)
			r.CreatedBy.Name = types.StringPointerValue(resp.CreatedBy.Name)
			r.CreatedBy.Source = types.StringPointerValue(resp.CreatedBy.Source)
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.URL = types.StringPointerValue(resp.URL)
	}

	return diags
}
