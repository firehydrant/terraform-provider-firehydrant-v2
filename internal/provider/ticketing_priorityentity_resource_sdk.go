// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
)

func (r *TicketingPriorityEntityResourceModel) ToSharedCreateTicketingPriority(ctx context.Context) (*shared.CreateTicketingPriority, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	position := new(int)
	if !r.Position.IsUnknown() && !r.Position.IsNull() {
		*position = int(r.Position.ValueInt32())
	} else {
		position = nil
	}
	out := shared.CreateTicketingPriority{
		Name:     name,
		Position: position,
	}

	return &out, diags
}

func (r *TicketingPriorityEntityResourceModel) ToSharedUpdateTicketingPriority(ctx context.Context) (*shared.UpdateTicketingPriority, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	position := new(int)
	if !r.Position.IsUnknown() && !r.Position.IsNull() {
		*position = int(r.Position.ValueInt32())
	} else {
		position = nil
	}
	out := shared.UpdateTicketingPriority{
		Name:     name,
		Position: position,
	}

	return &out, diags
}

func (r *TicketingPriorityEntityResourceModel) ToOperationsUpdateTicketingPriorityRequest(ctx context.Context) (*operations.UpdateTicketingPriorityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	updateTicketingPriority, updateTicketingPriorityDiags := r.ToSharedUpdateTicketingPriority(ctx)
	diags.Append(updateTicketingPriorityDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateTicketingPriorityRequest{
		ID:                      id,
		UpdateTicketingPriority: *updateTicketingPriority,
	}

	return &out, diags
}

func (r *TicketingPriorityEntityResourceModel) ToOperationsGetTicketingPriorityRequest(ctx context.Context) (*operations.GetTicketingPriorityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetTicketingPriorityRequest{
		ID: id,
	}

	return &out, diags
}

func (r *TicketingPriorityEntityResourceModel) ToOperationsDeleteTicketingPriorityRequest(ctx context.Context) (*operations.DeleteTicketingPriorityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteTicketingPriorityRequest{
		ID: id,
	}

	return &out, diags
}
