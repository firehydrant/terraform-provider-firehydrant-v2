// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	speakeasy_stringplanmodifier "github.com/firehydrant/terraform-provider-firehydrant/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &NuncConnectionEntityResource{}
var _ resource.ResourceWithImportState = &NuncConnectionEntityResource{}

func NewNuncConnectionEntityResource() resource.Resource {
	return &NuncConnectionEntityResource{}
}

// NuncConnectionEntityResource defines the resource implementation.
type NuncConnectionEntityResource struct {
	// Provider configured SDK client.
	client *sdk.Firehydrant
}

// NuncConnectionEntityResourceModel describes the resource data model.
type NuncConnectionEntityResourceModel struct {
	ButtonBackgroundColor        types.String                              `tfsdk:"button_background_color"`
	ButtonTextColor              types.String                              `tfsdk:"button_text_color"`
	Cname                        types.String                              `tfsdk:"cname"`
	CompanyName                  types.String                              `tfsdk:"company_name"`
	CompanyTosURL                types.String                              `tfsdk:"company_tos_url"`
	CompanyWebsite               types.String                              `tfsdk:"company_website"`
	ComponentGroups              *tfTypes.NullableNuncComponentGroupEntity `tfsdk:"component_groups"`
	Components                   *tfTypes.NullableNuncComponentEntity      `tfsdk:"components"`
	ComponentsInfrastructureID   []types.String                            `tfsdk:"components_infrastructure_id"`
	ComponentsInfrastructureType []types.String                            `tfsdk:"components_infrastructure_type"`
	Conditions                   *tfTypes.NullableNuncConditionEntity      `tfsdk:"conditions"`
	ConditionsConditionID        []types.String                            `tfsdk:"conditions_condition_id"`
	ConditionsNuncCondition      []types.String                            `tfsdk:"conditions_nunc_condition"`
	CoverImage                   *tfTypes.NullableMediaImageEntity         `tfsdk:"cover_image"`
	DarkLogo                     *tfTypes.NullableMediaImageEntity         `tfsdk:"dark_logo"`
	Domain                       types.String                              `tfsdk:"domain"`
	EnableHistogram              types.Bool                                `tfsdk:"enable_histogram"`
	ExposedFields                []types.String                            `tfsdk:"exposed_fields"`
	Favicon                      *tfTypes.NullableMediaImageEntity         `tfsdk:"favicon"`
	GreetingBody                 types.String                              `tfsdk:"greeting_body"`
	GreetingTitle                types.String                              `tfsdk:"greeting_title"`
	ID                           types.String                              `tfsdk:"id"`
	LinkColor                    types.String                              `tfsdk:"link_color"`
	Links                        []tfTypes.LinksEntity                     `tfsdk:"links"`
	Logo                         *tfTypes.NullableMediaImageEntity         `tfsdk:"logo"`
	OpenGraphImage               *tfTypes.NullableMediaImageEntity         `tfsdk:"open_graph_image"`
	OperationalMessage           types.String                              `tfsdk:"operational_message"`
	PrimaryColor                 types.String                              `tfsdk:"primary_color"`
	SecondaryColor               types.String                              `tfsdk:"secondary_color"`
	Title                        types.String                              `tfsdk:"title"`
	UIVersion                    types.Int32                               `tfsdk:"ui_version"`
}

func (r *NuncConnectionEntityResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_nunc_connection_entity"
}

func (r *NuncConnectionEntityResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NuncConnectionEntity Resource",
		Attributes: map[string]schema.Attribute{
			"button_background_color": schema.StringAttribute{
				Computed: true,
			},
			"button_text_color": schema.StringAttribute{
				Computed: true,
			},
			"cname": schema.StringAttribute{
				Computed: true,
			},
			"company_name": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"company_tos_url": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"company_website": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"component_groups": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"component_group_id": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"position": schema.Int32Attribute{
						Computed: true,
					},
				},
			},
			"components": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"component_group_id": schema.StringAttribute{
						Computed: true,
					},
					"infrastructure_id": schema.StringAttribute{
						Computed: true,
					},
					"infrastructure_type": schema.StringAttribute{
						Computed: true,
					},
					"label": schema.StringAttribute{
						Computed: true,
					},
					"position": schema.Int32Attribute{
						Computed: true,
					},
				},
			},
			"components_infrastructure_id": schema.ListAttribute{
				Required:    true,
				ElementType: types.StringType,
			},
			"components_infrastructure_type": schema.ListAttribute{
				Required:    true,
				ElementType: types.StringType,
			},
			"conditions": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"condition_id": schema.StringAttribute{
						Computed: true,
					},
					"condition_name": schema.StringAttribute{
						Computed: true,
					},
					"nunc_condition": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"conditions_condition_id": schema.ListAttribute{
				Required:    true,
				ElementType: types.StringType,
				Description: `Severity matrix condition id`,
			},
			"conditions_nunc_condition": schema.ListAttribute{
				Required:    true,
				ElementType: types.StringType,
				Description: `Status page condition to map your severity matrix condition to`,
			},
			"cover_image": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"original_url": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"dark_logo": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"original_url": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"domain": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Requires replacement if changed.`,
			},
			"enable_histogram": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"exposed_fields": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
			},
			"favicon": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"original_url": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"greeting_body": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"greeting_title": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"link_color": schema.StringAttribute{
				Computed: true,
			},
			"links": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"href_url": schema.StringAttribute{
							Computed: true,
						},
						"icon_url": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
					},
				},
				Description: `List of links attached to this status page.`,
			},
			"logo": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"original_url": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"open_graph_image": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"original_url": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"operational_message": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"primary_color": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"secondary_color": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"title": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"ui_version": schema.Int32Attribute{
				Computed: true,
				Optional: true,
			},
		},
	}
}

func (r *NuncConnectionEntityResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Firehydrant)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Firehydrant, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NuncConnectionEntityResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *NuncConnectionEntityResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedCreateNuncConnection(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.StatusPages.CreateNuncConnection(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.NuncConnectionEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedNuncConnectionEntity(ctx, res.NuncConnectionEntity)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetNuncConnectionRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.StatusPages.GetNuncConnection(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.NuncConnectionEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedNuncConnectionEntity(ctx, res1.NuncConnectionEntity)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NuncConnectionEntityResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *NuncConnectionEntityResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetNuncConnectionRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.StatusPages.GetNuncConnection(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.NuncConnectionEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedNuncConnectionEntity(ctx, res.NuncConnectionEntity)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NuncConnectionEntityResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *NuncConnectionEntityResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateNuncConnectionRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.StatusPages.UpdateNuncConnection(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.NuncConnectionEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedNuncConnectionEntity(ctx, res.NuncConnectionEntity)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetNuncConnectionRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.StatusPages.GetNuncConnection(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.NuncConnectionEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedNuncConnectionEntity(ctx, res1.NuncConnectionEntity)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NuncConnectionEntityResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *NuncConnectionEntityResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteNuncConnectionRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.StatusPages.DeleteNuncConnection(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *NuncConnectionEntityResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
