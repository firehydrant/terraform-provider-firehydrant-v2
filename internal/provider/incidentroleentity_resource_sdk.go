// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/provider/typeconvert"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/operations"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *IncidentRoleEntityResourceModel) ToSharedCreateIncidentRole(ctx context.Context) (*shared.CreateIncidentRole, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var name string
	name = r.Name.ValueString()

	var summary string
	summary = r.Summary.ValueString()

	out := shared.CreateIncidentRole{
		Description: description,
		Name:        name,
		Summary:     summary,
	}

	return &out, diags
}

func (r *IncidentRoleEntityResourceModel) ToSharedUpdateIncidentRole(ctx context.Context) (*shared.UpdateIncidentRole, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	summary := new(string)
	if !r.Summary.IsUnknown() && !r.Summary.IsNull() {
		*summary = r.Summary.ValueString()
	} else {
		summary = nil
	}
	out := shared.UpdateIncidentRole{
		Description: description,
		Name:        name,
		Summary:     summary,
	}

	return &out, diags
}

func (r *IncidentRoleEntityResourceModel) ToOperationsUpdateIncidentRoleRequest(ctx context.Context) (*operations.UpdateIncidentRoleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var incidentRoleID string
	incidentRoleID = r.ID.ValueString()

	updateIncidentRole, updateIncidentRoleDiags := r.ToSharedUpdateIncidentRole(ctx)
	diags.Append(updateIncidentRoleDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateIncidentRoleRequest{
		IncidentRoleID:     incidentRoleID,
		UpdateIncidentRole: *updateIncidentRole,
	}

	return &out, diags
}

func (r *IncidentRoleEntityResourceModel) ToOperationsGetIncidentRoleRequest(ctx context.Context) (*operations.GetIncidentRoleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var incidentRoleID string
	incidentRoleID = r.ID.ValueString()

	out := operations.GetIncidentRoleRequest{
		IncidentRoleID: incidentRoleID,
	}

	return &out, diags
}

func (r *IncidentRoleEntityResourceModel) ToOperationsDeleteIncidentRoleRequest(ctx context.Context) (*operations.DeleteIncidentRoleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var incidentRoleID string
	incidentRoleID = r.ID.ValueString()

	out := operations.DeleteIncidentRoleRequest{
		IncidentRoleID: incidentRoleID,
	}

	return &out, diags
}

func (r *IncidentRoleEntityResourceModel) RefreshFromSharedIncidentRoleEntity(ctx context.Context, resp *shared.IncidentRoleEntity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DiscardedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DiscardedAt))
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		r.Summary = types.StringPointerValue(resp.Summary)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}
