// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
)

// PatchV1TeamsTeamIDEscalationPoliciesIDType - The type of target that the step will notify.
type PatchV1TeamsTeamIDEscalationPoliciesIDType string

const (
	PatchV1TeamsTeamIDEscalationPoliciesIDTypeOnCallSchedule PatchV1TeamsTeamIDEscalationPoliciesIDType = "OnCallSchedule"
	PatchV1TeamsTeamIDEscalationPoliciesIDTypeUser           PatchV1TeamsTeamIDEscalationPoliciesIDType = "User"
	PatchV1TeamsTeamIDEscalationPoliciesIDTypeSlackChannel   PatchV1TeamsTeamIDEscalationPoliciesIDType = "SlackChannel"
	PatchV1TeamsTeamIDEscalationPoliciesIDTypeEntireTeam     PatchV1TeamsTeamIDEscalationPoliciesIDType = "EntireTeam"
	PatchV1TeamsTeamIDEscalationPoliciesIDTypeWebhook        PatchV1TeamsTeamIDEscalationPoliciesIDType = "Webhook"
)

func (e PatchV1TeamsTeamIDEscalationPoliciesIDType) ToPointer() *PatchV1TeamsTeamIDEscalationPoliciesIDType {
	return &e
}
func (e *PatchV1TeamsTeamIDEscalationPoliciesIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OnCallSchedule":
		fallthrough
	case "User":
		fallthrough
	case "SlackChannel":
		fallthrough
	case "EntireTeam":
		fallthrough
	case "Webhook":
		*e = PatchV1TeamsTeamIDEscalationPoliciesIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1TeamsTeamIDEscalationPoliciesIDType: %v", v)
	}
}

type PatchV1TeamsTeamIDEscalationPoliciesIDTargets struct {
	// The type of target that the step will notify.
	Type PatchV1TeamsTeamIDEscalationPoliciesIDType `json:"type"`
	// The ID of the target that the step will notify.
	ID string `json:"id"`
}

func (o *PatchV1TeamsTeamIDEscalationPoliciesIDTargets) GetType() PatchV1TeamsTeamIDEscalationPoliciesIDType {
	if o == nil {
		return PatchV1TeamsTeamIDEscalationPoliciesIDType("")
	}
	return o.Type
}

func (o *PatchV1TeamsTeamIDEscalationPoliciesIDTargets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// PatchV1TeamsTeamIDEscalationPoliciesIDDistributionType - The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
type PatchV1TeamsTeamIDEscalationPoliciesIDDistributionType string

const (
	PatchV1TeamsTeamIDEscalationPoliciesIDDistributionTypeUnspecified                  PatchV1TeamsTeamIDEscalationPoliciesIDDistributionType = "unspecified"
	PatchV1TeamsTeamIDEscalationPoliciesIDDistributionTypeRoundRobinByAlert            PatchV1TeamsTeamIDEscalationPoliciesIDDistributionType = "round_robin_by_alert"
	PatchV1TeamsTeamIDEscalationPoliciesIDDistributionTypeRoundRobinByEscalationPolicy PatchV1TeamsTeamIDEscalationPoliciesIDDistributionType = "round_robin_by_escalation_policy"
)

func (e PatchV1TeamsTeamIDEscalationPoliciesIDDistributionType) ToPointer() *PatchV1TeamsTeamIDEscalationPoliciesIDDistributionType {
	return &e
}
func (e *PatchV1TeamsTeamIDEscalationPoliciesIDDistributionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unspecified":
		fallthrough
	case "round_robin_by_alert":
		fallthrough
	case "round_robin_by_escalation_policy":
		*e = PatchV1TeamsTeamIDEscalationPoliciesIDDistributionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1TeamsTeamIDEscalationPoliciesIDDistributionType: %v", v)
	}
}

type PatchV1TeamsTeamIDEscalationPoliciesIDSteps struct {
	// A list of targets that the step will notify. You can specify up to 15 targets per step.
	Targets []PatchV1TeamsTeamIDEscalationPoliciesIDTargets `json:"targets,omitempty"`
	// An ISO8601 duration string specifying how long to wait before moving on to the next step. For the last step, this value specifies how long to wait before the escalation policy should repeat, if it repeats.
	Timeout string `json:"timeout"`
	// The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
	DistributionType *PatchV1TeamsTeamIDEscalationPoliciesIDDistributionType `json:"distribution_type,omitempty"`
}

func (o *PatchV1TeamsTeamIDEscalationPoliciesIDSteps) GetTargets() []PatchV1TeamsTeamIDEscalationPoliciesIDTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *PatchV1TeamsTeamIDEscalationPoliciesIDSteps) GetTimeout() string {
	if o == nil {
		return ""
	}
	return o.Timeout
}

func (o *PatchV1TeamsTeamIDEscalationPoliciesIDSteps) GetDistributionType() *PatchV1TeamsTeamIDEscalationPoliciesIDDistributionType {
	if o == nil {
		return nil
	}
	return o.DistributionType
}

// PatchV1TeamsTeamIDEscalationPoliciesIDTargetType - The type of target to which the policy will hand off.
type PatchV1TeamsTeamIDEscalationPoliciesIDTargetType string

const (
	PatchV1TeamsTeamIDEscalationPoliciesIDTargetTypeEscalationPolicy PatchV1TeamsTeamIDEscalationPoliciesIDTargetType = "EscalationPolicy"
	PatchV1TeamsTeamIDEscalationPoliciesIDTargetTypeTeam             PatchV1TeamsTeamIDEscalationPoliciesIDTargetType = "Team"
)

func (e PatchV1TeamsTeamIDEscalationPoliciesIDTargetType) ToPointer() *PatchV1TeamsTeamIDEscalationPoliciesIDTargetType {
	return &e
}
func (e *PatchV1TeamsTeamIDEscalationPoliciesIDTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "Team":
		*e = PatchV1TeamsTeamIDEscalationPoliciesIDTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1TeamsTeamIDEscalationPoliciesIDTargetType: %v", v)
	}
}

// PatchV1TeamsTeamIDEscalationPoliciesIDHandoffStep - A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
type PatchV1TeamsTeamIDEscalationPoliciesIDHandoffStep struct {
	// The type of target to which the policy will hand off.
	TargetType PatchV1TeamsTeamIDEscalationPoliciesIDTargetType `json:"target_type"`
	// The ID of the target to which the policy will hand off.
	TargetID string `json:"target_id"`
}

func (o *PatchV1TeamsTeamIDEscalationPoliciesIDHandoffStep) GetTargetType() PatchV1TeamsTeamIDEscalationPoliciesIDTargetType {
	if o == nil {
		return PatchV1TeamsTeamIDEscalationPoliciesIDTargetType("")
	}
	return o.TargetType
}

func (o *PatchV1TeamsTeamIDEscalationPoliciesIDHandoffStep) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

// PatchV1TeamsTeamIDEscalationPoliciesID - Update a Signals escalation policy by ID
type PatchV1TeamsTeamIDEscalationPoliciesID struct {
	// The escalation policy's name.
	Name *string `json:"name,omitempty"`
	// A detailed description of the escalation policy.
	Description *string `json:"description,omitempty"`
	// The number of times that the escalation policy should repeat before an alert is dropped.
	Repetitions *int `default:"0" json:"repetitions"`
	// Whether this escalation policy should be the default for the team.
	Default *bool `default:"false" json:"default"`
	// A list of steps that define how an alert should escalate through the policy.
	Steps []PatchV1TeamsTeamIDEscalationPoliciesIDSteps `json:"steps,omitempty"`
	// A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
	HandoffStep *PatchV1TeamsTeamIDEscalationPoliciesIDHandoffStep `json:"handoff_step,omitempty"`
}

func (p PatchV1TeamsTeamIDEscalationPoliciesID) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PatchV1TeamsTeamIDEscalationPoliciesID) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PatchV1TeamsTeamIDEscalationPoliciesID) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PatchV1TeamsTeamIDEscalationPoliciesID) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PatchV1TeamsTeamIDEscalationPoliciesID) GetRepetitions() *int {
	if o == nil {
		return nil
	}
	return o.Repetitions
}

func (o *PatchV1TeamsTeamIDEscalationPoliciesID) GetDefault() *bool {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *PatchV1TeamsTeamIDEscalationPoliciesID) GetSteps() []PatchV1TeamsTeamIDEscalationPoliciesIDSteps {
	if o == nil {
		return nil
	}
	return o.Steps
}

func (o *PatchV1TeamsTeamIDEscalationPoliciesID) GetHandoffStep() *PatchV1TeamsTeamIDEscalationPoliciesIDHandoffStep {
	if o == nil {
		return nil
	}
	return o.HandoffStep
}
