// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"time"
)

type CustomFieldsInput struct {
	// The ID of the custom field you wish to set.
	FieldID string `json:"field_id"`
	// The value you wish to set on the custom field if the type of the field accepts array values
	ValueArray []string `json:"value_array,omitempty"`
	// The value you wish to set on the custom field if the type of the field accepts string values
	ValueString *string `json:"value_string,omitempty"`
}

func (o *CustomFieldsInput) GetFieldID() string {
	if o == nil {
		return ""
	}
	return o.FieldID
}

func (o *CustomFieldsInput) GetValueArray() []string {
	if o == nil {
		return nil
	}
	return o.ValueArray
}

func (o *CustomFieldsInput) GetValueString() *string {
	if o == nil {
		return nil
	}
	return o.ValueString
}

type CreateIncidentImpactsInput struct {
	// The ID of the impact condition. Find these at /v1/severity_matrix/conditions
	ConditionID string `json:"condition_id"`
	// The ID of the impacted infrastructure
	ID string `json:"id"`
	// The type of impacted infrastructure. One of: environment, functionality, or service
	Type string `json:"type"`
}

func (o *CreateIncidentImpactsInput) GetConditionID() string {
	if o == nil {
		return ""
	}
	return o.ConditionID
}

func (o *CreateIncidentImpactsInput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateIncidentImpactsInput) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateIncidentLabels - Key:value pairs to track custom data for the incident
type CreateIncidentLabels struct {
}

type MilestonesInput struct {
	// An ISO8601 formatted string for when this milestone occurred. If you are removing a milestone, this field still needs to be set to some value
	OccurredAt time.Time `json:"occurred_at"`
	// The type/slug of the milestone. Must be one of the currently configured milestones.
	Type string `json:"type"`
}

func (m MilestonesInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MilestonesInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MilestonesInput) GetOccurredAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.OccurredAt
}

func (o *MilestonesInput) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateIncident - Create a new incident
type CreateIncident struct {
	// List of alert IDs that this incident should be associated to
	AlertIds []string `json:"alert_ids,omitempty"`
	// An array of custom fields to set on the incident.
	CustomFieldsInput     []CustomFieldsInput `json:"custom_fields,omitempty"`
	CustomerImpactSummary *string             `json:"customer_impact_summary,omitempty"`
	Description           *string             `json:"description,omitempty"`
	ExternalLinks         *string             `json:"external_links,omitempty"`
	// An array of impacted infrastructure
	ImpactsInput []CreateIncidentImpactsInput `json:"impacts,omitempty"`
	// The ID of the incident type. This will copy values from the incident type (if any) unless they are being overridden via parameters in this request.
	IncidentTypeID *string `json:"incident_type_id,omitempty"`
	// Key:value pairs to track custom data for the incident
	Labels *CreateIncidentLabels `json:"labels,omitempty"`
	// An array of milestones to set on an incident. This can be used to create an already-resolved incident.
	MilestonesInput []MilestonesInput `json:"milestones,omitempty"`
	Name            string            `json:"name"`
	Priority        *string           `json:"priority,omitempty"`
	Restricted      *bool             `json:"restricted,omitempty"`
	// List of ids of Runbooks to attach to this incident. Foregoes any conditions these Runbooks may have guarding automatic attachment.
	RunbookIds          []string `json:"runbook_ids,omitempty"`
	Severity            *string  `json:"severity,omitempty"`
	SeverityConditionID *string  `json:"severity_condition_id,omitempty"`
	SeverityImpactID    *string  `json:"severity_impact_id,omitempty"`
	// If true, the incident type values will not be copied to the incident. This is useful when creating an incident from an incident type, but you want to set the values manually.
	SkipIncidentTypeValues *bool   `default:"false" json:"skip_incident_type_values"`
	Summary                *string `json:"summary,omitempty"`
	// List of tags for the incident
	TagList []string `json:"tag_list,omitempty"`
	// IDs of teams you wish to assign to this incident.
	TeamIds []string `json:"team_ids,omitempty"`
}

func (c CreateIncident) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateIncident) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateIncident) GetAlertIds() []string {
	if o == nil {
		return nil
	}
	return o.AlertIds
}

func (o *CreateIncident) GetCustomFieldsInput() []CustomFieldsInput {
	if o == nil {
		return nil
	}
	return o.CustomFieldsInput
}

func (o *CreateIncident) GetCustomerImpactSummary() *string {
	if o == nil {
		return nil
	}
	return o.CustomerImpactSummary
}

func (o *CreateIncident) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateIncident) GetExternalLinks() *string {
	if o == nil {
		return nil
	}
	return o.ExternalLinks
}

func (o *CreateIncident) GetImpactsInput() []CreateIncidentImpactsInput {
	if o == nil {
		return nil
	}
	return o.ImpactsInput
}

func (o *CreateIncident) GetIncidentTypeID() *string {
	if o == nil {
		return nil
	}
	return o.IncidentTypeID
}

func (o *CreateIncident) GetLabels() *CreateIncidentLabels {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *CreateIncident) GetMilestonesInput() []MilestonesInput {
	if o == nil {
		return nil
	}
	return o.MilestonesInput
}

func (o *CreateIncident) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateIncident) GetPriority() *string {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *CreateIncident) GetRestricted() *bool {
	if o == nil {
		return nil
	}
	return o.Restricted
}

func (o *CreateIncident) GetRunbookIds() []string {
	if o == nil {
		return nil
	}
	return o.RunbookIds
}

func (o *CreateIncident) GetSeverity() *string {
	if o == nil {
		return nil
	}
	return o.Severity
}

func (o *CreateIncident) GetSeverityConditionID() *string {
	if o == nil {
		return nil
	}
	return o.SeverityConditionID
}

func (o *CreateIncident) GetSeverityImpactID() *string {
	if o == nil {
		return nil
	}
	return o.SeverityImpactID
}

func (o *CreateIncident) GetSkipIncidentTypeValues() *bool {
	if o == nil {
		return nil
	}
	return o.SkipIncidentTypeValues
}

func (o *CreateIncident) GetSummary() *string {
	if o == nil {
		return nil
	}
	return o.Summary
}

func (o *CreateIncident) GetTagList() []string {
	if o == nil {
		return nil
	}
	return o.TagList
}

func (o *CreateIncident) GetTeamIds() []string {
	if o == nil {
		return nil
	}
	return o.TeamIds
}
