// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"time"
)

type TicketingTicketEntityAttachment struct {
}

// TicketingTicketEntity - Ticketing_TicketEntity model
type TicketingTicketEntity struct {
	Assignees []AuthorEntity `json:"assignees,omitempty"`
	// A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity
	Attachments []TicketingTicketEntityAttachment `json:"attachments,omitempty"`
	CreatedAt   *time.Time                        `json:"created_at,omitempty"`
	CreatedBy   *NullableAuthorEntity             `json:"created_by,omitempty"`
	Description *string                           `json:"description,omitempty"`
	DueAt       *time.Time                        `json:"due_at,omitempty"`
	ID          *string                           `json:"id,omitempty"`
	// Milestone of incident that this ticket is related to
	IncidentCurrentMilestone *string `json:"incident_current_milestone,omitempty"`
	// ID of incident that this ticket is related to
	IncidentID *string `json:"incident_id,omitempty"`
	// Name of incident that this ticket is related to
	IncidentName *string                          `json:"incident_name,omitempty"`
	Link         *NullableAttachmentsLinkEntity   `json:"link,omitempty"`
	Priority     *NullableTicketingPriorityEntity `json:"priority,omitempty"`
	State        *string                          `json:"state,omitempty"`
	Summary      *string                          `json:"summary,omitempty"`
	// Error message from syncing this ticket to integrations
	SyncErrorMessage *string  `json:"sync_error_message,omitempty"`
	TagList          []string `json:"tag_list,omitempty"`
	// ID of task that this ticket is related to
	TaskID    *string    `json:"task_id,omitempty"`
	Type      *string    `json:"type,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

func (t TicketingTicketEntity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TicketingTicketEntity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TicketingTicketEntity) GetAssignees() []AuthorEntity {
	if o == nil {
		return nil
	}
	return o.Assignees
}

func (o *TicketingTicketEntity) GetAttachments() []TicketingTicketEntityAttachment {
	if o == nil {
		return nil
	}
	return o.Attachments
}

func (o *TicketingTicketEntity) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *TicketingTicketEntity) GetCreatedBy() *NullableAuthorEntity {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *TicketingTicketEntity) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TicketingTicketEntity) GetDueAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DueAt
}

func (o *TicketingTicketEntity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TicketingTicketEntity) GetIncidentCurrentMilestone() *string {
	if o == nil {
		return nil
	}
	return o.IncidentCurrentMilestone
}

func (o *TicketingTicketEntity) GetIncidentID() *string {
	if o == nil {
		return nil
	}
	return o.IncidentID
}

func (o *TicketingTicketEntity) GetIncidentName() *string {
	if o == nil {
		return nil
	}
	return o.IncidentName
}

func (o *TicketingTicketEntity) GetLink() *NullableAttachmentsLinkEntity {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *TicketingTicketEntity) GetPriority() *NullableTicketingPriorityEntity {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *TicketingTicketEntity) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *TicketingTicketEntity) GetSummary() *string {
	if o == nil {
		return nil
	}
	return o.Summary
}

func (o *TicketingTicketEntity) GetSyncErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.SyncErrorMessage
}

func (o *TicketingTicketEntity) GetTagList() []string {
	if o == nil {
		return nil
	}
	return o.TagList
}

func (o *TicketingTicketEntity) GetTaskID() *string {
	if o == nil {
		return nil
	}
	return o.TaskID
}

func (o *TicketingTicketEntity) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *TicketingTicketEntity) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
