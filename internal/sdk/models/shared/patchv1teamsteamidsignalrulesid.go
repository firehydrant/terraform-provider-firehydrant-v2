// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PatchV1TeamsTeamIDSignalRulesIDTargetType - The type of target that the rule will notify when matched.
type PatchV1TeamsTeamIDSignalRulesIDTargetType string

const (
	PatchV1TeamsTeamIDSignalRulesIDTargetTypeEscalationPolicy PatchV1TeamsTeamIDSignalRulesIDTargetType = "EscalationPolicy"
	PatchV1TeamsTeamIDSignalRulesIDTargetTypeOnCallSchedule   PatchV1TeamsTeamIDSignalRulesIDTargetType = "OnCallSchedule"
	PatchV1TeamsTeamIDSignalRulesIDTargetTypeUser             PatchV1TeamsTeamIDSignalRulesIDTargetType = "User"
	PatchV1TeamsTeamIDSignalRulesIDTargetTypeWebhook          PatchV1TeamsTeamIDSignalRulesIDTargetType = "Webhook"
)

func (e PatchV1TeamsTeamIDSignalRulesIDTargetType) ToPointer() *PatchV1TeamsTeamIDSignalRulesIDTargetType {
	return &e
}
func (e *PatchV1TeamsTeamIDSignalRulesIDTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "OnCallSchedule":
		fallthrough
	case "User":
		fallthrough
	case "Webhook":
		*e = PatchV1TeamsTeamIDSignalRulesIDTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1TeamsTeamIDSignalRulesIDTargetType: %v", v)
	}
}

// PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverride - A notification priority that will be set on the resulting alert (default: HIGH)
type PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverride string

const (
	PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverrideHigh    PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverride = "HIGH"
	PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverrideMedium  PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverride = "MEDIUM"
	PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverrideLow     PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverride = "LOW"
	PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverrideUnknown PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverride = ""
)

func (e PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverride) ToPointer() *PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverride {
	return &e
}
func (e *PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverride) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		fallthrough
	case "":
		*e = PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverride(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverride: %v", v)
	}
}

// PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhen - Determines when an incident should be created when this rule is matched
type PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhen string

const (
	PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhenWhenUnspecified PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhen = "WHEN_UNSPECIFIED"
	PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhenWhenAlways      PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhen = "WHEN_ALWAYS"
)

func (e PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhen) ToPointer() *PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhen {
	return &e
}
func (e *PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhen) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WHEN_UNSPECIFIED":
		fallthrough
	case "WHEN_ALWAYS":
		*e = PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhen(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhen: %v", v)
	}
}

// PatchV1TeamsTeamIDSignalRulesID - Update a Signals rule by ID
type PatchV1TeamsTeamIDSignalRulesID struct {
	// The rule's name.
	Name *string `json:"name,omitempty"`
	// The CEL expression that defines the rule.
	Expression *string `json:"expression,omitempty"`
	// The type of target that the rule will notify when matched.
	TargetType *PatchV1TeamsTeamIDSignalRulesIDTargetType `json:"target_type,omitempty"`
	// The ID of the target that the rule will notify when matched.
	TargetID *string `json:"target_id,omitempty"`
	// The ID of an incident type that should be used when an alert is promoted to an incident
	IncidentTypeID *string `json:"incident_type_id,omitempty"`
	// A notification priority that will be set on the resulting alert (default: HIGH)
	NotificationPriorityOverride *PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverride `json:"notification_priority_override,omitempty"`
	// Determines when an incident should be created when this rule is matched
	CreateIncidentConditionWhen *PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhen `json:"create_incident_condition_when,omitempty"`
}

func (o *PatchV1TeamsTeamIDSignalRulesID) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PatchV1TeamsTeamIDSignalRulesID) GetExpression() *string {
	if o == nil {
		return nil
	}
	return o.Expression
}

func (o *PatchV1TeamsTeamIDSignalRulesID) GetTargetType() *PatchV1TeamsTeamIDSignalRulesIDTargetType {
	if o == nil {
		return nil
	}
	return o.TargetType
}

func (o *PatchV1TeamsTeamIDSignalRulesID) GetTargetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetID
}

func (o *PatchV1TeamsTeamIDSignalRulesID) GetIncidentTypeID() *string {
	if o == nil {
		return nil
	}
	return o.IncidentTypeID
}

func (o *PatchV1TeamsTeamIDSignalRulesID) GetNotificationPriorityOverride() *PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverride {
	if o == nil {
		return nil
	}
	return o.NotificationPriorityOverride
}

func (o *PatchV1TeamsTeamIDSignalRulesID) GetCreateIncidentConditionWhen() *PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhen {
	if o == nil {
		return nil
	}
	return o.CreateIncidentConditionWhen
}
