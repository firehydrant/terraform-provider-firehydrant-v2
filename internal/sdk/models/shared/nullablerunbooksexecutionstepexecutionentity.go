// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"time"
)

type NullableRunbooksExecutionStepExecutionEntityState string

const (
	NullableRunbooksExecutionStepExecutionEntityStateInitial   NullableRunbooksExecutionStepExecutionEntityState = "initial"
	NullableRunbooksExecutionStepExecutionEntityStatePending   NullableRunbooksExecutionStepExecutionEntityState = "pending"
	NullableRunbooksExecutionStepExecutionEntityStateScheduled NullableRunbooksExecutionStepExecutionEntityState = "scheduled"
	NullableRunbooksExecutionStepExecutionEntityStateStarted   NullableRunbooksExecutionStepExecutionEntityState = "started"
	NullableRunbooksExecutionStepExecutionEntityStateDismissed NullableRunbooksExecutionStepExecutionEntityState = "dismissed"
	NullableRunbooksExecutionStepExecutionEntityStateCompleted NullableRunbooksExecutionStepExecutionEntityState = "completed"
	NullableRunbooksExecutionStepExecutionEntityStateErrored   NullableRunbooksExecutionStepExecutionEntityState = "errored"
)

func (e NullableRunbooksExecutionStepExecutionEntityState) ToPointer() *NullableRunbooksExecutionStepExecutionEntityState {
	return &e
}
func (e *NullableRunbooksExecutionStepExecutionEntityState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initial":
		fallthrough
	case "pending":
		fallthrough
	case "scheduled":
		fallthrough
	case "started":
		fallthrough
	case "dismissed":
		fallthrough
	case "completed":
		fallthrough
	case "errored":
		*e = NullableRunbooksExecutionStepExecutionEntityState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NullableRunbooksExecutionStepExecutionEntityState: %v", v)
	}
}

type NullableRunbooksExecutionStepExecutionEntityData struct {
}

type NullableRunbooksExecutionStepExecutionEntity struct {
	State           *NullableRunbooksExecutionStepExecutionEntityState `json:"state,omitempty"`
	Data            *NullableRunbooksExecutionStepExecutionEntityData  `json:"data,omitempty"`
	PerformedBy     *NullableActorEntity                               `json:"performed_by,omitempty"`
	PerformedAt     *time.Time                                         `json:"performed_at,omitempty"`
	ScheduledFor    *time.Time                                         `json:"scheduled_for,omitempty"`
	Error           *string                                            `json:"error,omitempty"`
	WebhookDelivery *NullableRunbooksWebhookDeliveryEntity             `json:"webhook_delivery,omitempty"`
}

func (n NullableRunbooksExecutionStepExecutionEntity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NullableRunbooksExecutionStepExecutionEntity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *NullableRunbooksExecutionStepExecutionEntity) GetState() *NullableRunbooksExecutionStepExecutionEntityState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *NullableRunbooksExecutionStepExecutionEntity) GetData() *NullableRunbooksExecutionStepExecutionEntityData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *NullableRunbooksExecutionStepExecutionEntity) GetPerformedBy() *NullableActorEntity {
	if o == nil {
		return nil
	}
	return o.PerformedBy
}

func (o *NullableRunbooksExecutionStepExecutionEntity) GetPerformedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.PerformedAt
}

func (o *NullableRunbooksExecutionStepExecutionEntity) GetScheduledFor() *time.Time {
	if o == nil {
		return nil
	}
	return o.ScheduledFor
}

func (o *NullableRunbooksExecutionStepExecutionEntity) GetError() *string {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *NullableRunbooksExecutionStepExecutionEntity) GetWebhookDelivery() *NullableRunbooksWebhookDeliveryEntity {
	if o == nil {
		return nil
	}
	return o.WebhookDelivery
}
