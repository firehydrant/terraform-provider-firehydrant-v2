// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UpdateTeamSignalRuleTargetType - The type of target that the rule will notify when matched.
type UpdateTeamSignalRuleTargetType string

const (
	UpdateTeamSignalRuleTargetTypeEscalationPolicy UpdateTeamSignalRuleTargetType = "EscalationPolicy"
	UpdateTeamSignalRuleTargetTypeOnCallSchedule   UpdateTeamSignalRuleTargetType = "OnCallSchedule"
	UpdateTeamSignalRuleTargetTypeUser             UpdateTeamSignalRuleTargetType = "User"
	UpdateTeamSignalRuleTargetTypeWebhook          UpdateTeamSignalRuleTargetType = "Webhook"
	UpdateTeamSignalRuleTargetTypeSlackChannel     UpdateTeamSignalRuleTargetType = "SlackChannel"
)

func (e UpdateTeamSignalRuleTargetType) ToPointer() *UpdateTeamSignalRuleTargetType {
	return &e
}
func (e *UpdateTeamSignalRuleTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "OnCallSchedule":
		fallthrough
	case "User":
		fallthrough
	case "Webhook":
		fallthrough
	case "SlackChannel":
		*e = UpdateTeamSignalRuleTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamSignalRuleTargetType: %v", v)
	}
}

// UpdateTeamSignalRuleNotificationPriorityOverride - A notification priority that will be set on the resulting alert (default: HIGH)
type UpdateTeamSignalRuleNotificationPriorityOverride string

const (
	UpdateTeamSignalRuleNotificationPriorityOverrideHigh    UpdateTeamSignalRuleNotificationPriorityOverride = "HIGH"
	UpdateTeamSignalRuleNotificationPriorityOverrideMedium  UpdateTeamSignalRuleNotificationPriorityOverride = "MEDIUM"
	UpdateTeamSignalRuleNotificationPriorityOverrideLow     UpdateTeamSignalRuleNotificationPriorityOverride = "LOW"
	UpdateTeamSignalRuleNotificationPriorityOverrideUnknown UpdateTeamSignalRuleNotificationPriorityOverride = ""
)

func (e UpdateTeamSignalRuleNotificationPriorityOverride) ToPointer() *UpdateTeamSignalRuleNotificationPriorityOverride {
	return &e
}
func (e *UpdateTeamSignalRuleNotificationPriorityOverride) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		fallthrough
	case "":
		*e = UpdateTeamSignalRuleNotificationPriorityOverride(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamSignalRuleNotificationPriorityOverride: %v", v)
	}
}

// UpdateTeamSignalRuleCreateIncidentConditionWhen - Determines when an incident should be created when this rule is matched
type UpdateTeamSignalRuleCreateIncidentConditionWhen string

const (
	UpdateTeamSignalRuleCreateIncidentConditionWhenWhenUnspecified UpdateTeamSignalRuleCreateIncidentConditionWhen = "WHEN_UNSPECIFIED"
	UpdateTeamSignalRuleCreateIncidentConditionWhenWhenAlways      UpdateTeamSignalRuleCreateIncidentConditionWhen = "WHEN_ALWAYS"
)

func (e UpdateTeamSignalRuleCreateIncidentConditionWhen) ToPointer() *UpdateTeamSignalRuleCreateIncidentConditionWhen {
	return &e
}
func (e *UpdateTeamSignalRuleCreateIncidentConditionWhen) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WHEN_UNSPECIFIED":
		fallthrough
	case "WHEN_ALWAYS":
		*e = UpdateTeamSignalRuleCreateIncidentConditionWhen(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamSignalRuleCreateIncidentConditionWhen: %v", v)
	}
}

// UpdateTeamSignalRule - Update a Signals rule by ID
type UpdateTeamSignalRule struct {
	// The rule's name.
	Name *string `json:"name,omitempty"`
	// The CEL expression that defines the rule.
	Expression *string `json:"expression,omitempty"`
	// The type of target that the rule will notify when matched.
	TargetType *UpdateTeamSignalRuleTargetType `json:"target_type,omitempty"`
	// The ID of the target that the rule will notify when matched.
	TargetID *string `json:"target_id,omitempty"`
	// The ID of an incident type that should be used when an alert is promoted to an incident
	IncidentTypeID *string `json:"incident_type_id,omitempty"`
	// A notification priority that will be set on the resulting alert (default: HIGH)
	NotificationPriorityOverride *UpdateTeamSignalRuleNotificationPriorityOverride `json:"notification_priority_override,omitempty"`
	// Determines when an incident should be created when this rule is matched
	CreateIncidentConditionWhen *UpdateTeamSignalRuleCreateIncidentConditionWhen `json:"create_incident_condition_when,omitempty"`
	// The amount of time alerts created from this rule will be deduplicated
	DeduplicationExpiry *string `json:"deduplication_expiry,omitempty"`
}

func (o *UpdateTeamSignalRule) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateTeamSignalRule) GetExpression() *string {
	if o == nil {
		return nil
	}
	return o.Expression
}

func (o *UpdateTeamSignalRule) GetTargetType() *UpdateTeamSignalRuleTargetType {
	if o == nil {
		return nil
	}
	return o.TargetType
}

func (o *UpdateTeamSignalRule) GetTargetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetID
}

func (o *UpdateTeamSignalRule) GetIncidentTypeID() *string {
	if o == nil {
		return nil
	}
	return o.IncidentTypeID
}

func (o *UpdateTeamSignalRule) GetNotificationPriorityOverride() *UpdateTeamSignalRuleNotificationPriorityOverride {
	if o == nil {
		return nil
	}
	return o.NotificationPriorityOverride
}

func (o *UpdateTeamSignalRule) GetCreateIncidentConditionWhen() *UpdateTeamSignalRuleCreateIncidentConditionWhen {
	if o == nil {
		return nil
	}
	return o.CreateIncidentConditionWhen
}

func (o *UpdateTeamSignalRule) GetDeduplicationExpiry() *string {
	if o == nil {
		return nil
	}
	return o.DeduplicationExpiry
}
