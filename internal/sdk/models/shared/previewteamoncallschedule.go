// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type PreviewTeamOnCallScheduleMember struct {
	// The ID of a user who should be added to the rotation. You can add a user to the rotation
	// multiple times to construct more complex rotations, and you can specify a `null` user ID to create
	// unassigned slots in the rotation.
	//
	UserID *string `json:"user_id,omitempty"`
}

func (o *PreviewTeamOnCallScheduleMember) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

type PreviewTeamOnCallScheduleRestriction struct {
	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	EndDay string `json:"end_day"`
	// An ISO8601 time string specifying when the restriction should end.
	EndTime string `json:"end_time"`
	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	StartDay string `json:"start_day"`
	// An ISO8601 time string specifying when the restriction should start.
	StartTime string `json:"start_time"`
}

func (o *PreviewTeamOnCallScheduleRestriction) GetEndDay() string {
	if o == nil {
		return ""
	}
	return o.EndDay
}

func (o *PreviewTeamOnCallScheduleRestriction) GetEndTime() string {
	if o == nil {
		return ""
	}
	return o.EndTime
}

func (o *PreviewTeamOnCallScheduleRestriction) GetStartDay() string {
	if o == nil {
		return ""
	}
	return o.StartDay
}

func (o *PreviewTeamOnCallScheduleRestriction) GetStartTime() string {
	if o == nil {
		return ""
	}
	return o.StartTime
}

// PreviewTeamOnCallScheduleStrategy - An object that specifies how the rotation's on-call shifts should be generated.
type PreviewTeamOnCallScheduleStrategy struct {
	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	HandoffDay *string `json:"handoff_day,omitempty"`
	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime *string `json:"handoff_time,omitempty"`
	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration *string `json:"shift_duration,omitempty"`
	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	Type string `json:"type"`
}

func (o *PreviewTeamOnCallScheduleStrategy) GetHandoffDay() *string {
	if o == nil {
		return nil
	}
	return o.HandoffDay
}

func (o *PreviewTeamOnCallScheduleStrategy) GetHandoffTime() *string {
	if o == nil {
		return nil
	}
	return o.HandoffTime
}

func (o *PreviewTeamOnCallScheduleStrategy) GetShiftDuration() *string {
	if o == nil {
		return nil
	}
	return o.ShiftDuration
}

func (o *PreviewTeamOnCallScheduleStrategy) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type Rotation struct {
	// A hex color code that will be used to represent the rotation in FireHydrant's UI.
	Color *string `json:"color,omitempty"`
	// An ISO8601 duration string specifying that the team should be notified about gaps in coverage for the upcoming interval. Notifications are sent at 9am daily in the rotation's time zone via email and, if enabled, the team's Slack channel.
	CoverageGapNotificationInterval *string `json:"coverage_gap_notification_interval,omitempty"`
	// A detailed description of the on-call schedule.
	Description *string `json:"description,omitempty"`
	// Notify the team's Slack channel when handoffs occur
	EnableSlackChannelNotifications *bool `json:"enable_slack_channel_notifications,omitempty"`
	// An ordered list of objects that specify members of the schedule's rotation.
	Members []PreviewTeamOnCallScheduleMember `json:"members,omitempty"`
	// The name of the on-call rotation
	Name string `json:"name"`
	// Prevent shifts from being deleted by users and leading to gaps in coverage.
	PreventShiftDeletion *bool `json:"prevent_shift_deletion,omitempty"`
	// A list of objects that restrict the rotation to specific on-call periods.
	Restrictions []PreviewTeamOnCallScheduleRestriction `json:"restrictions,omitempty"`
	// The Slack Usergroup ID for the on-call rotation
	SlackUserGroupID *string `json:"slack_user_group_id,omitempty"`
	// An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom".
	StartTime *string `json:"start_time,omitempty"`
	// An object that specifies how the rotation's on-call shifts should be generated.
	Strategy PreviewTeamOnCallScheduleStrategy `json:"strategy"`
	// The timezone of the on-call rotation as a string
	TimeZone string `json:"time_zone"`
}

func (o *Rotation) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *Rotation) GetCoverageGapNotificationInterval() *string {
	if o == nil {
		return nil
	}
	return o.CoverageGapNotificationInterval
}

func (o *Rotation) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Rotation) GetEnableSlackChannelNotifications() *bool {
	if o == nil {
		return nil
	}
	return o.EnableSlackChannelNotifications
}

func (o *Rotation) GetMembers() []PreviewTeamOnCallScheduleMember {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *Rotation) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Rotation) GetPreventShiftDeletion() *bool {
	if o == nil {
		return nil
	}
	return o.PreventShiftDeletion
}

func (o *Rotation) GetRestrictions() []PreviewTeamOnCallScheduleRestriction {
	if o == nil {
		return nil
	}
	return o.Restrictions
}

func (o *Rotation) GetSlackUserGroupID() *string {
	if o == nil {
		return nil
	}
	return o.SlackUserGroupID
}

func (o *Rotation) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *Rotation) GetStrategy() PreviewTeamOnCallScheduleStrategy {
	if o == nil {
		return PreviewTeamOnCallScheduleStrategy{}
	}
	return o.Strategy
}

func (o *Rotation) GetTimeZone() string {
	if o == nil {
		return ""
	}
	return o.TimeZone
}

// PreviewTeamOnCallSchedule - Preview a new on-call schedule based on the provided rotations, allowing you to see how the schedule will look before saving it.
type PreviewTeamOnCallSchedule struct {
	// A detailed description of the on-call schedule.
	Description *string `json:"description,omitempty"`
	// An ISO8601 time string specifying the start of the time window to preview. Defaults to now.
	From *string `json:"from,omitempty"`
	// The on-call schedule's name.
	Name string `json:"name"`
	// An array of objects that specify rotations for the schedule. If not provided, the deprecated single-rotation parameters can be used instead, with `time_zone` and `strategy` being required.
	Rotations []Rotation `json:"rotations"`
	// An ISO8601 time string specifying the end of the time window to preview. Defaults to two weeks from now.
	To *string `json:"to,omitempty"`
}

func (o *PreviewTeamOnCallSchedule) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PreviewTeamOnCallSchedule) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *PreviewTeamOnCallSchedule) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PreviewTeamOnCallSchedule) GetRotations() []Rotation {
	if o == nil {
		return []Rotation{}
	}
	return o.Rotations
}

func (o *PreviewTeamOnCallSchedule) GetTo() *string {
	if o == nil {
		return nil
	}
	return o.To
}
