// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type UpdateRunbookAttachmentRuleInput struct {
	// The JSON logic for the attaching the runbook
	Logic string `json:"logic"`
	// The user data for the rule
	UserData *string `json:"user_data,omitempty"`
}

func (o *UpdateRunbookAttachmentRuleInput) GetLogic() string {
	if o == nil {
		return ""
	}
	return o.Logic
}

func (o *UpdateRunbookAttachmentRuleInput) GetUserData() *string {
	if o == nil {
		return nil
	}
	return o.UserData
}

type Environment struct {
	ID *string `json:"id,omitempty"`
}

func (o *Environment) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// UpdateRunbookOwnerInput - An object representing a Team that owns the runbook
type UpdateRunbookOwnerInput struct {
	ID *string `json:"id,omitempty"`
}

func (o *UpdateRunbookOwnerInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type Service struct {
	ID *string `json:"id,omitempty"`
}

func (o *Service) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type UpdateRunbookSeverity struct {
	ID *string `json:"id,omitempty"`
}

func (o *UpdateRunbookSeverity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type UpdateRunbookRule struct {
	// The JSON logic for the rule
	Logic string `json:"logic"`
	// The user data for the rule
	UserData *string `json:"user_data,omitempty"`
}

func (o *UpdateRunbookRule) GetLogic() string {
	if o == nil {
		return ""
	}
	return o.Logic
}

func (o *UpdateRunbookRule) GetUserData() *string {
	if o == nil {
		return nil
	}
	return o.UserData
}

type UpdateRunbookStepsInput struct {
	// ID of action to use for this step.
	ActionID string `json:"action_id"`
	// Name for step
	Name string             `json:"name"`
	Rule *UpdateRunbookRule `json:"rule,omitempty"`
	// ID of step to be updated
	StepID *string `json:"step_id,omitempty"`
}

func (o *UpdateRunbookStepsInput) GetActionID() string {
	if o == nil {
		return ""
	}
	return o.ActionID
}

func (o *UpdateRunbookStepsInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateRunbookStepsInput) GetRule() *UpdateRunbookRule {
	if o == nil {
		return nil
	}
	return o.Rule
}

func (o *UpdateRunbookStepsInput) GetStepID() *string {
	if o == nil {
		return nil
	}
	return o.StepID
}

// UpdateRunbook - Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything
// about a runbook, including but not limited to the steps, environments, attachment rules, and severities.
type UpdateRunbook struct {
	AttachmentRuleInput *UpdateRunbookAttachmentRuleInput `json:"attachment_rule,omitempty"`
	// Whether or not this runbook should be automatically attached to restricted incidents. Note that setting this to `true` will prevent it from being attached to public incidents, even manually. Defaults to `false`.
	AutoAttachToRestrictedIncidents *bool         `json:"auto_attach_to_restricted_incidents,omitempty"`
	Description                     *string       `json:"description,omitempty"`
	Environments                    []Environment `json:"environments,omitempty"`
	Name                            *string       `json:"name,omitempty"`
	// An object representing a Team that owns the runbook
	OwnerInput *UpdateRunbookOwnerInput  `json:"owner,omitempty"`
	Services   []Service                 `json:"services,omitempty"`
	Severities []UpdateRunbookSeverity   `json:"severities,omitempty"`
	StepsInput []UpdateRunbookStepsInput `json:"steps,omitempty"`
	Summary    *string                   `json:"summary,omitempty"`
	// Whether or not this runbook is a tutorial runbook
	Tutorial *bool `json:"tutorial,omitempty"`
}

func (o *UpdateRunbook) GetAttachmentRuleInput() *UpdateRunbookAttachmentRuleInput {
	if o == nil {
		return nil
	}
	return o.AttachmentRuleInput
}

func (o *UpdateRunbook) GetAutoAttachToRestrictedIncidents() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAttachToRestrictedIncidents
}

func (o *UpdateRunbook) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateRunbook) GetEnvironments() []Environment {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *UpdateRunbook) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateRunbook) GetOwnerInput() *UpdateRunbookOwnerInput {
	if o == nil {
		return nil
	}
	return o.OwnerInput
}

func (o *UpdateRunbook) GetServices() []Service {
	if o == nil {
		return nil
	}
	return o.Services
}

func (o *UpdateRunbook) GetSeverities() []UpdateRunbookSeverity {
	if o == nil {
		return nil
	}
	return o.Severities
}

func (o *UpdateRunbook) GetStepsInput() []UpdateRunbookStepsInput {
	if o == nil {
		return nil
	}
	return o.StepsInput
}

func (o *UpdateRunbook) GetSummary() *string {
	if o == nil {
		return nil
	}
	return o.Summary
}

func (o *UpdateRunbook) GetTutorial() *bool {
	if o == nil {
		return nil
	}
	return o.Tutorial
}
