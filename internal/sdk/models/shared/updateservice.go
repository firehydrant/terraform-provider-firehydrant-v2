// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ChecklistsInput struct {
	ID string `json:"id"`
	// Set to `true` to remove checklist from service
	Remove *bool `json:"remove,omitempty"`
}

func (o *ChecklistsInput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ChecklistsInput) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

type UpdateServiceExternalResourcesInput struct {
	// The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, victorops. Not required if the resource has already been imported.
	ConnectionType *string `json:"connection_type,omitempty"`
	RemoteID       string  `json:"remote_id"`
	// If you are trying to remove an external resource from a service, set this to 'true'.
	Remove *bool `json:"remove,omitempty"`
}

func (o *UpdateServiceExternalResourcesInput) GetConnectionType() *string {
	if o == nil {
		return nil
	}
	return o.ConnectionType
}

func (o *UpdateServiceExternalResourcesInput) GetRemoteID() string {
	if o == nil {
		return ""
	}
	return o.RemoteID
}

func (o *UpdateServiceExternalResourcesInput) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

type UpdateServiceFunctionalitiesInput struct {
	// If you are trying to reuse a functionality, you may set the ID to attach it to the service
	ID *string `json:"id,omitempty"`
	// If you are trying to remove a functionality from a service, set this to 'true'
	Remove *bool `json:"remove,omitempty"`
	// If you are trying to create a new functionality and attach it to this service, set the summary key
	Summary *string `json:"summary,omitempty"`
}

func (o *UpdateServiceFunctionalitiesInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateServiceFunctionalitiesInput) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

func (o *UpdateServiceFunctionalitiesInput) GetSummary() *string {
	if o == nil {
		return nil
	}
	return o.Summary
}

type UpdateServiceLinksInput struct {
	// URL
	HrefURL string `json:"href_url"`
	// An optional URL to an icon representing this link
	IconURL *string `json:"icon_url,omitempty"`
	// If updating an existing link, specify it's id.
	ID *string `json:"id,omitempty"`
	// Short name used to display and identify this link
	Name string `json:"name"`
	// If you are trying to remove a link, set this to 'true'
	Remove *bool `json:"remove,omitempty"`
}

func (o *UpdateServiceLinksInput) GetHrefURL() string {
	if o == nil {
		return ""
	}
	return o.HrefURL
}

func (o *UpdateServiceLinksInput) GetIconURL() *string {
	if o == nil {
		return nil
	}
	return o.IconURL
}

func (o *UpdateServiceLinksInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateServiceLinksInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateServiceLinksInput) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

// UpdateServiceOwnerInput - An object representing a Team that owns the service
type UpdateServiceOwnerInput struct {
	ID string `json:"id"`
}

func (o *UpdateServiceOwnerInput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// UpdateServiceServiceTier - Integer representing service tier
type UpdateServiceServiceTier int

const (
	UpdateServiceServiceTierZero  UpdateServiceServiceTier = 0
	UpdateServiceServiceTierOne   UpdateServiceServiceTier = 1
	UpdateServiceServiceTierTwo   UpdateServiceServiceTier = 2
	UpdateServiceServiceTierThree UpdateServiceServiceTier = 3
	UpdateServiceServiceTierFour  UpdateServiceServiceTier = 4
	UpdateServiceServiceTierFive  UpdateServiceServiceTier = 5
)

func (e UpdateServiceServiceTier) ToPointer() *UpdateServiceServiceTier {
	return &e
}
func (e *UpdateServiceServiceTier) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		*e = UpdateServiceServiceTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServiceServiceTier: %v", v)
	}
}

type UpdateServiceTeamsInput struct {
	ID string `json:"id"`
	// If you are trying to remove a team from a service, set this to 'true'
	Remove *bool `json:"remove,omitempty"`
}

func (o *UpdateServiceTeamsInput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateServiceTeamsInput) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

// UpdateService - Update a services attributes, you may also add or remove functionalities from the service as well.
// Note: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.
type UpdateService struct {
	AlertOnAdd            *bool `json:"alert_on_add,omitempty"`
	AutoAddRespondingTeam *bool `json:"auto_add_responding_team,omitempty"`
	// Array of checklist IDs to attach to the service
	ChecklistsInput []ChecklistsInput `json:"checklists,omitempty"`
	Description     *string           `json:"description,omitempty"`
	// An array of external resources to attach to this service.
	ExternalResourcesInput []UpdateServiceExternalResourcesInput `json:"external_resources,omitempty"`
	// An array of functionalities
	FunctionalitiesInput []UpdateServiceFunctionalitiesInput `json:"functionalities,omitempty"`
	// A hash of label keys and values
	Labels map[string]any `json:"labels,omitempty"`
	// An array of links to associate with this service. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.
	LinksInput []UpdateServiceLinksInput `json:"links,omitempty"`
	Name       *string                   `json:"name,omitempty"`
	// An object representing a Team that owns the service
	OwnerInput *UpdateServiceOwnerInput `json:"owner,omitempty"`
	// If you are trying to remove a team as an owner from a service, set this to 'true'
	RemoveOwner *bool `json:"remove_owner,omitempty"`
	// If set to true, any checklists tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the checklists
	RemoveRemainingChecklists *bool `json:"remove_remaining_checklists,omitempty"`
	// If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources
	RemoveRemainingExternalResources *bool `json:"remove_remaining_external_resources,omitempty"`
	// If set to true, any functionalities tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the functionalities
	RemoveRemainingFunctionalities *bool `json:"remove_remaining_functionalities,omitempty"`
	// If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams
	RemoveRemainingTeams *bool `json:"remove_remaining_teams,omitempty"`
	// Integer representing service tier
	ServiceTier *UpdateServiceServiceTier `json:"service_tier,omitempty"`
	// An array of teams to attach to this service.
	TeamsInput []UpdateServiceTeamsInput `json:"teams,omitempty"`
}

func (o *UpdateService) GetAlertOnAdd() *bool {
	if o == nil {
		return nil
	}
	return o.AlertOnAdd
}

func (o *UpdateService) GetAutoAddRespondingTeam() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAddRespondingTeam
}

func (o *UpdateService) GetChecklistsInput() []ChecklistsInput {
	if o == nil {
		return nil
	}
	return o.ChecklistsInput
}

func (o *UpdateService) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateService) GetExternalResourcesInput() []UpdateServiceExternalResourcesInput {
	if o == nil {
		return nil
	}
	return o.ExternalResourcesInput
}

func (o *UpdateService) GetFunctionalitiesInput() []UpdateServiceFunctionalitiesInput {
	if o == nil {
		return nil
	}
	return o.FunctionalitiesInput
}

func (o *UpdateService) GetLabels() map[string]any {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *UpdateService) GetLinksInput() []UpdateServiceLinksInput {
	if o == nil {
		return nil
	}
	return o.LinksInput
}

func (o *UpdateService) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateService) GetOwnerInput() *UpdateServiceOwnerInput {
	if o == nil {
		return nil
	}
	return o.OwnerInput
}

func (o *UpdateService) GetRemoveOwner() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveOwner
}

func (o *UpdateService) GetRemoveRemainingChecklists() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingChecklists
}

func (o *UpdateService) GetRemoveRemainingExternalResources() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingExternalResources
}

func (o *UpdateService) GetRemoveRemainingFunctionalities() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingFunctionalities
}

func (o *UpdateService) GetRemoveRemainingTeams() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingTeams
}

func (o *UpdateService) GetServiceTier() *UpdateServiceServiceTier {
	if o == nil {
		return nil
	}
	return o.ServiceTier
}

func (o *UpdateService) GetTeamsInput() []UpdateServiceTeamsInput {
	if o == nil {
		return nil
	}
	return o.TeamsInput
}
