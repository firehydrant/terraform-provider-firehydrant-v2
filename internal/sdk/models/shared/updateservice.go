// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Checklist struct {
	ID string `json:"id"`
	// Set to `true` to remove checklist from service
	Remove *bool `json:"remove,omitempty"`
}

func (o *Checklist) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Checklist) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

type UpdateServiceExternalResource struct {
	RemoteID string `json:"remote_id"`
	// The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, victorops. Not required if the resource has already been imported.
	ConnectionType *string `json:"connection_type,omitempty"`
	// If you are trying to remove an external resource from a service, set this to 'true'.
	Remove *bool `json:"remove,omitempty"`
}

func (o *UpdateServiceExternalResource) GetRemoteID() string {
	if o == nil {
		return ""
	}
	return o.RemoteID
}

func (o *UpdateServiceExternalResource) GetConnectionType() *string {
	if o == nil {
		return nil
	}
	return o.ConnectionType
}

func (o *UpdateServiceExternalResource) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

type UpdateServiceFunctionality struct {
	// If you are trying to reuse a functionality, you may set the ID to attach it to the service
	ID *string `json:"id,omitempty"`
	// If you are trying to remove a functionality from a service, set this to 'true'
	Remove *bool `json:"remove,omitempty"`
	// If you are trying to create a new functionality and attach it to this service, set the summary key
	Summary *string `json:"summary,omitempty"`
}

func (o *UpdateServiceFunctionality) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateServiceFunctionality) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

func (o *UpdateServiceFunctionality) GetSummary() *string {
	if o == nil {
		return nil
	}
	return o.Summary
}

type UpdateServiceLink struct {
	// URL
	HrefURL string `json:"href_url"`
	// Short name used to display and identify this link
	Name string `json:"name"`
	// An optional URL to an icon representing this link
	IconURL *string `json:"icon_url,omitempty"`
	// If you are trying to remove a link, set this to 'true'
	Remove *bool `json:"remove,omitempty"`
	// If updating an existing link, specify it's id.
	ID *string `json:"id,omitempty"`
}

func (o *UpdateServiceLink) GetHrefURL() string {
	if o == nil {
		return ""
	}
	return o.HrefURL
}

func (o *UpdateServiceLink) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateServiceLink) GetIconURL() *string {
	if o == nil {
		return nil
	}
	return o.IconURL
}

func (o *UpdateServiceLink) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

func (o *UpdateServiceLink) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// UpdateServiceOwner - An object representing a Team that owns the service
type UpdateServiceOwner struct {
	ID string `json:"id"`
}

func (o *UpdateServiceOwner) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// UpdateServiceServiceTier - Integer representing service tier
type UpdateServiceServiceTier int

const (
	UpdateServiceServiceTierZero  UpdateServiceServiceTier = 0
	UpdateServiceServiceTierOne   UpdateServiceServiceTier = 1
	UpdateServiceServiceTierTwo   UpdateServiceServiceTier = 2
	UpdateServiceServiceTierThree UpdateServiceServiceTier = 3
	UpdateServiceServiceTierFour  UpdateServiceServiceTier = 4
	UpdateServiceServiceTierFive  UpdateServiceServiceTier = 5
)

func (e UpdateServiceServiceTier) ToPointer() *UpdateServiceServiceTier {
	return &e
}
func (e *UpdateServiceServiceTier) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		*e = UpdateServiceServiceTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServiceServiceTier: %v", v)
	}
}

type UpdateServiceTeam struct {
	ID string `json:"id"`
	// If you are trying to remove a team from a service, set this to 'true'
	Remove *bool `json:"remove,omitempty"`
}

func (o *UpdateServiceTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateServiceTeam) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

// UpdateService - Update a services attributes, you may also add or remove functionalities from the service as well.
// Note: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.
type UpdateService struct {
	AlertOnAdd            *bool `json:"alert_on_add,omitempty"`
	AutoAddRespondingTeam *bool `json:"auto_add_responding_team,omitempty"`
	// Array of checklist IDs to attach to the service
	Checklists  []Checklist `json:"checklists,omitempty"`
	Description *string     `json:"description,omitempty"`
	// An array of external resources to attach to this service.
	ExternalResources []UpdateServiceExternalResource `json:"external_resources,omitempty"`
	// An array of functionalities
	Functionalities []UpdateServiceFunctionality `json:"functionalities,omitempty"`
	// A hash of label keys and values
	Labels map[string]string `json:"labels,omitempty"`
	// An array of links to associate with this service. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.
	Links []UpdateServiceLink `json:"links,omitempty"`
	Name  *string             `json:"name,omitempty"`
	// An object representing a Team that owns the service
	Owner *UpdateServiceOwner `json:"owner,omitempty"`
	// If you are trying to remove a team as an owner from a service, set this to 'true'
	RemoveOwner *bool `json:"remove_owner,omitempty"`
	// If set to true, any checklists tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the checklists
	RemoveRemainingChecklists *bool `json:"remove_remaining_checklists,omitempty"`
	// If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources
	RemoveRemainingExternalResources *bool `json:"remove_remaining_external_resources,omitempty"`
	// If set to true, any functionalities tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the functionalities
	RemoveRemainingFunctionalities *bool `json:"remove_remaining_functionalities,omitempty"`
	// If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams
	RemoveRemainingTeams *bool `json:"remove_remaining_teams,omitempty"`
	// Integer representing service tier
	ServiceTier *UpdateServiceServiceTier `json:"service_tier,omitempty"`
	// An array of teams to attach to this service.
	Teams []UpdateServiceTeam `json:"teams,omitempty"`
}

func (o *UpdateService) GetAlertOnAdd() *bool {
	if o == nil {
		return nil
	}
	return o.AlertOnAdd
}

func (o *UpdateService) GetAutoAddRespondingTeam() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAddRespondingTeam
}

func (o *UpdateService) GetChecklists() []Checklist {
	if o == nil {
		return nil
	}
	return o.Checklists
}

func (o *UpdateService) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateService) GetExternalResources() []UpdateServiceExternalResource {
	if o == nil {
		return nil
	}
	return o.ExternalResources
}

func (o *UpdateService) GetFunctionalities() []UpdateServiceFunctionality {
	if o == nil {
		return nil
	}
	return o.Functionalities
}

func (o *UpdateService) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *UpdateService) GetLinks() []UpdateServiceLink {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *UpdateService) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateService) GetOwner() *UpdateServiceOwner {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *UpdateService) GetRemoveOwner() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveOwner
}

func (o *UpdateService) GetRemoveRemainingChecklists() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingChecklists
}

func (o *UpdateService) GetRemoveRemainingExternalResources() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingExternalResources
}

func (o *UpdateService) GetRemoveRemainingFunctionalities() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingFunctionalities
}

func (o *UpdateService) GetRemoveRemainingTeams() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingTeams
}

func (o *UpdateService) GetServiceTier() *UpdateServiceServiceTier {
	if o == nil {
		return nil
	}
	return o.ServiceTier
}

func (o *UpdateService) GetTeams() []UpdateServiceTeam {
	if o == nil {
		return nil
	}
	return o.Teams
}
