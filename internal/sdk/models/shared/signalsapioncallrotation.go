// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"time"
)

// SignalsAPIOnCallRotation - Signals_API_OnCallRotation model
type SignalsAPIOnCallRotation struct {
	Color                           *string                           `json:"color,omitempty"`
	CoverageGapNotificationInterval *string                           `json:"coverage_gap_notification_interval,omitempty"`
	CreatedAt                       *time.Time                        `json:"created_at,omitempty"`
	CreatedBy                       *NullableAuthor                   `json:"created_by,omitempty"`
	Description                     *string                           `json:"description,omitempty"`
	EnableSlackChannelNotifications *bool                             `json:"enable_slack_channel_notifications,omitempty"`
	ID                              *string                           `json:"id,omitempty"`
	Members                         []Succinct                        `json:"members,omitempty"`
	Name                            *string                           `json:"name,omitempty"`
	PreventShiftDeletion            *bool                             `json:"prevent_shift_deletion,omitempty"`
	Restrictions                    []SignalsAPIOnCallRestriction     `json:"restrictions,omitempty"`
	Shifts                          []SignalsAPIOnCallShift           `json:"shifts,omitempty"`
	SlackUserGroupID                *string                           `json:"slack_user_group_id,omitempty"`
	Strategy                        *NullableSignalsAPIOnCallStrategy `json:"strategy,omitempty"`
	Team                            *NullableSuccinct                 `json:"team,omitempty"`
	TimeZone                        *string                           `json:"time_zone,omitempty"`
	UpdatedAt                       *time.Time                        `json:"updated_at,omitempty"`
}

func (s SignalsAPIOnCallRotation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SignalsAPIOnCallRotation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SignalsAPIOnCallRotation) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *SignalsAPIOnCallRotation) GetCoverageGapNotificationInterval() *string {
	if o == nil {
		return nil
	}
	return o.CoverageGapNotificationInterval
}

func (o *SignalsAPIOnCallRotation) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *SignalsAPIOnCallRotation) GetCreatedBy() *NullableAuthor {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *SignalsAPIOnCallRotation) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *SignalsAPIOnCallRotation) GetEnableSlackChannelNotifications() *bool {
	if o == nil {
		return nil
	}
	return o.EnableSlackChannelNotifications
}

func (o *SignalsAPIOnCallRotation) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SignalsAPIOnCallRotation) GetMembers() []Succinct {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *SignalsAPIOnCallRotation) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *SignalsAPIOnCallRotation) GetPreventShiftDeletion() *bool {
	if o == nil {
		return nil
	}
	return o.PreventShiftDeletion
}

func (o *SignalsAPIOnCallRotation) GetRestrictions() []SignalsAPIOnCallRestriction {
	if o == nil {
		return nil
	}
	return o.Restrictions
}

func (o *SignalsAPIOnCallRotation) GetShifts() []SignalsAPIOnCallShift {
	if o == nil {
		return nil
	}
	return o.Shifts
}

func (o *SignalsAPIOnCallRotation) GetSlackUserGroupID() *string {
	if o == nil {
		return nil
	}
	return o.SlackUserGroupID
}

func (o *SignalsAPIOnCallRotation) GetStrategy() *NullableSignalsAPIOnCallStrategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}

func (o *SignalsAPIOnCallRotation) GetTeam() *NullableSuccinct {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *SignalsAPIOnCallRotation) GetTimeZone() *string {
	if o == nil {
		return nil
	}
	return o.TimeZone
}

func (o *SignalsAPIOnCallRotation) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
