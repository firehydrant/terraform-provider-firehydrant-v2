// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"time"
)

// IncidentEventEntityData - Can be one of: NoteEntity, TourStepEntity, RootCauseEntity, ChangeTypeEntity, RoleUpdateEntity, TaskUpdateEntity, AlertLinkedEntity, ChatMessageEntity, AddTaskListEntity, ImpactUpdateEntity, TicketUpdateEntity, GeneralUpdateEntity, ChangelogEntryEntity, IncidentStatusEntity, TeamAssignmentEntity, BulkUpdateEntity
type IncidentEventEntityData struct {
}

type IncidentEventEntityVisibility string

const (
	IncidentEventEntityVisibilityPrivateToOrg       IncidentEventEntityVisibility = "private_to_org"
	IncidentEventEntityVisibilityOpenToPublic       IncidentEventEntityVisibility = "open_to_public"
	IncidentEventEntityVisibilityInternalStatusPage IncidentEventEntityVisibility = "internal_status_page"
)

func (e IncidentEventEntityVisibility) ToPointer() *IncidentEventEntityVisibility {
	return &e
}
func (e *IncidentEventEntityVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private_to_org":
		fallthrough
	case "open_to_public":
		fallthrough
	case "internal_status_page":
		*e = IncidentEventEntityVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IncidentEventEntityVisibility: %v", v)
	}
}

// IncidentEventEntity model
type IncidentEventEntity struct {
	ID         *string `json:"id,omitempty"`
	IncidentID *string `json:"incident_id,omitempty"`
	Type       *string `json:"type,omitempty"`
	Context    *string `json:"context,omitempty"`
	// Can be one of: NoteEntity, TourStepEntity, RootCauseEntity, ChangeTypeEntity, RoleUpdateEntity, TaskUpdateEntity, AlertLinkedEntity, ChatMessageEntity, AddTaskListEntity, ImpactUpdateEntity, TicketUpdateEntity, GeneralUpdateEntity, ChangelogEntryEntity, IncidentStatusEntity, TeamAssignmentEntity, BulkUpdateEntity
	Data          *IncidentEventEntityData            `json:"data,omitempty"`
	OccurredAt    *time.Time                          `json:"occurred_at,omitempty"`
	Visibility    *IncidentEventEntityVisibility      `json:"visibility,omitempty"`
	Author        *NullableAuthorEntity               `json:"author,omitempty"`
	Votes         *NullableVotesEntity                `json:"votes,omitempty"`
	Conversations []ConversationsAPIEntitiesReference `json:"conversations,omitempty"`
}

func (i IncidentEventEntity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IncidentEventEntity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *IncidentEventEntity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *IncidentEventEntity) GetIncidentID() *string {
	if o == nil {
		return nil
	}
	return o.IncidentID
}

func (o *IncidentEventEntity) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *IncidentEventEntity) GetContext() *string {
	if o == nil {
		return nil
	}
	return o.Context
}

func (o *IncidentEventEntity) GetData() *IncidentEventEntityData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *IncidentEventEntity) GetOccurredAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.OccurredAt
}

func (o *IncidentEventEntity) GetVisibility() *IncidentEventEntityVisibility {
	if o == nil {
		return nil
	}
	return o.Visibility
}

func (o *IncidentEventEntity) GetAuthor() *NullableAuthorEntity {
	if o == nil {
		return nil
	}
	return o.Author
}

func (o *IncidentEventEntity) GetVotes() *NullableVotesEntity {
	if o == nil {
		return nil
	}
	return o.Votes
}

func (o *IncidentEventEntity) GetConversations() []ConversationsAPIEntitiesReference {
	if o == nil {
		return nil
	}
	return o.Conversations
}
