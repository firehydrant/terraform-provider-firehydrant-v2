// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"time"
)

type NullableTicketingTicketEntityState string

const (
	NullableTicketingTicketEntityStateOpen       NullableTicketingTicketEntityState = "open"
	NullableTicketingTicketEntityStateInProgress NullableTicketingTicketEntityState = "in_progress"
	NullableTicketingTicketEntityStateCancelled  NullableTicketingTicketEntityState = "cancelled"
	NullableTicketingTicketEntityStateDone       NullableTicketingTicketEntityState = "done"
)

func (e NullableTicketingTicketEntityState) ToPointer() *NullableTicketingTicketEntityState {
	return &e
}
func (e *NullableTicketingTicketEntityState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "in_progress":
		fallthrough
	case "cancelled":
		fallthrough
	case "done":
		*e = NullableTicketingTicketEntityState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NullableTicketingTicketEntityState: %v", v)
	}
}

type NullableTicketingTicketEntityType string

const (
	NullableTicketingTicketEntityTypeIncident NullableTicketingTicketEntityType = "incident"
	NullableTicketingTicketEntityTypeTask     NullableTicketingTicketEntityType = "task"
	NullableTicketingTicketEntityTypeFollowUp NullableTicketingTicketEntityType = "follow_up"
)

func (e NullableTicketingTicketEntityType) ToPointer() *NullableTicketingTicketEntityType {
	return &e
}
func (e *NullableTicketingTicketEntityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "incident":
		fallthrough
	case "task":
		fallthrough
	case "follow_up":
		*e = NullableTicketingTicketEntityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NullableTicketingTicketEntityType: %v", v)
	}
}

type NullableTicketingTicketEntityAttachment struct {
}

// NullableTicketingTicketEntity - Ticketing_TicketEntity model
type NullableTicketingTicketEntity struct {
	ID          *string                             `json:"id,omitempty"`
	Summary     *string                             `json:"summary,omitempty"`
	Description *string                             `json:"description,omitempty"`
	State       *NullableTicketingTicketEntityState `json:"state,omitempty"`
	Type        *NullableTicketingTicketEntityType  `json:"type,omitempty"`
	Assignees   []AuthorEntity                      `json:"assignees,omitempty"`
	Priority    *NullableTicketingPriorityEntity    `json:"priority,omitempty"`
	CreatedBy   *NullableAuthorEntity               `json:"created_by,omitempty"`
	// A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity
	Attachments []NullableTicketingTicketEntityAttachment `json:"attachments,omitempty"`
	CreatedAt   *time.Time                                `json:"created_at,omitempty"`
	UpdatedAt   *time.Time                                `json:"updated_at,omitempty"`
	TagList     []string                                  `json:"tag_list,omitempty"`
	// ID of incident that this ticket is related to
	IncidentID *string `json:"incident_id,omitempty"`
	// Name of incident that this ticket is related to
	IncidentName *string `json:"incident_name,omitempty"`
	// Milestone of incident that this ticket is related to
	IncidentCurrentMilestone *string `json:"incident_current_milestone,omitempty"`
	// ID of task that this ticket is related to
	TaskID *string                        `json:"task_id,omitempty"`
	DueAt  *time.Time                     `json:"due_at,omitempty"`
	Link   *NullableAttachmentsLinkEntity `json:"link,omitempty"`
}

func (n NullableTicketingTicketEntity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NullableTicketingTicketEntity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *NullableTicketingTicketEntity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *NullableTicketingTicketEntity) GetSummary() *string {
	if o == nil {
		return nil
	}
	return o.Summary
}

func (o *NullableTicketingTicketEntity) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *NullableTicketingTicketEntity) GetState() *NullableTicketingTicketEntityState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *NullableTicketingTicketEntity) GetType() *NullableTicketingTicketEntityType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *NullableTicketingTicketEntity) GetAssignees() []AuthorEntity {
	if o == nil {
		return nil
	}
	return o.Assignees
}

func (o *NullableTicketingTicketEntity) GetPriority() *NullableTicketingPriorityEntity {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *NullableTicketingTicketEntity) GetCreatedBy() *NullableAuthorEntity {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *NullableTicketingTicketEntity) GetAttachments() []NullableTicketingTicketEntityAttachment {
	if o == nil {
		return nil
	}
	return o.Attachments
}

func (o *NullableTicketingTicketEntity) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *NullableTicketingTicketEntity) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *NullableTicketingTicketEntity) GetTagList() []string {
	if o == nil {
		return nil
	}
	return o.TagList
}

func (o *NullableTicketingTicketEntity) GetIncidentID() *string {
	if o == nil {
		return nil
	}
	return o.IncidentID
}

func (o *NullableTicketingTicketEntity) GetIncidentName() *string {
	if o == nil {
		return nil
	}
	return o.IncidentName
}

func (o *NullableTicketingTicketEntity) GetIncidentCurrentMilestone() *string {
	if o == nil {
		return nil
	}
	return o.IncidentCurrentMilestone
}

func (o *NullableTicketingTicketEntity) GetTaskID() *string {
	if o == nil {
		return nil
	}
	return o.TaskID
}

func (o *NullableTicketingTicketEntity) GetDueAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DueAt
}

func (o *NullableTicketingTicketEntity) GetLink() *NullableAttachmentsLinkEntity {
	if o == nil {
		return nil
	}
	return o.Link
}
