// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"time"
)

type VoteDirection string

const (
	VoteDirectionUp   VoteDirection = "up"
	VoteDirectionDown VoteDirection = "down"
)

func (e VoteDirection) ToPointer() *VoteDirection {
	return &e
}
func (e *VoteDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "up":
		fallthrough
	case "down":
		*e = VoteDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VoteDirection: %v", v)
	}
}

// CreateIncidentChatMessage - Create a new generic chat message on an incident timeline. These are independent of any specific chat provider.
type CreateIncidentChatMessage struct {
	Body string `json:"body"`
	// ISO8601 timestamp for when the chat message occurred
	OccurredAt    *time.Time     `json:"occurred_at,omitempty"`
	VoteDirection *VoteDirection `json:"vote_direction,omitempty"`
}

func (c CreateIncidentChatMessage) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateIncidentChatMessage) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateIncidentChatMessage) GetBody() string {
	if o == nil {
		return ""
	}
	return o.Body
}

func (o *CreateIncidentChatMessage) GetOccurredAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.OccurredAt
}

func (o *CreateIncidentChatMessage) GetVoteDirection() *VoteDirection {
	if o == nil {
		return nil
	}
	return o.VoteDirection
}
