// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateTeamSignalRuleTargetType - The type of target that the rule will notify when matched.
type CreateTeamSignalRuleTargetType string

const (
	CreateTeamSignalRuleTargetTypeEscalationPolicy CreateTeamSignalRuleTargetType = "EscalationPolicy"
	CreateTeamSignalRuleTargetTypeOnCallSchedule   CreateTeamSignalRuleTargetType = "OnCallSchedule"
	CreateTeamSignalRuleTargetTypeUser             CreateTeamSignalRuleTargetType = "User"
	CreateTeamSignalRuleTargetTypeWebhook          CreateTeamSignalRuleTargetType = "Webhook"
	CreateTeamSignalRuleTargetTypeSlackChannel     CreateTeamSignalRuleTargetType = "SlackChannel"
)

func (e CreateTeamSignalRuleTargetType) ToPointer() *CreateTeamSignalRuleTargetType {
	return &e
}
func (e *CreateTeamSignalRuleTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "OnCallSchedule":
		fallthrough
	case "User":
		fallthrough
	case "Webhook":
		fallthrough
	case "SlackChannel":
		*e = CreateTeamSignalRuleTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamSignalRuleTargetType: %v", v)
	}
}

// CreateTeamSignalRuleNotificationPriorityOverride - A notification priority that will be set on the resulting alert (default: HIGH)
type CreateTeamSignalRuleNotificationPriorityOverride string

const (
	CreateTeamSignalRuleNotificationPriorityOverrideHigh    CreateTeamSignalRuleNotificationPriorityOverride = "HIGH"
	CreateTeamSignalRuleNotificationPriorityOverrideMedium  CreateTeamSignalRuleNotificationPriorityOverride = "MEDIUM"
	CreateTeamSignalRuleNotificationPriorityOverrideLow     CreateTeamSignalRuleNotificationPriorityOverride = "LOW"
	CreateTeamSignalRuleNotificationPriorityOverrideUnknown CreateTeamSignalRuleNotificationPriorityOverride = ""
)

func (e CreateTeamSignalRuleNotificationPriorityOverride) ToPointer() *CreateTeamSignalRuleNotificationPriorityOverride {
	return &e
}
func (e *CreateTeamSignalRuleNotificationPriorityOverride) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		fallthrough
	case "":
		*e = CreateTeamSignalRuleNotificationPriorityOverride(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamSignalRuleNotificationPriorityOverride: %v", v)
	}
}

// CreateTeamSignalRuleCreateIncidentConditionWhen - Determines when an incident should be created when this rule is matched
type CreateTeamSignalRuleCreateIncidentConditionWhen string

const (
	CreateTeamSignalRuleCreateIncidentConditionWhenWhenUnspecified CreateTeamSignalRuleCreateIncidentConditionWhen = "WHEN_UNSPECIFIED"
	CreateTeamSignalRuleCreateIncidentConditionWhenWhenAlways      CreateTeamSignalRuleCreateIncidentConditionWhen = "WHEN_ALWAYS"
)

func (e CreateTeamSignalRuleCreateIncidentConditionWhen) ToPointer() *CreateTeamSignalRuleCreateIncidentConditionWhen {
	return &e
}
func (e *CreateTeamSignalRuleCreateIncidentConditionWhen) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WHEN_UNSPECIFIED":
		fallthrough
	case "WHEN_ALWAYS":
		*e = CreateTeamSignalRuleCreateIncidentConditionWhen(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamSignalRuleCreateIncidentConditionWhen: %v", v)
	}
}

// CreateTeamSignalRule - Create a Signals rule for a team.
type CreateTeamSignalRule struct {
	// The rule's name.
	Name string `json:"name"`
	// The CEL expression that defines the rule.
	Expression string `json:"expression"`
	// The type of target that the rule will notify when matched.
	TargetType CreateTeamSignalRuleTargetType `json:"target_type"`
	// The ID of the target that the rule will notify when matched.
	TargetID string `json:"target_id"`
	// The ID of an incident type that should be used when an alert is promoted to an incident
	IncidentTypeID *string `json:"incident_type_id,omitempty"`
	// A notification priority that will be set on the resulting alert (default: HIGH)
	NotificationPriorityOverride *CreateTeamSignalRuleNotificationPriorityOverride `json:"notification_priority_override,omitempty"`
	// Determines when an incident should be created when this rule is matched
	CreateIncidentConditionWhen *CreateTeamSignalRuleCreateIncidentConditionWhen `json:"create_incident_condition_when,omitempty"`
	// The amount of time alerts created from this rule will be deduplicated
	DeduplicationExpiry *string `json:"deduplication_expiry,omitempty"`
}

func (o *CreateTeamSignalRule) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateTeamSignalRule) GetExpression() string {
	if o == nil {
		return ""
	}
	return o.Expression
}

func (o *CreateTeamSignalRule) GetTargetType() CreateTeamSignalRuleTargetType {
	if o == nil {
		return CreateTeamSignalRuleTargetType("")
	}
	return o.TargetType
}

func (o *CreateTeamSignalRule) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

func (o *CreateTeamSignalRule) GetIncidentTypeID() *string {
	if o == nil {
		return nil
	}
	return o.IncidentTypeID
}

func (o *CreateTeamSignalRule) GetNotificationPriorityOverride() *CreateTeamSignalRuleNotificationPriorityOverride {
	if o == nil {
		return nil
	}
	return o.NotificationPriorityOverride
}

func (o *CreateTeamSignalRule) GetCreateIncidentConditionWhen() *CreateTeamSignalRuleCreateIncidentConditionWhen {
	if o == nil {
		return nil
	}
	return o.CreateIncidentConditionWhen
}

func (o *CreateTeamSignalRule) GetDeduplicationExpiry() *string {
	if o == nil {
		return nil
	}
	return o.DeduplicationExpiry
}
