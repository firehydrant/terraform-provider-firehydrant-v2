// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// CreateTeamSignalRule - Create a Signals rule for a team.
type CreateTeamSignalRule struct {
	// Determines when an incident should be created when this rule is matched
	CreateIncidentConditionWhen *string `json:"create_incident_condition_when,omitempty"`
	// The amount of time alerts created from this rule will be deduplicated
	DeduplicationExpiry *string `json:"deduplication_expiry,omitempty"`
	// The CEL expression that defines the rule.
	Expression string `json:"expression"`
	// The ID of an incident type that should be used when an alert is promoted to an incident
	IncidentTypeID *string `json:"incident_type_id,omitempty"`
	// The rule's name.
	Name string `json:"name"`
	// A notification priority that will be set on the resulting alert (default: HIGH)
	NotificationPriorityOverride *string `json:"notification_priority_override,omitempty"`
	// The ID of the target that the rule will notify when matched.
	TargetID string `json:"target_id"`
	// The type of target that the rule will notify when matched.
	TargetType string `json:"target_type"`
}

func (o *CreateTeamSignalRule) GetCreateIncidentConditionWhen() *string {
	if o == nil {
		return nil
	}
	return o.CreateIncidentConditionWhen
}

func (o *CreateTeamSignalRule) GetDeduplicationExpiry() *string {
	if o == nil {
		return nil
	}
	return o.DeduplicationExpiry
}

func (o *CreateTeamSignalRule) GetExpression() string {
	if o == nil {
		return ""
	}
	return o.Expression
}

func (o *CreateTeamSignalRule) GetIncidentTypeID() *string {
	if o == nil {
		return nil
	}
	return o.IncidentTypeID
}

func (o *CreateTeamSignalRule) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateTeamSignalRule) GetNotificationPriorityOverride() *string {
	if o == nil {
		return nil
	}
	return o.NotificationPriorityOverride
}

func (o *CreateTeamSignalRule) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

func (o *CreateTeamSignalRule) GetTargetType() string {
	if o == nil {
		return ""
	}
	return o.TargetType
}
