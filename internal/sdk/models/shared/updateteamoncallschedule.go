// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UpdateTeamOnCallScheduleMember struct {
	// The ID of a user who should be added to the schedule's rotation. You can add a user to the schedule
	// multiple times to construct more complex rotations, and you can specify a `null` user ID to create
	// unassigned slots in the rotation.
	//
	UserID *string `json:"user_id,omitempty"`
}

func (o *UpdateTeamOnCallScheduleMember) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

// UpdateTeamOnCallScheduleType - The type of strategy. Must be one of "daily", "weekly", or "custom".
type UpdateTeamOnCallScheduleType string

const (
	UpdateTeamOnCallScheduleTypeDaily  UpdateTeamOnCallScheduleType = "daily"
	UpdateTeamOnCallScheduleTypeWeekly UpdateTeamOnCallScheduleType = "weekly"
	UpdateTeamOnCallScheduleTypeCustom UpdateTeamOnCallScheduleType = "custom"
)

func (e UpdateTeamOnCallScheduleType) ToPointer() *UpdateTeamOnCallScheduleType {
	return &e
}
func (e *UpdateTeamOnCallScheduleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "custom":
		*e = UpdateTeamOnCallScheduleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamOnCallScheduleType: %v", v)
	}
}

// UpdateTeamOnCallScheduleHandoffDay - The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
type UpdateTeamOnCallScheduleHandoffDay string

const (
	UpdateTeamOnCallScheduleHandoffDayMonday    UpdateTeamOnCallScheduleHandoffDay = "monday"
	UpdateTeamOnCallScheduleHandoffDayTuesday   UpdateTeamOnCallScheduleHandoffDay = "tuesday"
	UpdateTeamOnCallScheduleHandoffDayWednesday UpdateTeamOnCallScheduleHandoffDay = "wednesday"
	UpdateTeamOnCallScheduleHandoffDayThursday  UpdateTeamOnCallScheduleHandoffDay = "thursday"
	UpdateTeamOnCallScheduleHandoffDayFriday    UpdateTeamOnCallScheduleHandoffDay = "friday"
	UpdateTeamOnCallScheduleHandoffDaySaturday  UpdateTeamOnCallScheduleHandoffDay = "saturday"
	UpdateTeamOnCallScheduleHandoffDaySunday    UpdateTeamOnCallScheduleHandoffDay = "sunday"
)

func (e UpdateTeamOnCallScheduleHandoffDay) ToPointer() *UpdateTeamOnCallScheduleHandoffDay {
	return &e
}
func (e *UpdateTeamOnCallScheduleHandoffDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = UpdateTeamOnCallScheduleHandoffDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamOnCallScheduleHandoffDay: %v", v)
	}
}

// UpdateTeamOnCallScheduleStrategy - An object that specifies how the schedule's on-call shifts should be generated.
type UpdateTeamOnCallScheduleStrategy struct {
	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	Type UpdateTeamOnCallScheduleType `json:"type"`
	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime *string `json:"handoff_time,omitempty"`
	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	HandoffDay *UpdateTeamOnCallScheduleHandoffDay `json:"handoff_day,omitempty"`
	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration *string `json:"shift_duration,omitempty"`
}

func (o *UpdateTeamOnCallScheduleStrategy) GetType() UpdateTeamOnCallScheduleType {
	if o == nil {
		return UpdateTeamOnCallScheduleType("")
	}
	return o.Type
}

func (o *UpdateTeamOnCallScheduleStrategy) GetHandoffTime() *string {
	if o == nil {
		return nil
	}
	return o.HandoffTime
}

func (o *UpdateTeamOnCallScheduleStrategy) GetHandoffDay() *UpdateTeamOnCallScheduleHandoffDay {
	if o == nil {
		return nil
	}
	return o.HandoffDay
}

func (o *UpdateTeamOnCallScheduleStrategy) GetShiftDuration() *string {
	if o == nil {
		return nil
	}
	return o.ShiftDuration
}

// UpdateTeamOnCallScheduleStartDay - The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
type UpdateTeamOnCallScheduleStartDay string

const (
	UpdateTeamOnCallScheduleStartDayMonday    UpdateTeamOnCallScheduleStartDay = "monday"
	UpdateTeamOnCallScheduleStartDayTuesday   UpdateTeamOnCallScheduleStartDay = "tuesday"
	UpdateTeamOnCallScheduleStartDayWednesday UpdateTeamOnCallScheduleStartDay = "wednesday"
	UpdateTeamOnCallScheduleStartDayThursday  UpdateTeamOnCallScheduleStartDay = "thursday"
	UpdateTeamOnCallScheduleStartDayFriday    UpdateTeamOnCallScheduleStartDay = "friday"
	UpdateTeamOnCallScheduleStartDaySaturday  UpdateTeamOnCallScheduleStartDay = "saturday"
	UpdateTeamOnCallScheduleStartDaySunday    UpdateTeamOnCallScheduleStartDay = "sunday"
)

func (e UpdateTeamOnCallScheduleStartDay) ToPointer() *UpdateTeamOnCallScheduleStartDay {
	return &e
}
func (e *UpdateTeamOnCallScheduleStartDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = UpdateTeamOnCallScheduleStartDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamOnCallScheduleStartDay: %v", v)
	}
}

// UpdateTeamOnCallScheduleEndDay - The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
type UpdateTeamOnCallScheduleEndDay string

const (
	UpdateTeamOnCallScheduleEndDayMonday    UpdateTeamOnCallScheduleEndDay = "monday"
	UpdateTeamOnCallScheduleEndDayTuesday   UpdateTeamOnCallScheduleEndDay = "tuesday"
	UpdateTeamOnCallScheduleEndDayWednesday UpdateTeamOnCallScheduleEndDay = "wednesday"
	UpdateTeamOnCallScheduleEndDayThursday  UpdateTeamOnCallScheduleEndDay = "thursday"
	UpdateTeamOnCallScheduleEndDayFriday    UpdateTeamOnCallScheduleEndDay = "friday"
	UpdateTeamOnCallScheduleEndDaySaturday  UpdateTeamOnCallScheduleEndDay = "saturday"
	UpdateTeamOnCallScheduleEndDaySunday    UpdateTeamOnCallScheduleEndDay = "sunday"
)

func (e UpdateTeamOnCallScheduleEndDay) ToPointer() *UpdateTeamOnCallScheduleEndDay {
	return &e
}
func (e *UpdateTeamOnCallScheduleEndDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = UpdateTeamOnCallScheduleEndDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamOnCallScheduleEndDay: %v", v)
	}
}

type UpdateTeamOnCallScheduleRestriction struct {
	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	StartDay UpdateTeamOnCallScheduleStartDay `json:"start_day"`
	// An ISO8601 time string specifying when the restriction should start.
	StartTime string `json:"start_time"`
	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	EndDay UpdateTeamOnCallScheduleEndDay `json:"end_day"`
	// An ISO8601 time string specifying when the restriction should end.
	EndTime string `json:"end_time"`
}

func (o *UpdateTeamOnCallScheduleRestriction) GetStartDay() UpdateTeamOnCallScheduleStartDay {
	if o == nil {
		return UpdateTeamOnCallScheduleStartDay("")
	}
	return o.StartDay
}

func (o *UpdateTeamOnCallScheduleRestriction) GetStartTime() string {
	if o == nil {
		return ""
	}
	return o.StartTime
}

func (o *UpdateTeamOnCallScheduleRestriction) GetEndDay() UpdateTeamOnCallScheduleEndDay {
	if o == nil {
		return UpdateTeamOnCallScheduleEndDay("")
	}
	return o.EndDay
}

func (o *UpdateTeamOnCallScheduleRestriction) GetEndTime() string {
	if o == nil {
		return ""
	}
	return o.EndTime
}

// UpdateTeamOnCallSchedule - Update a Signals on-call schedule by ID
type UpdateTeamOnCallSchedule struct {
	// The on-call schedule's name.
	Name *string `json:"name,omitempty"`
	// A detailed description of the on-call schedule.
	Description *string `json:"description,omitempty"`
	// The time zone in which the on-call schedule operates. This value must be a valid IANA time zone name.
	TimeZone *string `json:"time_zone,omitempty"`
	// The ID of a Slack user group for syncing purposes. If provided, we will automatically sync whoever is on call to the user group in Slack.
	SlackUserGroupID *string `json:"slack_user_group_id,omitempty"`
	// An ordered list of objects that specify members of the on-call schedule's rotation.
	Members []UpdateTeamOnCallScheduleMember `json:"members,omitempty"`
	// An object that specifies how the schedule's on-call shifts should be generated.
	Strategy *UpdateTeamOnCallScheduleStrategy `json:"strategy,omitempty"`
	// A list of objects that restrict the schedule to speccific on-call periods.
	Restrictions []UpdateTeamOnCallScheduleRestriction `json:"restrictions,omitempty"`
	// An ISO8601 time string specifying when the updated schedule should take effect. This
	// value must be provided if editing an attribute that would affect how the schedule's
	// shifts are generated, such as the time zone, members, strategy, or restrictions.
	//
	EffectiveAt *string `json:"effective_at,omitempty"`
	// A hex color code that will be used to represent the schedule in the UI and iCal subscriptions.
	Color *string `json:"color,omitempty"`
	// This parameter is deprecated; use `members` instead.
	MemberIds []string `json:"member_ids,omitempty"`
}

func (o *UpdateTeamOnCallSchedule) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateTeamOnCallSchedule) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateTeamOnCallSchedule) GetTimeZone() *string {
	if o == nil {
		return nil
	}
	return o.TimeZone
}

func (o *UpdateTeamOnCallSchedule) GetSlackUserGroupID() *string {
	if o == nil {
		return nil
	}
	return o.SlackUserGroupID
}

func (o *UpdateTeamOnCallSchedule) GetMembers() []UpdateTeamOnCallScheduleMember {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *UpdateTeamOnCallSchedule) GetStrategy() *UpdateTeamOnCallScheduleStrategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}

func (o *UpdateTeamOnCallSchedule) GetRestrictions() []UpdateTeamOnCallScheduleRestriction {
	if o == nil {
		return nil
	}
	return o.Restrictions
}

func (o *UpdateTeamOnCallSchedule) GetEffectiveAt() *string {
	if o == nil {
		return nil
	}
	return o.EffectiveAt
}

func (o *UpdateTeamOnCallSchedule) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *UpdateTeamOnCallSchedule) GetMemberIds() []string {
	if o == nil {
		return nil
	}
	return o.MemberIds
}
