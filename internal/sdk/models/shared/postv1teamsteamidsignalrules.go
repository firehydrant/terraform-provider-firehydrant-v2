// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TargetType - The type of target that the rule will notify when matched.
type TargetType string

const (
	TargetTypeEscalationPolicy TargetType = "EscalationPolicy"
	TargetTypeOnCallSchedule   TargetType = "OnCallSchedule"
	TargetTypeUser             TargetType = "User"
	TargetTypeWebhook          TargetType = "Webhook"
)

func (e TargetType) ToPointer() *TargetType {
	return &e
}
func (e *TargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "OnCallSchedule":
		fallthrough
	case "User":
		fallthrough
	case "Webhook":
		*e = TargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetType: %v", v)
	}
}

// NotificationPriorityOverride - A notification priority that will be set on the resulting alert (default: HIGH)
type NotificationPriorityOverride string

const (
	NotificationPriorityOverrideHigh    NotificationPriorityOverride = "HIGH"
	NotificationPriorityOverrideMedium  NotificationPriorityOverride = "MEDIUM"
	NotificationPriorityOverrideLow     NotificationPriorityOverride = "LOW"
	NotificationPriorityOverrideUnknown NotificationPriorityOverride = ""
)

func (e NotificationPriorityOverride) ToPointer() *NotificationPriorityOverride {
	return &e
}
func (e *NotificationPriorityOverride) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		fallthrough
	case "":
		*e = NotificationPriorityOverride(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationPriorityOverride: %v", v)
	}
}

// CreateIncidentConditionWhen - Determines when an incident should be created when this rule is matched
type CreateIncidentConditionWhen string

const (
	CreateIncidentConditionWhenWhenUnspecified CreateIncidentConditionWhen = "WHEN_UNSPECIFIED"
	CreateIncidentConditionWhenWhenAlways      CreateIncidentConditionWhen = "WHEN_ALWAYS"
)

func (e CreateIncidentConditionWhen) ToPointer() *CreateIncidentConditionWhen {
	return &e
}
func (e *CreateIncidentConditionWhen) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WHEN_UNSPECIFIED":
		fallthrough
	case "WHEN_ALWAYS":
		*e = CreateIncidentConditionWhen(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateIncidentConditionWhen: %v", v)
	}
}

// PostV1TeamsTeamIDSignalRules - Create a Signals rule for a team.
type PostV1TeamsTeamIDSignalRules struct {
	// The rule's name.
	Name string `json:"name"`
	// The CEL expression that defines the rule.
	Expression string `json:"expression"`
	// The type of target that the rule will notify when matched.
	TargetType TargetType `json:"target_type"`
	// The ID of the target that the rule will notify when matched.
	TargetID string `json:"target_id"`
	// The ID of an incident type that should be used when an alert is promoted to an incident
	IncidentTypeID *string `json:"incident_type_id,omitempty"`
	// A notification priority that will be set on the resulting alert (default: HIGH)
	NotificationPriorityOverride *NotificationPriorityOverride `json:"notification_priority_override,omitempty"`
	// Determines when an incident should be created when this rule is matched
	CreateIncidentConditionWhen *CreateIncidentConditionWhen `json:"create_incident_condition_when,omitempty"`
}

func (o *PostV1TeamsTeamIDSignalRules) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PostV1TeamsTeamIDSignalRules) GetExpression() string {
	if o == nil {
		return ""
	}
	return o.Expression
}

func (o *PostV1TeamsTeamIDSignalRules) GetTargetType() TargetType {
	if o == nil {
		return TargetType("")
	}
	return o.TargetType
}

func (o *PostV1TeamsTeamIDSignalRules) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

func (o *PostV1TeamsTeamIDSignalRules) GetIncidentTypeID() *string {
	if o == nil {
		return nil
	}
	return o.IncidentTypeID
}

func (o *PostV1TeamsTeamIDSignalRules) GetNotificationPriorityOverride() *NotificationPriorityOverride {
	if o == nil {
		return nil
	}
	return o.NotificationPriorityOverride
}

func (o *PostV1TeamsTeamIDSignalRules) GetCreateIncidentConditionWhen() *CreateIncidentConditionWhen {
	if o == nil {
		return nil
	}
	return o.CreateIncidentConditionWhen
}
