// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"time"
)

type RunbooksActionsDefaultRuleData struct {
}

type RunbooksActionsPrerequisite struct {
}

type RunbooksActions struct {
	Automatable           *bool                           `json:"automatable,omitempty"`
	Category              *string                         `json:"category,omitempty"`
	Config                *NullableRunbooksActionConfig   `json:"config,omitempty"`
	CreatedAt             *time.Time                      `json:"created_at,omitempty"`
	DefaultLogic          map[string]any                  `json:"default_logic,omitempty"`
	DefaultRuleData       *RunbooksActionsDefaultRuleData `json:"default_rule_data,omitempty"`
	Description           *string                         `json:"description,omitempty"`
	ID                    *string                         `json:"id,omitempty"`
	Integration           *NullableIntegrations           `json:"integration,omitempty"`
	Name                  *string                         `json:"name,omitempty"`
	Prerequisites         []RunbooksActionsPrerequisite   `json:"prerequisites,omitempty"`
	Repeatable            *bool                           `json:"repeatable,omitempty"`
	Rerunnable            *bool                           `json:"rerunnable,omitempty"`
	Slug                  *string                         `json:"slug,omitempty"`
	SupportedRunbookTypes []string                        `json:"supported_runbook_types,omitempty"`
	UpdatedAt             *time.Time                      `json:"updated_at,omitempty"`
}

func (r RunbooksActions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RunbooksActions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RunbooksActions) GetAutomatable() *bool {
	if o == nil {
		return nil
	}
	return o.Automatable
}

func (o *RunbooksActions) GetCategory() *string {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *RunbooksActions) GetConfig() *NullableRunbooksActionConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *RunbooksActions) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RunbooksActions) GetDefaultLogic() map[string]any {
	if o == nil {
		return nil
	}
	return o.DefaultLogic
}

func (o *RunbooksActions) GetDefaultRuleData() *RunbooksActionsDefaultRuleData {
	if o == nil {
		return nil
	}
	return o.DefaultRuleData
}

func (o *RunbooksActions) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *RunbooksActions) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RunbooksActions) GetIntegration() *NullableIntegrations {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *RunbooksActions) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *RunbooksActions) GetPrerequisites() []RunbooksActionsPrerequisite {
	if o == nil {
		return nil
	}
	return o.Prerequisites
}

func (o *RunbooksActions) GetRepeatable() *bool {
	if o == nil {
		return nil
	}
	return o.Repeatable
}

func (o *RunbooksActions) GetRerunnable() *bool {
	if o == nil {
		return nil
	}
	return o.Rerunnable
}

func (o *RunbooksActions) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *RunbooksActions) GetSupportedRunbookTypes() []string {
	if o == nil {
		return nil
	}
	return o.SupportedRunbookTypes
}

func (o *RunbooksActions) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
