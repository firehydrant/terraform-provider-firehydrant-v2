// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type CreateRunbookAttachmentRuleInput struct {
	// The JSON logic for the attaching the runbook
	Logic string `json:"logic"`
	// The user data for the rule
	UserData *string `json:"user_data,omitempty"`
}

func (o *CreateRunbookAttachmentRuleInput) GetLogic() string {
	if o == nil {
		return ""
	}
	return o.Logic
}

func (o *CreateRunbookAttachmentRuleInput) GetUserData() *string {
	if o == nil {
		return nil
	}
	return o.UserData
}

// CreateRunbookOwnerInput - An object representing a Team that owns the runbook
type CreateRunbookOwnerInput struct {
	ID string `json:"id"`
}

func (o *CreateRunbookOwnerInput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type CreateRunbookRule struct {
	// The JSON logic for the rule
	Logic string `json:"logic"`
	// The user data for the rule
	UserData *string `json:"user_data,omitempty"`
}

func (o *CreateRunbookRule) GetLogic() string {
	if o == nil {
		return ""
	}
	return o.Logic
}

func (o *CreateRunbookRule) GetUserData() *string {
	if o == nil {
		return nil
	}
	return o.UserData
}

type CreateRunbookStepsInput struct {
	// ID of action to use for this step.
	ActionID string `json:"action_id"`
	// Name for step
	Name string             `json:"name"`
	Rule *CreateRunbookRule `json:"rule,omitempty"`
}

func (o *CreateRunbookStepsInput) GetActionID() string {
	if o == nil {
		return ""
	}
	return o.ActionID
}

func (o *CreateRunbookStepsInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateRunbookStepsInput) GetRule() *CreateRunbookRule {
	if o == nil {
		return nil
	}
	return o.Rule
}

// CreateRunbook - Create a new runbook for use with incidents.
type CreateRunbook struct {
	AttachmentRuleInput *CreateRunbookAttachmentRuleInput `json:"attachment_rule,omitempty"`
	// Whether or not this runbook should be automatically attached to restricted incidents. Note that setting this to `true` will prevent it from being attached to public incidents, even manually. Defaults to `false`.
	AutoAttachToRestrictedIncidents *bool `json:"auto_attach_to_restricted_incidents,omitempty"`
	// A longer description about the Runbook. Supports markdown format
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	// An object representing a Team that owns the runbook
	OwnerInput *CreateRunbookOwnerInput  `json:"owner,omitempty"`
	StepsInput []CreateRunbookStepsInput `json:"steps,omitempty"`
	// Deprecated. Use description
	Summary *string `json:"summary,omitempty"`
	// Whether or not this runbook is a tutorial runbook
	Tutorial *bool `json:"tutorial,omitempty"`
	// Deprecated, but still required. Please just use 'incident'
	Type string `json:"type"`
}

func (o *CreateRunbook) GetAttachmentRuleInput() *CreateRunbookAttachmentRuleInput {
	if o == nil {
		return nil
	}
	return o.AttachmentRuleInput
}

func (o *CreateRunbook) GetAutoAttachToRestrictedIncidents() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAttachToRestrictedIncidents
}

func (o *CreateRunbook) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateRunbook) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateRunbook) GetOwnerInput() *CreateRunbookOwnerInput {
	if o == nil {
		return nil
	}
	return o.OwnerInput
}

func (o *CreateRunbook) GetStepsInput() []CreateRunbookStepsInput {
	if o == nil {
		return nil
	}
	return o.StepsInput
}

func (o *CreateRunbook) GetSummary() *string {
	if o == nil {
		return nil
	}
	return o.Summary
}

func (o *CreateRunbook) GetTutorial() *bool {
	if o == nil {
		return nil
	}
	return o.Tutorial
}

func (o *CreateRunbook) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}
