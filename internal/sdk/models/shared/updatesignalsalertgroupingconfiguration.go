// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// UpdateSignalsAlertGroupingConfigurationFyi - Send FYI notification
type UpdateSignalsAlertGroupingConfigurationFyi struct {
	// The slack channel ids to send the notification to
	SlackChannelIds []string `json:"slack_channel_ids"`
}

func (o *UpdateSignalsAlertGroupingConfigurationFyi) GetSlackChannelIds() []string {
	if o == nil {
		return []string{}
	}
	return o.SlackChannelIds
}

// UpdateSignalsAlertGroupingConfigurationActionInput - The action to take when grouping alerts
type UpdateSignalsAlertGroupingConfigurationActionInput struct {
	// Send FYI notification
	Fyi *UpdateSignalsAlertGroupingConfigurationFyi `json:"fyi,omitempty"`
	// Link the alerts and do not notify anyone
	Link *bool `json:"link,omitempty"`
}

func (o *UpdateSignalsAlertGroupingConfigurationActionInput) GetFyi() *UpdateSignalsAlertGroupingConfigurationFyi {
	if o == nil {
		return nil
	}
	return o.Fyi
}

func (o *UpdateSignalsAlertGroupingConfigurationActionInput) GetLink() *bool {
	if o == nil {
		return nil
	}
	return o.Link
}

// UpdateSignalsAlertGroupingConfigurationSubstring - The type of strategy to use for grouping alerts
type UpdateSignalsAlertGroupingConfigurationSubstring struct {
	// The field to use for grouping alerts
	FieldName string `json:"field_name"`
	// The value to use for grouping alerts
	Value string `json:"value"`
}

func (o *UpdateSignalsAlertGroupingConfigurationSubstring) GetFieldName() string {
	if o == nil {
		return ""
	}
	return o.FieldName
}

func (o *UpdateSignalsAlertGroupingConfigurationSubstring) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdateSignalsAlertGroupingConfigurationStrategy - The strategy to use for grouping alerts
type UpdateSignalsAlertGroupingConfigurationStrategy struct {
	// The type of strategy to use for grouping alerts
	Substring *UpdateSignalsAlertGroupingConfigurationSubstring `json:"substring,omitempty"`
}

func (o *UpdateSignalsAlertGroupingConfigurationStrategy) GetSubstring() *UpdateSignalsAlertGroupingConfigurationSubstring {
	if o == nil {
		return nil
	}
	return o.Substring
}

// UpdateSignalsAlertGroupingConfiguration - Update a Signals alert grouping rule for the organization.
type UpdateSignalsAlertGroupingConfiguration struct {
	// The action to take when grouping alerts
	ActionInput *UpdateSignalsAlertGroupingConfigurationActionInput `json:"action,omitempty"`
	// How long to group alerts for
	ReferenceAlertTimePeriod *string `json:"reference_alert_time_period,omitempty"`
	// The strategy to use for grouping alerts
	Strategy *UpdateSignalsAlertGroupingConfigurationStrategy `json:"strategy,omitempty"`
}

func (o *UpdateSignalsAlertGroupingConfiguration) GetActionInput() *UpdateSignalsAlertGroupingConfigurationActionInput {
	if o == nil {
		return nil
	}
	return o.ActionInput
}

func (o *UpdateSignalsAlertGroupingConfiguration) GetReferenceAlertTimePeriod() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceAlertTimePeriod
}

func (o *UpdateSignalsAlertGroupingConfiguration) GetStrategy() *UpdateSignalsAlertGroupingConfigurationStrategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}
