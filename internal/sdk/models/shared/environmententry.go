// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"time"
)

// EnvironmentEntry model
type EnvironmentEntry struct {
	// List of active incident guids
	ActiveIncidents []string `json:"active_incidents,omitempty"`
	// The time the environment was created
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Description of the Environment
	Description *string `json:"description,omitempty"`
	// Information about known linkages to representations of services outside of FireHydrant.
	ExternalResources []ExternalResource `json:"external_resources,omitempty"`
	// UUID of the Environment
	ID *string `json:"id,omitempty"`
	// Name of the Environment
	Name *string `json:"name,omitempty"`
	// Slug of the Environment
	Slug *string `json:"slug,omitempty"`
	// The time the environment was updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

func (e EnvironmentEntry) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EnvironmentEntry) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EnvironmentEntry) GetActiveIncidents() []string {
	if o == nil {
		return nil
	}
	return o.ActiveIncidents
}

func (o *EnvironmentEntry) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *EnvironmentEntry) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *EnvironmentEntry) GetExternalResources() []ExternalResource {
	if o == nil {
		return nil
	}
	return o.ExternalResources
}

func (o *EnvironmentEntry) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EnvironmentEntry) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EnvironmentEntry) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *EnvironmentEntry) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
