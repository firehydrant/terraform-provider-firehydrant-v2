// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// UpdateSignalsEmailTargetTargetInput - The target that the email target will notify. This object must contain a `type`
// field that specifies the type of target and an `id` field that specifies the ID of
// the target. The `type` field must be one of "escalation_policy", "on_call_schedule",
// "team", "user", or "slack_channel".
type UpdateSignalsEmailTargetTargetInput struct {
	// The ID of the target that the inbound email will notify when matched.
	ID string `json:"id"`
	// The type of target that the inbound email will notify when matched.
	Type string `json:"type"`
}

func (o *UpdateSignalsEmailTargetTargetInput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateSignalsEmailTargetTargetInput) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdateSignalsEmailTarget - Update a Signals email target by ID
type UpdateSignalsEmailTarget struct {
	// A list of email addresses that are allowed to send events to the target. Must be exact match.
	AllowedSenders []string `json:"allowed_senders,omitempty"`
	// A detailed description of the email target.
	Description *string `json:"description,omitempty"`
	// The CEL expression that defines the level of an incoming email that is sent to the target.
	LevelCel *string `json:"level_cel,omitempty"`
	// The email target's name.
	Name *string `json:"name,omitempty"`
	// Whether or not all rules must match, or if only one rule must match.
	RuleMatchingStrategy *string `json:"rule_matching_strategy,omitempty"`
	// A list of CEL expressions that should be evaluated and matched to determine if the target should be notified.
	Rules []string `json:"rules,omitempty"`
	// The email address that will be listening to events.
	Slug *string `json:"slug,omitempty"`
	// The CEL expression that defines the status of an incoming email that is sent to the target.
	StatusCel *string `json:"status_cel,omitempty"`
	// The target that the email target will notify. This object must contain a `type`
	// field that specifies the type of target and an `id` field that specifies the ID of
	// the target. The `type` field must be one of "escalation_policy", "on_call_schedule",
	// "team", "user", or "slack_channel".
	//
	TargetInput *UpdateSignalsEmailTargetTargetInput `json:"target,omitempty"`
}

func (o *UpdateSignalsEmailTarget) GetAllowedSenders() []string {
	if o == nil {
		return nil
	}
	return o.AllowedSenders
}

func (o *UpdateSignalsEmailTarget) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateSignalsEmailTarget) GetLevelCel() *string {
	if o == nil {
		return nil
	}
	return o.LevelCel
}

func (o *UpdateSignalsEmailTarget) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateSignalsEmailTarget) GetRuleMatchingStrategy() *string {
	if o == nil {
		return nil
	}
	return o.RuleMatchingStrategy
}

func (o *UpdateSignalsEmailTarget) GetRules() []string {
	if o == nil {
		return nil
	}
	return o.Rules
}

func (o *UpdateSignalsEmailTarget) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateSignalsEmailTarget) GetStatusCel() *string {
	if o == nil {
		return nil
	}
	return o.StatusCel
}

func (o *UpdateSignalsEmailTarget) GetTargetInput() *UpdateSignalsEmailTargetTargetInput {
	if o == nil {
		return nil
	}
	return o.TargetInput
}
