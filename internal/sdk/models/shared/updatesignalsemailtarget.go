// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UpdateSignalsEmailTargetType - The type of target that the inbound email will notify when matched.
type UpdateSignalsEmailTargetType string

const (
	UpdateSignalsEmailTargetTypeTeam             UpdateSignalsEmailTargetType = "Team"
	UpdateSignalsEmailTargetTypeEntireTeam       UpdateSignalsEmailTargetType = "EntireTeam"
	UpdateSignalsEmailTargetTypeEscalationPolicy UpdateSignalsEmailTargetType = "EscalationPolicy"
	UpdateSignalsEmailTargetTypeOnCallSchedule   UpdateSignalsEmailTargetType = "OnCallSchedule"
	UpdateSignalsEmailTargetTypeUser             UpdateSignalsEmailTargetType = "User"
	UpdateSignalsEmailTargetTypeSlackChannel     UpdateSignalsEmailTargetType = "SlackChannel"
	UpdateSignalsEmailTargetTypeWebhook          UpdateSignalsEmailTargetType = "Webhook"
)

func (e UpdateSignalsEmailTargetType) ToPointer() *UpdateSignalsEmailTargetType {
	return &e
}
func (e *UpdateSignalsEmailTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Team":
		fallthrough
	case "EntireTeam":
		fallthrough
	case "EscalationPolicy":
		fallthrough
	case "OnCallSchedule":
		fallthrough
	case "User":
		fallthrough
	case "SlackChannel":
		fallthrough
	case "Webhook":
		*e = UpdateSignalsEmailTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSignalsEmailTargetType: %v", v)
	}
}

// UpdateSignalsEmailTargetTarget - The target that the email target will notify. This object must contain a `type`
// field that specifies the type of target and an `id` field that specifies the ID of
// the target. The `type` field must be one of "escalation_policy", "on_call_schedule",
// "team", "user", or "slack_channel".
type UpdateSignalsEmailTargetTarget struct {
	// The type of target that the inbound email will notify when matched.
	Type UpdateSignalsEmailTargetType `json:"type"`
	// The ID of the target that the inbound email will notify when matched.
	ID string `json:"id"`
}

func (o *UpdateSignalsEmailTargetTarget) GetType() UpdateSignalsEmailTargetType {
	if o == nil {
		return UpdateSignalsEmailTargetType("")
	}
	return o.Type
}

func (o *UpdateSignalsEmailTargetTarget) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// UpdateSignalsEmailTargetRuleMatchingStrategy - Whether or not all rules must match, or if only one rule must match.
type UpdateSignalsEmailTargetRuleMatchingStrategy string

const (
	UpdateSignalsEmailTargetRuleMatchingStrategyAll UpdateSignalsEmailTargetRuleMatchingStrategy = "all"
	UpdateSignalsEmailTargetRuleMatchingStrategyAny UpdateSignalsEmailTargetRuleMatchingStrategy = "any"
)

func (e UpdateSignalsEmailTargetRuleMatchingStrategy) ToPointer() *UpdateSignalsEmailTargetRuleMatchingStrategy {
	return &e
}
func (e *UpdateSignalsEmailTargetRuleMatchingStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "any":
		*e = UpdateSignalsEmailTargetRuleMatchingStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSignalsEmailTargetRuleMatchingStrategy: %v", v)
	}
}

// UpdateSignalsEmailTarget - Update a Signals email target by ID
type UpdateSignalsEmailTarget struct {
	// The email target's name.
	Name *string `json:"name,omitempty"`
	// The email address that will be listening to events.
	Slug *string `json:"slug,omitempty"`
	// A detailed description of the email target.
	Description *string `json:"description,omitempty"`
	// The target that the email target will notify. This object must contain a `type`
	// field that specifies the type of target and an `id` field that specifies the ID of
	// the target. The `type` field must be one of "escalation_policy", "on_call_schedule",
	// "team", "user", or "slack_channel".
	//
	Target *UpdateSignalsEmailTargetTarget `json:"target,omitempty"`
	// A list of email addresses that are allowed to send events to the target. Must be exact match.
	AllowedSenders []string `json:"allowed_senders,omitempty"`
	// The CEL expression that defines the status of an incoming email that is sent to the target.
	StatusCel *string `json:"status_cel,omitempty"`
	// The CEL expression that defines the level of an incoming email that is sent to the target.
	LevelCel *string `json:"level_cel,omitempty"`
	// A list of CEL expressions that should be evaluated and matched to determine if the target should be notified.
	Rules []string `json:"rules,omitempty"`
	// Whether or not all rules must match, or if only one rule must match.
	RuleMatchingStrategy *UpdateSignalsEmailTargetRuleMatchingStrategy `json:"rule_matching_strategy,omitempty"`
}

func (o *UpdateSignalsEmailTarget) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateSignalsEmailTarget) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateSignalsEmailTarget) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateSignalsEmailTarget) GetTarget() *UpdateSignalsEmailTargetTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateSignalsEmailTarget) GetAllowedSenders() []string {
	if o == nil {
		return nil
	}
	return o.AllowedSenders
}

func (o *UpdateSignalsEmailTarget) GetStatusCel() *string {
	if o == nil {
		return nil
	}
	return o.StatusCel
}

func (o *UpdateSignalsEmailTarget) GetLevelCel() *string {
	if o == nil {
		return nil
	}
	return o.LevelCel
}

func (o *UpdateSignalsEmailTarget) GetRules() []string {
	if o == nil {
		return nil
	}
	return o.Rules
}

func (o *UpdateSignalsEmailTarget) GetRuleMatchingStrategy() *UpdateSignalsEmailTargetRuleMatchingStrategy {
	if o == nil {
		return nil
	}
	return o.RuleMatchingStrategy
}
