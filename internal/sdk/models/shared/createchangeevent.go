// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"time"
)

type ChangeIdentity struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

func (o *ChangeIdentity) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ChangeIdentity) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateChangeEventType string

const (
	CreateChangeEventTypeLink CreateChangeEventType = "link"
)

func (e CreateChangeEventType) ToPointer() *CreateChangeEventType {
	return &e
}
func (e *CreateChangeEventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link":
		*e = CreateChangeEventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChangeEventType: %v", v)
	}
}

type CreateChangeEventAttachment struct {
	Type CreateChangeEventType `json:"type"`
}

func (o *CreateChangeEventAttachment) GetType() CreateChangeEventType {
	if o == nil {
		return CreateChangeEventType("")
	}
	return o.Type
}

type Author struct {
	Source   string `json:"source"`
	SourceID string `json:"source_id"`
	Name     string `json:"name"`
}

func (o *Author) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

func (o *Author) GetSourceID() string {
	if o == nil {
		return ""
	}
	return o.SourceID
}

func (o *Author) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// CreateChangeEvent - Create a change event
type CreateChangeEvent struct {
	Summary     string            `json:"summary"`
	Description *string           `json:"description,omitempty"`
	Labels      map[string]string `json:"labels,omitempty"`
	StartsAt    *time.Time        `json:"starts_at,omitempty"`
	EndsAt      *time.Time        `json:"ends_at,omitempty"`
	// An array of environment IDs
	Environments []string `json:"environments,omitempty"`
	// An array of service IDs
	Services []string `json:"services,omitempty"`
	// An array of change IDs
	Changes []string `json:"changes,omitempty"`
	// The ID of a change event as assigned by an external provider
	ExternalID *string `json:"external_id,omitempty"`
	// If provided and valid, the event will be linked to all changes that have the same identities. Identity *values* must be unique.
	ChangeIdentities []ChangeIdentity `json:"change_identities,omitempty"`
	// JSON objects representing attachments, see attachments documentation for the schema
	Attachments []CreateChangeEventAttachment `json:"attachments,omitempty"`
	// Array of additional authors to add to the change event, the creating actor will automatically be added as an author
	Authors []Author `json:"authors,omitempty"`
}

func (c CreateChangeEvent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateChangeEvent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateChangeEvent) GetSummary() string {
	if o == nil {
		return ""
	}
	return o.Summary
}

func (o *CreateChangeEvent) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateChangeEvent) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *CreateChangeEvent) GetStartsAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartsAt
}

func (o *CreateChangeEvent) GetEndsAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndsAt
}

func (o *CreateChangeEvent) GetEnvironments() []string {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *CreateChangeEvent) GetServices() []string {
	if o == nil {
		return nil
	}
	return o.Services
}

func (o *CreateChangeEvent) GetChanges() []string {
	if o == nil {
		return nil
	}
	return o.Changes
}

func (o *CreateChangeEvent) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CreateChangeEvent) GetChangeIdentities() []ChangeIdentity {
	if o == nil {
		return nil
	}
	return o.ChangeIdentities
}

func (o *CreateChangeEvent) GetAttachments() []CreateChangeEventAttachment {
	if o == nil {
		return nil
	}
	return o.Attachments
}

func (o *CreateChangeEvent) GetAuthors() []Author {
	if o == nil {
		return nil
	}
	return o.Authors
}
