// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"time"
)

type CreateIncidentNoteVisibility string

const (
	CreateIncidentNoteVisibilityPrivateToOrg       CreateIncidentNoteVisibility = "private_to_org"
	CreateIncidentNoteVisibilityOpenToPublic       CreateIncidentNoteVisibility = "open_to_public"
	CreateIncidentNoteVisibilityInternalStatusPage CreateIncidentNoteVisibility = "internal_status_page"
)

func (e CreateIncidentNoteVisibility) ToPointer() *CreateIncidentNoteVisibility {
	return &e
}
func (e *CreateIncidentNoteVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private_to_org":
		fallthrough
	case "open_to_public":
		fallthrough
	case "internal_status_page":
		*e = CreateIncidentNoteVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateIncidentNoteVisibility: %v", v)
	}
}

type CreateIncidentNoteStatusPage struct {
	ID              string `json:"id"`
	IntegrationSlug string `json:"integration_slug"`
}

func (o *CreateIncidentNoteStatusPage) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateIncidentNoteStatusPage) GetIntegrationSlug() string {
	if o == nil {
		return ""
	}
	return o.IntegrationSlug
}

// CreateIncidentNote - Create a new note on for an incident. The visibility field on a note determines where it gets posted.
type CreateIncidentNote struct {
	Body string `json:"body"`
	// ISO8601 timestamp for when the note occurred
	OccurredAt  *time.Time                     `json:"occurred_at,omitempty"`
	Visibility  *CreateIncidentNoteVisibility  `default:"private_to_org" json:"visibility"`
	StatusPages []CreateIncidentNoteStatusPage `json:"status_pages,omitempty"`
}

func (c CreateIncidentNote) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateIncidentNote) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateIncidentNote) GetBody() string {
	if o == nil {
		return ""
	}
	return o.Body
}

func (o *CreateIncidentNote) GetOccurredAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.OccurredAt
}

func (o *CreateIncidentNote) GetVisibility() *CreateIncidentNoteVisibility {
	if o == nil {
		return nil
	}
	return o.Visibility
}

func (o *CreateIncidentNote) GetStatusPages() []CreateIncidentNoteStatusPage {
	if o == nil {
		return nil
	}
	return o.StatusPages
}
