// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type CreateTeamOnCallScheduleMembersInput struct {
	// The ID of a user who should be added to the schedule's initial rotation. You can add a user to the
	// schedule multiple times to construct more complex rotations, and you can specify a `null` user ID
	// to create unassigned slots in the rotation.
	//
	UserID *string `json:"user_id,omitempty"`
}

func (o *CreateTeamOnCallScheduleMembersInput) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

type CreateTeamOnCallScheduleRestrictionsInput struct {
	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	EndDay string `json:"end_day"`
	// An ISO8601 time string specifying when the restriction should end.
	EndTime string `json:"end_time"`
	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	StartDay string `json:"start_day"`
	// An ISO8601 time string specifying when the restriction should start.
	StartTime string `json:"start_time"`
}

func (o *CreateTeamOnCallScheduleRestrictionsInput) GetEndDay() string {
	if o == nil {
		return ""
	}
	return o.EndDay
}

func (o *CreateTeamOnCallScheduleRestrictionsInput) GetEndTime() string {
	if o == nil {
		return ""
	}
	return o.EndTime
}

func (o *CreateTeamOnCallScheduleRestrictionsInput) GetStartDay() string {
	if o == nil {
		return ""
	}
	return o.StartDay
}

func (o *CreateTeamOnCallScheduleRestrictionsInput) GetStartTime() string {
	if o == nil {
		return ""
	}
	return o.StartTime
}

// CreateTeamOnCallScheduleStrategyInput - An object that specifies how the initial rotation's on-call shifts should be generated. This value must be provided if `rotations` is not.
type CreateTeamOnCallScheduleStrategyInput struct {
	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	HandoffDay *string `json:"handoff_day,omitempty"`
	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime *string `json:"handoff_time,omitempty"`
	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration *string `json:"shift_duration,omitempty"`
	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	Type string `json:"type"`
}

func (o *CreateTeamOnCallScheduleStrategyInput) GetHandoffDay() *string {
	if o == nil {
		return nil
	}
	return o.HandoffDay
}

func (o *CreateTeamOnCallScheduleStrategyInput) GetHandoffTime() *string {
	if o == nil {
		return nil
	}
	return o.HandoffTime
}

func (o *CreateTeamOnCallScheduleStrategyInput) GetShiftDuration() *string {
	if o == nil {
		return nil
	}
	return o.ShiftDuration
}

func (o *CreateTeamOnCallScheduleStrategyInput) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateTeamOnCallSchedule - Create a Signals on-call schedule for a team with a single rotation. More rotations can be created later.
type CreateTeamOnCallSchedule struct {
	// A hex color code that will be used to represent the initial rotation in FireHydrant's UI.
	Color *string `json:"color,omitempty"`
	// A detailed description of the on-call schedule.
	Description *string `json:"description,omitempty"`
	// This parameter is deprecated; use `members` instead.
	MemberIds []string `json:"member_ids,omitempty"`
	// An ordered list of objects that specify members of the initial rotation.
	MembersInput []CreateTeamOnCallScheduleMembersInput `json:"members,omitempty"`
	// The on-call schedule's name.
	Name string `json:"name"`
	// A list of objects that restrict the initial rotation to specific on-call periods.
	RestrictionsInput []CreateTeamOnCallScheduleRestrictionsInput `json:"restrictions,omitempty"`
	// An optional description for the initial rotation. If not provided, the schedule's description will be used.
	RotationDescription *string `json:"rotation_description,omitempty"`
	// An optional name for the initial rotation. If not provided, the schedule's name will be used.
	RotationName *string `json:"rotation_name,omitempty"`
	// The ID of a Slack user group to sync the initial rotation's on-call members to.
	SlackUserGroupID *string `json:"slack_user_group_id,omitempty"`
	// An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom".
	StartTime *string `json:"start_time,omitempty"`
	// An object that specifies how the initial rotation's on-call shifts should be generated. This value must be provided if `rotations` is not.
	StrategyInput *CreateTeamOnCallScheduleStrategyInput `json:"strategy,omitempty"`
	// The time zone in which the on-call schedule's rotation will operate. This value must be a valid IANA time zone name and must be provided if `rotations` is not.
	TimeZone *string `json:"time_zone,omitempty"`
}

func (o *CreateTeamOnCallSchedule) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *CreateTeamOnCallSchedule) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateTeamOnCallSchedule) GetMemberIds() []string {
	if o == nil {
		return nil
	}
	return o.MemberIds
}

func (o *CreateTeamOnCallSchedule) GetMembersInput() []CreateTeamOnCallScheduleMembersInput {
	if o == nil {
		return nil
	}
	return o.MembersInput
}

func (o *CreateTeamOnCallSchedule) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateTeamOnCallSchedule) GetRestrictionsInput() []CreateTeamOnCallScheduleRestrictionsInput {
	if o == nil {
		return nil
	}
	return o.RestrictionsInput
}

func (o *CreateTeamOnCallSchedule) GetRotationDescription() *string {
	if o == nil {
		return nil
	}
	return o.RotationDescription
}

func (o *CreateTeamOnCallSchedule) GetRotationName() *string {
	if o == nil {
		return nil
	}
	return o.RotationName
}

func (o *CreateTeamOnCallSchedule) GetSlackUserGroupID() *string {
	if o == nil {
		return nil
	}
	return o.SlackUserGroupID
}

func (o *CreateTeamOnCallSchedule) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *CreateTeamOnCallSchedule) GetStrategyInput() *CreateTeamOnCallScheduleStrategyInput {
	if o == nil {
		return nil
	}
	return o.StrategyInput
}

func (o *CreateTeamOnCallSchedule) GetTimeZone() *string {
	if o == nil {
		return nil
	}
	return o.TimeZone
}
