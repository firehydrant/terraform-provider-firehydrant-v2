// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"time"
)

type Status string

const (
	StatusActive   Status = "active"
	StatusInactive Status = "inactive"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

// IncidentsRoleAssignmentEntity - Incidents_RoleAssignmentEntity model
type IncidentsRoleAssignmentEntity struct {
	ID        *string    `json:"id,omitempty"`
	Status    *Status    `json:"status,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// IncidentRoleEntity model
	IncidentRole *IncidentRoleEntity `json:"incident_role,omitempty"`
	// UserEntity model
	User *UserEntity `json:"user,omitempty"`
}

func (i IncidentsRoleAssignmentEntity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IncidentsRoleAssignmentEntity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *IncidentsRoleAssignmentEntity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *IncidentsRoleAssignmentEntity) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *IncidentsRoleAssignmentEntity) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *IncidentsRoleAssignmentEntity) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *IncidentsRoleAssignmentEntity) GetIncidentRole() *IncidentRoleEntity {
	if o == nil {
		return nil
	}
	return o.IncidentRole
}

func (o *IncidentsRoleAssignmentEntity) GetUser() *UserEntity {
	if o == nil {
		return nil
	}
	return o.User
}
