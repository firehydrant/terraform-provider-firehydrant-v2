// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
)

// CreateTeamEscalationPolicyHandoffStep - A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
type CreateTeamEscalationPolicyHandoffStep struct {
	// The ID of the target to which the policy will hand off.
	TargetID string `json:"target_id"`
	// The type of target to which the policy will hand off.
	TargetType string `json:"target_type"`
}

func (o *CreateTeamEscalationPolicyHandoffStep) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

func (o *CreateTeamEscalationPolicyHandoffStep) GetTargetType() string {
	if o == nil {
		return ""
	}
	return o.TargetType
}

// CreateTeamEscalationPolicyHighHandoffStep - Handoff step for HIGH priority alerts
type CreateTeamEscalationPolicyHighHandoffStep struct {
	TargetID   string `json:"target_id"`
	TargetType string `json:"target_type"`
}

func (o *CreateTeamEscalationPolicyHighHandoffStep) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

func (o *CreateTeamEscalationPolicyHighHandoffStep) GetTargetType() string {
	if o == nil {
		return ""
	}
	return o.TargetType
}

// CreateTeamEscalationPolicyHigh - Settings for HIGH priority alerts
type CreateTeamEscalationPolicyHigh struct {
	// Handoff step for HIGH priority alerts
	HandoffStep *CreateTeamEscalationPolicyHighHandoffStep `json:"handoff_step,omitempty"`
	// Number of repetitions for HIGH priority alerts
	Repetitions *int `json:"repetitions,omitempty"`
}

func (o *CreateTeamEscalationPolicyHigh) GetHandoffStep() *CreateTeamEscalationPolicyHighHandoffStep {
	if o == nil {
		return nil
	}
	return o.HandoffStep
}

func (o *CreateTeamEscalationPolicyHigh) GetRepetitions() *int {
	if o == nil {
		return nil
	}
	return o.Repetitions
}

// CreateTeamEscalationPolicyLowHandoffStep - Handoff step for LOW priority alerts
type CreateTeamEscalationPolicyLowHandoffStep struct {
	TargetID   string `json:"target_id"`
	TargetType string `json:"target_type"`
}

func (o *CreateTeamEscalationPolicyLowHandoffStep) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

func (o *CreateTeamEscalationPolicyLowHandoffStep) GetTargetType() string {
	if o == nil {
		return ""
	}
	return o.TargetType
}

// CreateTeamEscalationPolicyLow - Settings for LOW priority alerts
type CreateTeamEscalationPolicyLow struct {
	// Handoff step for LOW priority alerts
	HandoffStep *CreateTeamEscalationPolicyLowHandoffStep `json:"handoff_step,omitempty"`
	// Number of repetitions for LOW priority alerts
	Repetitions *int `json:"repetitions,omitempty"`
}

func (o *CreateTeamEscalationPolicyLow) GetHandoffStep() *CreateTeamEscalationPolicyLowHandoffStep {
	if o == nil {
		return nil
	}
	return o.HandoffStep
}

func (o *CreateTeamEscalationPolicyLow) GetRepetitions() *int {
	if o == nil {
		return nil
	}
	return o.Repetitions
}

// CreateTeamEscalationPolicyMediumHandoffStep - Handoff step for MEDIUM priority alerts
type CreateTeamEscalationPolicyMediumHandoffStep struct {
	TargetID   string `json:"target_id"`
	TargetType string `json:"target_type"`
}

func (o *CreateTeamEscalationPolicyMediumHandoffStep) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

func (o *CreateTeamEscalationPolicyMediumHandoffStep) GetTargetType() string {
	if o == nil {
		return ""
	}
	return o.TargetType
}

// CreateTeamEscalationPolicyMedium - Settings for MEDIUM priority alerts
type CreateTeamEscalationPolicyMedium struct {
	// Handoff step for MEDIUM priority alerts
	HandoffStep *CreateTeamEscalationPolicyMediumHandoffStep `json:"handoff_step,omitempty"`
	// Number of repetitions for MEDIUM priority alerts
	Repetitions *int `json:"repetitions,omitempty"`
}

func (o *CreateTeamEscalationPolicyMedium) GetHandoffStep() *CreateTeamEscalationPolicyMediumHandoffStep {
	if o == nil {
		return nil
	}
	return o.HandoffStep
}

func (o *CreateTeamEscalationPolicyMedium) GetRepetitions() *int {
	if o == nil {
		return nil
	}
	return o.Repetitions
}

// CreateTeamEscalationPolicyPrioritizedSettings - Priority-specific settings for dynamic escalation policies
type CreateTeamEscalationPolicyPrioritizedSettings struct {
	// Settings for HIGH priority alerts
	High *CreateTeamEscalationPolicyHigh `json:"high,omitempty"`
	// Settings for LOW priority alerts
	Low *CreateTeamEscalationPolicyLow `json:"low,omitempty"`
	// Settings for MEDIUM priority alerts
	Medium *CreateTeamEscalationPolicyMedium `json:"medium,omitempty"`
}

func (o *CreateTeamEscalationPolicyPrioritizedSettings) GetHigh() *CreateTeamEscalationPolicyHigh {
	if o == nil {
		return nil
	}
	return o.High
}

func (o *CreateTeamEscalationPolicyPrioritizedSettings) GetLow() *CreateTeamEscalationPolicyLow {
	if o == nil {
		return nil
	}
	return o.Low
}

func (o *CreateTeamEscalationPolicyPrioritizedSettings) GetMedium() *CreateTeamEscalationPolicyMedium {
	if o == nil {
		return nil
	}
	return o.Medium
}

type CreateTeamEscalationPolicyTarget struct {
	// The ID of the target that the step will notify.
	ID string `json:"id"`
	// The type of target that the step will notify.
	Type string `json:"type"`
}

func (o *CreateTeamEscalationPolicyTarget) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateTeamEscalationPolicyTarget) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreateTeamEscalationPolicyStep struct {
	// The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
	DistributionType *string `json:"distribution_type,omitempty"`
	// A list of priorities (HIGH, MEDIUM, LOW) to which the step applies when using a dynamic escalation policy.
	Priorities []string `json:"priorities,omitempty"`
	// A list of targets that the step will notify. You can specify up to 15 targets per step.
	Targets []CreateTeamEscalationPolicyTarget `json:"targets"`
	// An ISO8601 duration string specifying how long to wait before moving on to the next step. For the last step, this value specifies how long to wait before the escalation policy should repeat, if it repeats.
	Timeout string `json:"timeout"`
}

func (o *CreateTeamEscalationPolicyStep) GetDistributionType() *string {
	if o == nil {
		return nil
	}
	return o.DistributionType
}

func (o *CreateTeamEscalationPolicyStep) GetPriorities() []string {
	if o == nil {
		return nil
	}
	return o.Priorities
}

func (o *CreateTeamEscalationPolicyStep) GetTargets() []CreateTeamEscalationPolicyTarget {
	if o == nil {
		return []CreateTeamEscalationPolicyTarget{}
	}
	return o.Targets
}

func (o *CreateTeamEscalationPolicyStep) GetTimeout() string {
	if o == nil {
		return ""
	}
	return o.Timeout
}

// CreateTeamEscalationPolicy - Create a Signals escalation policy for a team.
type CreateTeamEscalationPolicy struct {
	// Whether this escalation policy should be the default for the team.
	Default *bool `default:"false" json:"default"`
	// A detailed description of the escalation policy.
	Description *string `json:"description,omitempty"`
	// A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
	HandoffStep *CreateTeamEscalationPolicyHandoffStep `json:"handoff_step,omitempty"`
	// The escalation policy's name.
	Name string `json:"name"`
	// Priority-specific settings for dynamic escalation policies
	PrioritizedSettings *CreateTeamEscalationPolicyPrioritizedSettings `json:"prioritized_settings,omitempty"`
	// The number of times that the escalation policy should repeat before an alert is dropped.
	Repetitions *int `default:"0" json:"repetitions"`
	// The strategy for handling steps in the escalation policy. Can be "static" or "dynamic_by_priority".
	StepStrategy *string `json:"step_strategy,omitempty"`
	// A list of steps that define how an alert should escalate through the policy.
	Steps []CreateTeamEscalationPolicyStep `json:"steps"`
}

func (c CreateTeamEscalationPolicy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateTeamEscalationPolicy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateTeamEscalationPolicy) GetDefault() *bool {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *CreateTeamEscalationPolicy) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateTeamEscalationPolicy) GetHandoffStep() *CreateTeamEscalationPolicyHandoffStep {
	if o == nil {
		return nil
	}
	return o.HandoffStep
}

func (o *CreateTeamEscalationPolicy) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateTeamEscalationPolicy) GetPrioritizedSettings() *CreateTeamEscalationPolicyPrioritizedSettings {
	if o == nil {
		return nil
	}
	return o.PrioritizedSettings
}

func (o *CreateTeamEscalationPolicy) GetRepetitions() *int {
	if o == nil {
		return nil
	}
	return o.Repetitions
}

func (o *CreateTeamEscalationPolicy) GetStepStrategy() *string {
	if o == nil {
		return nil
	}
	return o.StepStrategy
}

func (o *CreateTeamEscalationPolicy) GetSteps() []CreateTeamEscalationPolicyStep {
	if o == nil {
		return []CreateTeamEscalationPolicyStep{}
	}
	return o.Steps
}
