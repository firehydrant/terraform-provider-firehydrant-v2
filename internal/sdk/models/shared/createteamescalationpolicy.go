// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
)

// CreateTeamEscalationPolicyType - The type of target that the step will notify.
type CreateTeamEscalationPolicyType string

const (
	CreateTeamEscalationPolicyTypeOnCallSchedule CreateTeamEscalationPolicyType = "OnCallSchedule"
	CreateTeamEscalationPolicyTypeUser           CreateTeamEscalationPolicyType = "User"
	CreateTeamEscalationPolicyTypeSlackChannel   CreateTeamEscalationPolicyType = "SlackChannel"
	CreateTeamEscalationPolicyTypeEntireTeam     CreateTeamEscalationPolicyType = "EntireTeam"
	CreateTeamEscalationPolicyTypeWebhook        CreateTeamEscalationPolicyType = "Webhook"
)

func (e CreateTeamEscalationPolicyType) ToPointer() *CreateTeamEscalationPolicyType {
	return &e
}
func (e *CreateTeamEscalationPolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OnCallSchedule":
		fallthrough
	case "User":
		fallthrough
	case "SlackChannel":
		fallthrough
	case "EntireTeam":
		fallthrough
	case "Webhook":
		*e = CreateTeamEscalationPolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamEscalationPolicyType: %v", v)
	}
}

type CreateTeamEscalationPolicyTarget struct {
	// The type of target that the step will notify.
	Type CreateTeamEscalationPolicyType `json:"type"`
	// The ID of the target that the step will notify.
	ID string `json:"id"`
}

func (o *CreateTeamEscalationPolicyTarget) GetType() CreateTeamEscalationPolicyType {
	if o == nil {
		return CreateTeamEscalationPolicyType("")
	}
	return o.Type
}

func (o *CreateTeamEscalationPolicyTarget) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// CreateTeamEscalationPolicyDistributionType - The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
type CreateTeamEscalationPolicyDistributionType string

const (
	CreateTeamEscalationPolicyDistributionTypeUnspecified                  CreateTeamEscalationPolicyDistributionType = "unspecified"
	CreateTeamEscalationPolicyDistributionTypeRoundRobinByAlert            CreateTeamEscalationPolicyDistributionType = "round_robin_by_alert"
	CreateTeamEscalationPolicyDistributionTypeRoundRobinByEscalationPolicy CreateTeamEscalationPolicyDistributionType = "round_robin_by_escalation_policy"
)

func (e CreateTeamEscalationPolicyDistributionType) ToPointer() *CreateTeamEscalationPolicyDistributionType {
	return &e
}
func (e *CreateTeamEscalationPolicyDistributionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unspecified":
		fallthrough
	case "round_robin_by_alert":
		fallthrough
	case "round_robin_by_escalation_policy":
		*e = CreateTeamEscalationPolicyDistributionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamEscalationPolicyDistributionType: %v", v)
	}
}

type CreateTeamEscalationPolicyStep struct {
	// A list of targets that the step will notify. You can specify up to 15 targets per step.
	Targets []CreateTeamEscalationPolicyTarget `json:"targets"`
	// An ISO8601 duration string specifying how long to wait before moving on to the next step. For the last step, this value specifies how long to wait before the escalation policy should repeat, if it repeats.
	Timeout string `json:"timeout"`
	// The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
	DistributionType *CreateTeamEscalationPolicyDistributionType `json:"distribution_type,omitempty"`
	// A list of priorities (HIGH, MEDIUM, LOW) to which the step applies when using a dynamic escalation policy.
	Priorities []string `json:"priorities,omitempty"`
}

func (o *CreateTeamEscalationPolicyStep) GetTargets() []CreateTeamEscalationPolicyTarget {
	if o == nil {
		return []CreateTeamEscalationPolicyTarget{}
	}
	return o.Targets
}

func (o *CreateTeamEscalationPolicyStep) GetTimeout() string {
	if o == nil {
		return ""
	}
	return o.Timeout
}

func (o *CreateTeamEscalationPolicyStep) GetDistributionType() *CreateTeamEscalationPolicyDistributionType {
	if o == nil {
		return nil
	}
	return o.DistributionType
}

func (o *CreateTeamEscalationPolicyStep) GetPriorities() []string {
	if o == nil {
		return nil
	}
	return o.Priorities
}

// CreateTeamEscalationPolicyTargetType - The type of target to which the policy will hand off.
type CreateTeamEscalationPolicyTargetType string

const (
	CreateTeamEscalationPolicyTargetTypeEscalationPolicy CreateTeamEscalationPolicyTargetType = "EscalationPolicy"
	CreateTeamEscalationPolicyTargetTypeTeam             CreateTeamEscalationPolicyTargetType = "Team"
)

func (e CreateTeamEscalationPolicyTargetType) ToPointer() *CreateTeamEscalationPolicyTargetType {
	return &e
}
func (e *CreateTeamEscalationPolicyTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "Team":
		*e = CreateTeamEscalationPolicyTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamEscalationPolicyTargetType: %v", v)
	}
}

// CreateTeamEscalationPolicyHandoffStep - A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
type CreateTeamEscalationPolicyHandoffStep struct {
	// The type of target to which the policy will hand off.
	TargetType CreateTeamEscalationPolicyTargetType `json:"target_type"`
	// The ID of the target to which the policy will hand off.
	TargetID string `json:"target_id"`
}

func (o *CreateTeamEscalationPolicyHandoffStep) GetTargetType() CreateTeamEscalationPolicyTargetType {
	if o == nil {
		return CreateTeamEscalationPolicyTargetType("")
	}
	return o.TargetType
}

func (o *CreateTeamEscalationPolicyHandoffStep) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

type CreateTeamEscalationPolicyHighTargetType string

const (
	CreateTeamEscalationPolicyHighTargetTypeEscalationPolicy CreateTeamEscalationPolicyHighTargetType = "EscalationPolicy"
	CreateTeamEscalationPolicyHighTargetTypeTeam             CreateTeamEscalationPolicyHighTargetType = "Team"
)

func (e CreateTeamEscalationPolicyHighTargetType) ToPointer() *CreateTeamEscalationPolicyHighTargetType {
	return &e
}
func (e *CreateTeamEscalationPolicyHighTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "Team":
		*e = CreateTeamEscalationPolicyHighTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamEscalationPolicyHighTargetType: %v", v)
	}
}

// CreateTeamEscalationPolicyHighHandoffStep - Handoff step for HIGH priority alerts
type CreateTeamEscalationPolicyHighHandoffStep struct {
	TargetType CreateTeamEscalationPolicyHighTargetType `json:"target_type"`
	TargetID   string                                   `json:"target_id"`
}

func (o *CreateTeamEscalationPolicyHighHandoffStep) GetTargetType() CreateTeamEscalationPolicyHighTargetType {
	if o == nil {
		return CreateTeamEscalationPolicyHighTargetType("")
	}
	return o.TargetType
}

func (o *CreateTeamEscalationPolicyHighHandoffStep) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

// CreateTeamEscalationPolicyHigh - Settings for HIGH priority alerts
type CreateTeamEscalationPolicyHigh struct {
	// Number of repetitions for HIGH priority alerts
	Repetitions *int `json:"repetitions,omitempty"`
	// Handoff step for HIGH priority alerts
	HandoffStep *CreateTeamEscalationPolicyHighHandoffStep `json:"handoff_step,omitempty"`
}

func (o *CreateTeamEscalationPolicyHigh) GetRepetitions() *int {
	if o == nil {
		return nil
	}
	return o.Repetitions
}

func (o *CreateTeamEscalationPolicyHigh) GetHandoffStep() *CreateTeamEscalationPolicyHighHandoffStep {
	if o == nil {
		return nil
	}
	return o.HandoffStep
}

type CreateTeamEscalationPolicyMediumTargetType string

const (
	CreateTeamEscalationPolicyMediumTargetTypeEscalationPolicy CreateTeamEscalationPolicyMediumTargetType = "EscalationPolicy"
	CreateTeamEscalationPolicyMediumTargetTypeTeam             CreateTeamEscalationPolicyMediumTargetType = "Team"
)

func (e CreateTeamEscalationPolicyMediumTargetType) ToPointer() *CreateTeamEscalationPolicyMediumTargetType {
	return &e
}
func (e *CreateTeamEscalationPolicyMediumTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "Team":
		*e = CreateTeamEscalationPolicyMediumTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamEscalationPolicyMediumTargetType: %v", v)
	}
}

// CreateTeamEscalationPolicyMediumHandoffStep - Handoff step for MEDIUM priority alerts
type CreateTeamEscalationPolicyMediumHandoffStep struct {
	TargetType CreateTeamEscalationPolicyMediumTargetType `json:"target_type"`
	TargetID   string                                     `json:"target_id"`
}

func (o *CreateTeamEscalationPolicyMediumHandoffStep) GetTargetType() CreateTeamEscalationPolicyMediumTargetType {
	if o == nil {
		return CreateTeamEscalationPolicyMediumTargetType("")
	}
	return o.TargetType
}

func (o *CreateTeamEscalationPolicyMediumHandoffStep) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

// CreateTeamEscalationPolicyMedium - Settings for MEDIUM priority alerts
type CreateTeamEscalationPolicyMedium struct {
	// Number of repetitions for MEDIUM priority alerts
	Repetitions *int `json:"repetitions,omitempty"`
	// Handoff step for MEDIUM priority alerts
	HandoffStep *CreateTeamEscalationPolicyMediumHandoffStep `json:"handoff_step,omitempty"`
}

func (o *CreateTeamEscalationPolicyMedium) GetRepetitions() *int {
	if o == nil {
		return nil
	}
	return o.Repetitions
}

func (o *CreateTeamEscalationPolicyMedium) GetHandoffStep() *CreateTeamEscalationPolicyMediumHandoffStep {
	if o == nil {
		return nil
	}
	return o.HandoffStep
}

type CreateTeamEscalationPolicyLowTargetType string

const (
	CreateTeamEscalationPolicyLowTargetTypeEscalationPolicy CreateTeamEscalationPolicyLowTargetType = "EscalationPolicy"
	CreateTeamEscalationPolicyLowTargetTypeTeam             CreateTeamEscalationPolicyLowTargetType = "Team"
)

func (e CreateTeamEscalationPolicyLowTargetType) ToPointer() *CreateTeamEscalationPolicyLowTargetType {
	return &e
}
func (e *CreateTeamEscalationPolicyLowTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "Team":
		*e = CreateTeamEscalationPolicyLowTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamEscalationPolicyLowTargetType: %v", v)
	}
}

// CreateTeamEscalationPolicyLowHandoffStep - Handoff step for LOW priority alerts
type CreateTeamEscalationPolicyLowHandoffStep struct {
	TargetType CreateTeamEscalationPolicyLowTargetType `json:"target_type"`
	TargetID   string                                  `json:"target_id"`
}

func (o *CreateTeamEscalationPolicyLowHandoffStep) GetTargetType() CreateTeamEscalationPolicyLowTargetType {
	if o == nil {
		return CreateTeamEscalationPolicyLowTargetType("")
	}
	return o.TargetType
}

func (o *CreateTeamEscalationPolicyLowHandoffStep) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

// CreateTeamEscalationPolicyLow - Settings for LOW priority alerts
type CreateTeamEscalationPolicyLow struct {
	// Number of repetitions for LOW priority alerts
	Repetitions *int `json:"repetitions,omitempty"`
	// Handoff step for LOW priority alerts
	HandoffStep *CreateTeamEscalationPolicyLowHandoffStep `json:"handoff_step,omitempty"`
}

func (o *CreateTeamEscalationPolicyLow) GetRepetitions() *int {
	if o == nil {
		return nil
	}
	return o.Repetitions
}

func (o *CreateTeamEscalationPolicyLow) GetHandoffStep() *CreateTeamEscalationPolicyLowHandoffStep {
	if o == nil {
		return nil
	}
	return o.HandoffStep
}

// CreateTeamEscalationPolicyPrioritizedSettings - Priority-specific settings for dynamic escalation policies
type CreateTeamEscalationPolicyPrioritizedSettings struct {
	// Settings for HIGH priority alerts
	High *CreateTeamEscalationPolicyHigh `json:"high,omitempty"`
	// Settings for MEDIUM priority alerts
	Medium *CreateTeamEscalationPolicyMedium `json:"medium,omitempty"`
	// Settings for LOW priority alerts
	Low *CreateTeamEscalationPolicyLow `json:"low,omitempty"`
}

func (o *CreateTeamEscalationPolicyPrioritizedSettings) GetHigh() *CreateTeamEscalationPolicyHigh {
	if o == nil {
		return nil
	}
	return o.High
}

func (o *CreateTeamEscalationPolicyPrioritizedSettings) GetMedium() *CreateTeamEscalationPolicyMedium {
	if o == nil {
		return nil
	}
	return o.Medium
}

func (o *CreateTeamEscalationPolicyPrioritizedSettings) GetLow() *CreateTeamEscalationPolicyLow {
	if o == nil {
		return nil
	}
	return o.Low
}

// CreateTeamEscalationPolicy - Create a Signals escalation policy for a team.
type CreateTeamEscalationPolicy struct {
	// The escalation policy's name.
	Name string `json:"name"`
	// A detailed description of the escalation policy.
	Description *string `json:"description,omitempty"`
	// The number of times that the escalation policy should repeat before an alert is dropped.
	Repetitions *int `default:"0" json:"repetitions"`
	// Whether this escalation policy should be the default for the team.
	Default *bool `default:"false" json:"default"`
	// The strategy for handling steps in the escalation policy. Can be "static" or "dynamic_by_priority".
	StepStrategy *string `json:"step_strategy,omitempty"`
	// A list of steps that define how an alert should escalate through the policy.
	Steps []CreateTeamEscalationPolicyStep `json:"steps"`
	// A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
	HandoffStep *CreateTeamEscalationPolicyHandoffStep `json:"handoff_step,omitempty"`
	// Priority-specific settings for dynamic escalation policies
	PrioritizedSettings *CreateTeamEscalationPolicyPrioritizedSettings `json:"prioritized_settings,omitempty"`
}

func (c CreateTeamEscalationPolicy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateTeamEscalationPolicy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateTeamEscalationPolicy) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateTeamEscalationPolicy) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateTeamEscalationPolicy) GetRepetitions() *int {
	if o == nil {
		return nil
	}
	return o.Repetitions
}

func (o *CreateTeamEscalationPolicy) GetDefault() *bool {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *CreateTeamEscalationPolicy) GetStepStrategy() *string {
	if o == nil {
		return nil
	}
	return o.StepStrategy
}

func (o *CreateTeamEscalationPolicy) GetSteps() []CreateTeamEscalationPolicyStep {
	if o == nil {
		return []CreateTeamEscalationPolicyStep{}
	}
	return o.Steps
}

func (o *CreateTeamEscalationPolicy) GetHandoffStep() *CreateTeamEscalationPolicyHandoffStep {
	if o == nil {
		return nil
	}
	return o.HandoffStep
}

func (o *CreateTeamEscalationPolicy) GetPrioritizedSettings() *CreateTeamEscalationPolicyPrioritizedSettings {
	if o == nil {
		return nil
	}
	return o.PrioritizedSettings
}
