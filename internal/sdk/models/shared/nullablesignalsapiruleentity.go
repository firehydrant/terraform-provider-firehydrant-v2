// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"time"
)

type NullableSignalsAPIRuleEntityNotificationPriorityOverride string

const (
	NullableSignalsAPIRuleEntityNotificationPriorityOverrideHigh   NullableSignalsAPIRuleEntityNotificationPriorityOverride = "HIGH"
	NullableSignalsAPIRuleEntityNotificationPriorityOverrideMedium NullableSignalsAPIRuleEntityNotificationPriorityOverride = "MEDIUM"
	NullableSignalsAPIRuleEntityNotificationPriorityOverrideLow    NullableSignalsAPIRuleEntityNotificationPriorityOverride = "LOW"
)

func (e NullableSignalsAPIRuleEntityNotificationPriorityOverride) ToPointer() *NullableSignalsAPIRuleEntityNotificationPriorityOverride {
	return &e
}
func (e *NullableSignalsAPIRuleEntityNotificationPriorityOverride) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		*e = NullableSignalsAPIRuleEntityNotificationPriorityOverride(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NullableSignalsAPIRuleEntityNotificationPriorityOverride: %v", v)
	}
}

type NullableSignalsAPIRuleEntityCreateIncidentConditionWhen string

const (
	NullableSignalsAPIRuleEntityCreateIncidentConditionWhenWhenUnspecified NullableSignalsAPIRuleEntityCreateIncidentConditionWhen = "WHEN_UNSPECIFIED"
	NullableSignalsAPIRuleEntityCreateIncidentConditionWhenWhenAlways      NullableSignalsAPIRuleEntityCreateIncidentConditionWhen = "WHEN_ALWAYS"
)

func (e NullableSignalsAPIRuleEntityCreateIncidentConditionWhen) ToPointer() *NullableSignalsAPIRuleEntityCreateIncidentConditionWhen {
	return &e
}
func (e *NullableSignalsAPIRuleEntityCreateIncidentConditionWhen) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WHEN_UNSPECIFIED":
		fallthrough
	case "WHEN_ALWAYS":
		*e = NullableSignalsAPIRuleEntityCreateIncidentConditionWhen(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NullableSignalsAPIRuleEntityCreateIncidentConditionWhen: %v", v)
	}
}

type NullableSignalsAPIRuleEntity struct {
	ID                           *string                                                   `json:"id,omitempty"`
	Name                         *string                                                   `json:"name,omitempty"`
	Expression                   *string                                                   `json:"expression,omitempty"`
	TeamID                       *string                                                   `json:"team_id,omitempty"`
	Target                       *NullableSignalsAPITargetEntity                           `json:"target,omitempty"`
	CreatedBy                    *NullableAuthorEntity                                     `json:"created_by,omitempty"`
	CreatedAt                    *time.Time                                                `json:"created_at,omitempty"`
	UpdatedAt                    *time.Time                                                `json:"updated_at,omitempty"`
	IncidentType                 *NullableSuccinctEntity                                   `json:"incident_type,omitempty"`
	NotificationPriorityOverride *NullableSignalsAPIRuleEntityNotificationPriorityOverride `json:"notification_priority_override,omitempty"`
	CreateIncidentConditionWhen  *NullableSignalsAPIRuleEntityCreateIncidentConditionWhen  `json:"create_incident_condition_when,omitempty"`
	// Duration for deduplicating similar alerts (ISO8601 duration format e.g., 'PT30M', 'PT2H', 'P1D')
	DeduplicationExpiry *string `json:"deduplication_expiry,omitempty"`
}

func (n NullableSignalsAPIRuleEntity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NullableSignalsAPIRuleEntity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *NullableSignalsAPIRuleEntity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *NullableSignalsAPIRuleEntity) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *NullableSignalsAPIRuleEntity) GetExpression() *string {
	if o == nil {
		return nil
	}
	return o.Expression
}

func (o *NullableSignalsAPIRuleEntity) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *NullableSignalsAPIRuleEntity) GetTarget() *NullableSignalsAPITargetEntity {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *NullableSignalsAPIRuleEntity) GetCreatedBy() *NullableAuthorEntity {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *NullableSignalsAPIRuleEntity) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *NullableSignalsAPIRuleEntity) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *NullableSignalsAPIRuleEntity) GetIncidentType() *NullableSuccinctEntity {
	if o == nil {
		return nil
	}
	return o.IncidentType
}

func (o *NullableSignalsAPIRuleEntity) GetNotificationPriorityOverride() *NullableSignalsAPIRuleEntityNotificationPriorityOverride {
	if o == nil {
		return nil
	}
	return o.NotificationPriorityOverride
}

func (o *NullableSignalsAPIRuleEntity) GetCreateIncidentConditionWhen() *NullableSignalsAPIRuleEntityCreateIncidentConditionWhen {
	if o == nil {
		return nil
	}
	return o.CreateIncidentConditionWhen
}

func (o *NullableSignalsAPIRuleEntity) GetDeduplicationExpiry() *string {
	if o == nil {
		return nil
	}
	return o.DeduplicationExpiry
}
