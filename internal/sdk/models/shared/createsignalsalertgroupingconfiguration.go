// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// CreateSignalsAlertGroupingConfigurationFyi - Send FYI notification
type CreateSignalsAlertGroupingConfigurationFyi struct {
	// The slack channel ids to send the notification to
	SlackChannelIds []string `json:"slack_channel_ids"`
}

func (o *CreateSignalsAlertGroupingConfigurationFyi) GetSlackChannelIds() []string {
	if o == nil {
		return []string{}
	}
	return o.SlackChannelIds
}

// CreateSignalsAlertGroupingConfigurationActionInput - The action to take when grouping alerts
type CreateSignalsAlertGroupingConfigurationActionInput struct {
	// Send FYI notification
	Fyi *CreateSignalsAlertGroupingConfigurationFyi `json:"fyi,omitempty"`
	// Link the alerts and do not notify anyone
	Link *bool `json:"link,omitempty"`
}

func (o *CreateSignalsAlertGroupingConfigurationActionInput) GetFyi() *CreateSignalsAlertGroupingConfigurationFyi {
	if o == nil {
		return nil
	}
	return o.Fyi
}

func (o *CreateSignalsAlertGroupingConfigurationActionInput) GetLink() *bool {
	if o == nil {
		return nil
	}
	return o.Link
}

// CreateSignalsAlertGroupingConfigurationSubstring - The type of strategy to use for grouping alerts
type CreateSignalsAlertGroupingConfigurationSubstring struct {
	// The field to use for grouping alerts
	FieldName string `json:"field_name"`
	// The value to use for grouping alerts
	Value string `json:"value"`
}

func (o *CreateSignalsAlertGroupingConfigurationSubstring) GetFieldName() string {
	if o == nil {
		return ""
	}
	return o.FieldName
}

func (o *CreateSignalsAlertGroupingConfigurationSubstring) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateSignalsAlertGroupingConfigurationStrategy - The strategy to use for grouping alerts
type CreateSignalsAlertGroupingConfigurationStrategy struct {
	// The type of strategy to use for grouping alerts
	Substring *CreateSignalsAlertGroupingConfigurationSubstring `json:"substring,omitempty"`
}

func (o *CreateSignalsAlertGroupingConfigurationStrategy) GetSubstring() *CreateSignalsAlertGroupingConfigurationSubstring {
	if o == nil {
		return nil
	}
	return o.Substring
}

// CreateSignalsAlertGroupingConfiguration - Create a Signals alert grouping rule for the organization.
type CreateSignalsAlertGroupingConfiguration struct {
	// The action to take when grouping alerts
	ActionInput *CreateSignalsAlertGroupingConfigurationActionInput `json:"action,omitempty"`
	// How long to group alerts for
	ReferenceAlertTimePeriod string `json:"reference_alert_time_period"`
	// The strategy to use for grouping alerts
	Strategy CreateSignalsAlertGroupingConfigurationStrategy `json:"strategy"`
}

func (o *CreateSignalsAlertGroupingConfiguration) GetActionInput() *CreateSignalsAlertGroupingConfigurationActionInput {
	if o == nil {
		return nil
	}
	return o.ActionInput
}

func (o *CreateSignalsAlertGroupingConfiguration) GetReferenceAlertTimePeriod() string {
	if o == nil {
		return ""
	}
	return o.ReferenceAlertTimePeriod
}

func (o *CreateSignalsAlertGroupingConfiguration) GetStrategy() CreateSignalsAlertGroupingConfigurationStrategy {
	if o == nil {
		return CreateSignalsAlertGroupingConfigurationStrategy{}
	}
	return o.Strategy
}
