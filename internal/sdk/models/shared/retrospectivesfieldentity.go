// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RetrospectivesFieldEntityType string

const (
	RetrospectivesFieldEntityTypeText              RetrospectivesFieldEntityType = "text"
	RetrospectivesFieldEntityTypeSingleSelect      RetrospectivesFieldEntityType = "single_select"
	RetrospectivesFieldEntityTypeMultiSelect       RetrospectivesFieldEntityType = "multi_select"
	RetrospectivesFieldEntityTypeNumeric           RetrospectivesFieldEntityType = "numeric"
	RetrospectivesFieldEntityTypeDatetime          RetrospectivesFieldEntityType = "datetime"
	RetrospectivesFieldEntityTypeDynamicInputGroup RetrospectivesFieldEntityType = "dynamic_input_group"
	RetrospectivesFieldEntityTypeMarkdown          RetrospectivesFieldEntityType = "markdown"
	RetrospectivesFieldEntityTypeMarkdownText      RetrospectivesFieldEntityType = "markdown_text"
)

func (e RetrospectivesFieldEntityType) ToPointer() *RetrospectivesFieldEntityType {
	return &e
}
func (e *RetrospectivesFieldEntityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		fallthrough
	case "single_select":
		fallthrough
	case "multi_select":
		fallthrough
	case "numeric":
		fallthrough
	case "datetime":
		fallthrough
	case "dynamic_input_group":
		fallthrough
	case "markdown":
		fallthrough
	case "markdown_text":
		*e = RetrospectivesFieldEntityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrospectivesFieldEntityType: %v", v)
	}
}

type RetrospectivesFieldEntity struct {
	ID                *string                        `json:"id,omitempty"`
	Label             *string                        `json:"label,omitempty"`
	Type              *RetrospectivesFieldEntityType `json:"type,omitempty"`
	HelpText          *string                        `json:"help_text,omitempty"`
	PermissibleValues []string                       `json:"permissible_values,omitempty"`
	IsRequired        *bool                          `json:"is_required,omitempty"`
	Schema            []string                       `json:"schema,omitempty"`
}

func (o *RetrospectivesFieldEntity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RetrospectivesFieldEntity) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *RetrospectivesFieldEntity) GetType() *RetrospectivesFieldEntityType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *RetrospectivesFieldEntity) GetHelpText() *string {
	if o == nil {
		return nil
	}
	return o.HelpText
}

func (o *RetrospectivesFieldEntity) GetPermissibleValues() []string {
	if o == nil {
		return nil
	}
	return o.PermissibleValues
}

func (o *RetrospectivesFieldEntity) GetIsRequired() *bool {
	if o == nil {
		return nil
	}
	return o.IsRequired
}

func (o *RetrospectivesFieldEntity) GetSchema() []string {
	if o == nil {
		return nil
	}
	return o.Schema
}
