// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type CreateOnCallScheduleRotationMembersInput struct {
	// The ID of a user who should be added to the rotation. You can add a user to the rotation
	// multiple times to construct more complex rotations, and you can specify a `null` user ID to create
	// unassigned slots in the rotation.
	//
	UserID *string `json:"user_id,omitempty"`
}

func (o *CreateOnCallScheduleRotationMembersInput) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

type CreateOnCallScheduleRotationRestrictionsInput struct {
	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	EndDay string `json:"end_day"`
	// An ISO8601 time string specifying when the restriction should end.
	EndTime string `json:"end_time"`
	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	StartDay string `json:"start_day"`
	// An ISO8601 time string specifying when the restriction should start.
	StartTime string `json:"start_time"`
}

func (o *CreateOnCallScheduleRotationRestrictionsInput) GetEndDay() string {
	if o == nil {
		return ""
	}
	return o.EndDay
}

func (o *CreateOnCallScheduleRotationRestrictionsInput) GetEndTime() string {
	if o == nil {
		return ""
	}
	return o.EndTime
}

func (o *CreateOnCallScheduleRotationRestrictionsInput) GetStartDay() string {
	if o == nil {
		return ""
	}
	return o.StartDay
}

func (o *CreateOnCallScheduleRotationRestrictionsInput) GetStartTime() string {
	if o == nil {
		return ""
	}
	return o.StartTime
}

// CreateOnCallScheduleRotationStrategy - An object that specifies how the rotation's on-call shifts should be generated.
type CreateOnCallScheduleRotationStrategy struct {
	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	HandoffDay *string `json:"handoff_day,omitempty"`
	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime *string `json:"handoff_time,omitempty"`
	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration *string `json:"shift_duration,omitempty"`
	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	Type string `json:"type"`
}

func (o *CreateOnCallScheduleRotationStrategy) GetHandoffDay() *string {
	if o == nil {
		return nil
	}
	return o.HandoffDay
}

func (o *CreateOnCallScheduleRotationStrategy) GetHandoffTime() *string {
	if o == nil {
		return nil
	}
	return o.HandoffTime
}

func (o *CreateOnCallScheduleRotationStrategy) GetShiftDuration() *string {
	if o == nil {
		return nil
	}
	return o.ShiftDuration
}

func (o *CreateOnCallScheduleRotationStrategy) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateOnCallScheduleRotation - Add a new rotation to an existing on-call schedule
type CreateOnCallScheduleRotation struct {
	// A hex color code that will be used to represent the rotation in FireHydrant's UI.
	Color *string `json:"color,omitempty"`
	// An ISO8601 duration string specifying that the team should be notified about gaps in coverage for the upcoming interval. Notifications are sent at 9am daily in the rotation's time zone via email and, if enabled, the team's Slack channel.
	CoverageGapNotificationInterval *string `json:"coverage_gap_notification_interval,omitempty"`
	// The description of the on-call rotation
	Description *string `json:"description,omitempty"`
	// Notify the team's Slack channel when handoffs occur
	EnableSlackChannelNotifications *bool `json:"enable_slack_channel_notifications,omitempty"`
	// An ordered list of objects that specify members of the schedule's rotation.
	MembersInput []CreateOnCallScheduleRotationMembersInput `json:"members,omitempty"`
	// The name of the on-call rotation
	Name string `json:"name"`
	// Prevent shifts from being deleted by users and leading to gaps in coverage.
	PreventShiftDeletion *bool `json:"prevent_shift_deletion,omitempty"`
	// A list of objects that restrict the rotation to specific on-call periods.
	RestrictionsInput []CreateOnCallScheduleRotationRestrictionsInput `json:"restrictions,omitempty"`
	// The Slack Usergroup ID for the on-call rotation
	SlackUserGroupID *string `json:"slack_user_group_id,omitempty"`
	// An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom".
	StartTime *string `json:"start_time,omitempty"`
	// An object that specifies how the rotation's on-call shifts should be generated.
	Strategy CreateOnCallScheduleRotationStrategy `json:"strategy"`
	// The timezone of the on-call rotation as a string
	TimeZone string `json:"time_zone"`
}

func (o *CreateOnCallScheduleRotation) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *CreateOnCallScheduleRotation) GetCoverageGapNotificationInterval() *string {
	if o == nil {
		return nil
	}
	return o.CoverageGapNotificationInterval
}

func (o *CreateOnCallScheduleRotation) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateOnCallScheduleRotation) GetEnableSlackChannelNotifications() *bool {
	if o == nil {
		return nil
	}
	return o.EnableSlackChannelNotifications
}

func (o *CreateOnCallScheduleRotation) GetMembersInput() []CreateOnCallScheduleRotationMembersInput {
	if o == nil {
		return nil
	}
	return o.MembersInput
}

func (o *CreateOnCallScheduleRotation) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateOnCallScheduleRotation) GetPreventShiftDeletion() *bool {
	if o == nil {
		return nil
	}
	return o.PreventShiftDeletion
}

func (o *CreateOnCallScheduleRotation) GetRestrictionsInput() []CreateOnCallScheduleRotationRestrictionsInput {
	if o == nil {
		return nil
	}
	return o.RestrictionsInput
}

func (o *CreateOnCallScheduleRotation) GetSlackUserGroupID() *string {
	if o == nil {
		return nil
	}
	return o.SlackUserGroupID
}

func (o *CreateOnCallScheduleRotation) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *CreateOnCallScheduleRotation) GetStrategy() CreateOnCallScheduleRotationStrategy {
	if o == nil {
		return CreateOnCallScheduleRotationStrategy{}
	}
	return o.Strategy
}

func (o *CreateOnCallScheduleRotation) GetTimeZone() string {
	if o == nil {
		return ""
	}
	return o.TimeZone
}
