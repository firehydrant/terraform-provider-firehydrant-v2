// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"net/http"
	"time"
)

type ListIncidentsRequest struct {
	Page    *int `queryParam:"style=form,explode=true,name=page"`
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// A JSON string that defines 'logic' and 'user_data'
	Conditions *string `queryParam:"style=form,explode=true,name=conditions"`
	// A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments
	Environments *string `queryParam:"style=form,explode=true,name=environments"`
	// A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services
	Services *string `queryParam:"style=form,explode=true,name=services"`
	// A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities
	Functionalities *string `queryParam:"style=form,explode=true,name=functionalities"`
	// A comma separated list of infrastructure IDs. Returns incidents that do not have the following infrastructure ids associated with them.
	ExcludedInfrastructureIds *string `queryParam:"style=form,explode=true,name=excluded_infrastructure_ids"`
	// A comma separated list of team IDs
	Teams *string `queryParam:"style=form,explode=true,name=teams"`
	// A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments
	AssignedTeams *string `queryParam:"style=form,explode=true,name=assigned_teams"`
	// Incident status
	Status *string `queryParam:"style=form,explode=true,name=status"`
	// Filters for incidents that started on or after this date
	StartDate *time.Time `queryParam:"style=form,explode=true,name=start_date"`
	// Filters for incidents that started on or before this date
	EndDate *time.Time `queryParam:"style=form,explode=true,name=end_date"`
	// Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
	ResolvedAtOrAfter *time.Time `queryParam:"style=form,explode=true,name=resolved_at_or_after"`
	// Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
	ResolvedAtOrBefore *time.Time `queryParam:"style=form,explode=true,name=resolved_at_or_before"`
	// Filters for incidents that were closed at or after this time
	ClosedAtOrAfter *time.Time `queryParam:"style=form,explode=true,name=closed_at_or_after"`
	// Filters for incidents that were closed at or before this time
	ClosedAtOrBefore *time.Time `queryParam:"style=form,explode=true,name=closed_at_or_before"`
	// Filters for incidents that were created at or after this time
	CreatedAtOrAfter *time.Time `queryParam:"style=form,explode=true,name=created_at_or_after"`
	// Filters for incidents that were created at or before this time
	CreatedAtOrBefore *time.Time `queryParam:"style=form,explode=true,name=created_at_or_before"`
	// A text query for an incident that searches on name, summary, and desciption
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// A query to search incidents by their name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// The id of a previously saved search.
	SavedSearchID *string `queryParam:"style=form,explode=true,name=saved_search_id"`
	// A text value of priority
	Priorities *string `queryParam:"style=form,explode=true,name=priorities"`
	// Flag for including incidents where priority has not been set
	PriorityNotSet *bool `queryParam:"style=form,explode=true,name=priority_not_set"`
	// A text value of severity
	Severities *string `queryParam:"style=form,explode=true,name=severities"`
	// Flag for including incidents where severity has not been set
	SeverityNotSet *bool `queryParam:"style=form,explode=true,name=severity_not_set"`
	// A comma separated list of current milestones
	CurrentMilestones *string `queryParam:"style=form,explode=true,name=current_milestones"`
	// A comma separated list of tags
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
	// A matching strategy for the tags provided
	TagMatchStrategy *string `queryParam:"style=form,explode=true,name=tag_match_strategy"`
	// Return archived incidents
	Archived *bool `queryParam:"style=form,explode=true,name=archived"`
	// Filters for incidents that were updated after this date
	UpdatedAfter *time.Time `queryParam:"style=form,explode=true,name=updated_after"`
	// Filters for incidents that were updated before this date
	UpdatedBefore *time.Time `queryParam:"style=form,explode=true,name=updated_before"`
	// A comma separated list of incident type IDs
	IncidentTypeID *string `queryParam:"style=form,explode=true,name=incident_type_id"`
	// A comma separated list of retrospective template IDs
	RetrospectiveTemplates *string `queryParam:"style=form,explode=true,name=retrospective_templates"`
}

func (l ListIncidentsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListIncidentsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListIncidentsRequest) GetPage() *int {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListIncidentsRequest) GetPerPage() *int {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *ListIncidentsRequest) GetConditions() *string {
	if o == nil {
		return nil
	}
	return o.Conditions
}

func (o *ListIncidentsRequest) GetEnvironments() *string {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *ListIncidentsRequest) GetServices() *string {
	if o == nil {
		return nil
	}
	return o.Services
}

func (o *ListIncidentsRequest) GetFunctionalities() *string {
	if o == nil {
		return nil
	}
	return o.Functionalities
}

func (o *ListIncidentsRequest) GetExcludedInfrastructureIds() *string {
	if o == nil {
		return nil
	}
	return o.ExcludedInfrastructureIds
}

func (o *ListIncidentsRequest) GetTeams() *string {
	if o == nil {
		return nil
	}
	return o.Teams
}

func (o *ListIncidentsRequest) GetAssignedTeams() *string {
	if o == nil {
		return nil
	}
	return o.AssignedTeams
}

func (o *ListIncidentsRequest) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListIncidentsRequest) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *ListIncidentsRequest) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *ListIncidentsRequest) GetResolvedAtOrAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.ResolvedAtOrAfter
}

func (o *ListIncidentsRequest) GetResolvedAtOrBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.ResolvedAtOrBefore
}

func (o *ListIncidentsRequest) GetClosedAtOrAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.ClosedAtOrAfter
}

func (o *ListIncidentsRequest) GetClosedAtOrBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.ClosedAtOrBefore
}

func (o *ListIncidentsRequest) GetCreatedAtOrAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAtOrAfter
}

func (o *ListIncidentsRequest) GetCreatedAtOrBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAtOrBefore
}

func (o *ListIncidentsRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *ListIncidentsRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListIncidentsRequest) GetSavedSearchID() *string {
	if o == nil {
		return nil
	}
	return o.SavedSearchID
}

func (o *ListIncidentsRequest) GetPriorities() *string {
	if o == nil {
		return nil
	}
	return o.Priorities
}

func (o *ListIncidentsRequest) GetPriorityNotSet() *bool {
	if o == nil {
		return nil
	}
	return o.PriorityNotSet
}

func (o *ListIncidentsRequest) GetSeverities() *string {
	if o == nil {
		return nil
	}
	return o.Severities
}

func (o *ListIncidentsRequest) GetSeverityNotSet() *bool {
	if o == nil {
		return nil
	}
	return o.SeverityNotSet
}

func (o *ListIncidentsRequest) GetCurrentMilestones() *string {
	if o == nil {
		return nil
	}
	return o.CurrentMilestones
}

func (o *ListIncidentsRequest) GetTags() *string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ListIncidentsRequest) GetTagMatchStrategy() *string {
	if o == nil {
		return nil
	}
	return o.TagMatchStrategy
}

func (o *ListIncidentsRequest) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *ListIncidentsRequest) GetUpdatedAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAfter
}

func (o *ListIncidentsRequest) GetUpdatedBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedBefore
}

func (o *ListIncidentsRequest) GetIncidentTypeID() *string {
	if o == nil {
		return nil
	}
	return o.IncidentTypeID
}

func (o *ListIncidentsRequest) GetRetrospectiveTemplates() *string {
	if o == nil {
		return nil
	}
	return o.RetrospectiveTemplates
}

type ListIncidentsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// List all of the incidents in the organization
	IncidentEntityPaginated *shared.IncidentEntityPaginated
}

func (o *ListIncidentsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListIncidentsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListIncidentsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListIncidentsResponse) GetIncidentEntityPaginated() *shared.IncidentEntityPaginated {
	if o == nil {
		return nil
	}
	return o.IncidentEntityPaginated
}
