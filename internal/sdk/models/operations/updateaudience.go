// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"net/http"
)

type UpdateAudienceRequestBody struct {
	// Whether the audience is active or discarded
	Active *bool `json:"active,omitempty"`
	// Whether this is the default audience
	Default *bool `json:"default,omitempty"`
	// Description of the audience (max 4000 characters)
	Description *string `json:"description,omitempty"`
	// Position of the question in the list (1-based indexing)
	DetailsPosition []int `json:"details[position],omitempty"`
	// The prompt to display when collecting this detail
	DetailsPrompt []string `json:"details[prompt],omitempty"`
	// The incident detail question (max 255 characters)
	DetailsQuestion []string `json:"details[question],omitempty"`
	// Optional unique identifier for this detail
	DetailsSlug []string `json:"details[slug],omitempty"`
	// Name of the audience (max 255 characters)
	Name *string `json:"name,omitempty"`
}

func (o *UpdateAudienceRequestBody) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *UpdateAudienceRequestBody) GetDefault() *bool {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *UpdateAudienceRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateAudienceRequestBody) GetDetailsPosition() []int {
	if o == nil {
		return nil
	}
	return o.DetailsPosition
}

func (o *UpdateAudienceRequestBody) GetDetailsPrompt() []string {
	if o == nil {
		return nil
	}
	return o.DetailsPrompt
}

func (o *UpdateAudienceRequestBody) GetDetailsQuestion() []string {
	if o == nil {
		return nil
	}
	return o.DetailsQuestion
}

func (o *UpdateAudienceRequestBody) GetDetailsSlug() []string {
	if o == nil {
		return nil
	}
	return o.DetailsSlug
}

func (o *UpdateAudienceRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type UpdateAudienceRequest struct {
	// Unique identifier of the audience
	AudienceID  string                     `pathParam:"style=simple,explode=false,name=audience_id"`
	RequestBody *UpdateAudienceRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateAudienceRequest) GetAudienceID() string {
	if o == nil {
		return ""
	}
	return o.AudienceID
}

func (o *UpdateAudienceRequest) GetRequestBody() *UpdateAudienceRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateAudienceResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Update an existing audience
	AudiencesEntitiesAudienceEntity *shared.AudiencesEntitiesAudienceEntity
}

func (o *UpdateAudienceResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateAudienceResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateAudienceResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateAudienceResponse) GetAudiencesEntitiesAudienceEntity() *shared.AudiencesEntitiesAudienceEntity {
	if o == nil {
		return nil
	}
	return o.AudiencesEntitiesAudienceEntity
}
