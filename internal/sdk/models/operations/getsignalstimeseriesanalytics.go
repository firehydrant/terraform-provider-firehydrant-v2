// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"net/http"
	"time"
)

// Bucket - String that determines how records are grouped
type Bucket string

const (
	BucketMonth Bucket = "month"
	BucketWeek  Bucket = "week"
	BucketDay   Bucket = "day"
)

func (e Bucket) ToPointer() *Bucket {
	return &e
}
func (e *Bucket) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		fallthrough
	case "week":
		fallthrough
	case "day":
		*e = Bucket(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bucket: %v", v)
	}
}

// GetSignalsTimeseriesAnalyticsGroupBy - String that determines how records are grouped
type GetSignalsTimeseriesAnalyticsGroupBy string

const (
	GetSignalsTimeseriesAnalyticsGroupBySignalRules  GetSignalsTimeseriesAnalyticsGroupBy = "signal_rules"
	GetSignalsTimeseriesAnalyticsGroupByTeams        GetSignalsTimeseriesAnalyticsGroupBy = "teams"
	GetSignalsTimeseriesAnalyticsGroupByServices     GetSignalsTimeseriesAnalyticsGroupBy = "services"
	GetSignalsTimeseriesAnalyticsGroupByEnvironments GetSignalsTimeseriesAnalyticsGroupBy = "environments"
	GetSignalsTimeseriesAnalyticsGroupByTags         GetSignalsTimeseriesAnalyticsGroupBy = "tags"
)

func (e GetSignalsTimeseriesAnalyticsGroupBy) ToPointer() *GetSignalsTimeseriesAnalyticsGroupBy {
	return &e
}
func (e *GetSignalsTimeseriesAnalyticsGroupBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "signal_rules":
		fallthrough
	case "teams":
		fallthrough
	case "services":
		fallthrough
	case "environments":
		fallthrough
	case "tags":
		*e = GetSignalsTimeseriesAnalyticsGroupBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignalsTimeseriesAnalyticsGroupBy: %v", v)
	}
}

// GetSignalsTimeseriesAnalyticsSortBy - String that determines how records are sorted
type GetSignalsTimeseriesAnalyticsSortBy string

const (
	GetSignalsTimeseriesAnalyticsSortByTotalOpenedAlerts   GetSignalsTimeseriesAnalyticsSortBy = "total_opened_alerts"
	GetSignalsTimeseriesAnalyticsSortByTotalAckedAlerts    GetSignalsTimeseriesAnalyticsSortBy = "total_acked_alerts"
	GetSignalsTimeseriesAnalyticsSortByTotalIncidents      GetSignalsTimeseriesAnalyticsSortBy = "total_incidents"
	GetSignalsTimeseriesAnalyticsSortByAckedPercentage     GetSignalsTimeseriesAnalyticsSortBy = "acked_percentage"
	GetSignalsTimeseriesAnalyticsSortByIncidentsPercentage GetSignalsTimeseriesAnalyticsSortBy = "incidents_percentage"
)

func (e GetSignalsTimeseriesAnalyticsSortBy) ToPointer() *GetSignalsTimeseriesAnalyticsSortBy {
	return &e
}
func (e *GetSignalsTimeseriesAnalyticsSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "total_opened_alerts":
		fallthrough
	case "total_acked_alerts":
		fallthrough
	case "total_incidents":
		fallthrough
	case "acked_percentage":
		fallthrough
	case "incidents_percentage":
		*e = GetSignalsTimeseriesAnalyticsSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignalsTimeseriesAnalyticsSortBy: %v", v)
	}
}

// GetSignalsTimeseriesAnalyticsSortDirection - String that determines how records are sorted
type GetSignalsTimeseriesAnalyticsSortDirection string

const (
	GetSignalsTimeseriesAnalyticsSortDirectionAsc  GetSignalsTimeseriesAnalyticsSortDirection = "asc"
	GetSignalsTimeseriesAnalyticsSortDirectionDesc GetSignalsTimeseriesAnalyticsSortDirection = "desc"
)

func (e GetSignalsTimeseriesAnalyticsSortDirection) ToPointer() *GetSignalsTimeseriesAnalyticsSortDirection {
	return &e
}
func (e *GetSignalsTimeseriesAnalyticsSortDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetSignalsTimeseriesAnalyticsSortDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignalsTimeseriesAnalyticsSortDirection: %v", v)
	}
}

type GetSignalsTimeseriesAnalyticsRequest struct {
	// String that determines how records are grouped
	Bucket *Bucket `queryParam:"style=form,explode=true,name=bucket"`
	// A comma separated list of signal rule IDs
	SignalRules *string `queryParam:"style=form,explode=true,name=signal_rules"`
	// A comma separated list of team IDs
	Teams *string `queryParam:"style=form,explode=true,name=teams"`
	// A comma separated list of environment IDs
	Environments *string `queryParam:"style=form,explode=true,name=environments"`
	// A comma separated list of service IDs
	Services *string `queryParam:"style=form,explode=true,name=services"`
	// A comma separated list of tags
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
	// A comma separated list of user IDs
	Users *string `queryParam:"style=form,explode=true,name=users"`
	// String that determines how records are grouped
	GroupBy *GetSignalsTimeseriesAnalyticsGroupBy `queryParam:"style=form,explode=true,name=group_by"`
	// String that determines how records are sorted
	SortBy *GetSignalsTimeseriesAnalyticsSortBy `queryParam:"style=form,explode=true,name=sort_by"`
	// String that determines how records are sorted
	SortDirection *GetSignalsTimeseriesAnalyticsSortDirection `queryParam:"style=form,explode=true,name=sort_direction"`
	// The start date to return metrics from
	StartDate *time.Time `queryParam:"style=form,explode=true,name=start_date"`
	// The end date to return metrics from
	EndDate *time.Time `queryParam:"style=form,explode=true,name=end_date"`
}

func (g GetSignalsTimeseriesAnalyticsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSignalsTimeseriesAnalyticsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSignalsTimeseriesAnalyticsRequest) GetBucket() *Bucket {
	if o == nil {
		return nil
	}
	return o.Bucket
}

func (o *GetSignalsTimeseriesAnalyticsRequest) GetSignalRules() *string {
	if o == nil {
		return nil
	}
	return o.SignalRules
}

func (o *GetSignalsTimeseriesAnalyticsRequest) GetTeams() *string {
	if o == nil {
		return nil
	}
	return o.Teams
}

func (o *GetSignalsTimeseriesAnalyticsRequest) GetEnvironments() *string {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *GetSignalsTimeseriesAnalyticsRequest) GetServices() *string {
	if o == nil {
		return nil
	}
	return o.Services
}

func (o *GetSignalsTimeseriesAnalyticsRequest) GetTags() *string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *GetSignalsTimeseriesAnalyticsRequest) GetUsers() *string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *GetSignalsTimeseriesAnalyticsRequest) GetGroupBy() *GetSignalsTimeseriesAnalyticsGroupBy {
	if o == nil {
		return nil
	}
	return o.GroupBy
}

func (o *GetSignalsTimeseriesAnalyticsRequest) GetSortBy() *GetSignalsTimeseriesAnalyticsSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

func (o *GetSignalsTimeseriesAnalyticsRequest) GetSortDirection() *GetSignalsTimeseriesAnalyticsSortDirection {
	if o == nil {
		return nil
	}
	return o.SortDirection
}

func (o *GetSignalsTimeseriesAnalyticsRequest) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *GetSignalsTimeseriesAnalyticsRequest) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}

type GetSignalsTimeseriesAnalyticsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetSignalsTimeseriesAnalyticsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetSignalsTimeseriesAnalyticsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetSignalsTimeseriesAnalyticsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
