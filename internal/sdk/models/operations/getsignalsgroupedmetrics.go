// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"net/http"
	"time"
)

// GetSignalsGroupedMetricsGroupBy - String that determines how records are grouped
type GetSignalsGroupedMetricsGroupBy string

const (
	GetSignalsGroupedMetricsGroupBySignalRules  GetSignalsGroupedMetricsGroupBy = "signal_rules"
	GetSignalsGroupedMetricsGroupByTeams        GetSignalsGroupedMetricsGroupBy = "teams"
	GetSignalsGroupedMetricsGroupByServices     GetSignalsGroupedMetricsGroupBy = "services"
	GetSignalsGroupedMetricsGroupByEnvironments GetSignalsGroupedMetricsGroupBy = "environments"
	GetSignalsGroupedMetricsGroupByTags         GetSignalsGroupedMetricsGroupBy = "tags"
)

func (e GetSignalsGroupedMetricsGroupBy) ToPointer() *GetSignalsGroupedMetricsGroupBy {
	return &e
}
func (e *GetSignalsGroupedMetricsGroupBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "signal_rules":
		fallthrough
	case "teams":
		fallthrough
	case "services":
		fallthrough
	case "environments":
		fallthrough
	case "tags":
		*e = GetSignalsGroupedMetricsGroupBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignalsGroupedMetricsGroupBy: %v", v)
	}
}

// GetSignalsGroupedMetricsSortBy - String that determines how records are sorted
type GetSignalsGroupedMetricsSortBy string

const (
	GetSignalsGroupedMetricsSortByTotalOpenedAlerts   GetSignalsGroupedMetricsSortBy = "total_opened_alerts"
	GetSignalsGroupedMetricsSortByTotalAckedAlerts    GetSignalsGroupedMetricsSortBy = "total_acked_alerts"
	GetSignalsGroupedMetricsSortByTotalIncidents      GetSignalsGroupedMetricsSortBy = "total_incidents"
	GetSignalsGroupedMetricsSortByAckedPercentage     GetSignalsGroupedMetricsSortBy = "acked_percentage"
	GetSignalsGroupedMetricsSortByIncidentsPercentage GetSignalsGroupedMetricsSortBy = "incidents_percentage"
)

func (e GetSignalsGroupedMetricsSortBy) ToPointer() *GetSignalsGroupedMetricsSortBy {
	return &e
}
func (e *GetSignalsGroupedMetricsSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "total_opened_alerts":
		fallthrough
	case "total_acked_alerts":
		fallthrough
	case "total_incidents":
		fallthrough
	case "acked_percentage":
		fallthrough
	case "incidents_percentage":
		*e = GetSignalsGroupedMetricsSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignalsGroupedMetricsSortBy: %v", v)
	}
}

// GetSignalsGroupedMetricsSortDirection - String that determines how records are sorted
type GetSignalsGroupedMetricsSortDirection string

const (
	GetSignalsGroupedMetricsSortDirectionAsc  GetSignalsGroupedMetricsSortDirection = "asc"
	GetSignalsGroupedMetricsSortDirectionDesc GetSignalsGroupedMetricsSortDirection = "desc"
)

func (e GetSignalsGroupedMetricsSortDirection) ToPointer() *GetSignalsGroupedMetricsSortDirection {
	return &e
}
func (e *GetSignalsGroupedMetricsSortDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetSignalsGroupedMetricsSortDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignalsGroupedMetricsSortDirection: %v", v)
	}
}

type GetSignalsGroupedMetricsRequest struct {
	// A comma separated list of signal rule IDs
	SignalRules *string `queryParam:"style=form,explode=true,name=signal_rules"`
	// A comma separated list of team IDs
	Teams *string `queryParam:"style=form,explode=true,name=teams"`
	// A comma separated list of environment IDs
	Environments *string `queryParam:"style=form,explode=true,name=environments"`
	// A comma separated list of service IDs
	Services *string `queryParam:"style=form,explode=true,name=services"`
	// A comma separated list of tags
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
	// A comma separated list of user IDs
	Users *string `queryParam:"style=form,explode=true,name=users"`
	// String that determines how records are grouped
	GroupBy *GetSignalsGroupedMetricsGroupBy `queryParam:"style=form,explode=true,name=group_by"`
	// String that determines how records are sorted
	SortBy *GetSignalsGroupedMetricsSortBy `queryParam:"style=form,explode=true,name=sort_by"`
	// String that determines how records are sorted
	SortDirection *GetSignalsGroupedMetricsSortDirection `queryParam:"style=form,explode=true,name=sort_direction"`
	// The start date to return metrics from
	StartDate *time.Time `queryParam:"style=form,explode=true,name=start_date"`
	// The end date to return metrics from
	EndDate *time.Time `queryParam:"style=form,explode=true,name=end_date"`
}

func (g GetSignalsGroupedMetricsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSignalsGroupedMetricsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSignalsGroupedMetricsRequest) GetSignalRules() *string {
	if o == nil {
		return nil
	}
	return o.SignalRules
}

func (o *GetSignalsGroupedMetricsRequest) GetTeams() *string {
	if o == nil {
		return nil
	}
	return o.Teams
}

func (o *GetSignalsGroupedMetricsRequest) GetEnvironments() *string {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *GetSignalsGroupedMetricsRequest) GetServices() *string {
	if o == nil {
		return nil
	}
	return o.Services
}

func (o *GetSignalsGroupedMetricsRequest) GetTags() *string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *GetSignalsGroupedMetricsRequest) GetUsers() *string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *GetSignalsGroupedMetricsRequest) GetGroupBy() *GetSignalsGroupedMetricsGroupBy {
	if o == nil {
		return nil
	}
	return o.GroupBy
}

func (o *GetSignalsGroupedMetricsRequest) GetSortBy() *GetSignalsGroupedMetricsSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

func (o *GetSignalsGroupedMetricsRequest) GetSortDirection() *GetSignalsGroupedMetricsSortDirection {
	if o == nil {
		return nil
	}
	return o.SortDirection
}

func (o *GetSignalsGroupedMetricsRequest) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *GetSignalsGroupedMetricsRequest) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}

type GetSignalsGroupedMetricsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetSignalsGroupedMetricsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetSignalsGroupedMetricsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetSignalsGroupedMetricsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
