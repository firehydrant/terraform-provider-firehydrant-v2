// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"net/http"
)

type ListScimUsersRequest struct {
	// This is a string used to query users by either userName or email.
	//         Proper example syntax for this would be `?filter=userName eq john` or `?filter=userName eq "john@firehydrant.com"`.
	//         Currently we only support the `eq` operator
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// This is an integer which represents a pagination offset
	StartIndex *int `queryParam:"style=form,explode=true,name=startIndex"`
	// This is an integer which represents the number of items per page in the response
	Count *int `queryParam:"style=form,explode=true,name=count"`
}

func (o *ListScimUsersRequest) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *ListScimUsersRequest) GetStartIndex() *int {
	if o == nil {
		return nil
	}
	return o.StartIndex
}

func (o *ListScimUsersRequest) GetCount() *int {
	if o == nil {
		return nil
	}
	return o.Count
}

type ListScimUsersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListScimUsersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListScimUsersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListScimUsersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
