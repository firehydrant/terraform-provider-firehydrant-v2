// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"net/http"
)

type DeleteIncidentImpactType string

const (
	DeleteIncidentImpactTypeEnvironments    DeleteIncidentImpactType = "environments"
	DeleteIncidentImpactTypeFunctionalities DeleteIncidentImpactType = "functionalities"
	DeleteIncidentImpactTypeServices        DeleteIncidentImpactType = "services"
	DeleteIncidentImpactTypeCustomers       DeleteIncidentImpactType = "customers"
)

func (e DeleteIncidentImpactType) ToPointer() *DeleteIncidentImpactType {
	return &e
}
func (e *DeleteIncidentImpactType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "environments":
		fallthrough
	case "functionalities":
		fallthrough
	case "services":
		fallthrough
	case "customers":
		*e = DeleteIncidentImpactType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteIncidentImpactType: %v", v)
	}
}

type DeleteIncidentImpactRequest struct {
	IncidentID string                   `pathParam:"style=simple,explode=false,name=incident_id"`
	Type       DeleteIncidentImpactType `pathParam:"style=simple,explode=false,name=type"`
	ID         string                   `pathParam:"style=simple,explode=false,name=id"`
}

func (o *DeleteIncidentImpactRequest) GetIncidentID() string {
	if o == nil {
		return ""
	}
	return o.IncidentID
}

func (o *DeleteIncidentImpactRequest) GetType() DeleteIncidentImpactType {
	if o == nil {
		return DeleteIncidentImpactType("")
	}
	return o.Type
}

func (o *DeleteIncidentImpactRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type DeleteIncidentImpactResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Bad Request
	ErrorEntity *shared.ErrorEntity
}

func (o *DeleteIncidentImpactResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *DeleteIncidentImpactResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *DeleteIncidentImpactResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *DeleteIncidentImpactResponse) GetErrorEntity() *shared.ErrorEntity {
	if o == nil {
		return nil
	}
	return o.ErrorEntity
}
