// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/types"
	"net/http"
	"time"
)

// GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategy - A matching strategy for the tags provided
type GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategy string

const (
	GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategyAny      GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategy = "any"
	GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategyMatchAll GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategy = "match_all"
	GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategyExclude  GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategy = "exclude"
)

func (e GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategy) ToPointer() *GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategy {
	return &e
}
func (e *GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "match_all":
		fallthrough
	case "exclude":
		*e = GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategy: %v", v)
	}
}

type GetV1MetricsMilestoneFunnelGroupBy string

const (
	GetV1MetricsMilestoneFunnelGroupByStartedDay   GetV1MetricsMilestoneFunnelGroupBy = "started_day"
	GetV1MetricsMilestoneFunnelGroupByStartedWeek  GetV1MetricsMilestoneFunnelGroupBy = "started_week"
	GetV1MetricsMilestoneFunnelGroupByStartedMonth GetV1MetricsMilestoneFunnelGroupBy = "started_month"
	GetV1MetricsMilestoneFunnelGroupByAllTime      GetV1MetricsMilestoneFunnelGroupBy = "all_time"
)

func (e GetV1MetricsMilestoneFunnelGroupBy) ToPointer() *GetV1MetricsMilestoneFunnelGroupBy {
	return &e
}
func (e *GetV1MetricsMilestoneFunnelGroupBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "started_day":
		fallthrough
	case "started_week":
		fallthrough
	case "started_month":
		fallthrough
	case "all_time":
		*e = GetV1MetricsMilestoneFunnelGroupBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetV1MetricsMilestoneFunnelGroupBy: %v", v)
	}
}

type GetV1MetricsMilestoneFunnelRequestBody struct {
	GroupBy []GetV1MetricsMilestoneFunnelGroupBy `multipartForm:"name=group_by"`
}

func (o *GetV1MetricsMilestoneFunnelRequestBody) GetGroupBy() []GetV1MetricsMilestoneFunnelGroupBy {
	if o == nil {
		return nil
	}
	return o.GroupBy
}

type GetV1MetricsMilestoneFunnelRequest struct {
	// A JSON string that defines 'logic' and 'user_data'
	Conditions *string `queryParam:"style=form,explode=true,name=conditions"`
	// A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments
	Environments *string `queryParam:"style=form,explode=true,name=environments"`
	// A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services
	Services *string `queryParam:"style=form,explode=true,name=services"`
	// A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities
	Functionalities *string `queryParam:"style=form,explode=true,name=functionalities"`
	// A comma separated list of infrastructure IDs. Returns incidents that do not have the following infrastructure ids associated with them.
	ExcludedInfrastructureIds *string `queryParam:"style=form,explode=true,name=excluded_infrastructure_ids"`
	// A comma separated list of team IDs
	Teams *string `queryParam:"style=form,explode=true,name=teams"`
	// A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments
	AssignedTeams *string `queryParam:"style=form,explode=true,name=assigned_teams"`
	// Incident status
	Status *string `queryParam:"style=form,explode=true,name=status"`
	// Filters for incidents that started on or after this date
	StartDate *types.Date `queryParam:"style=form,explode=true,name=start_date"`
	// Filters for incidents that started on or before this date
	EndDate *types.Date `queryParam:"style=form,explode=true,name=end_date"`
	// Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
	ResolvedAtOrAfter *time.Time `queryParam:"style=form,explode=true,name=resolved_at_or_after"`
	// Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
	ResolvedAtOrBefore *time.Time `queryParam:"style=form,explode=true,name=resolved_at_or_before"`
	// Filters for incidents that were closed at or after this time
	ClosedAtOrAfter *time.Time `queryParam:"style=form,explode=true,name=closed_at_or_after"`
	// Filters for incidents that were closed at or before this time
	ClosedAtOrBefore *time.Time `queryParam:"style=form,explode=true,name=closed_at_or_before"`
	// Filters for incidents that were created at or after this time
	CreatedAtOrAfter *time.Time `queryParam:"style=form,explode=true,name=created_at_or_after"`
	// Filters for incidents that were created at or before this time
	CreatedAtOrBefore *time.Time `queryParam:"style=form,explode=true,name=created_at_or_before"`
	// A text query for an incident that searches on name, summary, and desciption
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// A query to search incidents by their name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// The id of a previously saved search.
	SavedSearchID *string `queryParam:"style=form,explode=true,name=saved_search_id"`
	// A text value of priority
	Priorities *string `queryParam:"style=form,explode=true,name=priorities"`
	// Flag for including incidents where priority has not been set
	PriorityNotSet *bool `queryParam:"style=form,explode=true,name=priority_not_set"`
	// A text value of severity
	Severities *string `queryParam:"style=form,explode=true,name=severities"`
	// Flag for including incidents where severity has not been set
	SeverityNotSet *bool `queryParam:"style=form,explode=true,name=severity_not_set"`
	// A comma separated list of current milestones
	CurrentMilestones *string `queryParam:"style=form,explode=true,name=current_milestones"`
	// A comma separated list of tags
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
	// A matching strategy for the tags provided
	TagMatchStrategy *GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategy `queryParam:"style=form,explode=true,name=tag_match_strategy"`
	// Return archived incidents
	Archived *bool `queryParam:"style=form,explode=true,name=archived"`
	// Filters for incidents that were updated after this date
	UpdatedAfter *time.Time `queryParam:"style=form,explode=true,name=updated_after"`
	// Filters for incidents that were updated before this date
	UpdatedBefore *time.Time `queryParam:"style=form,explode=true,name=updated_before"`
	// A comma separated list of incident type IDs
	IncidentTypeID *string                                 `queryParam:"style=form,explode=true,name=incident_type_id"`
	RequestBody    *GetV1MetricsMilestoneFunnelRequestBody `request:"mediaType=multipart/form-data"`
}

func (g GetV1MetricsMilestoneFunnelRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetV1MetricsMilestoneFunnelRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetConditions() *string {
	if o == nil {
		return nil
	}
	return o.Conditions
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetEnvironments() *string {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetServices() *string {
	if o == nil {
		return nil
	}
	return o.Services
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetFunctionalities() *string {
	if o == nil {
		return nil
	}
	return o.Functionalities
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetExcludedInfrastructureIds() *string {
	if o == nil {
		return nil
	}
	return o.ExcludedInfrastructureIds
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetTeams() *string {
	if o == nil {
		return nil
	}
	return o.Teams
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetAssignedTeams() *string {
	if o == nil {
		return nil
	}
	return o.AssignedTeams
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetResolvedAtOrAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.ResolvedAtOrAfter
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetResolvedAtOrBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.ResolvedAtOrBefore
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetClosedAtOrAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.ClosedAtOrAfter
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetClosedAtOrBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.ClosedAtOrBefore
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetCreatedAtOrAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAtOrAfter
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetCreatedAtOrBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAtOrBefore
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetSavedSearchID() *string {
	if o == nil {
		return nil
	}
	return o.SavedSearchID
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetPriorities() *string {
	if o == nil {
		return nil
	}
	return o.Priorities
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetPriorityNotSet() *bool {
	if o == nil {
		return nil
	}
	return o.PriorityNotSet
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetSeverities() *string {
	if o == nil {
		return nil
	}
	return o.Severities
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetSeverityNotSet() *bool {
	if o == nil {
		return nil
	}
	return o.SeverityNotSet
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetCurrentMilestones() *string {
	if o == nil {
		return nil
	}
	return o.CurrentMilestones
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetTags() *string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetTagMatchStrategy() *GetV1MetricsMilestoneFunnelQueryParamTagMatchStrategy {
	if o == nil {
		return nil
	}
	return o.TagMatchStrategy
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetUpdatedAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAfter
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetUpdatedBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedBefore
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetIncidentTypeID() *string {
	if o == nil {
		return nil
	}
	return o.IncidentTypeID
}

func (o *GetV1MetricsMilestoneFunnelRequest) GetRequestBody() *GetV1MetricsMilestoneFunnelRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type GetV1MetricsMilestoneFunnelResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Returns a report with time bucketed milestone data
	MetricsMilestonesFunnelEntity *shared.MetricsMilestonesFunnelEntity
}

func (o *GetV1MetricsMilestoneFunnelResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetV1MetricsMilestoneFunnelResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetV1MetricsMilestoneFunnelResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetV1MetricsMilestoneFunnelResponse) GetMetricsMilestonesFunnelEntity() *shared.MetricsMilestonesFunnelEntity {
	if o == nil {
		return nil
	}
	return o.MetricsMilestonesFunnelEntity
}
