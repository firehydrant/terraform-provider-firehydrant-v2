// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"net/http"
)

type CreateIncidentRetrospectiveRequestBody struct {
	// The id of the retrospective template to apply.
	RetrospectiveTemplateID string `json:"retrospective_template_id"`
}

func (o *CreateIncidentRetrospectiveRequestBody) GetRetrospectiveTemplateID() string {
	if o == nil {
		return ""
	}
	return o.RetrospectiveTemplateID
}

type CreateIncidentRetrospectiveRequest struct {
	IncidentID  string                                 `pathParam:"style=simple,explode=false,name=incident_id"`
	RequestBody CreateIncidentRetrospectiveRequestBody `request:"mediaType=application/json"`
}

func (o *CreateIncidentRetrospectiveRequest) GetIncidentID() string {
	if o == nil {
		return ""
	}
	return o.IncidentID
}

func (o *CreateIncidentRetrospectiveRequest) GetRequestBody() CreateIncidentRetrospectiveRequestBody {
	if o == nil {
		return CreateIncidentRetrospectiveRequestBody{}
	}
	return o.RequestBody
}

type CreateIncidentRetrospectiveResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Create a new retrospective for an incident
	IncidentsRetrospectiveEntity *shared.IncidentsRetrospectiveEntity
}

func (o *CreateIncidentRetrospectiveResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateIncidentRetrospectiveResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateIncidentRetrospectiveResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateIncidentRetrospectiveResponse) GetIncidentsRetrospectiveEntity() *shared.IncidentsRetrospectiveEntity {
	if o == nil {
		return nil
	}
	return o.IncidentsRetrospectiveEntity
}
